/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/lappdefine.ts":
/*!***************************!*\
  !*** ./src/lappdefine.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RenderTargetHeight = exports.RenderTargetWidth = exports.CubismLoggingLevel = exports.DebugTouchLogEnable = exports.DebugLogEnable = exports.PriorityForce = exports.PriorityNormal = exports.PriorityIdle = exports.PriorityNone = exports.HitAreaNameBody = exports.HitAreaNameHead = exports.MotionGroupTapBody = exports.MotionGroupIdle = exports.ModelDirSize = exports.ModelDir = exports.PowerImageName = exports.GearImageName = exports.BackImageName = exports.ResourcesPath = exports.ViewLogicalMaxTop = exports.ViewLogicalMaxBottom = exports.ViewLogicalMaxRight = exports.ViewLogicalMaxLeft = exports.ViewLogicalTop = exports.ViewLogicalBottom = exports.ViewLogicalRight = exports.ViewLogicalLeft = exports.ViewMinScale = exports.ViewMaxScale = exports.ViewScale = exports.CanvasSize = void 0;
var live2dcubismframework_1 = __webpack_require__(/*! @framework/live2dcubismframework */ "./vendor/Framework/src/live2dcubismframework.ts");
exports.CanvasSize = 'auto';
exports.ViewScale = 1.0;
exports.ViewMaxScale = 2.0;
exports.ViewMinScale = 0.8;
exports.ViewLogicalLeft = -1.0;
exports.ViewLogicalRight = 1.0;
exports.ViewLogicalBottom = -1.0;
exports.ViewLogicalTop = 1.0;
exports.ViewLogicalMaxLeft = -2.0;
exports.ViewLogicalMaxRight = 2.0;
exports.ViewLogicalMaxBottom = -2.0;
exports.ViewLogicalMaxTop = 2.0;
exports.ResourcesPath = './dist/Resources/';
exports.BackImageName = 'back_class_normal.png';
exports.GearImageName = 'icon_gear.png';
exports.PowerImageName = 'CloseNormal.png';
exports.ModelDir = [
    'Xime'
];
exports.ModelDirSize = exports.ModelDir.length;
exports.MotionGroupIdle = 'Idle';
exports.MotionGroupTapBody = 'TapBody';
exports.HitAreaNameHead = 'Head';
exports.HitAreaNameBody = 'Body';
exports.PriorityNone = 0;
exports.PriorityIdle = 1;
exports.PriorityNormal = 2;
exports.PriorityForce = 3;
exports.DebugLogEnable = true;
exports.DebugTouchLogEnable = false;
exports.CubismLoggingLevel = live2dcubismframework_1.LogLevel.LogLevel_Verbose;
exports.RenderTargetWidth = 1900;
exports.RenderTargetHeight = 1000;


/***/ }),

/***/ "./src/lappdelegate.ts":
/*!*****************************!*\
  !*** ./src/lappdelegate.ts ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LAppDelegate = exports.frameBuffer = exports.gl = exports.s_instance = exports.canvas = void 0;
var live2dcubismframework_1 = __webpack_require__(/*! @framework/live2dcubismframework */ "./vendor/Framework/src/live2dcubismframework.ts");
var LAppDefine = __importStar(__webpack_require__(/*! ./lappdefine */ "./src/lappdefine.ts"));
var lapplive2dmanager_1 = __webpack_require__(/*! ./lapplive2dmanager */ "./src/lapplive2dmanager.ts");
var lapppal_1 = __webpack_require__(/*! ./lapppal */ "./src/lapppal.ts");
var lapptexturemanager_1 = __webpack_require__(/*! ./lapptexturemanager */ "./src/lapptexturemanager.ts");
var lappview_1 = __webpack_require__(/*! ./lappview */ "./src/lappview.ts");
exports.canvas = null;
exports.s_instance = null;
exports.gl = null;
exports.frameBuffer = null;
var LAppDelegate = (function () {
    function LAppDelegate() {
        this._captured = false;
        this._mouseX = 0.0;
        this._mouseY = 0.0;
        this._isEnd = false;
        this._cubismOption = new live2dcubismframework_1.Option();
        this._view = new lappview_1.LAppView();
        this._textureManager = new lapptexturemanager_1.LAppTextureManager();
    }
    LAppDelegate.getInstance = function () {
        if (exports.s_instance == null) {
            exports.s_instance = new LAppDelegate();
        }
        return exports.s_instance;
    };
    LAppDelegate.releaseInstance = function () {
        if (exports.s_instance != null) {
            exports.s_instance.release();
        }
        exports.s_instance = null;
    };
    LAppDelegate.prototype.initialize = function () {
        exports.canvas = document.createElement('canvas');
        if (LAppDefine.CanvasSize === 'auto') {
            this._resizeCanvas();
        }
        else {
            exports.canvas.width = LAppDefine.CanvasSize.width;
            exports.canvas.height = LAppDefine.CanvasSize.height;
        }
        exports.gl = exports.canvas.getContext('webgl') || exports.canvas.getContext('experimental-webgl');
        if (!exports.gl) {
            alert('Cannot initialize WebGL. This browser does not support.');
            exports.gl = null;
            document.body.innerHTML =
                'This browser does not support the <code>&lt;canvas&gt;</code> element.';
            return false;
        }
        document.body.appendChild(exports.canvas);
        if (!exports.frameBuffer) {
            exports.frameBuffer = exports.gl.getParameter(exports.gl.FRAMEBUFFER_BINDING);
        }
        exports.gl.enable(exports.gl.BLEND);
        exports.gl.blendFunc(exports.gl.SRC_ALPHA, exports.gl.ONE_MINUS_SRC_ALPHA);
        var supportTouch = 'ontouchend' in exports.canvas;
        if (supportTouch) {
            exports.canvas.ontouchstart = onTouchBegan;
            exports.canvas.ontouchmove = onTouchMoved;
            exports.canvas.ontouchend = onTouchEnded;
            exports.canvas.ontouchcancel = onTouchCancel;
        }
        else {
            exports.canvas.onmousedown = onClickBegan;
            exports.canvas.onmousemove = onMouseMoved;
            exports.canvas.onmouseup = onClickEnded;
        }
        this._view.initialize();
        this.initializeCubism();
        return true;
    };
    LAppDelegate.prototype.onResize = function () {
        this._resizeCanvas();
        this._view.initialize();
        this._view.initializeSprite();
        var viewport = [0, 0, exports.canvas.width, exports.canvas.height];
        exports.gl.viewport(viewport[0], viewport[1], viewport[2], viewport[3]);
    };
    LAppDelegate.prototype.release = function () {
        this._textureManager.release();
        this._textureManager = null;
        this._view.release();
        this._view = null;
        lapplive2dmanager_1.LAppLive2DManager.releaseInstance();
        live2dcubismframework_1.CubismFramework.dispose();
    };
    LAppDelegate.prototype.run = function () {
        var _this = this;
        var loop = function () {
            if (exports.s_instance == null) {
                return;
            }
            lapppal_1.LAppPal.updateTime();
            function getPercent(x) {
                return x * 100 / 255 / 100;
            }
            exports.gl.clearColor(getPercent(171), getPercent(131), getPercent(130), 1.0);
            exports.gl.enable(exports.gl.DEPTH_TEST);
            exports.gl.depthFunc(exports.gl.LEQUAL);
            exports.gl.clear(exports.gl.COLOR_BUFFER_BIT | exports.gl.DEPTH_BUFFER_BIT);
            exports.gl.clearDepth(1.0);
            exports.gl.enable(exports.gl.BLEND);
            exports.gl.blendFunc(exports.gl.SRC_ALPHA, exports.gl.ONE_MINUS_SRC_ALPHA);
            _this._view.render();
            requestAnimationFrame(loop);
        };
        loop();
    };
    LAppDelegate.prototype.createShader = function () {
        var vertexShaderId = exports.gl.createShader(exports.gl.VERTEX_SHADER);
        if (vertexShaderId == null) {
            lapppal_1.LAppPal.printMessage('failed to create vertexShader');
            return null;
        }
        var vertexShader = 'precision mediump float;' +
            'attribute vec3 position;' +
            'attribute vec2 uv;' +
            'varying vec2 vuv;' +
            'void main(void)' +
            '{' +
            '   gl_Position = vec4(position, 1.0);' +
            '   vuv = uv;' +
            '}';
        exports.gl.shaderSource(vertexShaderId, vertexShader);
        exports.gl.compileShader(vertexShaderId);
        var fragmentShaderId = exports.gl.createShader(exports.gl.FRAGMENT_SHADER);
        if (fragmentShaderId == null) {
            lapppal_1.LAppPal.printMessage('failed to create fragmentShader');
            return null;
        }
        var fragmentShader = 'precision mediump float;' +
            'varying vec2 vuv;' +
            'uniform sampler2D texture;' +
            'void main(void)' +
            '{' +
            '   gl_FragColor = texture2D(texture, vuv);' +
            '}';
        exports.gl.shaderSource(fragmentShaderId, fragmentShader);
        exports.gl.compileShader(fragmentShaderId);
        var programId = exports.gl.createProgram();
        exports.gl.attachShader(programId, vertexShaderId);
        exports.gl.attachShader(programId, fragmentShaderId);
        exports.gl.deleteShader(vertexShaderId);
        exports.gl.deleteShader(fragmentShaderId);
        exports.gl.linkProgram(programId);
        exports.gl.useProgram(programId);
        return programId;
    };
    LAppDelegate.prototype.getView = function () {
        return this._view;
    };
    LAppDelegate.prototype.getTextureManager = function () {
        return this._textureManager;
    };
    LAppDelegate.prototype.initializeCubism = function () {
        this._cubismOption.logFunction = lapppal_1.LAppPal.printMessage;
        this._cubismOption.loggingLevel = LAppDefine.CubismLoggingLevel;
        live2dcubismframework_1.CubismFramework.startUp(this._cubismOption);
        live2dcubismframework_1.CubismFramework.initialize();
        lapplive2dmanager_1.LAppLive2DManager.getInstance();
        lapppal_1.LAppPal.updateTime();
        this._view.initializeSprite();
    };
    LAppDelegate.prototype._resizeCanvas = function () {
        exports.canvas.width = window.innerWidth;
        exports.canvas.height = window.innerHeight;
    };
    return LAppDelegate;
}());
exports.LAppDelegate = LAppDelegate;
function onClickBegan(e) {
    if (!LAppDelegate.getInstance()._view) {
        lapppal_1.LAppPal.printMessage('view notfound');
        return;
    }
    LAppDelegate.getInstance()._captured = true;
    var posX = e.pageX;
    var posY = e.pageY;
    LAppDelegate.getInstance()._view.onTouchesBegan(posX, posY);
}
function onMouseMoved(e) {
    if (!LAppDelegate.getInstance()._captured) {
        return;
    }
    if (!LAppDelegate.getInstance()._view) {
        lapppal_1.LAppPal.printMessage('view notfound');
        return;
    }
    var rect = e.target.getBoundingClientRect();
    var posX = e.clientX - rect.left;
    var posY = e.clientY - rect.top;
    LAppDelegate.getInstance()._view.onTouchesMoved(posX, posY);
}
function onClickEnded(e) {
    LAppDelegate.getInstance()._captured = false;
    if (!LAppDelegate.getInstance()._view) {
        lapppal_1.LAppPal.printMessage('view notfound');
        return;
    }
    var rect = e.target.getBoundingClientRect();
    var posX = e.clientX - rect.left;
    var posY = e.clientY - rect.top;
    LAppDelegate.getInstance()._view.onTouchesEnded(posX, posY);
}
function onTouchBegan(e) {
    if (!LAppDelegate.getInstance()._view) {
        lapppal_1.LAppPal.printMessage('view notfound');
        return;
    }
    LAppDelegate.getInstance()._captured = true;
    var posX = e.changedTouches[0].pageX;
    var posY = e.changedTouches[0].pageY;
    LAppDelegate.getInstance()._view.onTouchesBegan(posX, posY);
}
function onTouchMoved(e) {
    if (!LAppDelegate.getInstance()._captured) {
        return;
    }
    if (!LAppDelegate.getInstance()._view) {
        lapppal_1.LAppPal.printMessage('view notfound');
        return;
    }
    var rect = e.target.getBoundingClientRect();
    var posX = e.changedTouches[0].clientX - rect.left;
    var posY = e.changedTouches[0].clientY - rect.top;
    LAppDelegate.getInstance()._view.onTouchesMoved(posX, posY);
}
function onTouchEnded(e) {
    LAppDelegate.getInstance()._captured = false;
    if (!LAppDelegate.getInstance()._view) {
        lapppal_1.LAppPal.printMessage('view notfound');
        return;
    }
    var rect = e.target.getBoundingClientRect();
    var posX = e.changedTouches[0].clientX - rect.left;
    var posY = e.changedTouches[0].clientY - rect.top;
    LAppDelegate.getInstance()._view.onTouchesEnded(posX, posY);
}
function onTouchCancel(e) {
    LAppDelegate.getInstance()._captured = false;
    if (!LAppDelegate.getInstance()._view) {
        lapppal_1.LAppPal.printMessage('view notfound');
        return;
    }
    var rect = e.target.getBoundingClientRect();
    var posX = e.changedTouches[0].clientX - rect.left;
    var posY = e.changedTouches[0].clientY - rect.top;
    LAppDelegate.getInstance()._view.onTouchesEnded(posX, posY);
}


/***/ }),

/***/ "./src/lapplive2dmanager.ts":
/*!**********************************!*\
  !*** ./src/lapplive2dmanager.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LAppLive2DManager = exports.s_instance = void 0;
var cubismmatrix44_1 = __webpack_require__(/*! @framework/math/cubismmatrix44 */ "./vendor/Framework/src/math/cubismmatrix44.ts");
var csmvector_1 = __webpack_require__(/*! @framework/type/csmvector */ "./vendor/Framework/src/type/csmvector.ts");
var LAppDefine = __importStar(__webpack_require__(/*! ./lappdefine */ "./src/lappdefine.ts"));
var lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ "./src/lappdelegate.ts");
var lappmodel_1 = __webpack_require__(/*! ./lappmodel */ "./src/lappmodel.ts");
var lapppal_1 = __webpack_require__(/*! ./lapppal */ "./src/lapppal.ts");
exports.s_instance = null;
var LAppLive2DManager = (function () {
    function LAppLive2DManager() {
        this._finishedMotion = function (self) {
            lapppal_1.LAppPal.printMessage('Motion Finished:');
            console.log(self);
        };
        this._viewMatrix = new cubismmatrix44_1.CubismMatrix44();
        this._models = new csmvector_1.csmVector();
        this._sceneIndex = 0;
        this.changeScene(this._sceneIndex);
    }
    LAppLive2DManager.getInstance = function () {
        if (exports.s_instance == null) {
            exports.s_instance = new LAppLive2DManager();
        }
        return exports.s_instance;
    };
    LAppLive2DManager.releaseInstance = function () {
        if (exports.s_instance != null) {
            exports.s_instance = void 0;
        }
        exports.s_instance = null;
    };
    LAppLive2DManager.prototype.getModel = function (no) {
        if (no < this._models.getSize()) {
            return this._models.at(no);
        }
        return null;
    };
    LAppLive2DManager.prototype.releaseAllModel = function () {
        for (var i = 0; i < this._models.getSize(); i++) {
            this._models.at(i).release();
            this._models.set(i, null);
        }
        this._models.clear();
    };
    LAppLive2DManager.prototype.onDrag = function (x, y) {
        for (var i = 0; i < this._models.getSize(); i++) {
            var model = this.getModel(i);
            if (model) {
                model.setDragging(x, y);
            }
        }
    };
    LAppLive2DManager.prototype.onTap = function (x, y) {
        if (LAppDefine.DebugLogEnable) {
            lapppal_1.LAppPal.printMessage("[APP]tap point: {x: ".concat(x.toFixed(2), " y: ").concat(y.toFixed(2), "}"));
        }
        for (var i = 0; i < this._models.getSize(); i++) {
            if (this._models.at(i).hitTest(LAppDefine.HitAreaNameHead, x, y)) {
                if (LAppDefine.DebugLogEnable) {
                    lapppal_1.LAppPal.printMessage("[APP]hit area: [".concat(LAppDefine.HitAreaNameHead, "]"));
                }
                this._models.at(i).setRandomExpression();
            }
            else if (this._models.at(i).hitTest(LAppDefine.HitAreaNameBody, x, y)) {
                if (LAppDefine.DebugLogEnable) {
                    lapppal_1.LAppPal.printMessage("[APP]hit area: [".concat(LAppDefine.HitAreaNameBody, "]"));
                }
                this._models
                    .at(i)
                    .startRandomMotion(LAppDefine.MotionGroupTapBody, LAppDefine.PriorityNormal, this._finishedMotion);
            }
        }
    };
    LAppLive2DManager.prototype.onUpdate = function () {
        var width = lappdelegate_1.canvas.width, height = lappdelegate_1.canvas.height;
        var modelCount = this._models.getSize();
        for (var i = 0; i < modelCount; ++i) {
            var projection = new cubismmatrix44_1.CubismMatrix44();
            var model = this.getModel(i);
            if (model.getModel()) {
                if (model.getModel().getCanvasWidth() > 1.0 && width < height) {
                    model.getModelMatrix().setWidth(2.0);
                    projection.scale(1.0, width / height);
                }
                else {
                    projection.scale(height / width, 1.0);
                }
                if (this._viewMatrix != null) {
                    projection.multiplyByMatrix(this._viewMatrix);
                }
            }
            model.update();
            model.draw(projection);
        }
    };
    LAppLive2DManager.prototype.nextScene = function () {
        var no = (this._sceneIndex + 1) % LAppDefine.ModelDirSize;
        this.changeScene(no);
    };
    LAppLive2DManager.prototype.changeScene = function (index) {
        this._sceneIndex = index;
        if (LAppDefine.DebugLogEnable) {
            lapppal_1.LAppPal.printMessage("[APP]model index: ".concat(this._sceneIndex));
        }
        var model = LAppDefine.ModelDir[index];
        var modelPath = LAppDefine.ResourcesPath + model + '/';
        var modelJsonName = LAppDefine.ModelDir[index];
        modelJsonName += '.model3.json';
        this.releaseAllModel();
        this._models.pushBack(new lappmodel_1.LAppModel());
        this._models.at(0).loadAssets(modelPath, modelJsonName);
    };
    LAppLive2DManager.prototype.setViewMatrix = function (m) {
        for (var i = 0; i < 16; i++) {
            this._viewMatrix.getArray()[i] = m.getArray()[i];
        }
    };
    return LAppLive2DManager;
}());
exports.LAppLive2DManager = LAppLive2DManager;


/***/ }),

/***/ "./src/lappmodel.ts":
/*!**************************!*\
  !*** ./src/lappmodel.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LAppModel = void 0;
__webpack_require__(/*! whatwg-fetch */ "./node_modules/whatwg-fetch/fetch.js");
var cubismdefaultparameterid_1 = __webpack_require__(/*! @framework/cubismdefaultparameterid */ "./vendor/Framework/src/cubismdefaultparameterid.ts");
var cubismmodelsettingjson_1 = __webpack_require__(/*! @framework/cubismmodelsettingjson */ "./vendor/Framework/src/cubismmodelsettingjson.ts");
var cubismbreath_1 = __webpack_require__(/*! @framework/effect/cubismbreath */ "./vendor/Framework/src/effect/cubismbreath.ts");
var cubismeyeblink_1 = __webpack_require__(/*! @framework/effect/cubismeyeblink */ "./vendor/Framework/src/effect/cubismeyeblink.ts");
var live2dcubismframework_1 = __webpack_require__(/*! @framework/live2dcubismframework */ "./vendor/Framework/src/live2dcubismframework.ts");
var cubismusermodel_1 = __webpack_require__(/*! @framework/model/cubismusermodel */ "./vendor/Framework/src/model/cubismusermodel.ts");
var acubismmotion_1 = __webpack_require__(/*! @framework/motion/acubismmotion */ "./vendor/Framework/src/motion/acubismmotion.ts");
var cubismmotionqueuemanager_1 = __webpack_require__(/*! @framework/motion/cubismmotionqueuemanager */ "./vendor/Framework/src/motion/cubismmotionqueuemanager.ts");
var csmmap_1 = __webpack_require__(/*! @framework/type/csmmap */ "./vendor/Framework/src/type/csmmap.ts");
var csmvector_1 = __webpack_require__(/*! @framework/type/csmvector */ "./vendor/Framework/src/type/csmvector.ts");
var cubismdebug_1 = __webpack_require__(/*! @framework/utils/cubismdebug */ "./vendor/Framework/src/utils/cubismdebug.ts");
var LAppDefine = __importStar(__webpack_require__(/*! ./lappdefine */ "./src/lappdefine.ts"));
var lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ "./src/lappdelegate.ts");
var lapppal_1 = __webpack_require__(/*! ./lapppal */ "./src/lapppal.ts");
var lappwavfilehandler_1 = __webpack_require__(/*! ./lappwavfilehandler */ "./src/lappwavfilehandler.ts");
var LoadStep;
(function (LoadStep) {
    LoadStep[LoadStep["LoadAssets"] = 0] = "LoadAssets";
    LoadStep[LoadStep["LoadModel"] = 1] = "LoadModel";
    LoadStep[LoadStep["WaitLoadModel"] = 2] = "WaitLoadModel";
    LoadStep[LoadStep["LoadExpression"] = 3] = "LoadExpression";
    LoadStep[LoadStep["WaitLoadExpression"] = 4] = "WaitLoadExpression";
    LoadStep[LoadStep["LoadPhysics"] = 5] = "LoadPhysics";
    LoadStep[LoadStep["WaitLoadPhysics"] = 6] = "WaitLoadPhysics";
    LoadStep[LoadStep["LoadPose"] = 7] = "LoadPose";
    LoadStep[LoadStep["WaitLoadPose"] = 8] = "WaitLoadPose";
    LoadStep[LoadStep["SetupEyeBlink"] = 9] = "SetupEyeBlink";
    LoadStep[LoadStep["SetupBreath"] = 10] = "SetupBreath";
    LoadStep[LoadStep["LoadUserData"] = 11] = "LoadUserData";
    LoadStep[LoadStep["WaitLoadUserData"] = 12] = "WaitLoadUserData";
    LoadStep[LoadStep["SetupEyeBlinkIds"] = 13] = "SetupEyeBlinkIds";
    LoadStep[LoadStep["SetupLipSyncIds"] = 14] = "SetupLipSyncIds";
    LoadStep[LoadStep["SetupLayout"] = 15] = "SetupLayout";
    LoadStep[LoadStep["LoadMotion"] = 16] = "LoadMotion";
    LoadStep[LoadStep["WaitLoadMotion"] = 17] = "WaitLoadMotion";
    LoadStep[LoadStep["CompleteInitialize"] = 18] = "CompleteInitialize";
    LoadStep[LoadStep["CompleteSetupModel"] = 19] = "CompleteSetupModel";
    LoadStep[LoadStep["LoadTexture"] = 20] = "LoadTexture";
    LoadStep[LoadStep["WaitLoadTexture"] = 21] = "WaitLoadTexture";
    LoadStep[LoadStep["CompleteSetup"] = 22] = "CompleteSetup";
})(LoadStep || (LoadStep = {}));
var LAppModel = (function (_super) {
    __extends(LAppModel, _super);
    function LAppModel() {
        var _this = _super.call(this) || this;
        _this._modelSetting = null;
        _this._modelHomeDir = null;
        _this._userTimeSeconds = 0.0;
        _this._eyeBlinkIds = new csmvector_1.csmVector();
        _this._lipSyncIds = new csmvector_1.csmVector();
        _this._motions = new csmmap_1.csmMap();
        _this._expressions = new csmmap_1.csmMap();
        _this._hitArea = new csmvector_1.csmVector();
        _this._userArea = new csmvector_1.csmVector();
        _this._idParamAngleX = live2dcubismframework_1.CubismFramework.getIdManager().getId(cubismdefaultparameterid_1.CubismDefaultParameterId.ParamAngleX);
        _this._idParamAngleY = live2dcubismframework_1.CubismFramework.getIdManager().getId(cubismdefaultparameterid_1.CubismDefaultParameterId.ParamAngleY);
        _this._idParamAngleZ = live2dcubismframework_1.CubismFramework.getIdManager().getId(cubismdefaultparameterid_1.CubismDefaultParameterId.ParamAngleZ);
        _this._idParamEyeBallX = live2dcubismframework_1.CubismFramework.getIdManager().getId(cubismdefaultparameterid_1.CubismDefaultParameterId.ParamEyeBallX);
        _this._idParamEyeBallY = live2dcubismframework_1.CubismFramework.getIdManager().getId(cubismdefaultparameterid_1.CubismDefaultParameterId.ParamEyeBallY);
        _this._idParamBodyAngleX = live2dcubismframework_1.CubismFramework.getIdManager().getId(cubismdefaultparameterid_1.CubismDefaultParameterId.ParamBodyAngleX);
        _this._state = LoadStep.LoadAssets;
        _this._expressionCount = 0;
        _this._textureCount = 0;
        _this._motionCount = 0;
        _this._allMotionCount = 0;
        _this._wavFileHandler = new lappwavfilehandler_1.LAppWavFileHandler();
        return _this;
    }
    LAppModel.prototype.loadAssets = function (dir, fileName) {
        var _this = this;
        this._modelHomeDir = dir;
        fetch("".concat(this._modelHomeDir).concat(fileName))
            .then(function (response) { return response.arrayBuffer(); })
            .then(function (arrayBuffer) {
            var setting = new cubismmodelsettingjson_1.CubismModelSettingJson(arrayBuffer, arrayBuffer.byteLength);
            _this._state = LoadStep.LoadModel;
            _this.setupModel(setting);
        });
    };
    LAppModel.prototype.setupModel = function (setting) {
        var _this = this;
        this._updating = true;
        this._initialized = false;
        this._modelSetting = setting;
        if (this._modelSetting.getModelFileName() != '') {
            var modelFileName = this._modelSetting.getModelFileName();
            fetch("".concat(this._modelHomeDir).concat(modelFileName))
                .then(function (response) { return response.arrayBuffer(); })
                .then(function (arrayBuffer) {
                _this.loadModel(arrayBuffer);
                _this._state = LoadStep.LoadExpression;
                loadCubismExpression();
            });
            this._state = LoadStep.WaitLoadModel;
        }
        else {
            lapppal_1.LAppPal.printMessage('Model data does not exist.');
        }
        var loadCubismExpression = function () {
            if (_this._modelSetting.getExpressionCount() > 0) {
                var count_1 = _this._modelSetting.getExpressionCount();
                var _loop_1 = function (i) {
                    var expressionName = _this._modelSetting.getExpressionName(i);
                    var expressionFileName = _this._modelSetting.getExpressionFileName(i);
                    fetch("".concat(_this._modelHomeDir).concat(expressionFileName))
                        .then(function (response) { return response.arrayBuffer(); })
                        .then(function (arrayBuffer) {
                        var motion = _this.loadExpression(arrayBuffer, arrayBuffer.byteLength, expressionName);
                        if (_this._expressions.getValue(expressionName) != null) {
                            acubismmotion_1.ACubismMotion.delete(_this._expressions.getValue(expressionName));
                            _this._expressions.setValue(expressionName, null);
                        }
                        _this._expressions.setValue(expressionName, motion);
                        _this._expressionCount++;
                        if (_this._expressionCount >= count_1) {
                            _this._state = LoadStep.LoadPhysics;
                            loadCubismPhysics();
                        }
                    });
                };
                for (var i = 0; i < count_1; i++) {
                    _loop_1(i);
                }
                _this._state = LoadStep.WaitLoadExpression;
            }
            else {
                _this._state = LoadStep.LoadPhysics;
                loadCubismPhysics();
            }
        };
        var loadCubismPhysics = function () {
            if (_this._modelSetting.getPhysicsFileName() != '') {
                var physicsFileName = _this._modelSetting.getPhysicsFileName();
                fetch("".concat(_this._modelHomeDir).concat(physicsFileName))
                    .then(function (response) { return response.arrayBuffer(); })
                    .then(function (arrayBuffer) {
                    _this.loadPhysics(arrayBuffer, arrayBuffer.byteLength);
                    _this._state = LoadStep.LoadPose;
                    loadCubismPose();
                });
                _this._state = LoadStep.WaitLoadPhysics;
            }
            else {
                _this._state = LoadStep.LoadPose;
                loadCubismPose();
            }
        };
        var loadCubismPose = function () {
            if (_this._modelSetting.getPoseFileName() != '') {
                var poseFileName = _this._modelSetting.getPoseFileName();
                fetch("".concat(_this._modelHomeDir).concat(poseFileName))
                    .then(function (response) { return response.arrayBuffer(); })
                    .then(function (arrayBuffer) {
                    _this.loadPose(arrayBuffer, arrayBuffer.byteLength);
                    _this._state = LoadStep.SetupEyeBlink;
                    setupEyeBlink();
                });
                _this._state = LoadStep.WaitLoadPose;
            }
            else {
                _this._state = LoadStep.SetupEyeBlink;
                setupEyeBlink();
            }
        };
        var setupEyeBlink = function () {
            if (_this._modelSetting.getEyeBlinkParameterCount() > 0) {
                _this._eyeBlink = cubismeyeblink_1.CubismEyeBlink.create(_this._modelSetting);
                _this._state = LoadStep.SetupBreath;
            }
            setupBreath();
        };
        var setupBreath = function () {
            _this._breath = cubismbreath_1.CubismBreath.create();
            var breathParameters = new csmvector_1.csmVector();
            breathParameters.pushBack(new cubismbreath_1.BreathParameterData(_this._idParamAngleX, 0.0, 15.0, 6.5345, 0.5));
            breathParameters.pushBack(new cubismbreath_1.BreathParameterData(_this._idParamAngleY, 0.0, 8.0, 3.5345, 0.5));
            breathParameters.pushBack(new cubismbreath_1.BreathParameterData(_this._idParamAngleZ, 0.0, 10.0, 5.5345, 0.5));
            breathParameters.pushBack(new cubismbreath_1.BreathParameterData(_this._idParamBodyAngleX, 0.0, 4.0, 15.5345, 0.5));
            breathParameters.pushBack(new cubismbreath_1.BreathParameterData(live2dcubismframework_1.CubismFramework.getIdManager().getId(cubismdefaultparameterid_1.CubismDefaultParameterId.ParamBreath), 0.5, 0.5, 3.2345, 1));
            _this._breath.setParameters(breathParameters);
            _this._state = LoadStep.LoadUserData;
            loadUserData();
        };
        var loadUserData = function () {
            if (_this._modelSetting.getUserDataFile() != '') {
                var userDataFile = _this._modelSetting.getUserDataFile();
                fetch("".concat(_this._modelHomeDir).concat(userDataFile))
                    .then(function (response) { return response.arrayBuffer(); })
                    .then(function (arrayBuffer) {
                    _this.loadUserData(arrayBuffer, arrayBuffer.byteLength);
                    _this._state = LoadStep.SetupEyeBlinkIds;
                    setupEyeBlinkIds();
                });
                _this._state = LoadStep.WaitLoadUserData;
            }
            else {
                _this._state = LoadStep.SetupEyeBlinkIds;
                setupEyeBlinkIds();
            }
        };
        var setupEyeBlinkIds = function () {
            var eyeBlinkIdCount = _this._modelSetting.getEyeBlinkParameterCount();
            for (var i = 0; i < eyeBlinkIdCount; ++i) {
                _this._eyeBlinkIds.pushBack(_this._modelSetting.getEyeBlinkParameterId(i));
            }
            _this._state = LoadStep.SetupLipSyncIds;
            setupLipSyncIds();
        };
        var setupLipSyncIds = function () {
            var lipSyncIdCount = _this._modelSetting.getLipSyncParameterCount();
            for (var i = 0; i < lipSyncIdCount; ++i) {
                _this._lipSyncIds.pushBack(_this._modelSetting.getLipSyncParameterId(i));
            }
            _this._state = LoadStep.SetupLayout;
            setupLayout();
        };
        var setupLayout = function () {
            var layout = new csmmap_1.csmMap();
            if (_this._modelSetting == null || _this._modelMatrix == null) {
                (0, cubismdebug_1.CubismLogError)('Failed to setupLayout().');
                return;
            }
            _this._modelSetting.getLayoutMap(layout);
            _this._modelMatrix.setupFromLayout(layout);
            _this._state = LoadStep.LoadMotion;
            loadCubismMotion();
        };
        var loadCubismMotion = function () {
            _this._state = LoadStep.WaitLoadMotion;
            _this._model.saveParameters();
            _this._allMotionCount = 0;
            _this._motionCount = 0;
            var group = [];
            var motionGroupCount = _this._modelSetting.getMotionGroupCount();
            for (var i = 0; i < motionGroupCount; i++) {
                group[i] = _this._modelSetting.getMotionGroupName(i);
                _this._allMotionCount += _this._modelSetting.getMotionCount(group[i]);
            }
            for (var i = 0; i < motionGroupCount; i++) {
                _this.preLoadMotionGroup(group[i]);
            }
            if (motionGroupCount == 0) {
                _this._state = LoadStep.LoadTexture;
                _this._motionManager.stopAllMotions();
                _this._updating = false;
                _this._initialized = true;
                _this.createRenderer();
                _this.setupTextures();
                _this.getRenderer().startUp(lappdelegate_1.gl);
            }
        };
    };
    LAppModel.prototype.setupTextures = function () {
        var _this = this;
        var usePremultiply = true;
        if (this._state == LoadStep.LoadTexture) {
            var textureCount_1 = this._modelSetting.getTextureCount();
            var _loop_2 = function (modelTextureNumber) {
                if (this_1._modelSetting.getTextureFileName(modelTextureNumber) == '') {
                    console.log('getTextureFileName null');
                    return "continue";
                }
                var texturePath = this_1._modelSetting.getTextureFileName(modelTextureNumber);
                texturePath = this_1._modelHomeDir + texturePath;
                var onLoad = function (textureInfo) {
                    _this.getRenderer().bindTexture(modelTextureNumber, textureInfo.id);
                    _this._textureCount++;
                    if (_this._textureCount >= textureCount_1) {
                        _this._state = LoadStep.CompleteSetup;
                    }
                };
                lappdelegate_1.LAppDelegate.getInstance()
                    .getTextureManager()
                    .createTextureFromPngFile(texturePath, usePremultiply, onLoad);
                this_1.getRenderer().setIsPremultipliedAlpha(usePremultiply);
            };
            var this_1 = this;
            for (var modelTextureNumber = 0; modelTextureNumber < textureCount_1; modelTextureNumber++) {
                _loop_2(modelTextureNumber);
            }
            this._state = LoadStep.WaitLoadTexture;
        }
    };
    LAppModel.prototype.reloadRenderer = function () {
        this.deleteRenderer();
        this.createRenderer();
        this.setupTextures();
    };
    LAppModel.prototype.update = function () {
        if (this._state != LoadStep.CompleteSetup)
            return;
        var deltaTimeSeconds = lapppal_1.LAppPal.getDeltaTime();
        this._userTimeSeconds += deltaTimeSeconds;
        this._dragManager.update(deltaTimeSeconds);
        this._dragX = this._dragManager.getX();
        this._dragY = this._dragManager.getY();
        var motionUpdated = false;
        this._model.loadParameters();
        if (this._motionManager.isFinished()) {
            this.startRandomMotion(LAppDefine.MotionGroupIdle, LAppDefine.PriorityIdle);
        }
        else {
            motionUpdated = this._motionManager.updateMotion(this._model, deltaTimeSeconds);
        }
        this._model.saveParameters();
        if (!motionUpdated) {
            if (this._eyeBlink != null) {
                this._eyeBlink.updateParameters(this._model, deltaTimeSeconds);
            }
        }
        if (this._expressionManager != null) {
            this._expressionManager.updateMotion(this._model, deltaTimeSeconds);
        }
        this._model.addParameterValueById(this._idParamAngleX, this._dragX * 30);
        this._model.addParameterValueById(this._idParamAngleY, this._dragY * 30);
        this._model.addParameterValueById(this._idParamAngleZ, this._dragX * this._dragY * -30);
        this._model.addParameterValueById(this._idParamBodyAngleX, this._dragX * 10);
        this._model.addParameterValueById(this._idParamEyeBallX, this._dragX);
        this._model.addParameterValueById(this._idParamEyeBallY, this._dragY);
        if (this._breath != null) {
            this._breath.updateParameters(this._model, deltaTimeSeconds);
        }
        if (this._physics != null) {
            this._physics.evaluate(this._model, deltaTimeSeconds);
        }
        if (this._lipsync) {
            var value = 0.0;
            this._wavFileHandler.update(deltaTimeSeconds);
            value = this._wavFileHandler.getRms();
            for (var i = 0; i < this._lipSyncIds.getSize(); ++i) {
                this._model.addParameterValueById(this._lipSyncIds.at(i), value, 0.8);
            }
        }
        if (this._pose != null) {
            this._pose.updateParameters(this._model, deltaTimeSeconds);
        }
        this._model.update();
    };
    LAppModel.prototype.startMotion = function (group, no, priority, onFinishedMotionHandler) {
        var _this = this;
        if (priority == LAppDefine.PriorityForce) {
            this._motionManager.setReservePriority(priority);
        }
        else if (!this._motionManager.reserveMotion(priority)) {
            if (this._debugMode) {
                lapppal_1.LAppPal.printMessage("[APP]can't start motion.");
            }
            return cubismmotionqueuemanager_1.InvalidMotionQueueEntryHandleValue;
        }
        var motionFileName = this._modelSetting.getMotionFileName(group, no);
        var name = "".concat(group, "_").concat(no);
        var motion = this._motions.getValue(name);
        var autoDelete = false;
        if (motion == null) {
            fetch("".concat(this._modelHomeDir).concat(motionFileName))
                .then(function (response) { return response.arrayBuffer(); })
                .then(function (arrayBuffer) {
                motion = _this.loadMotion(arrayBuffer, arrayBuffer.byteLength, null, onFinishedMotionHandler);
                var fadeTime = _this._modelSetting.getMotionFadeInTimeValue(group, no);
                if (fadeTime >= 0.0) {
                    motion.setFadeInTime(fadeTime);
                }
                fadeTime = _this._modelSetting.getMotionFadeOutTimeValue(group, no);
                if (fadeTime >= 0.0) {
                    motion.setFadeOutTime(fadeTime);
                }
                motion.setEffectIds(_this._eyeBlinkIds, _this._lipSyncIds);
                autoDelete = true;
            });
        }
        else {
            motion.setFinishedMotionHandler(onFinishedMotionHandler);
        }
        var voice = this._modelSetting.getMotionSoundFileName(group, no);
        if (voice.localeCompare('') != 0) {
            var path = voice;
            path = this._modelHomeDir + path;
            this._wavFileHandler.start(path);
        }
        if (this._debugMode) {
            lapppal_1.LAppPal.printMessage("[APP]start motion: [".concat(group, "_").concat(no));
        }
        return this._motionManager.startMotionPriority(motion, autoDelete, priority);
    };
    LAppModel.prototype.startRandomMotion = function (group, priority, onFinishedMotionHandler) {
        if (this._modelSetting.getMotionCount(group) == 0) {
            return cubismmotionqueuemanager_1.InvalidMotionQueueEntryHandleValue;
        }
        var no = Math.floor(Math.random() * this._modelSetting.getMotionCount(group));
        return this.startMotion(group, no, priority, onFinishedMotionHandler);
    };
    LAppModel.prototype.setExpression = function (expressionId) {
        var motion = this._expressions.getValue(expressionId);
        if (this._debugMode) {
            lapppal_1.LAppPal.printMessage("[APP]expression: [".concat(expressionId, "]"));
        }
        if (motion != null) {
            this._expressionManager.startMotionPriority(motion, false, LAppDefine.PriorityForce);
        }
        else {
            if (this._debugMode) {
                lapppal_1.LAppPal.printMessage("[APP]expression[".concat(expressionId, "] is null"));
            }
        }
    };
    LAppModel.prototype.setRandomExpression = function () {
        if (this._expressions.getSize() == 0) {
            return;
        }
        var no = Math.floor(Math.random() * this._expressions.getSize());
        for (var i = 0; i < this._expressions.getSize(); i++) {
            if (i == no) {
                var name_1 = this._expressions._keyValues[i].first;
                this.setExpression(name_1);
                return;
            }
        }
    };
    LAppModel.prototype.motionEventFired = function (eventValue) {
        (0, cubismdebug_1.CubismLogInfo)('{0} is fired on LAppModel!!', eventValue.s);
    };
    LAppModel.prototype.hitTest = function (hitArenaName, x, y) {
        if (this._opacity < 1) {
            return false;
        }
        var count = this._modelSetting.getHitAreasCount();
        for (var i = 0; i < count; i++) {
            if (this._modelSetting.getHitAreaName(i) == hitArenaName) {
                var drawId = this._modelSetting.getHitAreaId(i);
                return this.isHit(drawId, x, y);
            }
        }
        return false;
    };
    LAppModel.prototype.preLoadMotionGroup = function (group) {
        var _this = this;
        var _loop_3 = function (i) {
            var motionFileName = this_2._modelSetting.getMotionFileName(group, i);
            var name_2 = "".concat(group, "_").concat(i);
            if (this_2._debugMode) {
                lapppal_1.LAppPal.printMessage("[APP]load motion: ".concat(motionFileName, " => [").concat(name_2, "]"));
            }
            fetch("".concat(this_2._modelHomeDir).concat(motionFileName))
                .then(function (response) { return response.arrayBuffer(); })
                .then(function (arrayBuffer) {
                var tmpMotion = _this.loadMotion(arrayBuffer, arrayBuffer.byteLength, name_2);
                var fadeTime = _this._modelSetting.getMotionFadeInTimeValue(group, i);
                if (fadeTime >= 0.0) {
                    tmpMotion.setFadeInTime(fadeTime);
                }
                fadeTime = _this._modelSetting.getMotionFadeOutTimeValue(group, i);
                if (fadeTime >= 0.0) {
                    tmpMotion.setFadeOutTime(fadeTime);
                }
                tmpMotion.setEffectIds(_this._eyeBlinkIds, _this._lipSyncIds);
                if (_this._motions.getValue(name_2) != null) {
                    acubismmotion_1.ACubismMotion.delete(_this._motions.getValue(name_2));
                }
                _this._motions.setValue(name_2, tmpMotion);
                _this._motionCount++;
                if (_this._motionCount >= _this._allMotionCount) {
                    _this._state = LoadStep.LoadTexture;
                    _this._motionManager.stopAllMotions();
                    _this._updating = false;
                    _this._initialized = true;
                    _this.createRenderer();
                    _this.setupTextures();
                    _this.getRenderer().startUp(lappdelegate_1.gl);
                }
            });
        };
        var this_2 = this;
        for (var i = 0; i < this._modelSetting.getMotionCount(group); i++) {
            _loop_3(i);
        }
    };
    LAppModel.prototype.releaseMotions = function () {
        this._motions.clear();
    };
    LAppModel.prototype.releaseExpressions = function () {
        this._expressions.clear();
    };
    LAppModel.prototype.doDraw = function () {
        if (this._model == null)
            return;
        var viewport = [0, 0, lappdelegate_1.canvas.width, lappdelegate_1.canvas.height];
        this.getRenderer().setRenderState(lappdelegate_1.frameBuffer, viewport);
        this.getRenderer().drawModel();
    };
    LAppModel.prototype.draw = function (matrix) {
        if (this._model == null) {
            return;
        }
        if (this._state == LoadStep.CompleteSetup) {
            matrix.multiplyByMatrix(this._modelMatrix);
            this.getRenderer().setMvpMatrix(matrix);
            this.doDraw();
        }
    };
    return LAppModel;
}(cubismusermodel_1.CubismUserModel));
exports.LAppModel = LAppModel;


/***/ }),

/***/ "./src/lapppal.ts":
/*!************************!*\
  !*** ./src/lapppal.ts ***!
  \************************/
/***/ (function(__unused_webpack_module, exports) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LAppPal = void 0;
var LAppPal = (function () {
    function LAppPal() {
    }
    LAppPal.loadFileAsBytes = function (filePath, callback) {
        fetch(filePath)
            .then(function (response) { return response.arrayBuffer(); })
            .then(function (arrayBuffer) { return callback(arrayBuffer, arrayBuffer.byteLength); });
    };
    LAppPal.getDeltaTime = function () {
        return this.s_deltaTime;
    };
    LAppPal.updateTime = function () {
        this.s_currentFrame = Date.now();
        this.s_deltaTime = (this.s_currentFrame - this.s_lastFrame) / 1000;
        this.s_lastFrame = this.s_currentFrame;
    };
    LAppPal.printMessage = function (message) {
        console.log(message);
    };
    LAppPal.lastUpdate = Date.now();
    LAppPal.s_currentFrame = 0.0;
    LAppPal.s_lastFrame = 0.0;
    LAppPal.s_deltaTime = 0.0;
    return LAppPal;
}());
exports.LAppPal = LAppPal;


/***/ }),

/***/ "./src/lapptexturemanager.ts":
/*!***********************************!*\
  !*** ./src/lapptexturemanager.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TextureInfo = exports.LAppTextureManager = void 0;
var csmvector_1 = __webpack_require__(/*! @framework/type/csmvector */ "./vendor/Framework/src/type/csmvector.ts");
var lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ "./src/lappdelegate.ts");
var LAppTextureManager = (function () {
    function LAppTextureManager() {
        this._textures = new csmvector_1.csmVector();
    }
    LAppTextureManager.prototype.release = function () {
        for (var ite = this._textures.begin(); ite.notEqual(this._textures.end()); ite.preIncrement()) {
            lappdelegate_1.gl.deleteTexture(ite.ptr().id);
        }
        this._textures = null;
    };
    LAppTextureManager.prototype.createTextureFromPngFile = function (fileName, usePremultiply, callback) {
        var _this = this;
        var _loop_1 = function (ite) {
            if (ite.ptr().fileName == fileName &&
                ite.ptr().usePremultply == usePremultiply) {
                ite.ptr().img = new Image();
                ite.ptr().img.onload = function () { return callback(ite.ptr()); };
                ite.ptr().img.src = fileName;
                return { value: void 0 };
            }
        };
        for (var ite = this._textures.begin(); ite.notEqual(this._textures.end()); ite.preIncrement()) {
            var state_1 = _loop_1(ite);
            if (typeof state_1 === "object")
                return state_1.value;
        }
        var img = new Image();
        img.onload = function () {
            var tex = lappdelegate_1.gl.createTexture();
            lappdelegate_1.gl.bindTexture(lappdelegate_1.gl.TEXTURE_2D, tex);
            lappdelegate_1.gl.texParameteri(lappdelegate_1.gl.TEXTURE_2D, lappdelegate_1.gl.TEXTURE_MIN_FILTER, lappdelegate_1.gl.LINEAR_MIPMAP_LINEAR);
            lappdelegate_1.gl.texParameteri(lappdelegate_1.gl.TEXTURE_2D, lappdelegate_1.gl.TEXTURE_MAG_FILTER, lappdelegate_1.gl.LINEAR);
            if (usePremultiply) {
                lappdelegate_1.gl.pixelStorei(lappdelegate_1.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 1);
            }
            lappdelegate_1.gl.texImage2D(lappdelegate_1.gl.TEXTURE_2D, 0, lappdelegate_1.gl.RGBA, lappdelegate_1.gl.RGBA, lappdelegate_1.gl.UNSIGNED_BYTE, img);
            lappdelegate_1.gl.generateMipmap(lappdelegate_1.gl.TEXTURE_2D);
            lappdelegate_1.gl.bindTexture(lappdelegate_1.gl.TEXTURE_2D, null);
            var textureInfo = new TextureInfo();
            if (textureInfo != null) {
                textureInfo.fileName = fileName;
                textureInfo.width = img.width;
                textureInfo.height = img.height;
                textureInfo.id = tex;
                textureInfo.img = img;
                textureInfo.usePremultply = usePremultiply;
                _this._textures.pushBack(textureInfo);
            }
            callback(textureInfo);
        };
        img.src = fileName;
    };
    LAppTextureManager.prototype.releaseTextures = function () {
        for (var i = 0; i < this._textures.getSize(); i++) {
            this._textures.set(i, null);
        }
        this._textures.clear();
    };
    LAppTextureManager.prototype.releaseTextureByTexture = function (texture) {
        for (var i = 0; i < this._textures.getSize(); i++) {
            if (this._textures.at(i).id != texture) {
                continue;
            }
            this._textures.set(i, null);
            this._textures.remove(i);
            break;
        }
    };
    LAppTextureManager.prototype.releaseTextureByFilePath = function (fileName) {
        for (var i = 0; i < this._textures.getSize(); i++) {
            if (this._textures.at(i).fileName == fileName) {
                this._textures.set(i, null);
                this._textures.remove(i);
                break;
            }
        }
    };
    return LAppTextureManager;
}());
exports.LAppTextureManager = LAppTextureManager;
var TextureInfo = (function () {
    function TextureInfo() {
        this.id = null;
        this.width = 0;
        this.height = 0;
    }
    return TextureInfo;
}());
exports.TextureInfo = TextureInfo;


/***/ }),

/***/ "./src/lappview.ts":
/*!*************************!*\
  !*** ./src/lappview.ts ***!
  \*************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LAppView = void 0;
var cubismmatrix44_1 = __webpack_require__(/*! @framework/math/cubismmatrix44 */ "./vendor/Framework/src/math/cubismmatrix44.ts");
var cubismviewmatrix_1 = __webpack_require__(/*! @framework/math/cubismviewmatrix */ "./vendor/Framework/src/math/cubismviewmatrix.ts");
var LAppDefine = __importStar(__webpack_require__(/*! ./lappdefine */ "./src/lappdefine.ts"));
var lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ "./src/lappdelegate.ts");
var lapplive2dmanager_1 = __webpack_require__(/*! ./lapplive2dmanager */ "./src/lapplive2dmanager.ts");
var lapppal_1 = __webpack_require__(/*! ./lapppal */ "./src/lapppal.ts");
var touchmanager_1 = __webpack_require__(/*! ./touchmanager */ "./src/touchmanager.ts");
var LAppView = (function () {
    function LAppView() {
        this._programId = null;
        this._back = null;
        this._gear = null;
        this._touchManager = new touchmanager_1.TouchManager();
        this._deviceToScreen = new cubismmatrix44_1.CubismMatrix44();
        this._viewMatrix = new cubismviewmatrix_1.CubismViewMatrix();
    }
    LAppView.prototype.initialize = function () {
        var width = lappdelegate_1.canvas.width, height = lappdelegate_1.canvas.height;
        var ratio = width / height;
        var left = -ratio;
        var right = ratio;
        var bottom = LAppDefine.ViewLogicalLeft;
        var top = LAppDefine.ViewLogicalRight;
        this._viewMatrix.setScreenRect(left, right, bottom, top);
        this._viewMatrix.scale(LAppDefine.ViewScale, LAppDefine.ViewScale);
        this._deviceToScreen.loadIdentity();
        if (width > height) {
            var screenW = Math.abs(right - left);
            this._deviceToScreen.scaleRelative(screenW / width, -screenW / width);
        }
        else {
            var screenH = Math.abs(top - bottom);
            this._deviceToScreen.scaleRelative(screenH / height, -screenH / height);
        }
        this._deviceToScreen.translateRelative(-width * 0.5, -height * 0.5);
        this._viewMatrix.setMaxScale(LAppDefine.ViewMaxScale);
        this._viewMatrix.setMinScale(LAppDefine.ViewMinScale);
        this._viewMatrix.setMaxScreenRect(LAppDefine.ViewLogicalMaxLeft, LAppDefine.ViewLogicalMaxRight, LAppDefine.ViewLogicalMaxBottom, LAppDefine.ViewLogicalMaxTop);
    };
    LAppView.prototype.release = function () {
        this._viewMatrix = null;
        this._touchManager = null;
        this._deviceToScreen = null;
        this._gear.release();
        this._gear = null;
        this._back.release();
        this._back = null;
        lappdelegate_1.gl.deleteProgram(this._programId);
        this._programId = null;
    };
    LAppView.prototype.render = function () {
        lappdelegate_1.gl.useProgram(this._programId);
        if (this._back) {
            this._back.render(this._programId);
        }
        if (this._gear) {
            this._gear.render(this._programId);
        }
        lappdelegate_1.gl.flush();
        var live2DManager = lapplive2dmanager_1.LAppLive2DManager.getInstance();
        live2DManager.setViewMatrix(this._viewMatrix);
        live2DManager.onUpdate();
    };
    LAppView.prototype.initializeSprite = function () {
    };
    LAppView.prototype.onTouchesBegan = function (pointX, pointY) {
        this._touchManager.touchesBegan(pointX, pointY);
    };
    LAppView.prototype.onTouchesMoved = function (pointX, pointY) {
        var viewX = this.transformViewX(this._touchManager.getX());
        var viewY = this.transformViewY(this._touchManager.getY());
        this._touchManager.touchesMoved(pointX, pointY);
        var live2DManager = lapplive2dmanager_1.LAppLive2DManager.getInstance();
        live2DManager.onDrag(viewX, viewY);
    };
    LAppView.prototype.onTouchesEnded = function (pointX, pointY) {
        var live2DManager = lapplive2dmanager_1.LAppLive2DManager.getInstance();
        live2DManager.onDrag(0.0, 0.0);
        {
            var x = this._deviceToScreen.transformX(this._touchManager.getX());
            var y = this._deviceToScreen.transformY(this._touchManager.getY());
            if (LAppDefine.DebugTouchLogEnable) {
                lapppal_1.LAppPal.printMessage("[APP]touchesEnded x: ".concat(x, " y: ").concat(y));
            }
            live2DManager.onTap(x, y);
        }
    };
    LAppView.prototype.transformViewX = function (deviceX) {
        var screenX = this._deviceToScreen.transformX(deviceX);
        return this._viewMatrix.invertTransformX(screenX);
    };
    LAppView.prototype.transformViewY = function (deviceY) {
        var screenY = this._deviceToScreen.transformY(deviceY);
        return this._viewMatrix.invertTransformY(screenY);
    };
    LAppView.prototype.transformScreenX = function (deviceX) {
        return this._deviceToScreen.transformX(deviceX);
    };
    LAppView.prototype.transformScreenY = function (deviceY) {
        return this._deviceToScreen.transformY(deviceY);
    };
    return LAppView;
}());
exports.LAppView = LAppView;


/***/ }),

/***/ "./src/lappwavfilehandler.ts":
/*!***********************************!*\
  !*** ./src/lappwavfilehandler.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ByteReader = exports.WavFileInfo = exports.LAppWavFileHandler = exports.s_instance = void 0;
exports.s_instance = null;
var LAppWavFileHandler = (function () {
    function LAppWavFileHandler() {
        var _this = this;
        this._loadFiletoBytes = function (arrayBuffer, length) {
            _this._byteReader._fileByte = arrayBuffer;
            _this._byteReader._fileDataView = new DataView(_this._byteReader._fileByte);
            _this._byteReader._fileSize = length;
        };
        this._pcmData = null;
        this._userTimeSeconds = 0.0;
        this._lastRms = 0.0;
        this._sampleOffset = 0.0;
        this._wavFileInfo = new WavFileInfo();
        this._byteReader = new ByteReader();
    }
    LAppWavFileHandler.getInstance = function () {
        if (exports.s_instance == null) {
            exports.s_instance = new LAppWavFileHandler();
        }
        return exports.s_instance;
    };
    LAppWavFileHandler.releaseInstance = function () {
        if (exports.s_instance != null) {
            exports.s_instance = void 0;
        }
        exports.s_instance = null;
    };
    LAppWavFileHandler.prototype.update = function (deltaTimeSeconds) {
        var goalOffset;
        var rms;
        if (this._pcmData == null ||
            this._sampleOffset >= this._wavFileInfo._samplesPerChannel) {
            this._lastRms = 0.0;
            return false;
        }
        this._userTimeSeconds += deltaTimeSeconds;
        goalOffset = Math.floor(this._userTimeSeconds * this._wavFileInfo._samplingRate);
        if (goalOffset > this._wavFileInfo._samplesPerChannel) {
            goalOffset = this._wavFileInfo._samplesPerChannel;
        }
        rms = 0.0;
        for (var channelCount = 0; channelCount < this._wavFileInfo._numberOfChannels; channelCount++) {
            for (var sampleCount = this._sampleOffset; sampleCount < goalOffset; sampleCount++) {
                var pcm = this._pcmData[channelCount][sampleCount];
                rms += pcm * pcm;
            }
        }
        rms = Math.sqrt(rms /
            (this._wavFileInfo._numberOfChannels *
                (goalOffset - this._sampleOffset)));
        this._lastRms = rms;
        this._sampleOffset = goalOffset;
        return true;
    };
    LAppWavFileHandler.prototype.start = function (filePath) {
        this._sampleOffset = 0;
        this._userTimeSeconds = 0.0;
        this._lastRms = 0.0;
        if (!this.loadWavFile(filePath)) {
            return;
        }
    };
    LAppWavFileHandler.prototype.getRms = function () {
        return this._lastRms;
    };
    LAppWavFileHandler.prototype.loadWavFile = function (filePath) {
        var _this = this;
        var ret = false;
        if (this._pcmData != null) {
            this.releasePcmData();
        }
        var asyncFileLoad = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, fetch(filePath).then(function (responce) {
                        return responce.arrayBuffer();
                    })];
            });
        }); };
        var asyncWavFileManager = (function () { return __awaiter(_this, void 0, void 0, function () {
            var _a, fmtChunkSize, dataChunkSize, channelCount, sampleCount, channelCount;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this._byteReader;
                        return [4, asyncFileLoad()];
                    case 1:
                        _a._fileByte = _b.sent();
                        this._byteReader._fileDataView = new DataView(this._byteReader._fileByte);
                        this._byteReader._fileSize = this._byteReader._fileByte.byteLength;
                        this._byteReader._readOffset = 0;
                        if (this._byteReader._fileByte == null ||
                            this._byteReader._fileSize < 4) {
                            return [2, false];
                        }
                        this._wavFileInfo._fileName = filePath;
                        try {
                            if (!this._byteReader.getCheckSignature('RIFF')) {
                                ret = false;
                                throw new Error('Cannot find Signeture "RIFF".');
                            }
                            this._byteReader.get32LittleEndian();
                            if (!this._byteReader.getCheckSignature('WAVE')) {
                                ret = false;
                                throw new Error('Cannot find Signeture "WAVE".');
                            }
                            if (!this._byteReader.getCheckSignature('fmt ')) {
                                ret = false;
                                throw new Error('Cannot find Signeture "fmt".');
                            }
                            fmtChunkSize = this._byteReader.get32LittleEndian();
                            if (this._byteReader.get16LittleEndian() != 1) {
                                ret = false;
                                throw new Error('File is not linear PCM.');
                            }
                            this._wavFileInfo._numberOfChannels =
                                this._byteReader.get16LittleEndian();
                            this._wavFileInfo._samplingRate = this._byteReader.get32LittleEndian();
                            this._byteReader.get32LittleEndian();
                            this._byteReader.get16LittleEndian();
                            this._wavFileInfo._bitsPerSample = this._byteReader.get16LittleEndian();
                            if (fmtChunkSize > 16) {
                                this._byteReader._readOffset += fmtChunkSize - 16;
                            }
                            while (!this._byteReader.getCheckSignature('data') &&
                                this._byteReader._readOffset < this._byteReader._fileSize) {
                                this._byteReader._readOffset +=
                                    this._byteReader.get32LittleEndian() + 4;
                            }
                            if (this._byteReader._readOffset >= this._byteReader._fileSize) {
                                ret = false;
                                throw new Error('Cannot find "data" Chunk.');
                            }
                            {
                                dataChunkSize = this._byteReader.get32LittleEndian();
                                this._wavFileInfo._samplesPerChannel =
                                    (dataChunkSize * 8) /
                                        (this._wavFileInfo._bitsPerSample *
                                            this._wavFileInfo._numberOfChannels);
                            }
                            this._pcmData = new Array(this._wavFileInfo._numberOfChannels);
                            for (channelCount = 0; channelCount < this._wavFileInfo._numberOfChannels; channelCount++) {
                                this._pcmData[channelCount] = new Float32Array(this._wavFileInfo._samplesPerChannel);
                            }
                            for (sampleCount = 0; sampleCount < this._wavFileInfo._samplesPerChannel; sampleCount++) {
                                for (channelCount = 0; channelCount < this._wavFileInfo._numberOfChannels; channelCount++) {
                                    this._pcmData[channelCount][sampleCount] = this.getPcmSample();
                                }
                            }
                            ret = true;
                        }
                        catch (e) {
                            console.log(e);
                        }
                        return [2];
                }
            });
        }); })();
        return ret;
    };
    LAppWavFileHandler.prototype.getPcmSample = function () {
        var pcm32;
        switch (this._wavFileInfo._bitsPerSample) {
            case 8:
                pcm32 = this._byteReader.get8() - 128;
                pcm32 <<= 24;
                break;
            case 16:
                pcm32 = this._byteReader.get16LittleEndian() << 16;
                break;
            case 24:
                pcm32 = this._byteReader.get24LittleEndian() << 8;
                break;
            default:
                pcm32 = 0;
                break;
        }
        return pcm32 / 2147483647;
    };
    LAppWavFileHandler.prototype.releasePcmData = function () {
        for (var channelCount = 0; channelCount < this._wavFileInfo._numberOfChannels; channelCount++) {
            delete this._pcmData[channelCount];
        }
        delete this._pcmData;
        this._pcmData = null;
    };
    return LAppWavFileHandler;
}());
exports.LAppWavFileHandler = LAppWavFileHandler;
var WavFileInfo = (function () {
    function WavFileInfo() {
        this._fileName = '';
        this._numberOfChannels = 0;
        this._bitsPerSample = 0;
        this._samplingRate = 0;
        this._samplesPerChannel = 0;
    }
    return WavFileInfo;
}());
exports.WavFileInfo = WavFileInfo;
var ByteReader = (function () {
    function ByteReader() {
        this._fileByte = null;
        this._fileDataView = null;
        this._fileSize = 0;
        this._readOffset = 0;
    }
    ByteReader.prototype.get8 = function () {
        var ret = this._fileDataView.getUint8(this._readOffset);
        this._readOffset++;
        return ret;
    };
    ByteReader.prototype.get16LittleEndian = function () {
        var ret = (this._fileDataView.getUint8(this._readOffset + 1) << 8) |
            this._fileDataView.getUint8(this._readOffset);
        this._readOffset += 2;
        return ret;
    };
    ByteReader.prototype.get24LittleEndian = function () {
        var ret = (this._fileDataView.getUint8(this._readOffset + 2) << 16) |
            (this._fileDataView.getUint8(this._readOffset + 1) << 8) |
            this._fileDataView.getUint8(this._readOffset);
        this._readOffset += 3;
        return ret;
    };
    ByteReader.prototype.get32LittleEndian = function () {
        var ret = (this._fileDataView.getUint8(this._readOffset + 3) << 24) |
            (this._fileDataView.getUint8(this._readOffset + 2) << 16) |
            (this._fileDataView.getUint8(this._readOffset + 1) << 8) |
            this._fileDataView.getUint8(this._readOffset);
        this._readOffset += 4;
        return ret;
    };
    ByteReader.prototype.getCheckSignature = function (reference) {
        var getSignature = new Uint8Array(4);
        var referenceString = new TextEncoder().encode(reference);
        if (reference.length != 4) {
            return false;
        }
        for (var signatureOffset = 0; signatureOffset < 4; signatureOffset++) {
            getSignature[signatureOffset] = this.get8();
        }
        return (getSignature[0] == referenceString[0] &&
            getSignature[1] == referenceString[1] &&
            getSignature[2] == referenceString[2] &&
            getSignature[3] == referenceString[3]);
    };
    return ByteReader;
}());
exports.ByteReader = ByteReader;


/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ "./src/lappdelegate.ts");
var LAppDefine = __importStar(__webpack_require__(/*! ./lappdefine */ "./src/lappdefine.ts"));
window.onload = function () {
    if (lappdelegate_1.LAppDelegate.getInstance().initialize() == false) {
        return;
    }
    lappdelegate_1.LAppDelegate.getInstance().run();
};
window.onbeforeunload = function () { return lappdelegate_1.LAppDelegate.releaseInstance(); };
window.onresize = function () {
    if (LAppDefine.CanvasSize === 'auto') {
        lappdelegate_1.LAppDelegate.getInstance().onResize();
    }
};


/***/ }),

/***/ "./src/touchmanager.ts":
/*!*****************************!*\
  !*** ./src/touchmanager.ts ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TouchManager = void 0;
var TouchManager = (function () {
    function TouchManager() {
        this._startX = 0.0;
        this._startY = 0.0;
        this._lastX = 0.0;
        this._lastY = 0.0;
        this._lastX1 = 0.0;
        this._lastY1 = 0.0;
        this._lastX2 = 0.0;
        this._lastY2 = 0.0;
        this._lastTouchDistance = 0.0;
        this._deltaX = 0.0;
        this._deltaY = 0.0;
        this._scale = 1.0;
        this._touchSingle = false;
        this._flipAvailable = false;
    }
    TouchManager.prototype.getCenterX = function () {
        return this._lastX;
    };
    TouchManager.prototype.getCenterY = function () {
        return this._lastY;
    };
    TouchManager.prototype.getDeltaX = function () {
        return this._deltaX;
    };
    TouchManager.prototype.getDeltaY = function () {
        return this._deltaY;
    };
    TouchManager.prototype.getStartX = function () {
        return this._startX;
    };
    TouchManager.prototype.getStartY = function () {
        return this._startY;
    };
    TouchManager.prototype.getScale = function () {
        return this._scale;
    };
    TouchManager.prototype.getX = function () {
        return this._lastX;
    };
    TouchManager.prototype.getY = function () {
        return this._lastY;
    };
    TouchManager.prototype.getX1 = function () {
        return this._lastX1;
    };
    TouchManager.prototype.getY1 = function () {
        return this._lastY1;
    };
    TouchManager.prototype.getX2 = function () {
        return this._lastX2;
    };
    TouchManager.prototype.getY2 = function () {
        return this._lastY2;
    };
    TouchManager.prototype.isSingleTouch = function () {
        return this._touchSingle;
    };
    TouchManager.prototype.isFlickAvailable = function () {
        return this._flipAvailable;
    };
    TouchManager.prototype.disableFlick = function () {
        this._flipAvailable = false;
    };
    TouchManager.prototype.touchesBegan = function (deviceX, deviceY) {
        this._lastX = deviceX;
        this._lastY = deviceY;
        this._startX = deviceX;
        this._startY = deviceY;
        this._lastTouchDistance = -1.0;
        this._flipAvailable = true;
        this._touchSingle = true;
    };
    TouchManager.prototype.touchesMoved = function (deviceX, deviceY) {
        this._lastX = deviceX;
        this._lastY = deviceY;
        this._lastTouchDistance = -1.0;
        this._touchSingle = true;
    };
    TouchManager.prototype.getFlickDistance = function () {
        return this.calculateDistance(this._startX, this._startY, this._lastX, this._lastY);
    };
    TouchManager.prototype.calculateDistance = function (x1, y1, x2, y2) {
        return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
    };
    TouchManager.prototype.calculateMovingAmount = function (v1, v2) {
        if (v1 > 0.0 != v2 > 0.0) {
            return 0.0;
        }
        var sign = v1 > 0.0 ? 1.0 : -1.0;
        var absoluteValue1 = Math.abs(v1);
        var absoluteValue2 = Math.abs(v2);
        return (sign * (absoluteValue1 < absoluteValue2 ? absoluteValue1 : absoluteValue2));
    };
    return TouchManager;
}());
exports.TouchManager = TouchManager;


/***/ }),

/***/ "./vendor/Framework/src/cubismdefaultparameterid.ts":
/*!**********************************************************!*\
  !*** ./vendor/Framework/src/cubismdefaultparameterid.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismDefaultParameterId = void 0;
exports.CubismDefaultParameterId = Object.freeze({
    HitAreaPrefix: 'HitArea',
    HitAreaHead: 'Head',
    HitAreaBody: 'Body',
    PartsIdCore: 'Parts01Core',
    PartsArmPrefix: 'Parts01Arm_',
    PartsArmLPrefix: 'Parts01ArmL_',
    PartsArmRPrefix: 'Parts01ArmR_',
    ParamAngleX: 'ParamAngleX',
    ParamAngleY: 'ParamAngleY',
    ParamAngleZ: 'ParamAngleZ',
    ParamEyeLOpen: 'ParamEyeLOpen',
    ParamEyeLSmile: 'ParamEyeLSmile',
    ParamEyeROpen: 'ParamEyeROpen',
    ParamEyeRSmile: 'ParamEyeRSmile',
    ParamEyeBallX: 'ParamEyeBallX',
    ParamEyeBallY: 'ParamEyeBallY',
    ParamEyeBallForm: 'ParamEyeBallForm',
    ParamBrowLY: 'ParamBrowLY',
    ParamBrowRY: 'ParamBrowRY',
    ParamBrowLX: 'ParamBrowLX',
    ParamBrowRX: 'ParamBrowRX',
    ParamBrowLAngle: 'ParamBrowLAngle',
    ParamBrowRAngle: 'ParamBrowRAngle',
    ParamBrowLForm: 'ParamBrowLForm',
    ParamBrowRForm: 'ParamBrowRForm',
    ParamMouthForm: 'ParamMouthForm',
    ParamMouthOpenY: 'ParamMouthOpenY',
    ParamCheek: 'ParamCheek',
    ParamBodyAngleX: 'ParamBodyAngleX',
    ParamBodyAngleY: 'ParamBodyAngleY',
    ParamBodyAngleZ: 'ParamBodyAngleZ',
    ParamBreath: 'ParamBreath',
    ParamArmLA: 'ParamArmLA',
    ParamArmRA: 'ParamArmRA',
    ParamArmLB: 'ParamArmLB',
    ParamArmRB: 'ParamArmRB',
    ParamHandL: 'ParamHandL',
    ParamHandR: 'ParamHandR',
    ParamHairFront: 'ParamHairFront',
    ParamHairSide: 'ParamHairSide',
    ParamHairBack: 'ParamHairBack',
    ParamHairFluffy: 'ParamHairFluffy',
    ParamShoulderY: 'ParamShoulderY',
    ParamBustX: 'ParamBustX',
    ParamBustY: 'ParamBustY',
    ParamBaseX: 'ParamBaseX',
    ParamBaseY: 'ParamBaseY',
    ParamNONE: 'NONE:',
});
var $ = __importStar(__webpack_require__(/*! ./cubismdefaultparameterid */ "./vendor/Framework/src/cubismdefaultparameterid.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.HitAreaBody = $.CubismDefaultParameterId.HitAreaBody;
    Live2DCubismFramework.HitAreaHead = $.CubismDefaultParameterId.HitAreaHead;
    Live2DCubismFramework.HitAreaPrefix = $.CubismDefaultParameterId.HitAreaPrefix;
    Live2DCubismFramework.ParamAngleX = $.CubismDefaultParameterId.ParamAngleX;
    Live2DCubismFramework.ParamAngleY = $.CubismDefaultParameterId.ParamAngleY;
    Live2DCubismFramework.ParamAngleZ = $.CubismDefaultParameterId.ParamAngleZ;
    Live2DCubismFramework.ParamArmLA = $.CubismDefaultParameterId.ParamArmLA;
    Live2DCubismFramework.ParamArmLB = $.CubismDefaultParameterId.ParamArmLB;
    Live2DCubismFramework.ParamArmRA = $.CubismDefaultParameterId.ParamArmRA;
    Live2DCubismFramework.ParamArmRB = $.CubismDefaultParameterId.ParamArmRB;
    Live2DCubismFramework.ParamBaseX = $.CubismDefaultParameterId.ParamBaseX;
    Live2DCubismFramework.ParamBaseY = $.CubismDefaultParameterId.ParamBaseY;
    Live2DCubismFramework.ParamBodyAngleX = $.CubismDefaultParameterId.ParamBodyAngleX;
    Live2DCubismFramework.ParamBodyAngleY = $.CubismDefaultParameterId.ParamBodyAngleY;
    Live2DCubismFramework.ParamBodyAngleZ = $.CubismDefaultParameterId.ParamBodyAngleZ;
    Live2DCubismFramework.ParamBreath = $.CubismDefaultParameterId.ParamBreath;
    Live2DCubismFramework.ParamBrowLAngle = $.CubismDefaultParameterId.ParamBrowLAngle;
    Live2DCubismFramework.ParamBrowLForm = $.CubismDefaultParameterId.ParamBrowLForm;
    Live2DCubismFramework.ParamBrowLX = $.CubismDefaultParameterId.ParamBrowLX;
    Live2DCubismFramework.ParamBrowLY = $.CubismDefaultParameterId.ParamBrowLY;
    Live2DCubismFramework.ParamBrowRAngle = $.CubismDefaultParameterId.ParamBrowRAngle;
    Live2DCubismFramework.ParamBrowRForm = $.CubismDefaultParameterId.ParamBrowRForm;
    Live2DCubismFramework.ParamBrowRX = $.CubismDefaultParameterId.ParamBrowRX;
    Live2DCubismFramework.ParamBrowRY = $.CubismDefaultParameterId.ParamBrowRY;
    Live2DCubismFramework.ParamBustX = $.CubismDefaultParameterId.ParamBustX;
    Live2DCubismFramework.ParamBustY = $.CubismDefaultParameterId.ParamBustY;
    Live2DCubismFramework.ParamCheek = $.CubismDefaultParameterId.ParamCheek;
    Live2DCubismFramework.ParamEyeBallForm = $.CubismDefaultParameterId.ParamEyeBallForm;
    Live2DCubismFramework.ParamEyeBallX = $.CubismDefaultParameterId.ParamEyeBallX;
    Live2DCubismFramework.ParamEyeBallY = $.CubismDefaultParameterId.ParamEyeBallY;
    Live2DCubismFramework.ParamEyeLOpen = $.CubismDefaultParameterId.ParamEyeLOpen;
    Live2DCubismFramework.ParamEyeLSmile = $.CubismDefaultParameterId.ParamEyeLSmile;
    Live2DCubismFramework.ParamEyeROpen = $.CubismDefaultParameterId.ParamEyeROpen;
    Live2DCubismFramework.ParamEyeRSmile = $.CubismDefaultParameterId.ParamEyeRSmile;
    Live2DCubismFramework.ParamHairBack = $.CubismDefaultParameterId.ParamHairBack;
    Live2DCubismFramework.ParamHairFluffy = $.CubismDefaultParameterId.ParamHairFluffy;
    Live2DCubismFramework.ParamHairFront = $.CubismDefaultParameterId.ParamHairFront;
    Live2DCubismFramework.ParamHairSide = $.CubismDefaultParameterId.ParamHairSide;
    Live2DCubismFramework.ParamHandL = $.CubismDefaultParameterId.ParamHandL;
    Live2DCubismFramework.ParamHandR = $.CubismDefaultParameterId.ParamHandR;
    Live2DCubismFramework.ParamMouthForm = $.CubismDefaultParameterId.ParamMouthForm;
    Live2DCubismFramework.ParamMouthOpenY = $.CubismDefaultParameterId.ParamMouthOpenY;
    Live2DCubismFramework.ParamNONE = $.CubismDefaultParameterId.ParamNONE;
    Live2DCubismFramework.ParamShoulderY = $.CubismDefaultParameterId.ParamShoulderY;
    Live2DCubismFramework.PartsArmLPrefix = $.CubismDefaultParameterId.PartsArmLPrefix;
    Live2DCubismFramework.PartsArmPrefix = $.CubismDefaultParameterId.PartsArmPrefix;
    Live2DCubismFramework.PartsArmRPrefix = $.CubismDefaultParameterId.PartsArmRPrefix;
    Live2DCubismFramework.PartsIdCore = $.CubismDefaultParameterId.PartsIdCore;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/cubismframeworkconfig.ts":
/*!*******************************************************!*\
  !*** ./vendor/Framework/src/cubismframeworkconfig.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CSM_LOG_LEVEL = exports.CSM_LOG_LEVEL_OFF = exports.CSM_LOG_LEVEL_ERROR = exports.CSM_LOG_LEVEL_WARNING = exports.CSM_LOG_LEVEL_INFO = exports.CSM_LOG_LEVEL_DEBUG = exports.CSM_LOG_LEVEL_VERBOSE = void 0;
exports.CSM_LOG_LEVEL_VERBOSE = 0;
exports.CSM_LOG_LEVEL_DEBUG = 1;
exports.CSM_LOG_LEVEL_INFO = 2;
exports.CSM_LOG_LEVEL_WARNING = 3;
exports.CSM_LOG_LEVEL_ERROR = 4;
exports.CSM_LOG_LEVEL_OFF = 5;
exports.CSM_LOG_LEVEL = exports.CSM_LOG_LEVEL_VERBOSE;


/***/ }),

/***/ "./vendor/Framework/src/cubismmodelsettingjson.ts":
/*!********************************************************!*\
  !*** ./vendor/Framework/src/cubismmodelsettingjson.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismModelSettingJson = void 0;
var icubismmodelsetting_1 = __webpack_require__(/*! ./icubismmodelsetting */ "./vendor/Framework/src/icubismmodelsetting.ts");
var live2dcubismframework_1 = __webpack_require__(/*! ./live2dcubismframework */ "./vendor/Framework/src/live2dcubismframework.ts");
var csmvector_1 = __webpack_require__(/*! ./type/csmvector */ "./vendor/Framework/src/type/csmvector.ts");
var cubismjson_1 = __webpack_require__(/*! ./utils/cubismjson */ "./vendor/Framework/src/utils/cubismjson.ts");
var Version = 'Version';
var FileReferences = 'FileReferences';
var Groups = 'Groups';
var Layout = 'Layout';
var HitAreas = 'HitAreas';
var Moc = 'Moc';
var Textures = 'Textures';
var Physics = 'Physics';
var Pose = 'Pose';
var Expressions = 'Expressions';
var Motions = 'Motions';
var UserData = 'UserData';
var Name = 'Name';
var FilePath = 'File';
var Id = 'Id';
var Ids = 'Ids';
var Target = 'Target';
var Idle = 'Idle';
var TapBody = 'TapBody';
var PinchIn = 'PinchIn';
var PinchOut = 'PinchOut';
var Shake = 'Shake';
var FlickHead = 'FlickHead';
var Parameter = 'Parameter';
var SoundPath = 'Sound';
var FadeInTime = 'FadeInTime';
var FadeOutTime = 'FadeOutTime';
var CenterX = 'CenterX';
var CenterY = 'CenterY';
var X = 'X';
var Y = 'Y';
var Width = 'Width';
var Height = 'Height';
var LipSync = 'LipSync';
var EyeBlink = 'EyeBlink';
var InitParameter = 'init_param';
var InitPartsVisible = 'init_parts_visible';
var Val = 'val';
var FrequestNode;
(function (FrequestNode) {
    FrequestNode[FrequestNode["FrequestNode_Groups"] = 0] = "FrequestNode_Groups";
    FrequestNode[FrequestNode["FrequestNode_Moc"] = 1] = "FrequestNode_Moc";
    FrequestNode[FrequestNode["FrequestNode_Motions"] = 2] = "FrequestNode_Motions";
    FrequestNode[FrequestNode["FrequestNode_Expressions"] = 3] = "FrequestNode_Expressions";
    FrequestNode[FrequestNode["FrequestNode_Textures"] = 4] = "FrequestNode_Textures";
    FrequestNode[FrequestNode["FrequestNode_Physics"] = 5] = "FrequestNode_Physics";
    FrequestNode[FrequestNode["FrequestNode_Pose"] = 6] = "FrequestNode_Pose";
    FrequestNode[FrequestNode["FrequestNode_HitAreas"] = 7] = "FrequestNode_HitAreas";
})(FrequestNode || (FrequestNode = {}));
var CubismModelSettingJson = (function (_super) {
    __extends(CubismModelSettingJson, _super);
    function CubismModelSettingJson(buffer, size) {
        var _this = _super.call(this) || this;
        _this._json = cubismjson_1.CubismJson.create(buffer, size);
        if (_this._json) {
            _this._jsonValue = new csmvector_1.csmVector();
            _this._jsonValue.pushBack(_this._json.getRoot().getValueByString(Groups));
            _this._jsonValue.pushBack(_this._json
                .getRoot()
                .getValueByString(FileReferences)
                .getValueByString(Moc));
            _this._jsonValue.pushBack(_this._json
                .getRoot()
                .getValueByString(FileReferences)
                .getValueByString(Motions));
            _this._jsonValue.pushBack(_this._json
                .getRoot()
                .getValueByString(FileReferences)
                .getValueByString(Expressions));
            _this._jsonValue.pushBack(_this._json
                .getRoot()
                .getValueByString(FileReferences)
                .getValueByString(Textures));
            _this._jsonValue.pushBack(_this._json
                .getRoot()
                .getValueByString(FileReferences)
                .getValueByString(Physics));
            _this._jsonValue.pushBack(_this._json
                .getRoot()
                .getValueByString(FileReferences)
                .getValueByString(Pose));
            _this._jsonValue.pushBack(_this._json.getRoot().getValueByString(HitAreas));
        }
        return _this;
    }
    CubismModelSettingJson.prototype.release = function () {
        cubismjson_1.CubismJson.delete(this._json);
        this._jsonValue = null;
    };
    CubismModelSettingJson.prototype.GetJson = function () {
        return this._json;
    };
    CubismModelSettingJson.prototype.getModelFileName = function () {
        if (!this.isExistModelFile()) {
            return '';
        }
        return this._jsonValue.at(FrequestNode.FrequestNode_Moc).getRawString();
    };
    CubismModelSettingJson.prototype.getTextureCount = function () {
        if (!this.isExistTextureFiles()) {
            return 0;
        }
        return this._jsonValue.at(FrequestNode.FrequestNode_Textures).getSize();
    };
    CubismModelSettingJson.prototype.getTextureDirectory = function () {
        var texturePath = this._jsonValue
            .at(FrequestNode.FrequestNode_Textures)
            .getValueByIndex(0)
            .getRawString();
        var pathArray = texturePath.split('/');
        var arrayLength = pathArray.length - 1;
        var textureDirectoryStr = '';
        for (var i = 0; i < arrayLength; i++) {
            textureDirectoryStr += pathArray[i];
            if (i < arrayLength - 1) {
                textureDirectoryStr += '/';
            }
        }
        return textureDirectoryStr;
    };
    CubismModelSettingJson.prototype.getTextureFileName = function (index) {
        return this._jsonValue
            .at(FrequestNode.FrequestNode_Textures)
            .getValueByIndex(index)
            .getRawString();
    };
    CubismModelSettingJson.prototype.getHitAreasCount = function () {
        if (!this.isExistHitAreas()) {
            return 0;
        }
        return this._jsonValue.at(FrequestNode.FrequestNode_HitAreas).getSize();
    };
    CubismModelSettingJson.prototype.getHitAreaId = function (index) {
        return live2dcubismframework_1.CubismFramework.getIdManager().getId(this._jsonValue
            .at(FrequestNode.FrequestNode_HitAreas)
            .getValueByIndex(index)
            .getValueByString(Id)
            .getRawString());
    };
    CubismModelSettingJson.prototype.getHitAreaName = function (index) {
        return this._jsonValue
            .at(FrequestNode.FrequestNode_HitAreas)
            .getValueByIndex(index)
            .getValueByString(Name)
            .getRawString();
    };
    CubismModelSettingJson.prototype.getPhysicsFileName = function () {
        if (!this.isExistPhysicsFile()) {
            return '';
        }
        return this._jsonValue.at(FrequestNode.FrequestNode_Physics).getRawString();
    };
    CubismModelSettingJson.prototype.getPoseFileName = function () {
        if (!this.isExistPoseFile()) {
            return '';
        }
        return this._jsonValue.at(FrequestNode.FrequestNode_Pose).getRawString();
    };
    CubismModelSettingJson.prototype.getExpressionCount = function () {
        if (!this.isExistExpressionFile()) {
            return 0;
        }
        return this._jsonValue.at(FrequestNode.FrequestNode_Expressions).getSize();
    };
    CubismModelSettingJson.prototype.getExpressionName = function (index) {
        return this._jsonValue
            .at(FrequestNode.FrequestNode_Expressions)
            .getValueByIndex(index)
            .getValueByString(Name)
            .getRawString();
    };
    CubismModelSettingJson.prototype.getExpressionFileName = function (index) {
        return this._jsonValue
            .at(FrequestNode.FrequestNode_Expressions)
            .getValueByIndex(index)
            .getValueByString(FilePath)
            .getRawString();
    };
    CubismModelSettingJson.prototype.getMotionGroupCount = function () {
        if (!this.isExistMotionGroups()) {
            return 0;
        }
        return this._jsonValue
            .at(FrequestNode.FrequestNode_Motions)
            .getKeys()
            .getSize();
    };
    CubismModelSettingJson.prototype.getMotionGroupName = function (index) {
        if (!this.isExistMotionGroups()) {
            return null;
        }
        return this._jsonValue
            .at(FrequestNode.FrequestNode_Motions)
            .getKeys()
            .at(index);
    };
    CubismModelSettingJson.prototype.getMotionCount = function (groupName) {
        if (!this.isExistMotionGroupName(groupName)) {
            return 0;
        }
        return this._jsonValue
            .at(FrequestNode.FrequestNode_Motions)
            .getValueByString(groupName)
            .getSize();
    };
    CubismModelSettingJson.prototype.getMotionFileName = function (groupName, index) {
        if (!this.isExistMotionGroupName(groupName)) {
            return '';
        }
        return this._jsonValue
            .at(FrequestNode.FrequestNode_Motions)
            .getValueByString(groupName)
            .getValueByIndex(index)
            .getValueByString(FilePath)
            .getRawString();
    };
    CubismModelSettingJson.prototype.getMotionSoundFileName = function (groupName, index) {
        if (!this.isExistMotionSoundFile(groupName, index)) {
            return '';
        }
        return this._jsonValue
            .at(FrequestNode.FrequestNode_Motions)
            .getValueByString(groupName)
            .getValueByIndex(index)
            .getValueByString(SoundPath)
            .getRawString();
    };
    CubismModelSettingJson.prototype.getMotionFadeInTimeValue = function (groupName, index) {
        if (!this.isExistMotionFadeIn(groupName, index)) {
            return -1.0;
        }
        return this._jsonValue
            .at(FrequestNode.FrequestNode_Motions)
            .getValueByString(groupName)
            .getValueByIndex(index)
            .getValueByString(FadeInTime)
            .toFloat();
    };
    CubismModelSettingJson.prototype.getMotionFadeOutTimeValue = function (groupName, index) {
        if (!this.isExistMotionFadeOut(groupName, index)) {
            return -1.0;
        }
        return this._jsonValue
            .at(FrequestNode.FrequestNode_Motions)
            .getValueByString(groupName)
            .getValueByIndex(index)
            .getValueByString(FadeOutTime)
            .toFloat();
    };
    CubismModelSettingJson.prototype.getUserDataFile = function () {
        if (!this.isExistUserDataFile()) {
            return '';
        }
        return this._json
            .getRoot()
            .getValueByString(FileReferences)
            .getValueByString(UserData)
            .getRawString();
    };
    CubismModelSettingJson.prototype.getLayoutMap = function (outLayoutMap) {
        var map = this._json
            .getRoot()
            .getValueByString(Layout)
            .getMap();
        if (map == null) {
            return false;
        }
        var ret = false;
        for (var ite = map.begin(); ite.notEqual(map.end()); ite.preIncrement()) {
            outLayoutMap.setValue(ite.ptr().first, ite.ptr().second.toFloat());
            ret = true;
        }
        return ret;
    };
    CubismModelSettingJson.prototype.getEyeBlinkParameterCount = function () {
        if (!this.isExistEyeBlinkParameters()) {
            return 0;
        }
        var num = 0;
        for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); i++) {
            var refI = this._jsonValue
                .at(FrequestNode.FrequestNode_Groups)
                .getValueByIndex(i);
            if (refI.isNull() || refI.isError()) {
                continue;
            }
            if (refI.getValueByString(Name).getRawString() == EyeBlink) {
                num = refI.getValueByString(Ids).getVector().getSize();
                break;
            }
        }
        return num;
    };
    CubismModelSettingJson.prototype.getEyeBlinkParameterId = function (index) {
        if (!this.isExistEyeBlinkParameters()) {
            return null;
        }
        for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); i++) {
            var refI = this._jsonValue
                .at(FrequestNode.FrequestNode_Groups)
                .getValueByIndex(i);
            if (refI.isNull() || refI.isError()) {
                continue;
            }
            if (refI.getValueByString(Name).getRawString() == EyeBlink) {
                return live2dcubismframework_1.CubismFramework.getIdManager().getId(refI.getValueByString(Ids).getValueByIndex(index).getRawString());
            }
        }
        return null;
    };
    CubismModelSettingJson.prototype.getLipSyncParameterCount = function () {
        if (!this.isExistLipSyncParameters()) {
            return 0;
        }
        var num = 0;
        for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); i++) {
            var refI = this._jsonValue
                .at(FrequestNode.FrequestNode_Groups)
                .getValueByIndex(i);
            if (refI.isNull() || refI.isError()) {
                continue;
            }
            if (refI.getValueByString(Name).getRawString() == LipSync) {
                num = refI.getValueByString(Ids).getVector().getSize();
                break;
            }
        }
        return num;
    };
    CubismModelSettingJson.prototype.getLipSyncParameterId = function (index) {
        if (!this.isExistLipSyncParameters()) {
            return null;
        }
        for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); i++) {
            var refI = this._jsonValue
                .at(FrequestNode.FrequestNode_Groups)
                .getValueByIndex(i);
            if (refI.isNull() || refI.isError()) {
                continue;
            }
            if (refI.getValueByString(Name).getRawString() == LipSync) {
                return live2dcubismframework_1.CubismFramework.getIdManager().getId(refI.getValueByString(Ids).getValueByIndex(index).getRawString());
            }
        }
        return null;
    };
    CubismModelSettingJson.prototype.isExistModelFile = function () {
        var node = this._jsonValue.at(FrequestNode.FrequestNode_Moc);
        return !node.isNull() && !node.isError();
    };
    CubismModelSettingJson.prototype.isExistTextureFiles = function () {
        var node = this._jsonValue.at(FrequestNode.FrequestNode_Textures);
        return !node.isNull() && !node.isError();
    };
    CubismModelSettingJson.prototype.isExistHitAreas = function () {
        var node = this._jsonValue.at(FrequestNode.FrequestNode_HitAreas);
        return !node.isNull() && !node.isError();
    };
    CubismModelSettingJson.prototype.isExistPhysicsFile = function () {
        var node = this._jsonValue.at(FrequestNode.FrequestNode_Physics);
        return !node.isNull() && !node.isError();
    };
    CubismModelSettingJson.prototype.isExistPoseFile = function () {
        var node = this._jsonValue.at(FrequestNode.FrequestNode_Pose);
        return !node.isNull() && !node.isError();
    };
    CubismModelSettingJson.prototype.isExistExpressionFile = function () {
        var node = this._jsonValue.at(FrequestNode.FrequestNode_Expressions);
        return !node.isNull() && !node.isError();
    };
    CubismModelSettingJson.prototype.isExistMotionGroups = function () {
        var node = this._jsonValue.at(FrequestNode.FrequestNode_Motions);
        return !node.isNull() && !node.isError();
    };
    CubismModelSettingJson.prototype.isExistMotionGroupName = function (groupName) {
        var node = this._jsonValue
            .at(FrequestNode.FrequestNode_Motions)
            .getValueByString(groupName);
        return !node.isNull() && !node.isError();
    };
    CubismModelSettingJson.prototype.isExistMotionSoundFile = function (groupName, index) {
        var node = this._jsonValue
            .at(FrequestNode.FrequestNode_Motions)
            .getValueByString(groupName)
            .getValueByIndex(index)
            .getValueByString(SoundPath);
        return !node.isNull() && !node.isError();
    };
    CubismModelSettingJson.prototype.isExistMotionFadeIn = function (groupName, index) {
        var node = this._jsonValue
            .at(FrequestNode.FrequestNode_Motions)
            .getValueByString(groupName)
            .getValueByIndex(index)
            .getValueByString(FadeInTime);
        return !node.isNull() && !node.isError();
    };
    CubismModelSettingJson.prototype.isExistMotionFadeOut = function (groupName, index) {
        var node = this._jsonValue
            .at(FrequestNode.FrequestNode_Motions)
            .getValueByString(groupName)
            .getValueByIndex(index)
            .getValueByString(FadeOutTime);
        return !node.isNull() && !node.isError();
    };
    CubismModelSettingJson.prototype.isExistUserDataFile = function () {
        var node = this._json
            .getRoot()
            .getValueByString(FileReferences)
            .getValueByString(UserData);
        return !node.isNull() && !node.isError();
    };
    CubismModelSettingJson.prototype.isExistEyeBlinkParameters = function () {
        if (this._jsonValue.at(FrequestNode.FrequestNode_Groups).isNull() ||
            this._jsonValue.at(FrequestNode.FrequestNode_Groups).isError()) {
            return false;
        }
        for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); ++i) {
            if (this._jsonValue
                .at(FrequestNode.FrequestNode_Groups)
                .getValueByIndex(i)
                .getValueByString(Name)
                .getRawString() == EyeBlink) {
                return true;
            }
        }
        return false;
    };
    CubismModelSettingJson.prototype.isExistLipSyncParameters = function () {
        if (this._jsonValue.at(FrequestNode.FrequestNode_Groups).isNull() ||
            this._jsonValue.at(FrequestNode.FrequestNode_Groups).isError()) {
            return false;
        }
        for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); ++i) {
            if (this._jsonValue
                .at(FrequestNode.FrequestNode_Groups)
                .getValueByIndex(i)
                .getValueByString(Name)
                .getRawString() == LipSync) {
                return true;
            }
        }
        return false;
    };
    return CubismModelSettingJson;
}(icubismmodelsetting_1.ICubismModelSetting));
exports.CubismModelSettingJson = CubismModelSettingJson;
var $ = __importStar(__webpack_require__(/*! ./cubismmodelsettingjson */ "./vendor/Framework/src/cubismmodelsettingjson.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismModelSettingJson = $.CubismModelSettingJson;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/effect/cubismbreath.ts":
/*!*****************************************************!*\
  !*** ./vendor/Framework/src/effect/cubismbreath.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.BreathParameterData = exports.CubismBreath = void 0;
var CubismBreath = (function () {
    function CubismBreath() {
        this._currentTime = 0.0;
    }
    CubismBreath.create = function () {
        return new CubismBreath();
    };
    CubismBreath.delete = function (instance) {
        if (instance != null) {
            instance = null;
        }
    };
    CubismBreath.prototype.setParameters = function (breathParameters) {
        this._breathParameters = breathParameters;
    };
    CubismBreath.prototype.getParameters = function () {
        return this._breathParameters;
    };
    CubismBreath.prototype.updateParameters = function (model, deltaTimeSeconds) {
        this._currentTime += deltaTimeSeconds;
        var t = this._currentTime * 2.0 * 3.14159;
        for (var i = 0; i < this._breathParameters.getSize(); ++i) {
            var data = this._breathParameters.at(i);
            model.addParameterValueById(data.parameterId, data.offset + data.peak * Math.sin(t / data.cycle), data.weight);
        }
    };
    return CubismBreath;
}());
exports.CubismBreath = CubismBreath;
var BreathParameterData = (function () {
    function BreathParameterData(parameterId, offset, peak, cycle, weight) {
        this.parameterId = parameterId == undefined ? null : parameterId;
        this.offset = offset == undefined ? 0.0 : offset;
        this.peak = peak == undefined ? 0.0 : peak;
        this.cycle = cycle == undefined ? 0.0 : cycle;
        this.weight = weight == undefined ? 0.0 : weight;
    }
    return BreathParameterData;
}());
exports.BreathParameterData = BreathParameterData;
var $ = __importStar(__webpack_require__(/*! ./cubismbreath */ "./vendor/Framework/src/effect/cubismbreath.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.BreathParameterData = $.BreathParameterData;
    Live2DCubismFramework.CubismBreath = $.CubismBreath;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/effect/cubismeyeblink.ts":
/*!*******************************************************!*\
  !*** ./vendor/Framework/src/effect/cubismeyeblink.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.EyeState = exports.CubismEyeBlink = void 0;
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "./vendor/Framework/src/type/csmvector.ts");
var CubismEyeBlink = (function () {
    function CubismEyeBlink(modelSetting) {
        this._blinkingState = EyeState.EyeState_First;
        this._nextBlinkingTime = 0.0;
        this._stateStartTimeSeconds = 0.0;
        this._blinkingIntervalSeconds = 4.0;
        this._closingSeconds = 0.1;
        this._closedSeconds = 0.05;
        this._openingSeconds = 0.15;
        this._userTimeSeconds = 0.0;
        this._parameterIds = new csmvector_1.csmVector();
        if (modelSetting == null) {
            return;
        }
        for (var i = 0; i < modelSetting.getEyeBlinkParameterCount(); ++i) {
            this._parameterIds.pushBack(modelSetting.getEyeBlinkParameterId(i));
        }
    }
    CubismEyeBlink.create = function (modelSetting) {
        if (modelSetting === void 0) { modelSetting = null; }
        return new CubismEyeBlink(modelSetting);
    };
    CubismEyeBlink.delete = function (eyeBlink) {
        if (eyeBlink != null) {
            eyeBlink = null;
        }
    };
    CubismEyeBlink.prototype.setBlinkingInterval = function (blinkingInterval) {
        this._blinkingIntervalSeconds = blinkingInterval;
    };
    CubismEyeBlink.prototype.setBlinkingSetting = function (closing, closed, opening) {
        this._closingSeconds = closing;
        this._closedSeconds = closed;
        this._openingSeconds = opening;
    };
    CubismEyeBlink.prototype.setParameterIds = function (parameterIds) {
        this._parameterIds = parameterIds;
    };
    CubismEyeBlink.prototype.getParameterIds = function () {
        return this._parameterIds;
    };
    CubismEyeBlink.prototype.updateParameters = function (model, deltaTimeSeconds) {
        this._userTimeSeconds += deltaTimeSeconds;
        var parameterValue;
        var t = 0.0;
        switch (this._blinkingState) {
            case EyeState.EyeState_Closing:
                t =
                    (this._userTimeSeconds - this._stateStartTimeSeconds) /
                        this._closingSeconds;
                if (t >= 1.0) {
                    t = 1.0;
                    this._blinkingState = EyeState.EyeState_Closed;
                    this._stateStartTimeSeconds = this._userTimeSeconds;
                }
                parameterValue = 1.0 - t;
                break;
            case EyeState.EyeState_Closed:
                t =
                    (this._userTimeSeconds - this._stateStartTimeSeconds) /
                        this._closedSeconds;
                if (t >= 1.0) {
                    this._blinkingState = EyeState.EyeState_Opening;
                    this._stateStartTimeSeconds = this._userTimeSeconds;
                }
                parameterValue = 0.0;
                break;
            case EyeState.EyeState_Opening:
                t =
                    (this._userTimeSeconds - this._stateStartTimeSeconds) /
                        this._openingSeconds;
                if (t >= 1.0) {
                    t = 1.0;
                    this._blinkingState = EyeState.EyeState_Interval;
                    this._nextBlinkingTime = this.determinNextBlinkingTiming();
                }
                parameterValue = t;
                break;
            case EyeState.EyeState_Interval:
                if (this._nextBlinkingTime < this._userTimeSeconds) {
                    this._blinkingState = EyeState.EyeState_Closing;
                    this._stateStartTimeSeconds = this._userTimeSeconds;
                }
                parameterValue = 1.0;
                break;
            case EyeState.EyeState_First:
            default:
                this._blinkingState = EyeState.EyeState_Interval;
                this._nextBlinkingTime = this.determinNextBlinkingTiming();
                parameterValue = 1.0;
                break;
        }
        if (!CubismEyeBlink.CloseIfZero) {
            parameterValue = -parameterValue;
        }
        for (var i = 0; i < this._parameterIds.getSize(); ++i) {
            model.setParameterValueById(this._parameterIds.at(i), parameterValue);
        }
    };
    CubismEyeBlink.prototype.determinNextBlinkingTiming = function () {
        var r = Math.random();
        return (this._userTimeSeconds + r * (2.0 * this._blinkingIntervalSeconds - 1.0));
    };
    CubismEyeBlink.CloseIfZero = true;
    return CubismEyeBlink;
}());
exports.CubismEyeBlink = CubismEyeBlink;
var EyeState;
(function (EyeState) {
    EyeState[EyeState["EyeState_First"] = 0] = "EyeState_First";
    EyeState[EyeState["EyeState_Interval"] = 1] = "EyeState_Interval";
    EyeState[EyeState["EyeState_Closing"] = 2] = "EyeState_Closing";
    EyeState[EyeState["EyeState_Closed"] = 3] = "EyeState_Closed";
    EyeState[EyeState["EyeState_Opening"] = 4] = "EyeState_Opening";
})(EyeState = exports.EyeState || (exports.EyeState = {}));
var $ = __importStar(__webpack_require__(/*! ./cubismeyeblink */ "./vendor/Framework/src/effect/cubismeyeblink.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismEyeBlink = $.CubismEyeBlink;
    Live2DCubismFramework.EyeState = $.EyeState;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/effect/cubismpose.ts":
/*!***************************************************!*\
  !*** ./vendor/Framework/src/effect/cubismpose.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.PartData = exports.CubismPose = void 0;
var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "./vendor/Framework/src/live2dcubismframework.ts");
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "./vendor/Framework/src/type/csmvector.ts");
var cubismjson_1 = __webpack_require__(/*! ../utils/cubismjson */ "./vendor/Framework/src/utils/cubismjson.ts");
var Epsilon = 0.001;
var DefaultFadeInSeconds = 0.5;
var FadeIn = 'FadeInTime';
var Link = 'Link';
var Groups = 'Groups';
var Id = 'Id';
var CubismPose = (function () {
    function CubismPose() {
        this._fadeTimeSeconds = DefaultFadeInSeconds;
        this._lastModel = null;
        this._partGroups = new csmvector_1.csmVector();
        this._partGroupCounts = new csmvector_1.csmVector();
    }
    CubismPose.create = function (pose3json, size) {
        var ret = new CubismPose();
        var json = cubismjson_1.CubismJson.create(pose3json, size);
        var root = json.getRoot();
        if (!root.getValueByString(FadeIn).isNull()) {
            ret._fadeTimeSeconds = root
                .getValueByString(FadeIn)
                .toFloat(DefaultFadeInSeconds);
            if (ret._fadeTimeSeconds <= 0.0) {
                ret._fadeTimeSeconds = DefaultFadeInSeconds;
            }
        }
        var poseListInfo = root.getValueByString(Groups);
        var poseCount = poseListInfo.getSize();
        for (var poseIndex = 0; poseIndex < poseCount; ++poseIndex) {
            var idListInfo = poseListInfo.getValueByIndex(poseIndex);
            var idCount = idListInfo.getSize();
            var groupCount = 0;
            for (var groupIndex = 0; groupIndex < idCount; ++groupIndex) {
                var partInfo = idListInfo.getValueByIndex(groupIndex);
                var partData = new PartData();
                var parameterId = live2dcubismframework_1.CubismFramework.getIdManager().getId(partInfo.getValueByString(Id).getRawString());
                partData.partId = parameterId;
                if (!partInfo.getValueByString(Link).isNull()) {
                    var linkListInfo = partInfo.getValueByString(Link);
                    var linkCount = linkListInfo.getSize();
                    for (var linkIndex = 0; linkIndex < linkCount; ++linkIndex) {
                        var linkPart = new PartData();
                        var linkId = live2dcubismframework_1.CubismFramework.getIdManager().getId(linkListInfo.getValueByIndex(linkIndex).getString());
                        linkPart.partId = linkId;
                        partData.link.pushBack(linkPart);
                    }
                }
                ret._partGroups.pushBack(partData.clone());
                ++groupCount;
            }
            ret._partGroupCounts.pushBack(groupCount);
        }
        cubismjson_1.CubismJson.delete(json);
        return ret;
    };
    CubismPose.delete = function (pose) {
        if (pose != null) {
            pose = null;
        }
    };
    CubismPose.prototype.updateParameters = function (model, deltaTimeSeconds) {
        if (model != this._lastModel) {
            this.reset(model);
        }
        this._lastModel = model;
        if (deltaTimeSeconds < 0.0) {
            deltaTimeSeconds = 0.0;
        }
        var beginIndex = 0;
        for (var i = 0; i < this._partGroupCounts.getSize(); i++) {
            var partGroupCount = this._partGroupCounts.at(i);
            this.doFade(model, deltaTimeSeconds, beginIndex, partGroupCount);
            beginIndex += partGroupCount;
        }
        this.copyPartOpacities(model);
    };
    CubismPose.prototype.reset = function (model) {
        var beginIndex = 0;
        for (var i = 0; i < this._partGroupCounts.getSize(); ++i) {
            var groupCount = this._partGroupCounts.at(i);
            for (var j = beginIndex; j < beginIndex + groupCount; ++j) {
                this._partGroups.at(j).initialize(model);
                var partsIndex = this._partGroups.at(j).partIndex;
                var paramIndex = this._partGroups.at(j).parameterIndex;
                if (partsIndex < 0) {
                    continue;
                }
                model.setPartOpacityByIndex(partsIndex, j == beginIndex ? 1.0 : 0.0);
                model.setParameterValueByIndex(paramIndex, j == beginIndex ? 1.0 : 0.0);
                for (var k = 0; k < this._partGroups.at(j).link.getSize(); ++k) {
                    this._partGroups.at(j).link.at(k).initialize(model);
                }
            }
            beginIndex += groupCount;
        }
    };
    CubismPose.prototype.copyPartOpacities = function (model) {
        for (var groupIndex = 0; groupIndex < this._partGroups.getSize(); ++groupIndex) {
            var partData = this._partGroups.at(groupIndex);
            if (partData.link.getSize() == 0) {
                continue;
            }
            var partIndex = this._partGroups.at(groupIndex).partIndex;
            var opacity = model.getPartOpacityByIndex(partIndex);
            for (var linkIndex = 0; linkIndex < partData.link.getSize(); ++linkIndex) {
                var linkPart = partData.link.at(linkIndex);
                var linkPartIndex = linkPart.partIndex;
                if (linkPartIndex < 0) {
                    continue;
                }
                model.setPartOpacityByIndex(linkPartIndex, opacity);
            }
        }
    };
    CubismPose.prototype.doFade = function (model, deltaTimeSeconds, beginIndex, partGroupCount) {
        var visiblePartIndex = -1;
        var newOpacity = 1.0;
        var phi = 0.5;
        var backOpacityThreshold = 0.15;
        for (var i = beginIndex; i < beginIndex + partGroupCount; ++i) {
            var partIndex = this._partGroups.at(i).partIndex;
            var paramIndex = this._partGroups.at(i).parameterIndex;
            if (model.getParameterValueByIndex(paramIndex) > Epsilon) {
                if (visiblePartIndex >= 0) {
                    break;
                }
                visiblePartIndex = i;
                newOpacity = model.getPartOpacityByIndex(partIndex);
                newOpacity += deltaTimeSeconds / this._fadeTimeSeconds;
                if (newOpacity > 1.0) {
                    newOpacity = 1.0;
                }
            }
        }
        if (visiblePartIndex < 0) {
            visiblePartIndex = 0;
            newOpacity = 1.0;
        }
        for (var i = beginIndex; i < beginIndex + partGroupCount; ++i) {
            var partsIndex = this._partGroups.at(i).partIndex;
            if (visiblePartIndex == i) {
                model.setPartOpacityByIndex(partsIndex, newOpacity);
            }
            else {
                var opacity = model.getPartOpacityByIndex(partsIndex);
                var a1 = void 0;
                if (newOpacity < phi) {
                    a1 = (newOpacity * (phi - 1)) / phi + 1.0;
                }
                else {
                    a1 = ((1 - newOpacity) * phi) / (1.0 - phi);
                }
                var backOpacity = (1.0 - a1) * (1.0 - newOpacity);
                if (backOpacity > backOpacityThreshold) {
                    a1 = 1.0 - backOpacityThreshold / (1.0 - newOpacity);
                }
                if (opacity > a1) {
                    opacity = a1;
                }
                model.setPartOpacityByIndex(partsIndex, opacity);
            }
        }
    };
    return CubismPose;
}());
exports.CubismPose = CubismPose;
var PartData = (function () {
    function PartData(v) {
        this.parameterIndex = 0;
        this.partIndex = 0;
        this.link = new csmvector_1.csmVector();
        if (v != undefined) {
            this.partId = v.partId;
            for (var ite = v.link.begin(); ite.notEqual(v.link.end()); ite.preIncrement()) {
                this.link.pushBack(ite.ptr().clone());
            }
        }
    }
    PartData.prototype.assignment = function (v) {
        this.partId = v.partId;
        for (var ite = v.link.begin(); ite.notEqual(v.link.end()); ite.preIncrement()) {
            this.link.pushBack(ite.ptr().clone());
        }
        return this;
    };
    PartData.prototype.initialize = function (model) {
        this.parameterIndex = model.getParameterIndex(this.partId);
        this.partIndex = model.getPartIndex(this.partId);
        model.setParameterValueByIndex(this.parameterIndex, 1);
    };
    PartData.prototype.clone = function () {
        var clonePartData = new PartData();
        clonePartData.partId = this.partId;
        clonePartData.parameterIndex = this.parameterIndex;
        clonePartData.partIndex = this.partIndex;
        clonePartData.link = new csmvector_1.csmVector();
        for (var ite = this.link.begin(); ite.notEqual(this.link.end()); ite.increment()) {
            clonePartData.link.pushBack(ite.ptr().clone());
        }
        return clonePartData;
    };
    return PartData;
}());
exports.PartData = PartData;
var $ = __importStar(__webpack_require__(/*! ./cubismpose */ "./vendor/Framework/src/effect/cubismpose.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismPose = $.CubismPose;
    Live2DCubismFramework.PartData = $.PartData;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/icubismmodelsetting.ts":
/*!*****************************************************!*\
  !*** ./vendor/Framework/src/icubismmodelsetting.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.ICubismModelSetting = void 0;
var ICubismModelSetting = (function () {
    function ICubismModelSetting() {
    }
    return ICubismModelSetting;
}());
exports.ICubismModelSetting = ICubismModelSetting;
var $ = __importStar(__webpack_require__(/*! ./icubismmodelsetting */ "./vendor/Framework/src/icubismmodelsetting.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.ICubismModelSetting = $.ICubismModelSetting;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/id/cubismid.ts":
/*!*********************************************!*\
  !*** ./vendor/Framework/src/id/cubismid.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismId = void 0;
var csmstring_1 = __webpack_require__(/*! ../type/csmstring */ "./vendor/Framework/src/type/csmstring.ts");
var CubismId = (function () {
    function CubismId(id) {
        if (typeof id === 'string') {
            this._id = new csmstring_1.csmString(id);
            return;
        }
        this._id = id;
    }
    CubismId.prototype.getString = function () {
        return this._id;
    };
    CubismId.prototype.isEqual = function (c) {
        if (typeof c === 'string') {
            return this._id.isEqual(c);
        }
        else if (c instanceof csmstring_1.csmString) {
            return this._id.isEqual(c.s);
        }
        else if (c instanceof CubismId) {
            return this._id.isEqual(c._id.s);
        }
        return false;
    };
    CubismId.prototype.isNotEqual = function (c) {
        if (typeof c == 'string') {
            return !this._id.isEqual(c);
        }
        else if (c instanceof csmstring_1.csmString) {
            return !this._id.isEqual(c.s);
        }
        else if (c instanceof CubismId) {
            return !this._id.isEqual(c._id.s);
        }
        return false;
    };
    return CubismId;
}());
exports.CubismId = CubismId;
var $ = __importStar(__webpack_require__(/*! ./cubismid */ "./vendor/Framework/src/id/cubismid.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismId = $.CubismId;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/id/cubismidmanager.ts":
/*!****************************************************!*\
  !*** ./vendor/Framework/src/id/cubismidmanager.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismIdManager = void 0;
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "./vendor/Framework/src/type/csmvector.ts");
var cubismid_1 = __webpack_require__(/*! ./cubismid */ "./vendor/Framework/src/id/cubismid.ts");
var CubismIdManager = (function () {
    function CubismIdManager() {
        this._ids = new csmvector_1.csmVector();
    }
    CubismIdManager.prototype.release = function () {
        for (var i = 0; i < this._ids.getSize(); ++i) {
            this._ids.set(i, void 0);
        }
        this._ids = null;
    };
    CubismIdManager.prototype.registerIds = function (ids) {
        for (var i = 0; i < ids.length; i++) {
            this.registerId(ids[i]);
        }
    };
    CubismIdManager.prototype.registerId = function (id) {
        var result = null;
        if ('string' == typeof id) {
            if ((result = this.findId(id)) != null) {
                return result;
            }
            result = new cubismid_1.CubismId(id);
            this._ids.pushBack(result);
        }
        else {
            return this.registerId(id.s);
        }
        return result;
    };
    CubismIdManager.prototype.getId = function (id) {
        return this.registerId(id);
    };
    CubismIdManager.prototype.isExist = function (id) {
        if ('string' == typeof id) {
            return this.findId(id) != null;
        }
        return this.isExist(id.s);
    };
    CubismIdManager.prototype.findId = function (id) {
        for (var i = 0; i < this._ids.getSize(); ++i) {
            if (this._ids.at(i).getString().isEqual(id)) {
                return this._ids.at(i);
            }
        }
        return null;
    };
    return CubismIdManager;
}());
exports.CubismIdManager = CubismIdManager;
var $ = __importStar(__webpack_require__(/*! ./cubismidmanager */ "./vendor/Framework/src/id/cubismidmanager.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismIdManager = $.CubismIdManager;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/live2dcubismframework.ts":
/*!*******************************************************!*\
  !*** ./vendor/Framework/src/live2dcubismframework.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.LogLevel = exports.Option = exports.CubismFramework = exports.csmDelete = exports.Constant = exports.strtod = void 0;
var cubismidmanager_1 = __webpack_require__(/*! ./id/cubismidmanager */ "./vendor/Framework/src/id/cubismidmanager.ts");
var cubismrenderer_1 = __webpack_require__(/*! ./rendering/cubismrenderer */ "./vendor/Framework/src/rendering/cubismrenderer.ts");
var cubismdebug_1 = __webpack_require__(/*! ./utils/cubismdebug */ "./vendor/Framework/src/utils/cubismdebug.ts");
var cubismjson_1 = __webpack_require__(/*! ./utils/cubismjson */ "./vendor/Framework/src/utils/cubismjson.ts");
function strtod(s, endPtr) {
    var index = 0;
    for (var i = 1;; i++) {
        var testC = s.slice(i - 1, i);
        if (testC == 'e' || testC == '-' || testC == 'E') {
            continue;
        }
        var test = s.substring(0, i);
        var number = Number(test);
        if (isNaN(number)) {
            break;
        }
        index = i;
    }
    var d = parseFloat(s);
    if (isNaN(d)) {
        d = NaN;
    }
    endPtr[0] = s.slice(index);
    return d;
}
exports.strtod = strtod;
var s_isStarted = false;
var s_isInitialized = false;
var s_option = null;
var s_cubismIdManager = null;
exports.Constant = Object.freeze({
    vertexOffset: 0,
    vertexStep: 2,
});
function csmDelete(address) {
    if (!address) {
        return;
    }
    address = void 0;
}
exports.csmDelete = csmDelete;
var CubismFramework = (function () {
    function CubismFramework() {
    }
    CubismFramework.startUp = function (option) {
        if (option === void 0) { option = null; }
        if (s_isStarted) {
            (0, cubismdebug_1.CubismLogInfo)('CubismFramework.startUp() is already done.');
            return s_isStarted;
        }
        s_option = option;
        if (s_option != null) {
            Live2DCubismCore.Logging.csmSetLogFunction(s_option.logFunction);
        }
        s_isStarted = true;
        if (s_isStarted) {
            var version = Live2DCubismCore.Version.csmGetVersion();
            var major = (version & 0xff000000) >> 24;
            var minor = (version & 0x00ff0000) >> 16;
            var patch = version & 0x0000ffff;
            var versionNumber = version;
            (0, cubismdebug_1.CubismLogInfo)("Live2D Cubism Core version: {0}.{1}.{2} ({3})", ('00' + major).slice(-2), ('00' + minor).slice(-2), ('0000' + patch).slice(-4), versionNumber);
        }
        (0, cubismdebug_1.CubismLogInfo)('CubismFramework.startUp() is complete.');
        return s_isStarted;
    };
    CubismFramework.cleanUp = function () {
        s_isStarted = false;
        s_isInitialized = false;
        s_option = null;
        s_cubismIdManager = null;
    };
    CubismFramework.initialize = function () {
        (0, cubismdebug_1.CSM_ASSERT)(s_isStarted);
        if (!s_isStarted) {
            (0, cubismdebug_1.CubismLogWarning)('CubismFramework is not started.');
            return;
        }
        if (s_isInitialized) {
            (0, cubismdebug_1.CubismLogWarning)('CubismFramework.initialize() skipped, already initialized.');
            return;
        }
        cubismjson_1.Value.staticInitializeNotForClientCall();
        s_cubismIdManager = new cubismidmanager_1.CubismIdManager();
        s_isInitialized = true;
        (0, cubismdebug_1.CubismLogInfo)('CubismFramework.initialize() is complete.');
    };
    CubismFramework.dispose = function () {
        (0, cubismdebug_1.CSM_ASSERT)(s_isStarted);
        if (!s_isStarted) {
            (0, cubismdebug_1.CubismLogWarning)('CubismFramework is not started.');
            return;
        }
        if (!s_isInitialized) {
            (0, cubismdebug_1.CubismLogWarning)('CubismFramework.dispose() skipped, not initialized.');
            return;
        }
        cubismjson_1.Value.staticReleaseNotForClientCall();
        s_cubismIdManager.release();
        s_cubismIdManager = null;
        cubismrenderer_1.CubismRenderer.staticRelease();
        s_isInitialized = false;
        (0, cubismdebug_1.CubismLogInfo)('CubismFramework.dispose() is complete.');
    };
    CubismFramework.isStarted = function () {
        return s_isStarted;
    };
    CubismFramework.isInitialized = function () {
        return s_isInitialized;
    };
    CubismFramework.coreLogFunction = function (message) {
        if (!Live2DCubismCore.Logging.csmGetLogFunction()) {
            return;
        }
        Live2DCubismCore.Logging.csmGetLogFunction()(message);
    };
    CubismFramework.getLoggingLevel = function () {
        if (s_option != null) {
            return s_option.loggingLevel;
        }
        return LogLevel.LogLevel_Off;
    };
    CubismFramework.getIdManager = function () {
        return s_cubismIdManager;
    };
    return CubismFramework;
}());
exports.CubismFramework = CubismFramework;
var Option = (function () {
    function Option() {
    }
    return Option;
}());
exports.Option = Option;
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["LogLevel_Verbose"] = 0] = "LogLevel_Verbose";
    LogLevel[LogLevel["LogLevel_Debug"] = 1] = "LogLevel_Debug";
    LogLevel[LogLevel["LogLevel_Info"] = 2] = "LogLevel_Info";
    LogLevel[LogLevel["LogLevel_Warning"] = 3] = "LogLevel_Warning";
    LogLevel[LogLevel["LogLevel_Error"] = 4] = "LogLevel_Error";
    LogLevel[LogLevel["LogLevel_Off"] = 5] = "LogLevel_Off";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
var $ = __importStar(__webpack_require__(/*! ./live2dcubismframework */ "./vendor/Framework/src/live2dcubismframework.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.Constant = $.Constant;
    Live2DCubismFramework.csmDelete = $.csmDelete;
    Live2DCubismFramework.CubismFramework = $.CubismFramework;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/math/cubismmath.ts":
/*!*************************************************!*\
  !*** ./vendor/Framework/src/math/cubismmath.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismMath = void 0;
var cubismvector2_1 = __webpack_require__(/*! ./cubismvector2 */ "./vendor/Framework/src/math/cubismvector2.ts");
var CubismMath = (function () {
    function CubismMath() {
    }
    CubismMath.range = function (value, min, max) {
        if (value < min) {
            value = min;
        }
        else if (value > max) {
            value = max;
        }
        return value;
    };
    CubismMath.sin = function (x) {
        return Math.sin(x);
    };
    CubismMath.cos = function (x) {
        return Math.cos(x);
    };
    CubismMath.abs = function (x) {
        return Math.abs(x);
    };
    CubismMath.sqrt = function (x) {
        return Math.sqrt(x);
    };
    CubismMath.cbrt = function (x) {
        if (x === 0) {
            return x;
        }
        var cx = x;
        var isNegativeNumber = cx < 0;
        if (isNegativeNumber) {
            cx = -cx;
        }
        var ret;
        if (cx === Infinity) {
            ret = Infinity;
        }
        else {
            ret = Math.exp(Math.log(cx) / 3);
            ret = (cx / (ret * ret) + 2 * ret) / 3;
        }
        return isNegativeNumber ? -ret : ret;
    };
    CubismMath.getEasingSine = function (value) {
        if (value < 0.0) {
            return 0.0;
        }
        else if (value > 1.0) {
            return 1.0;
        }
        return 0.5 - 0.5 * this.cos(value * Math.PI);
    };
    CubismMath.max = function (left, right) {
        return left > right ? left : right;
    };
    CubismMath.min = function (left, right) {
        return left > right ? right : left;
    };
    CubismMath.degreesToRadian = function (degrees) {
        return (degrees / 180.0) * Math.PI;
    };
    CubismMath.radianToDegrees = function (radian) {
        return (radian * 180.0) / Math.PI;
    };
    CubismMath.directionToRadian = function (from, to) {
        var q1 = Math.atan2(to.y, to.x);
        var q2 = Math.atan2(from.y, from.x);
        var ret = q1 - q2;
        while (ret < -Math.PI) {
            ret += Math.PI * 2.0;
        }
        while (ret > Math.PI) {
            ret -= Math.PI * 2.0;
        }
        return ret;
    };
    CubismMath.directionToDegrees = function (from, to) {
        var radian = this.directionToRadian(from, to);
        var degree = this.radianToDegrees(radian);
        if (to.x - from.x > 0.0) {
            degree = -degree;
        }
        return degree;
    };
    CubismMath.radianToDirection = function (totalAngle) {
        var ret = new cubismvector2_1.CubismVector2();
        ret.x = this.sin(totalAngle);
        ret.y = this.cos(totalAngle);
        return ret;
    };
    CubismMath.quadraticEquation = function (a, b, c) {
        if (this.abs(a) < CubismMath.Epsilon) {
            if (this.abs(b) < CubismMath.Epsilon) {
                return -c;
            }
            return -c / b;
        }
        return -(b + this.sqrt(b * b - 4.0 * a * c)) / (2.0 * a);
    };
    CubismMath.cardanoAlgorithmForBezier = function (a, b, c, d) {
        if (this.sqrt(a) < CubismMath.Epsilon) {
            return this.range(this.quadraticEquation(b, c, d), 0.0, 1.0);
        }
        var ba = b / a;
        var ca = c / a;
        var da = d / a;
        var p = (3.0 * ca - ba * ba) / 3.0;
        var p3 = p / 3.0;
        var q = (2.0 * ba * ba * ba - 9.0 * ba * ca + 27.0 * da) / 27.0;
        var q2 = q / 2.0;
        var discriminant = q2 * q2 + p3 * p3 * p3;
        var center = 0.5;
        var threshold = center + 0.01;
        if (discriminant < 0.0) {
            var mp3 = -p / 3.0;
            var mp33 = mp3 * mp3 * mp3;
            var r = this.sqrt(mp33);
            var t = -q / (2.0 * r);
            var cosphi = this.range(t, -1.0, 1.0);
            var phi = Math.acos(cosphi);
            var crtr = this.cbrt(r);
            var t1 = 2.0 * crtr;
            var root1_1 = t1 * this.cos(phi / 3.0) - ba / 3.0;
            if (this.abs(root1_1 - center) < threshold) {
                return this.range(root1_1, 0.0, 1.0);
            }
            var root2 = t1 * this.cos((phi + 2.0 * Math.PI) / 3.0) - ba / 3.0;
            if (this.abs(root2 - center) < threshold) {
                return this.range(root2, 0.0, 1.0);
            }
            var root3 = t1 * this.cos((phi + 4.0 * Math.PI) / 3.0) - ba / 3.0;
            return this.range(root3, 0.0, 1.0);
        }
        if (discriminant == 0.0) {
            var u1_1;
            if (q2 < 0.0) {
                u1_1 = this.cbrt(-q2);
            }
            else {
                u1_1 = -this.cbrt(q2);
            }
            var root1_2 = 2.0 * u1_1 - ba / 3.0;
            if (this.abs(root1_2 - center) < threshold) {
                return this.range(root1_2, 0.0, 1.0);
            }
            var root2 = -u1_1 - ba / 3.0;
            return this.range(root2, 0.0, 1.0);
        }
        var sd = this.sqrt(discriminant);
        var u1 = this.cbrt(sd - q2);
        var v1 = this.cbrt(sd + q2);
        var root1 = u1 - v1 - ba / 3.0;
        return this.range(root1, 0.0, 1.0);
    };
    CubismMath.Epsilon = 0.00001;
    return CubismMath;
}());
exports.CubismMath = CubismMath;
var $ = __importStar(__webpack_require__(/*! ./cubismmath */ "./vendor/Framework/src/math/cubismmath.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismMath = $.CubismMath;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/math/cubismmatrix44.ts":
/*!*****************************************************!*\
  !*** ./vendor/Framework/src/math/cubismmatrix44.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismMatrix44 = void 0;
var CubismMatrix44 = (function () {
    function CubismMatrix44() {
        this._tr = new Float32Array(16);
        this.loadIdentity();
    }
    CubismMatrix44.multiply = function (a, b, dst) {
        var c = new Float32Array([
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0,
        ]);
        var n = 4;
        for (var i = 0; i < n; ++i) {
            for (var j = 0; j < n; ++j) {
                for (var k = 0; k < n; ++k) {
                    c[j + i * 4] += a[k + i * 4] * b[j + k * 4];
                }
            }
        }
        for (var i = 0; i < 16; ++i) {
            dst[i] = c[i];
        }
    };
    CubismMatrix44.prototype.loadIdentity = function () {
        var c = new Float32Array([
            1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
            1.0,
        ]);
        this.setMatrix(c);
    };
    CubismMatrix44.prototype.setMatrix = function (tr) {
        for (var i = 0; i < 16; ++i) {
            this._tr[i] = tr[i];
        }
    };
    CubismMatrix44.prototype.getArray = function () {
        return this._tr;
    };
    CubismMatrix44.prototype.getScaleX = function () {
        return this._tr[0];
    };
    CubismMatrix44.prototype.getScaleY = function () {
        return this._tr[5];
    };
    CubismMatrix44.prototype.getTranslateX = function () {
        return this._tr[12];
    };
    CubismMatrix44.prototype.getTranslateY = function () {
        return this._tr[13];
    };
    CubismMatrix44.prototype.transformX = function (src) {
        return this._tr[0] * src + this._tr[12];
    };
    CubismMatrix44.prototype.transformY = function (src) {
        return this._tr[5] * src + this._tr[13];
    };
    CubismMatrix44.prototype.invertTransformX = function (src) {
        return (src - this._tr[12]) / this._tr[0];
    };
    CubismMatrix44.prototype.invertTransformY = function (src) {
        return (src - this._tr[13]) / this._tr[5];
    };
    CubismMatrix44.prototype.translateRelative = function (x, y) {
        var tr1 = new Float32Array([
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            x,
            y,
            0.0,
            1.0,
        ]);
        CubismMatrix44.multiply(tr1, this._tr, this._tr);
    };
    CubismMatrix44.prototype.translate = function (x, y) {
        this._tr[12] = x;
        this._tr[13] = y;
    };
    CubismMatrix44.prototype.translateX = function (x) {
        this._tr[12] = x;
    };
    CubismMatrix44.prototype.translateY = function (y) {
        this._tr[13] = y;
    };
    CubismMatrix44.prototype.scaleRelative = function (x, y) {
        var tr1 = new Float32Array([
            x,
            0.0,
            0.0,
            0.0,
            0.0,
            y,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
        ]);
        CubismMatrix44.multiply(tr1, this._tr, this._tr);
    };
    CubismMatrix44.prototype.scale = function (x, y) {
        this._tr[0] = x;
        this._tr[5] = y;
    };
    CubismMatrix44.prototype.multiplyByMatrix = function (m) {
        CubismMatrix44.multiply(m.getArray(), this._tr, this._tr);
    };
    CubismMatrix44.prototype.clone = function () {
        var cloneMatrix = new CubismMatrix44();
        for (var i = 0; i < this._tr.length; i++) {
            cloneMatrix._tr[i] = this._tr[i];
        }
        return cloneMatrix;
    };
    return CubismMatrix44;
}());
exports.CubismMatrix44 = CubismMatrix44;
var $ = __importStar(__webpack_require__(/*! ./cubismmatrix44 */ "./vendor/Framework/src/math/cubismmatrix44.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismMatrix44 = $.CubismMatrix44;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/math/cubismmodelmatrix.ts":
/*!********************************************************!*\
  !*** ./vendor/Framework/src/math/cubismmodelmatrix.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismModelMatrix = void 0;
var cubismmatrix44_1 = __webpack_require__(/*! ./cubismmatrix44 */ "./vendor/Framework/src/math/cubismmatrix44.ts");
var CubismModelMatrix = (function (_super) {
    __extends(CubismModelMatrix, _super);
    function CubismModelMatrix(w, h) {
        var _this = _super.call(this) || this;
        _this._width = w !== undefined ? w : 0.0;
        _this._height = h !== undefined ? h : 0.0;
        _this.setHeight(2.0);
        return _this;
    }
    CubismModelMatrix.prototype.setWidth = function (w) {
        var scaleX = w / this._width;
        var scaleY = scaleX;
        this.scale(scaleX, scaleY);
    };
    CubismModelMatrix.prototype.setHeight = function (h) {
        var scaleX = h / this._height;
        var scaleY = scaleX;
        this.scale(scaleX, scaleY);
    };
    CubismModelMatrix.prototype.setPosition = function (x, y) {
        this.translate(x, y);
    };
    CubismModelMatrix.prototype.setCenterPosition = function (x, y) {
        this.centerX(x);
        this.centerY(y);
    };
    CubismModelMatrix.prototype.top = function (y) {
        this.setY(y);
    };
    CubismModelMatrix.prototype.bottom = function (y) {
        var h = this._height * this.getScaleY();
        this.translateY(y - h);
    };
    CubismModelMatrix.prototype.left = function (x) {
        this.setX(x);
    };
    CubismModelMatrix.prototype.right = function (x) {
        var w = this._width * this.getScaleX();
        this.translateX(x - w);
    };
    CubismModelMatrix.prototype.centerX = function (x) {
        var w = this._width * this.getScaleX();
        this.translateX(x - w / 2.0);
    };
    CubismModelMatrix.prototype.setX = function (x) {
        this.translateX(x);
    };
    CubismModelMatrix.prototype.centerY = function (y) {
        var h = this._height * this.getScaleY();
        this.translateY(y - h / 2.0);
    };
    CubismModelMatrix.prototype.setY = function (y) {
        this.translateY(y);
    };
    CubismModelMatrix.prototype.setupFromLayout = function (layout) {
        var keyWidth = 'width';
        var keyHeight = 'height';
        var keyX = 'x';
        var keyY = 'y';
        var keyCenterX = 'center_x';
        var keyCenterY = 'center_y';
        var keyTop = 'top';
        var keyBottom = 'bottom';
        var keyLeft = 'left';
        var keyRight = 'right';
        for (var ite = layout.begin(); ite.notEqual(layout.end()); ite.preIncrement()) {
            var key = ite.ptr().first;
            var value = ite.ptr().second;
            if (key == keyWidth) {
                this.setWidth(value);
            }
            else if (key == keyHeight) {
                this.setHeight(value);
            }
        }
        for (var ite = layout.begin(); ite.notEqual(layout.end()); ite.preIncrement()) {
            var key = ite.ptr().first;
            var value = ite.ptr().second;
            if (key == keyX) {
                this.setX(value);
            }
            else if (key == keyY) {
                this.setY(value);
            }
            else if (key == keyCenterX) {
                this.centerX(value);
            }
            else if (key == keyCenterY) {
                this.centerY(value);
            }
            else if (key == keyTop) {
                this.top(value);
            }
            else if (key == keyBottom) {
                this.bottom(value);
            }
            else if (key == keyLeft) {
                this.left(value);
            }
            else if (key == keyRight) {
                this.right(value);
            }
        }
    };
    return CubismModelMatrix;
}(cubismmatrix44_1.CubismMatrix44));
exports.CubismModelMatrix = CubismModelMatrix;
var $ = __importStar(__webpack_require__(/*! ./cubismmodelmatrix */ "./vendor/Framework/src/math/cubismmodelmatrix.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismModelMatrix = $.CubismModelMatrix;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/math/cubismtargetpoint.ts":
/*!********************************************************!*\
  !*** ./vendor/Framework/src/math/cubismtargetpoint.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismTargetPoint = void 0;
var cubismmath_1 = __webpack_require__(/*! ./cubismmath */ "./vendor/Framework/src/math/cubismmath.ts");
var FrameRate = 30;
var Epsilon = 0.01;
var CubismTargetPoint = (function () {
    function CubismTargetPoint() {
        this._faceTargetX = 0.0;
        this._faceTargetY = 0.0;
        this._faceX = 0.0;
        this._faceY = 0.0;
        this._faceVX = 0.0;
        this._faceVY = 0.0;
        this._lastTimeSeconds = 0.0;
        this._userTimeSeconds = 0.0;
    }
    CubismTargetPoint.prototype.update = function (deltaTimeSeconds) {
        this._userTimeSeconds += deltaTimeSeconds;
        var faceParamMaxV = 40.0 / 10.0;
        var maxV = (faceParamMaxV * 1.0) / FrameRate;
        if (this._lastTimeSeconds == 0.0) {
            this._lastTimeSeconds = this._userTimeSeconds;
            return;
        }
        var deltaTimeWeight = (this._userTimeSeconds - this._lastTimeSeconds) * FrameRate;
        this._lastTimeSeconds = this._userTimeSeconds;
        var timeToMaxSpeed = 0.15;
        var frameToMaxSpeed = timeToMaxSpeed * FrameRate;
        var maxA = (deltaTimeWeight * maxV) / frameToMaxSpeed;
        var dx = this._faceTargetX - this._faceX;
        var dy = this._faceTargetY - this._faceY;
        if (cubismmath_1.CubismMath.abs(dx) <= Epsilon && cubismmath_1.CubismMath.abs(dy) <= Epsilon) {
            return;
        }
        var d = cubismmath_1.CubismMath.sqrt(dx * dx + dy * dy);
        var vx = (maxV * dx) / d;
        var vy = (maxV * dy) / d;
        var ax = vx - this._faceVX;
        var ay = vy - this._faceVY;
        var a = cubismmath_1.CubismMath.sqrt(ax * ax + ay * ay);
        if (a < -maxA || a > maxA) {
            ax *= maxA / a;
            ay *= maxA / a;
        }
        this._faceVX += ax;
        this._faceVY += ay;
        {
            var maxV_1 = 0.5 *
                (cubismmath_1.CubismMath.sqrt(maxA * maxA + 16.0 * maxA * d - 8.0 * maxA * d) -
                    maxA);
            var curV = cubismmath_1.CubismMath.sqrt(this._faceVX * this._faceVX + this._faceVY * this._faceVY);
            if (curV > maxV_1) {
                this._faceVX *= maxV_1 / curV;
                this._faceVY *= maxV_1 / curV;
            }
        }
        this._faceX += this._faceVX;
        this._faceY += this._faceVY;
    };
    CubismTargetPoint.prototype.getX = function () {
        return this._faceX;
    };
    CubismTargetPoint.prototype.getY = function () {
        return this._faceY;
    };
    CubismTargetPoint.prototype.set = function (x, y) {
        this._faceTargetX = x;
        this._faceTargetY = y;
    };
    return CubismTargetPoint;
}());
exports.CubismTargetPoint = CubismTargetPoint;
var $ = __importStar(__webpack_require__(/*! ./cubismtargetpoint */ "./vendor/Framework/src/math/cubismtargetpoint.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismTargetPoint = $.CubismTargetPoint;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/math/cubismvector2.ts":
/*!****************************************************!*\
  !*** ./vendor/Framework/src/math/cubismvector2.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismVector2 = void 0;
var CubismVector2 = (function () {
    function CubismVector2(x, y) {
        this.x = x;
        this.y = y;
        this.x = x == undefined ? 0.0 : x;
        this.y = y == undefined ? 0.0 : y;
    }
    CubismVector2.prototype.add = function (vector2) {
        var ret = new CubismVector2(0.0, 0.0);
        ret.x = this.x + vector2.x;
        ret.y = this.y + vector2.y;
        return ret;
    };
    CubismVector2.prototype.substract = function (vector2) {
        var ret = new CubismVector2(0.0, 0.0);
        ret.x = this.x - vector2.x;
        ret.y = this.y - vector2.y;
        return ret;
    };
    CubismVector2.prototype.multiply = function (vector2) {
        var ret = new CubismVector2(0.0, 0.0);
        ret.x = this.x * vector2.x;
        ret.y = this.y * vector2.y;
        return ret;
    };
    CubismVector2.prototype.multiplyByScaler = function (scalar) {
        return this.multiply(new CubismVector2(scalar, scalar));
    };
    CubismVector2.prototype.division = function (vector2) {
        var ret = new CubismVector2(0.0, 0.0);
        ret.x = this.x / vector2.x;
        ret.y = this.y / vector2.y;
        return ret;
    };
    CubismVector2.prototype.divisionByScalar = function (scalar) {
        return this.division(new CubismVector2(scalar, scalar));
    };
    CubismVector2.prototype.getLength = function () {
        return Math.sqrt(this.x * this.x + this.y * this.y);
    };
    CubismVector2.prototype.getDistanceWith = function (a) {
        return Math.sqrt((this.x - a.x) * (this.x - a.x) + (this.y - a.y) * (this.y - a.y));
    };
    CubismVector2.prototype.dot = function (a) {
        return this.x * a.x + this.y * a.y;
    };
    CubismVector2.prototype.normalize = function () {
        var length = Math.pow(this.x * this.x + this.y * this.y, 0.5);
        this.x = this.x / length;
        this.y = this.y / length;
    };
    CubismVector2.prototype.isEqual = function (rhs) {
        return this.x == rhs.x && this.y == rhs.y;
    };
    CubismVector2.prototype.isNotEqual = function (rhs) {
        return !this.isEqual(rhs);
    };
    return CubismVector2;
}());
exports.CubismVector2 = CubismVector2;
var $ = __importStar(__webpack_require__(/*! ./cubismvector2 */ "./vendor/Framework/src/math/cubismvector2.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismVector2 = $.CubismVector2;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/math/cubismviewmatrix.ts":
/*!*******************************************************!*\
  !*** ./vendor/Framework/src/math/cubismviewmatrix.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismViewMatrix = void 0;
var cubismmatrix44_1 = __webpack_require__(/*! ./cubismmatrix44 */ "./vendor/Framework/src/math/cubismmatrix44.ts");
var CubismViewMatrix = (function (_super) {
    __extends(CubismViewMatrix, _super);
    function CubismViewMatrix() {
        var _this = _super.call(this) || this;
        _this._screenLeft = 0.0;
        _this._screenRight = 0.0;
        _this._screenTop = 0.0;
        _this._screenBottom = 0.0;
        _this._maxLeft = 0.0;
        _this._maxRight = 0.0;
        _this._maxTop = 0.0;
        _this._maxBottom = 0.0;
        _this._maxScale = 0.0;
        _this._minScale = 0.0;
        return _this;
    }
    CubismViewMatrix.prototype.adjustTranslate = function (x, y) {
        if (this._tr[0] * this._maxLeft + (this._tr[12] + x) > this._screenLeft) {
            x = this._screenLeft - this._tr[0] * this._maxLeft - this._tr[12];
        }
        if (this._tr[0] * this._maxRight + (this._tr[12] + x) < this._screenRight) {
            x = this._screenRight - this._tr[0] * this._maxRight - this._tr[12];
        }
        if (this._tr[5] * this._maxTop + (this._tr[13] + y) < this._screenTop) {
            y = this._screenTop - this._tr[5] * this._maxTop - this._tr[13];
        }
        if (this._tr[5] * this._maxBottom + (this._tr[13] + y) >
            this._screenBottom) {
            y = this._screenBottom - this._tr[5] * this._maxBottom - this._tr[13];
        }
        var tr1 = new Float32Array([
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            x,
            y,
            0.0,
            1.0,
        ]);
        cubismmatrix44_1.CubismMatrix44.multiply(tr1, this._tr, this._tr);
    };
    CubismViewMatrix.prototype.adjustScale = function (cx, cy, scale) {
        var maxScale = this.getMaxScale();
        var minScale = this.getMinScale();
        var targetScale = scale * this._tr[0];
        if (targetScale < minScale) {
            if (this._tr[0] > 0.0) {
                scale = minScale / this._tr[0];
            }
        }
        else if (targetScale > maxScale) {
            if (this._tr[0] > 0.0) {
                scale = maxScale / this._tr[0];
            }
        }
        var tr1 = new Float32Array([
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            cx,
            cy,
            0.0,
            1.0,
        ]);
        var tr2 = new Float32Array([
            scale,
            0.0,
            0.0,
            0.0,
            0.0,
            scale,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
        ]);
        var tr3 = new Float32Array([
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            -cx,
            -cy,
            0.0,
            1.0,
        ]);
        cubismmatrix44_1.CubismMatrix44.multiply(tr3, this._tr, this._tr);
        cubismmatrix44_1.CubismMatrix44.multiply(tr2, this._tr, this._tr);
        cubismmatrix44_1.CubismMatrix44.multiply(tr1, this._tr, this._tr);
    };
    CubismViewMatrix.prototype.setScreenRect = function (left, right, bottom, top) {
        this._screenLeft = left;
        this._screenRight = right;
        this._screenBottom = bottom;
        this._screenTop = top;
    };
    CubismViewMatrix.prototype.setMaxScreenRect = function (left, right, bottom, top) {
        this._maxLeft = left;
        this._maxRight = right;
        this._maxTop = top;
        this._maxBottom = bottom;
    };
    CubismViewMatrix.prototype.setMaxScale = function (maxScale) {
        this._maxScale = maxScale;
    };
    CubismViewMatrix.prototype.setMinScale = function (minScale) {
        this._minScale = minScale;
    };
    CubismViewMatrix.prototype.getMaxScale = function () {
        return this._maxScale;
    };
    CubismViewMatrix.prototype.getMinScale = function () {
        return this._minScale;
    };
    CubismViewMatrix.prototype.isMaxScale = function () {
        return this.getScaleX() >= this._maxScale;
    };
    CubismViewMatrix.prototype.isMinScale = function () {
        return this.getScaleX() <= this._minScale;
    };
    CubismViewMatrix.prototype.getScreenLeft = function () {
        return this._screenLeft;
    };
    CubismViewMatrix.prototype.getScreenRight = function () {
        return this._screenRight;
    };
    CubismViewMatrix.prototype.getScreenBottom = function () {
        return this._screenBottom;
    };
    CubismViewMatrix.prototype.getScreenTop = function () {
        return this._screenTop;
    };
    CubismViewMatrix.prototype.getMaxLeft = function () {
        return this._maxLeft;
    };
    CubismViewMatrix.prototype.getMaxRight = function () {
        return this._maxRight;
    };
    CubismViewMatrix.prototype.getMaxBottom = function () {
        return this._maxBottom;
    };
    CubismViewMatrix.prototype.getMaxTop = function () {
        return this._maxTop;
    };
    return CubismViewMatrix;
}(cubismmatrix44_1.CubismMatrix44));
exports.CubismViewMatrix = CubismViewMatrix;
var $ = __importStar(__webpack_require__(/*! ./cubismviewmatrix */ "./vendor/Framework/src/math/cubismviewmatrix.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismViewMatrix = $.CubismViewMatrix;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/model/cubismmoc.ts":
/*!*************************************************!*\
  !*** ./vendor/Framework/src/model/cubismmoc.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismMoc = void 0;
var cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ "./vendor/Framework/src/utils/cubismdebug.ts");
var cubismmodel_1 = __webpack_require__(/*! ./cubismmodel */ "./vendor/Framework/src/model/cubismmodel.ts");
var CubismMoc = (function () {
    function CubismMoc(moc) {
        this._moc = moc;
        this._modelCount = 0;
        this._mocVersion = 0;
    }
    CubismMoc.create = function (mocBytes) {
        var cubismMoc = null;
        var moc = Live2DCubismCore.Moc.fromArrayBuffer(mocBytes);
        if (moc) {
            cubismMoc = new CubismMoc(moc);
            cubismMoc._mocVersion = Live2DCubismCore.Version.csmGetMocVersion(moc, mocBytes);
        }
        return cubismMoc;
    };
    CubismMoc.delete = function (moc) {
        moc._moc._release();
        moc._moc = null;
        moc = null;
    };
    CubismMoc.prototype.createModel = function () {
        var cubismModel = null;
        var model = Live2DCubismCore.Model.fromMoc(this._moc);
        if (model) {
            cubismModel = new cubismmodel_1.CubismModel(model);
            cubismModel.initialize();
            ++this._modelCount;
        }
        return cubismModel;
    };
    CubismMoc.prototype.deleteModel = function (model) {
        if (model != null) {
            model.release();
            model = null;
            --this._modelCount;
        }
    };
    CubismMoc.prototype.release = function () {
        (0, cubismdebug_1.CSM_ASSERT)(this._modelCount == 0);
        this._moc._release();
        this._moc = null;
    };
    CubismMoc.prototype.getLatestMocVersion = function () {
        return Live2DCubismCore.Version.csmGetLatestMocVersion();
    };
    CubismMoc.prototype.getMocVersion = function () {
        return this._mocVersion;
    };
    return CubismMoc;
}());
exports.CubismMoc = CubismMoc;
var $ = __importStar(__webpack_require__(/*! ./cubismmoc */ "./vendor/Framework/src/model/cubismmoc.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismMoc = $.CubismMoc;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/model/cubismmodel.ts":
/*!***************************************************!*\
  !*** ./vendor/Framework/src/model/cubismmodel.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismModel = exports.DrawableColorData = void 0;
var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "./vendor/Framework/src/live2dcubismframework.ts");
var cubismrenderer_1 = __webpack_require__(/*! ../rendering/cubismrenderer */ "./vendor/Framework/src/rendering/cubismrenderer.ts");
var csmmap_1 = __webpack_require__(/*! ../type/csmmap */ "./vendor/Framework/src/type/csmmap.ts");
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "./vendor/Framework/src/type/csmvector.ts");
var cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ "./vendor/Framework/src/utils/cubismdebug.ts");
var DrawableColorData = (function () {
    function DrawableColorData() {
        this.isOverwritten = false;
        this.Color = new cubismrenderer_1.CubismTextureColor();
    }
    return DrawableColorData;
}());
exports.DrawableColorData = DrawableColorData;
var CubismModel = (function () {
    function CubismModel(model) {
        this._model = model;
        this._parameterValues = null;
        this._parameterMaximumValues = null;
        this._parameterMinimumValues = null;
        this._partOpacities = null;
        this._savedParameters = new csmvector_1.csmVector();
        this._parameterIds = new csmvector_1.csmVector();
        this._drawableIds = new csmvector_1.csmVector();
        this._partIds = new csmvector_1.csmVector();
        this._isOverwrittenModelMultiplyColors = false;
        this._isOverwrittenModelScreenColors = false;
        this._userMultiplyColors = null;
        this._userScreenColors = null;
        this._notExistPartId = new csmmap_1.csmMap();
        this._notExistParameterId = new csmmap_1.csmMap();
        this._notExistParameterValues = new csmmap_1.csmMap();
        this._notExistPartOpacities = new csmmap_1.csmMap();
    }
    CubismModel.prototype.update = function () {
        this._model.update();
        this._model.drawables.resetDynamicFlags();
    };
    CubismModel.prototype.getCanvasWidth = function () {
        if (this._model == null) {
            return 0.0;
        }
        return (this._model.canvasinfo.CanvasWidth / this._model.canvasinfo.PixelsPerUnit);
    };
    CubismModel.prototype.getCanvasHeight = function () {
        if (this._model == null) {
            return 0.0;
        }
        return (this._model.canvasinfo.CanvasHeight / this._model.canvasinfo.PixelsPerUnit);
    };
    CubismModel.prototype.saveParameters = function () {
        var parameterCount = this._model.parameters.count;
        var savedParameterCount = this._savedParameters.getSize();
        for (var i = 0; i < parameterCount; ++i) {
            if (i < savedParameterCount) {
                this._savedParameters.set(i, this._parameterValues[i]);
            }
            else {
                this._savedParameters.pushBack(this._parameterValues[i]);
            }
        }
    };
    CubismModel.prototype.getMultiplyColor = function (index) {
        if (this.getOverwriteFlagForModelMultiplyColors() ||
            this.getOverwriteFlagForDrawableMultiplyColors(index)) {
            return this._userMultiplyColors.at(index).Color;
        }
        var color = this.getDrawableMultiplyColor(index);
        return color;
    };
    CubismModel.prototype.getScreenColor = function (index) {
        if (this.getOverwriteFlagForModelScreenColors() ||
            this.getOverwriteFlagForDrawableScreenColors(index)) {
            return this._userScreenColors.at(index).Color;
        }
        var color = this.getDrawableScreenColor(index);
        return color;
    };
    CubismModel.prototype.setMultiplyColorByTextureColor = function (index, color) {
        this.setMultiplyColorByRGBA(index, color.R, color.G, color.B, color.A);
    };
    CubismModel.prototype.setMultiplyColorByRGBA = function (index, r, g, b, a) {
        if (a === void 0) { a = 1.0; }
        this._userMultiplyColors.at(index).Color.R = r;
        this._userMultiplyColors.at(index).Color.G = g;
        this._userMultiplyColors.at(index).Color.B = b;
        this._userMultiplyColors.at(index).Color.A = a;
    };
    CubismModel.prototype.setScreenColorByTextureColor = function (index, color) {
        this.setScreenColorByRGBA(index, color.R, color.G, color.B, color.A);
    };
    CubismModel.prototype.setScreenColorByRGBA = function (index, r, g, b, a) {
        if (a === void 0) { a = 1.0; }
        this._userScreenColors.at(index).Color.R = r;
        this._userScreenColors.at(index).Color.G = g;
        this._userScreenColors.at(index).Color.B = b;
        this._userScreenColors.at(index).Color.A = a;
    };
    CubismModel.prototype.getOverwriteFlagForModelMultiplyColors = function () {
        return this._isOverwrittenModelMultiplyColors;
    };
    CubismModel.prototype.getOverwriteFlagForModelScreenColors = function () {
        return this._isOverwrittenModelScreenColors;
    };
    CubismModel.prototype.setOverwriteFlagForModelMultiplyColors = function (value) {
        this._isOverwrittenModelMultiplyColors = value;
    };
    CubismModel.prototype.setOverwriteFlagForModelScreenColors = function (value) {
        this._isOverwrittenModelScreenColors = value;
    };
    CubismModel.prototype.getOverwriteFlagForDrawableMultiplyColors = function (drawableindex) {
        return this._userMultiplyColors.at(drawableindex).isOverwritten;
    };
    CubismModel.prototype.getOverwriteFlagForDrawableScreenColors = function (drawableindex) {
        return this._userMultiplyColors.at(drawableindex).isOverwritten;
    };
    CubismModel.prototype.setOverwriteFlagForDrawableMultiplyColors = function (drawableindex, value) {
        this._userMultiplyColors.at(drawableindex).isOverwritten = value;
    };
    CubismModel.prototype.setOverwriteFlagForDrawableScreenColors = function (drawableindex, value) {
        this._userScreenColors.at(drawableindex).isOverwritten = value;
    };
    CubismModel.prototype.getModel = function () {
        return this._model;
    };
    CubismModel.prototype.getPartIndex = function (partId) {
        var partIndex;
        var partCount = this._model.parts.count;
        for (partIndex = 0; partIndex < partCount; ++partIndex) {
            if (partId == this._partIds.at(partIndex)) {
                return partIndex;
            }
        }
        if (this._notExistPartId.isExist(partId)) {
            return this._notExistPartId.getValue(partId);
        }
        partIndex = partCount + this._notExistPartId.getSize();
        this._notExistPartId.setValue(partId, partIndex);
        this._notExistPartOpacities.appendKey(partIndex);
        return partIndex;
    };
    CubismModel.prototype.getPartCount = function () {
        var partCount = this._model.parts.count;
        return partCount;
    };
    CubismModel.prototype.setPartOpacityByIndex = function (partIndex, opacity) {
        if (this._notExistPartOpacities.isExist(partIndex)) {
            this._notExistPartOpacities.setValue(partIndex, opacity);
            return;
        }
        (0, cubismdebug_1.CSM_ASSERT)(0 <= partIndex && partIndex < this.getPartCount());
        this._partOpacities[partIndex] = opacity;
    };
    CubismModel.prototype.setPartOpacityById = function (partId, opacity) {
        var index = this.getPartIndex(partId);
        if (index < 0) {
            return;
        }
        this.setPartOpacityByIndex(index, opacity);
    };
    CubismModel.prototype.getPartOpacityByIndex = function (partIndex) {
        if (this._notExistPartOpacities.isExist(partIndex)) {
            return this._notExistPartOpacities.getValue(partIndex);
        }
        (0, cubismdebug_1.CSM_ASSERT)(0 <= partIndex && partIndex < this.getPartCount());
        return this._partOpacities[partIndex];
    };
    CubismModel.prototype.getPartOpacityById = function (partId) {
        var index = this.getPartIndex(partId);
        if (index < 0) {
            return 0;
        }
        return this.getPartOpacityByIndex(index);
    };
    CubismModel.prototype.getParameterIndex = function (parameterId) {
        var parameterIndex;
        var idCount = this._model.parameters.count;
        for (parameterIndex = 0; parameterIndex < idCount; ++parameterIndex) {
            if (parameterId != this._parameterIds.at(parameterIndex)) {
                continue;
            }
            return parameterIndex;
        }
        if (this._notExistParameterId.isExist(parameterId)) {
            return this._notExistParameterId.getValue(parameterId);
        }
        parameterIndex =
            this._model.parameters.count + this._notExistParameterId.getSize();
        this._notExistParameterId.setValue(parameterId, parameterIndex);
        this._notExistParameterValues.appendKey(parameterIndex);
        return parameterIndex;
    };
    CubismModel.prototype.getParameterCount = function () {
        return this._model.parameters.count;
    };
    CubismModel.prototype.getParameterType = function (parameterIndex) {
        return this._model.parameters.types[parameterIndex];
    };
    CubismModel.prototype.getParameterMaximumValue = function (parameterIndex) {
        return this._model.parameters.maximumValues[parameterIndex];
    };
    CubismModel.prototype.getParameterMinimumValue = function (parameterIndex) {
        return this._model.parameters.minimumValues[parameterIndex];
    };
    CubismModel.prototype.getParameterDefaultValue = function (parameterIndex) {
        return this._model.parameters.defaultValues[parameterIndex];
    };
    CubismModel.prototype.getParameterValueByIndex = function (parameterIndex) {
        if (this._notExistParameterValues.isExist(parameterIndex)) {
            return this._notExistParameterValues.getValue(parameterIndex);
        }
        (0, cubismdebug_1.CSM_ASSERT)(0 <= parameterIndex && parameterIndex < this.getParameterCount());
        return this._parameterValues[parameterIndex];
    };
    CubismModel.prototype.getParameterValueById = function (parameterId) {
        var parameterIndex = this.getParameterIndex(parameterId);
        return this.getParameterValueByIndex(parameterIndex);
    };
    CubismModel.prototype.setParameterValueByIndex = function (parameterIndex, value, weight) {
        if (weight === void 0) { weight = 1.0; }
        if (this._notExistParameterValues.isExist(parameterIndex)) {
            this._notExistParameterValues.setValue(parameterIndex, weight == 1
                ? value
                : this._notExistParameterValues.getValue(parameterIndex) *
                    (1 - weight) +
                    value * weight);
            return;
        }
        (0, cubismdebug_1.CSM_ASSERT)(0 <= parameterIndex && parameterIndex < this.getParameterCount());
        if (this._model.parameters.maximumValues[parameterIndex] < value) {
            value = this._model.parameters.maximumValues[parameterIndex];
        }
        if (this._model.parameters.minimumValues[parameterIndex] > value) {
            value = this._model.parameters.minimumValues[parameterIndex];
        }
        this._parameterValues[parameterIndex] =
            weight == 1
                ? value
                : (this._parameterValues[parameterIndex] =
                    this._parameterValues[parameterIndex] * (1 - weight) +
                        value * weight);
    };
    CubismModel.prototype.setParameterValueById = function (parameterId, value, weight) {
        if (weight === void 0) { weight = 1.0; }
        var index = this.getParameterIndex(parameterId);
        this.setParameterValueByIndex(index, value, weight);
    };
    CubismModel.prototype.addParameterValueByIndex = function (parameterIndex, value, weight) {
        if (weight === void 0) { weight = 1.0; }
        this.setParameterValueByIndex(parameterIndex, this.getParameterValueByIndex(parameterIndex) + value * weight);
    };
    CubismModel.prototype.addParameterValueById = function (parameterId, value, weight) {
        if (weight === void 0) { weight = 1.0; }
        var index = this.getParameterIndex(parameterId);
        this.addParameterValueByIndex(index, value, weight);
    };
    CubismModel.prototype.multiplyParameterValueById = function (parameterId, value, weight) {
        if (weight === void 0) { weight = 1.0; }
        var index = this.getParameterIndex(parameterId);
        this.multiplyParameterValueByIndex(index, value, weight);
    };
    CubismModel.prototype.multiplyParameterValueByIndex = function (parameterIndex, value, weight) {
        if (weight === void 0) { weight = 1.0; }
        this.setParameterValueByIndex(parameterIndex, this.getParameterValueByIndex(parameterIndex) *
            (1.0 + (value - 1.0) * weight));
    };
    CubismModel.prototype.getDrawableIndex = function (drawableId) {
        var drawableCount = this._model.drawables.count;
        for (var drawableIndex = 0; drawableIndex < drawableCount; ++drawableIndex) {
            if (this._drawableIds.at(drawableIndex) == drawableId) {
                return drawableIndex;
            }
        }
        return -1;
    };
    CubismModel.prototype.getDrawableCount = function () {
        var drawableCount = this._model.drawables.count;
        return drawableCount;
    };
    CubismModel.prototype.getDrawableId = function (drawableIndex) {
        var parameterIds = this._model.drawables.ids;
        return live2dcubismframework_1.CubismFramework.getIdManager().getId(parameterIds[drawableIndex]);
    };
    CubismModel.prototype.getDrawableRenderOrders = function () {
        var renderOrders = this._model.drawables.renderOrders;
        return renderOrders;
    };
    CubismModel.prototype.getDrawableTextureIndices = function (drawableIndex) {
        return this.getDrawableTextureIndex(drawableIndex);
    };
    CubismModel.prototype.getDrawableTextureIndex = function (drawableIndex) {
        var textureIndices = this._model.drawables.textureIndices;
        return textureIndices[drawableIndex];
    };
    CubismModel.prototype.getDrawableDynamicFlagVertexPositionsDidChange = function (drawableIndex) {
        var dynamicFlags = this._model.drawables.dynamicFlags;
        return Live2DCubismCore.Utils.hasVertexPositionsDidChangeBit(dynamicFlags[drawableIndex]);
    };
    CubismModel.prototype.getDrawableVertexIndexCount = function (drawableIndex) {
        var indexCounts = this._model.drawables.indexCounts;
        return indexCounts[drawableIndex];
    };
    CubismModel.prototype.getDrawableVertexCount = function (drawableIndex) {
        var vertexCounts = this._model.drawables.vertexCounts;
        return vertexCounts[drawableIndex];
    };
    CubismModel.prototype.getDrawableVertices = function (drawableIndex) {
        return this.getDrawableVertexPositions(drawableIndex);
    };
    CubismModel.prototype.getDrawableVertexIndices = function (drawableIndex) {
        var indicesArray = this._model.drawables.indices;
        return indicesArray[drawableIndex];
    };
    CubismModel.prototype.getDrawableVertexPositions = function (drawableIndex) {
        var verticesArray = this._model.drawables.vertexPositions;
        return verticesArray[drawableIndex];
    };
    CubismModel.prototype.getDrawableVertexUvs = function (drawableIndex) {
        var uvsArray = this._model.drawables.vertexUvs;
        return uvsArray[drawableIndex];
    };
    CubismModel.prototype.getDrawableOpacity = function (drawableIndex) {
        var opacities = this._model.drawables.opacities;
        return opacities[drawableIndex];
    };
    CubismModel.prototype.getDrawableMultiplyColor = function (drawableIndex) {
        var multiplyColors = this._model.drawables.multiplyColors;
        var index = drawableIndex * 4;
        var multiplyColor = new cubismrenderer_1.CubismTextureColor();
        multiplyColor.R = multiplyColors[index];
        multiplyColor.G = multiplyColors[index + 1];
        multiplyColor.B = multiplyColors[index + 2];
        multiplyColor.A = multiplyColors[index + 3];
        return multiplyColor;
    };
    CubismModel.prototype.getDrawableScreenColor = function (drawableIndex) {
        var screenColors = this._model.drawables.screenColors;
        var index = drawableIndex * 4;
        var screenColor = new cubismrenderer_1.CubismTextureColor();
        screenColor.R = screenColors[index];
        screenColor.G = screenColors[index + 1];
        screenColor.B = screenColors[index + 2];
        screenColor.A = screenColors[index + 3];
        return screenColor;
    };
    CubismModel.prototype.getDrawableParentPartIndex = function (drawableIndex) {
        return this._model.drawables.parentPartIndices[drawableIndex];
    };
    CubismModel.prototype.getDrawableCulling = function (drawableIndex) {
        var constantFlags = this._model.drawables.constantFlags;
        return !Live2DCubismCore.Utils.hasIsDoubleSidedBit(constantFlags[drawableIndex]);
    };
    CubismModel.prototype.getDrawableBlendMode = function (drawableIndex) {
        var constantFlags = this._model.drawables.constantFlags;
        return Live2DCubismCore.Utils.hasBlendAdditiveBit(constantFlags[drawableIndex])
            ? cubismrenderer_1.CubismBlendMode.CubismBlendMode_Additive
            : Live2DCubismCore.Utils.hasBlendMultiplicativeBit(constantFlags[drawableIndex])
                ? cubismrenderer_1.CubismBlendMode.CubismBlendMode_Multiplicative
                : cubismrenderer_1.CubismBlendMode.CubismBlendMode_Normal;
    };
    CubismModel.prototype.getDrawableInvertedMaskBit = function (drawableIndex) {
        var constantFlags = this._model.drawables.constantFlags;
        return Live2DCubismCore.Utils.hasIsInvertedMaskBit(constantFlags[drawableIndex]);
    };
    CubismModel.prototype.getDrawableMasks = function () {
        var masks = this._model.drawables.masks;
        return masks;
    };
    CubismModel.prototype.getDrawableMaskCounts = function () {
        var maskCounts = this._model.drawables.maskCounts;
        return maskCounts;
    };
    CubismModel.prototype.isUsingMasking = function () {
        for (var d = 0; d < this._model.drawables.count; ++d) {
            if (this._model.drawables.maskCounts[d] <= 0) {
                continue;
            }
            return true;
        }
        return false;
    };
    CubismModel.prototype.getDrawableDynamicFlagIsVisible = function (drawableIndex) {
        var dynamicFlags = this._model.drawables.dynamicFlags;
        return Live2DCubismCore.Utils.hasIsVisibleBit(dynamicFlags[drawableIndex]);
    };
    CubismModel.prototype.getDrawableDynamicFlagVisibilityDidChange = function (drawableIndex) {
        var dynamicFlags = this._model.drawables.dynamicFlags;
        return Live2DCubismCore.Utils.hasVisibilityDidChangeBit(dynamicFlags[drawableIndex]);
    };
    CubismModel.prototype.getDrawableDynamicFlagOpacityDidChange = function (drawableIndex) {
        var dynamicFlags = this._model.drawables.dynamicFlags;
        return Live2DCubismCore.Utils.hasOpacityDidChangeBit(dynamicFlags[drawableIndex]);
    };
    CubismModel.prototype.getDrawableDynamicFlagRenderOrderDidChange = function (drawableIndex) {
        var dynamicFlags = this._model.drawables.dynamicFlags;
        return Live2DCubismCore.Utils.hasRenderOrderDidChangeBit(dynamicFlags[drawableIndex]);
    };
    CubismModel.prototype.getDrawableDynamicFlagBlendColorDidChange = function (drawableIndex) {
        var dynamicFlags = this._model.drawables.dynamicFlags;
        return Live2DCubismCore.Utils.hasBlendColorDidChangeBit(dynamicFlags[drawableIndex]);
    };
    CubismModel.prototype.loadParameters = function () {
        var parameterCount = this._model.parameters.count;
        var savedParameterCount = this._savedParameters.getSize();
        if (parameterCount > savedParameterCount) {
            parameterCount = savedParameterCount;
        }
        for (var i = 0; i < parameterCount; ++i) {
            this._parameterValues[i] = this._savedParameters.at(i);
        }
    };
    CubismModel.prototype.initialize = function () {
        (0, cubismdebug_1.CSM_ASSERT)(this._model);
        this._parameterValues = this._model.parameters.values;
        this._partOpacities = this._model.parts.opacities;
        this._parameterMaximumValues = this._model.parameters.maximumValues;
        this._parameterMinimumValues = this._model.parameters.minimumValues;
        {
            var parameterIds = this._model.parameters.ids;
            var parameterCount = this._model.parameters.count;
            this._parameterIds.prepareCapacity(parameterCount);
            for (var i = 0; i < parameterCount; ++i) {
                this._parameterIds.pushBack(live2dcubismframework_1.CubismFramework.getIdManager().getId(parameterIds[i]));
            }
        }
        {
            var partIds = this._model.parts.ids;
            var partCount = this._model.parts.count;
            this._partIds.prepareCapacity(partCount);
            for (var i = 0; i < partCount; ++i) {
                this._partIds.pushBack(live2dcubismframework_1.CubismFramework.getIdManager().getId(partIds[i]));
            }
        }
        {
            var drawableIds = this._model.drawables.ids;
            var drawableCount = this._model.drawables.count;
            this._userMultiplyColors = new csmvector_1.csmVector();
            this._userMultiplyColors.updateSize(drawableCount, DrawableColorData, true);
            this._userScreenColors = new csmvector_1.csmVector();
            this._userScreenColors.updateSize(drawableCount, DrawableColorData, true);
            this._drawableIds.prepareCapacity(drawableCount);
            for (var i = 0; i < drawableCount; ++i) {
                this._drawableIds.pushBack(live2dcubismframework_1.CubismFramework.getIdManager().getId(drawableIds[i]));
                this.setMultiplyColorByRGBA(i, 1.0, 1.0, 1.0, 1.0);
                this.setScreenColorByRGBA(i, 0.0, 0.0, 0.0, 1.0);
            }
        }
    };
    CubismModel.prototype.release = function () {
        this._model.release();
        this._model = null;
    };
    return CubismModel;
}());
exports.CubismModel = CubismModel;
var $ = __importStar(__webpack_require__(/*! ./cubismmodel */ "./vendor/Framework/src/model/cubismmodel.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismModel = $.CubismModel;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/model/cubismmodeluserdata.ts":
/*!***********************************************************!*\
  !*** ./vendor/Framework/src/model/cubismmodeluserdata.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismModelUserData = exports.CubismModelUserDataNode = void 0;
var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "./vendor/Framework/src/live2dcubismframework.ts");
var csmstring_1 = __webpack_require__(/*! ../type/csmstring */ "./vendor/Framework/src/type/csmstring.ts");
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "./vendor/Framework/src/type/csmvector.ts");
var cubismmodeluserdatajson_1 = __webpack_require__(/*! ./cubismmodeluserdatajson */ "./vendor/Framework/src/model/cubismmodeluserdatajson.ts");
var ArtMesh = 'ArtMesh';
var CubismModelUserDataNode = (function () {
    function CubismModelUserDataNode() {
    }
    return CubismModelUserDataNode;
}());
exports.CubismModelUserDataNode = CubismModelUserDataNode;
var CubismModelUserData = (function () {
    function CubismModelUserData() {
        this._userDataNodes = new csmvector_1.csmVector();
        this._artMeshUserDataNode = new csmvector_1.csmVector();
    }
    CubismModelUserData.create = function (buffer, size) {
        var ret = new CubismModelUserData();
        ret.parseUserData(buffer, size);
        return ret;
    };
    CubismModelUserData.delete = function (modelUserData) {
        if (modelUserData != null) {
            modelUserData.release();
            modelUserData = null;
        }
    };
    CubismModelUserData.prototype.getArtMeshUserDatas = function () {
        return this._artMeshUserDataNode;
    };
    CubismModelUserData.prototype.parseUserData = function (buffer, size) {
        var json = new cubismmodeluserdatajson_1.CubismModelUserDataJson(buffer, size);
        var typeOfArtMesh = live2dcubismframework_1.CubismFramework.getIdManager().getId(ArtMesh);
        var nodeCount = json.getUserDataCount();
        for (var i = 0; i < nodeCount; i++) {
            var addNode = new CubismModelUserDataNode();
            addNode.targetId = json.getUserDataId(i);
            addNode.targetType = live2dcubismframework_1.CubismFramework.getIdManager().getId(json.getUserDataTargetType(i));
            addNode.value = new csmstring_1.csmString(json.getUserDataValue(i));
            this._userDataNodes.pushBack(addNode);
            if (addNode.targetType == typeOfArtMesh) {
                this._artMeshUserDataNode.pushBack(addNode);
            }
        }
        json.release();
        json = void 0;
    };
    CubismModelUserData.prototype.release = function () {
        for (var i = 0; i < this._userDataNodes.getSize(); ++i) {
            this._userDataNodes.set(i, null);
        }
        this._userDataNodes = null;
    };
    return CubismModelUserData;
}());
exports.CubismModelUserData = CubismModelUserData;
var $ = __importStar(__webpack_require__(/*! ./cubismmodeluserdata */ "./vendor/Framework/src/model/cubismmodeluserdata.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismModelUserData = $.CubismModelUserData;
    Live2DCubismFramework.CubismModelUserDataNode = $.CubismModelUserDataNode;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/model/cubismmodeluserdatajson.ts":
/*!***************************************************************!*\
  !*** ./vendor/Framework/src/model/cubismmodeluserdatajson.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismModelUserDataJson = void 0;
var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "./vendor/Framework/src/live2dcubismframework.ts");
var cubismjson_1 = __webpack_require__(/*! ../utils/cubismjson */ "./vendor/Framework/src/utils/cubismjson.ts");
var Meta = 'Meta';
var UserDataCount = 'UserDataCount';
var TotalUserDataSize = 'TotalUserDataSize';
var UserData = 'UserData';
var Target = 'Target';
var Id = 'Id';
var Value = 'Value';
var CubismModelUserDataJson = (function () {
    function CubismModelUserDataJson(buffer, size) {
        this._json = cubismjson_1.CubismJson.create(buffer, size);
    }
    CubismModelUserDataJson.prototype.release = function () {
        cubismjson_1.CubismJson.delete(this._json);
    };
    CubismModelUserDataJson.prototype.getUserDataCount = function () {
        return this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(UserDataCount)
            .toInt();
    };
    CubismModelUserDataJson.prototype.getTotalUserDataSize = function () {
        return this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(TotalUserDataSize)
            .toInt();
    };
    CubismModelUserDataJson.prototype.getUserDataTargetType = function (i) {
        return this._json
            .getRoot()
            .getValueByString(UserData)
            .getValueByIndex(i)
            .getValueByString(Target)
            .getRawString();
    };
    CubismModelUserDataJson.prototype.getUserDataId = function (i) {
        return live2dcubismframework_1.CubismFramework.getIdManager().getId(this._json
            .getRoot()
            .getValueByString(UserData)
            .getValueByIndex(i)
            .getValueByString(Id)
            .getRawString());
    };
    CubismModelUserDataJson.prototype.getUserDataValue = function (i) {
        return this._json
            .getRoot()
            .getValueByString(UserData)
            .getValueByIndex(i)
            .getValueByString(Value)
            .getRawString();
    };
    return CubismModelUserDataJson;
}());
exports.CubismModelUserDataJson = CubismModelUserDataJson;
var $ = __importStar(__webpack_require__(/*! ./cubismmodeluserdatajson */ "./vendor/Framework/src/model/cubismmodeluserdatajson.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismModelUserDataJson = $.CubismModelUserDataJson;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/model/cubismusermodel.ts":
/*!*******************************************************!*\
  !*** ./vendor/Framework/src/model/cubismusermodel.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismUserModel = void 0;
var cubismbreath_1 = __webpack_require__(/*! ../effect/cubismbreath */ "./vendor/Framework/src/effect/cubismbreath.ts");
var cubismeyeblink_1 = __webpack_require__(/*! ../effect/cubismeyeblink */ "./vendor/Framework/src/effect/cubismeyeblink.ts");
var cubismpose_1 = __webpack_require__(/*! ../effect/cubismpose */ "./vendor/Framework/src/effect/cubismpose.ts");
var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "./vendor/Framework/src/live2dcubismframework.ts");
var cubismmodelmatrix_1 = __webpack_require__(/*! ../math/cubismmodelmatrix */ "./vendor/Framework/src/math/cubismmodelmatrix.ts");
var cubismtargetpoint_1 = __webpack_require__(/*! ../math/cubismtargetpoint */ "./vendor/Framework/src/math/cubismtargetpoint.ts");
var cubismexpressionmotion_1 = __webpack_require__(/*! ../motion/cubismexpressionmotion */ "./vendor/Framework/src/motion/cubismexpressionmotion.ts");
var cubismmotion_1 = __webpack_require__(/*! ../motion/cubismmotion */ "./vendor/Framework/src/motion/cubismmotion.ts");
var cubismmotionmanager_1 = __webpack_require__(/*! ../motion/cubismmotionmanager */ "./vendor/Framework/src/motion/cubismmotionmanager.ts");
var cubismphysics_1 = __webpack_require__(/*! ../physics/cubismphysics */ "./vendor/Framework/src/physics/cubismphysics.ts");
var cubismrenderer_webgl_1 = __webpack_require__(/*! ../rendering/cubismrenderer_webgl */ "./vendor/Framework/src/rendering/cubismrenderer_webgl.ts");
var cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ "./vendor/Framework/src/utils/cubismdebug.ts");
var cubismmoc_1 = __webpack_require__(/*! ./cubismmoc */ "./vendor/Framework/src/model/cubismmoc.ts");
var cubismmodeluserdata_1 = __webpack_require__(/*! ./cubismmodeluserdata */ "./vendor/Framework/src/model/cubismmodeluserdata.ts");
var CubismUserModel = (function () {
    function CubismUserModel() {
        this.loadMotion = function (buffer, size, name, onFinishedMotionHandler) { return cubismmotion_1.CubismMotion.create(buffer, size, onFinishedMotionHandler); };
        this._moc = null;
        this._model = null;
        this._motionManager = null;
        this._expressionManager = null;
        this._eyeBlink = null;
        this._breath = null;
        this._modelMatrix = null;
        this._pose = null;
        this._dragManager = null;
        this._physics = null;
        this._modelUserData = null;
        this._initialized = false;
        this._updating = false;
        this._opacity = 1.0;
        this._lipsync = true;
        this._lastLipSyncValue = 0.0;
        this._dragX = 0.0;
        this._dragY = 0.0;
        this._accelerationX = 0.0;
        this._accelerationY = 0.0;
        this._accelerationZ = 0.0;
        this._debugMode = false;
        this._renderer = null;
        this._motionManager = new cubismmotionmanager_1.CubismMotionManager();
        this._motionManager.setEventCallback(CubismUserModel.cubismDefaultMotionEventCallback, this);
        this._expressionManager = new cubismmotionmanager_1.CubismMotionManager();
        this._dragManager = new cubismtargetpoint_1.CubismTargetPoint();
    }
    CubismUserModel.prototype.isInitialized = function () {
        return this._initialized;
    };
    CubismUserModel.prototype.setInitialized = function (v) {
        this._initialized = v;
    };
    CubismUserModel.prototype.isUpdating = function () {
        return this._updating;
    };
    CubismUserModel.prototype.setUpdating = function (v) {
        this._updating = v;
    };
    CubismUserModel.prototype.setDragging = function (x, y) {
        this._dragManager.set(x, y);
    };
    CubismUserModel.prototype.setAcceleration = function (x, y, z) {
        this._accelerationX = x;
        this._accelerationY = y;
        this._accelerationZ = z;
    };
    CubismUserModel.prototype.getModelMatrix = function () {
        return this._modelMatrix;
    };
    CubismUserModel.prototype.setOpacity = function (a) {
        this._opacity = a;
    };
    CubismUserModel.prototype.getOpacity = function () {
        return this._opacity;
    };
    CubismUserModel.prototype.loadModel = function (buffer) {
        this._moc = cubismmoc_1.CubismMoc.create(buffer);
        if (this._moc == null) {
            (0, cubismdebug_1.CubismLogError)('Failed to CubismMoc.create().');
            return;
        }
        this._model = this._moc.createModel();
        if (this._model == null) {
            (0, cubismdebug_1.CubismLogError)('Failed to CreateModel().');
            return;
        }
        this._model.saveParameters();
        this._modelMatrix = new cubismmodelmatrix_1.CubismModelMatrix(this._model.getCanvasWidth(), this._model.getCanvasHeight());
    };
    CubismUserModel.prototype.loadExpression = function (buffer, size, name) {
        return cubismexpressionmotion_1.CubismExpressionMotion.create(buffer, size);
    };
    CubismUserModel.prototype.loadPose = function (buffer, size) {
        this._pose = cubismpose_1.CubismPose.create(buffer, size);
    };
    CubismUserModel.prototype.loadUserData = function (buffer, size) {
        this._modelUserData = cubismmodeluserdata_1.CubismModelUserData.create(buffer, size);
    };
    CubismUserModel.prototype.loadPhysics = function (buffer, size) {
        this._physics = cubismphysics_1.CubismPhysics.create(buffer, size);
    };
    CubismUserModel.prototype.isHit = function (drawableId, pointX, pointY) {
        var drawIndex = this._model.getDrawableIndex(drawableId);
        if (drawIndex < 0) {
            return false;
        }
        var count = this._model.getDrawableVertexCount(drawIndex);
        var vertices = this._model.getDrawableVertices(drawIndex);
        var left = vertices[0];
        var right = vertices[0];
        var top = vertices[1];
        var bottom = vertices[1];
        for (var j = 1; j < count; ++j) {
            var x = vertices[live2dcubismframework_1.Constant.vertexOffset + j * live2dcubismframework_1.Constant.vertexStep];
            var y = vertices[live2dcubismframework_1.Constant.vertexOffset + j * live2dcubismframework_1.Constant.vertexStep + 1];
            if (x < left) {
                left = x;
            }
            if (x > right) {
                right = x;
            }
            if (y < top) {
                top = y;
            }
            if (y > bottom) {
                bottom = y;
            }
        }
        var tx = this._modelMatrix.invertTransformX(pointX);
        var ty = this._modelMatrix.invertTransformY(pointY);
        return left <= tx && tx <= right && top <= ty && ty <= bottom;
    };
    CubismUserModel.prototype.getModel = function () {
        return this._model;
    };
    CubismUserModel.prototype.getRenderer = function () {
        return this._renderer;
    };
    CubismUserModel.prototype.createRenderer = function () {
        if (this._renderer) {
            this.deleteRenderer();
        }
        this._renderer = new cubismrenderer_webgl_1.CubismRenderer_WebGL();
        this._renderer.initialize(this._model);
    };
    CubismUserModel.prototype.deleteRenderer = function () {
        if (this._renderer != null) {
            this._renderer.release();
            this._renderer = null;
        }
    };
    CubismUserModel.prototype.motionEventFired = function (eventValue) {
        (0, cubismdebug_1.CubismLogInfo)('{0}', eventValue.s);
    };
    CubismUserModel.cubismDefaultMotionEventCallback = function (caller, eventValue, customData) {
        var model = customData;
        if (model != null) {
            model.motionEventFired(eventValue);
        }
    };
    CubismUserModel.prototype.release = function () {
        if (this._motionManager != null) {
            this._motionManager.release();
            this._motionManager = null;
        }
        if (this._expressionManager != null) {
            this._expressionManager.release();
            this._expressionManager = null;
        }
        if (this._moc != null) {
            this._moc.deleteModel(this._model);
            this._moc.release();
            this._moc = null;
        }
        this._modelMatrix = null;
        cubismpose_1.CubismPose.delete(this._pose);
        cubismeyeblink_1.CubismEyeBlink.delete(this._eyeBlink);
        cubismbreath_1.CubismBreath.delete(this._breath);
        this._dragManager = null;
        cubismphysics_1.CubismPhysics.delete(this._physics);
        cubismmodeluserdata_1.CubismModelUserData.delete(this._modelUserData);
        this.deleteRenderer();
    };
    return CubismUserModel;
}());
exports.CubismUserModel = CubismUserModel;
var $ = __importStar(__webpack_require__(/*! ./cubismusermodel */ "./vendor/Framework/src/model/cubismusermodel.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismUserModel = $.CubismUserModel;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/motion/acubismmotion.ts":
/*!******************************************************!*\
  !*** ./vendor/Framework/src/motion/acubismmotion.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.ACubismMotion = void 0;
var cubismmath_1 = __webpack_require__(/*! ../math/cubismmath */ "./vendor/Framework/src/math/cubismmath.ts");
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "./vendor/Framework/src/type/csmvector.ts");
var cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ "./vendor/Framework/src/utils/cubismdebug.ts");
var ACubismMotion = (function () {
    function ACubismMotion() {
        var _this = this;
        this.setFinishedMotionHandler = function (onFinishedMotionHandler) { return (_this._onFinishedMotion = onFinishedMotionHandler); };
        this.getFinishedMotionHandler = function () { return _this._onFinishedMotion; };
        this._fadeInSeconds = -1.0;
        this._fadeOutSeconds = -1.0;
        this._weight = 1.0;
        this._offsetSeconds = 0.0;
        this._firedEventValues = new csmvector_1.csmVector();
    }
    ACubismMotion.delete = function (motion) {
        motion.release();
        motion = null;
    };
    ACubismMotion.prototype.release = function () {
        this._weight = 0.0;
    };
    ACubismMotion.prototype.updateParameters = function (model, motionQueueEntry, userTimeSeconds) {
        if (!motionQueueEntry.isAvailable() || motionQueueEntry.isFinished()) {
            return;
        }
        if (!motionQueueEntry.isStarted()) {
            motionQueueEntry.setIsStarted(true);
            motionQueueEntry.setStartTime(userTimeSeconds - this._offsetSeconds);
            motionQueueEntry.setFadeInStartTime(userTimeSeconds);
            var duration = this.getDuration();
            if (motionQueueEntry.getEndTime() < 0) {
                motionQueueEntry.setEndTime(duration <= 0 ? -1 : motionQueueEntry.getStartTime() + duration);
            }
        }
        var fadeWeight = this._weight;
        var fadeIn = this._fadeInSeconds == 0.0
            ? 1.0
            : cubismmath_1.CubismMath.getEasingSine((userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /
                this._fadeInSeconds);
        var fadeOut = this._fadeOutSeconds == 0.0 || motionQueueEntry.getEndTime() < 0.0
            ? 1.0
            : cubismmath_1.CubismMath.getEasingSine((motionQueueEntry.getEndTime() - userTimeSeconds) /
                this._fadeOutSeconds);
        fadeWeight = fadeWeight * fadeIn * fadeOut;
        motionQueueEntry.setState(userTimeSeconds, fadeWeight);
        (0, cubismdebug_1.CSM_ASSERT)(0.0 <= fadeWeight && fadeWeight <= 1.0);
        this.doUpdateParameters(model, userTimeSeconds, fadeWeight, motionQueueEntry);
        if (motionQueueEntry.getEndTime() > 0 &&
            motionQueueEntry.getEndTime() < userTimeSeconds) {
            motionQueueEntry.setIsFinished(true);
        }
    };
    ACubismMotion.prototype.setFadeInTime = function (fadeInSeconds) {
        this._fadeInSeconds = fadeInSeconds;
    };
    ACubismMotion.prototype.setFadeOutTime = function (fadeOutSeconds) {
        this._fadeOutSeconds = fadeOutSeconds;
    };
    ACubismMotion.prototype.getFadeOutTime = function () {
        return this._fadeOutSeconds;
    };
    ACubismMotion.prototype.getFadeInTime = function () {
        return this._fadeInSeconds;
    };
    ACubismMotion.prototype.setWeight = function (weight) {
        this._weight = weight;
    };
    ACubismMotion.prototype.getWeight = function () {
        return this._weight;
    };
    ACubismMotion.prototype.getDuration = function () {
        return -1.0;
    };
    ACubismMotion.prototype.getLoopDuration = function () {
        return -1.0;
    };
    ACubismMotion.prototype.setOffsetTime = function (offsetSeconds) {
        this._offsetSeconds = offsetSeconds;
    };
    ACubismMotion.prototype.getFiredEvent = function (beforeCheckTimeSeconds, motionTimeSeconds) {
        return this._firedEventValues;
    };
    return ACubismMotion;
}());
exports.ACubismMotion = ACubismMotion;
var $ = __importStar(__webpack_require__(/*! ./acubismmotion */ "./vendor/Framework/src/motion/acubismmotion.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.ACubismMotion = $.ACubismMotion;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/motion/cubismexpressionmotion.ts":
/*!***************************************************************!*\
  !*** ./vendor/Framework/src/motion/cubismexpressionmotion.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.ExpressionParameter = exports.ExpressionBlendType = exports.CubismExpressionMotion = void 0;
var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "./vendor/Framework/src/live2dcubismframework.ts");
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "./vendor/Framework/src/type/csmvector.ts");
var cubismjson_1 = __webpack_require__(/*! ../utils/cubismjson */ "./vendor/Framework/src/utils/cubismjson.ts");
var acubismmotion_1 = __webpack_require__(/*! ./acubismmotion */ "./vendor/Framework/src/motion/acubismmotion.ts");
var ExpressionKeyFadeIn = 'FadeInTime';
var ExpressionKeyFadeOut = 'FadeOutTime';
var ExpressionKeyParameters = 'Parameters';
var ExpressionKeyId = 'Id';
var ExpressionKeyValue = 'Value';
var ExpressionKeyBlend = 'Blend';
var BlendValueAdd = 'Add';
var BlendValueMultiply = 'Multiply';
var BlendValueOverwrite = 'Overwrite';
var DefaultFadeTime = 1.0;
var CubismExpressionMotion = (function (_super) {
    __extends(CubismExpressionMotion, _super);
    function CubismExpressionMotion() {
        var _this = _super.call(this) || this;
        _this._parameters = new csmvector_1.csmVector();
        return _this;
    }
    CubismExpressionMotion.create = function (buffer, size) {
        var expression = new CubismExpressionMotion();
        var json = cubismjson_1.CubismJson.create(buffer, size);
        var root = json.getRoot();
        expression.setFadeInTime(root.getValueByString(ExpressionKeyFadeIn).toFloat(DefaultFadeTime));
        expression.setFadeOutTime(root.getValueByString(ExpressionKeyFadeOut).toFloat(DefaultFadeTime));
        var parameterCount = root
            .getValueByString(ExpressionKeyParameters)
            .getSize();
        expression._parameters.prepareCapacity(parameterCount);
        for (var i = 0; i < parameterCount; ++i) {
            var param = root
                .getValueByString(ExpressionKeyParameters)
                .getValueByIndex(i);
            var parameterId = live2dcubismframework_1.CubismFramework.getIdManager().getId(param.getValueByString(ExpressionKeyId).getRawString());
            var value = param
                .getValueByString(ExpressionKeyValue)
                .toFloat();
            var blendType = void 0;
            if (param.getValueByString(ExpressionKeyBlend).isNull() ||
                param.getValueByString(ExpressionKeyBlend).getString() == BlendValueAdd) {
                blendType = ExpressionBlendType.ExpressionBlendType_Add;
            }
            else if (param.getValueByString(ExpressionKeyBlend).getString() ==
                BlendValueMultiply) {
                blendType = ExpressionBlendType.ExpressionBlendType_Multiply;
            }
            else if (param.getValueByString(ExpressionKeyBlend).getString() ==
                BlendValueOverwrite) {
                blendType = ExpressionBlendType.ExpressionBlendType_Overwrite;
            }
            else {
                blendType = ExpressionBlendType.ExpressionBlendType_Add;
            }
            var item = new ExpressionParameter();
            item.parameterId = parameterId;
            item.blendType = blendType;
            item.value = value;
            expression._parameters.pushBack(item);
        }
        cubismjson_1.CubismJson.delete(json);
        return expression;
    };
    CubismExpressionMotion.prototype.doUpdateParameters = function (model, userTimeSeconds, weight, motionQueueEntry) {
        for (var i = 0; i < this._parameters.getSize(); ++i) {
            var parameter = this._parameters.at(i);
            switch (parameter.blendType) {
                case ExpressionBlendType.ExpressionBlendType_Add: {
                    model.addParameterValueById(parameter.parameterId, parameter.value, weight);
                    break;
                }
                case ExpressionBlendType.ExpressionBlendType_Multiply: {
                    model.multiplyParameterValueById(parameter.parameterId, parameter.value, weight);
                    break;
                }
                case ExpressionBlendType.ExpressionBlendType_Overwrite: {
                    model.setParameterValueById(parameter.parameterId, parameter.value, weight);
                    break;
                }
                default:
                    break;
            }
        }
    };
    return CubismExpressionMotion;
}(acubismmotion_1.ACubismMotion));
exports.CubismExpressionMotion = CubismExpressionMotion;
var ExpressionBlendType;
(function (ExpressionBlendType) {
    ExpressionBlendType[ExpressionBlendType["ExpressionBlendType_Add"] = 0] = "ExpressionBlendType_Add";
    ExpressionBlendType[ExpressionBlendType["ExpressionBlendType_Multiply"] = 1] = "ExpressionBlendType_Multiply";
    ExpressionBlendType[ExpressionBlendType["ExpressionBlendType_Overwrite"] = 2] = "ExpressionBlendType_Overwrite";
})(ExpressionBlendType = exports.ExpressionBlendType || (exports.ExpressionBlendType = {}));
var ExpressionParameter = (function () {
    function ExpressionParameter() {
    }
    return ExpressionParameter;
}());
exports.ExpressionParameter = ExpressionParameter;
var $ = __importStar(__webpack_require__(/*! ./cubismexpressionmotion */ "./vendor/Framework/src/motion/cubismexpressionmotion.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismExpressionMotion = $.CubismExpressionMotion;
    Live2DCubismFramework.ExpressionBlendType = $.ExpressionBlendType;
    Live2DCubismFramework.ExpressionParameter = $.ExpressionParameter;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/motion/cubismmotion.ts":
/*!*****************************************************!*\
  !*** ./vendor/Framework/src/motion/cubismmotion.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismMotion = void 0;
var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "./vendor/Framework/src/live2dcubismframework.ts");
var cubismmath_1 = __webpack_require__(/*! ../math/cubismmath */ "./vendor/Framework/src/math/cubismmath.ts");
var csmstring_1 = __webpack_require__(/*! ../type/csmstring */ "./vendor/Framework/src/type/csmstring.ts");
var cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ "./vendor/Framework/src/utils/cubismdebug.ts");
var acubismmotion_1 = __webpack_require__(/*! ./acubismmotion */ "./vendor/Framework/src/motion/acubismmotion.ts");
var cubismmotioninternal_1 = __webpack_require__(/*! ./cubismmotioninternal */ "./vendor/Framework/src/motion/cubismmotioninternal.ts");
var cubismmotionjson_1 = __webpack_require__(/*! ./cubismmotionjson */ "./vendor/Framework/src/motion/cubismmotionjson.ts");
var EffectNameEyeBlink = 'EyeBlink';
var EffectNameLipSync = 'LipSync';
var TargetNameModel = 'Model';
var TargetNameParameter = 'Parameter';
var TargetNamePartOpacity = 'PartOpacity';
var UseOldBeziersCurveMotion = false;
function lerpPoints(a, b, t) {
    var result = new cubismmotioninternal_1.CubismMotionPoint();
    result.time = a.time + (b.time - a.time) * t;
    result.value = a.value + (b.value - a.value) * t;
    return result;
}
function linearEvaluate(points, time) {
    var t = (time - points[0].time) / (points[1].time - points[0].time);
    if (t < 0.0) {
        t = 0.0;
    }
    return points[0].value + (points[1].value - points[0].value) * t;
}
function bezierEvaluate(points, time) {
    var t = (time - points[0].time) / (points[3].time - points[0].time);
    if (t < 0.0) {
        t = 0.0;
    }
    var p01 = lerpPoints(points[0], points[1], t);
    var p12 = lerpPoints(points[1], points[2], t);
    var p23 = lerpPoints(points[2], points[3], t);
    var p012 = lerpPoints(p01, p12, t);
    var p123 = lerpPoints(p12, p23, t);
    return lerpPoints(p012, p123, t).value;
}
function bezierEvaluateBinarySearch(points, time) {
    var x_error = 0.01;
    var x = time;
    var x1 = points[0].time;
    var x2 = points[3].time;
    var cx1 = points[1].time;
    var cx2 = points[2].time;
    var ta = 0.0;
    var tb = 1.0;
    var t = 0.0;
    var i = 0;
    for (var var33 = true; i < 20; ++i) {
        if (x < x1 + x_error) {
            t = ta;
            break;
        }
        if (x2 - x_error < x) {
            t = tb;
            break;
        }
        var centerx = (cx1 + cx2) * 0.5;
        cx1 = (x1 + cx1) * 0.5;
        cx2 = (x2 + cx2) * 0.5;
        var ctrlx12 = (cx1 + centerx) * 0.5;
        var ctrlx21 = (cx2 + centerx) * 0.5;
        centerx = (ctrlx12 + ctrlx21) * 0.5;
        if (x < centerx) {
            tb = (ta + tb) * 0.5;
            if (centerx - x_error < x) {
                t = tb;
                break;
            }
            x2 = centerx;
            cx2 = ctrlx12;
        }
        else {
            ta = (ta + tb) * 0.5;
            if (x < centerx + x_error) {
                t = ta;
                break;
            }
            x1 = centerx;
            cx1 = ctrlx21;
        }
    }
    if (i == 20) {
        t = (ta + tb) * 0.5;
    }
    if (t < 0.0) {
        t = 0.0;
    }
    if (t > 1.0) {
        t = 1.0;
    }
    var p01 = lerpPoints(points[0], points[1], t);
    var p12 = lerpPoints(points[1], points[2], t);
    var p23 = lerpPoints(points[2], points[3], t);
    var p012 = lerpPoints(p01, p12, t);
    var p123 = lerpPoints(p12, p23, t);
    return lerpPoints(p012, p123, t).value;
}
function bezierEvaluateCardanoInterpretation(points, time) {
    var x = time;
    var x1 = points[0].time;
    var x2 = points[3].time;
    var cx1 = points[1].time;
    var cx2 = points[2].time;
    var a = x2 - 3.0 * cx2 + 3.0 * cx1 - x1;
    var b = 3.0 * cx2 - 6.0 * cx1 + 3.0 * x1;
    var c = 3.0 * cx1 - 3.0 * x1;
    var d = x1 - x;
    var t = cubismmath_1.CubismMath.cardanoAlgorithmForBezier(a, b, c, d);
    var p01 = lerpPoints(points[0], points[1], t);
    var p12 = lerpPoints(points[1], points[2], t);
    var p23 = lerpPoints(points[2], points[3], t);
    var p012 = lerpPoints(p01, p12, t);
    var p123 = lerpPoints(p12, p23, t);
    return lerpPoints(p012, p123, t).value;
}
function steppedEvaluate(points, time) {
    return points[0].value;
}
function inverseSteppedEvaluate(points, time) {
    return points[1].value;
}
function evaluateCurve(motionData, index, time) {
    var curve = motionData.curves.at(index);
    var target = -1;
    var totalSegmentCount = curve.baseSegmentIndex + curve.segmentCount;
    var pointPosition = 0;
    for (var i = curve.baseSegmentIndex; i < totalSegmentCount; ++i) {
        pointPosition =
            motionData.segments.at(i).basePointIndex +
                (motionData.segments.at(i).segmentType ==
                    cubismmotioninternal_1.CubismMotionSegmentType.CubismMotionSegmentType_Bezier
                    ? 3
                    : 1);
        if (motionData.points.at(pointPosition).time > time) {
            target = i;
            break;
        }
    }
    if (target == -1) {
        return motionData.points.at(pointPosition).value;
    }
    var segment = motionData.segments.at(target);
    return segment.evaluate(motionData.points.get(segment.basePointIndex), time);
}
var CubismMotion = (function (_super) {
    __extends(CubismMotion, _super);
    function CubismMotion() {
        var _this = _super.call(this) || this;
        _this._sourceFrameRate = 30.0;
        _this._loopDurationSeconds = -1.0;
        _this._isLoop = false;
        _this._isLoopFadeIn = true;
        _this._lastWeight = 0.0;
        _this._motionData = null;
        _this._modelCurveIdEyeBlink = null;
        _this._modelCurveIdLipSync = null;
        _this._eyeBlinkParameterIds = null;
        _this._lipSyncParameterIds = null;
        return _this;
    }
    CubismMotion.create = function (buffer, size, onFinishedMotionHandler) {
        var ret = new CubismMotion();
        ret.parse(buffer, size);
        ret._sourceFrameRate = ret._motionData.fps;
        ret._loopDurationSeconds = ret._motionData.duration;
        ret._onFinishedMotion = onFinishedMotionHandler;
        return ret;
    };
    CubismMotion.prototype.doUpdateParameters = function (model, userTimeSeconds, fadeWeight, motionQueueEntry) {
        if (this._modelCurveIdEyeBlink == null) {
            this._modelCurveIdEyeBlink =
                live2dcubismframework_1.CubismFramework.getIdManager().getId(EffectNameEyeBlink);
        }
        if (this._modelCurveIdLipSync == null) {
            this._modelCurveIdLipSync =
                live2dcubismframework_1.CubismFramework.getIdManager().getId(EffectNameLipSync);
        }
        var timeOffsetSeconds = userTimeSeconds - motionQueueEntry.getStartTime();
        if (timeOffsetSeconds < 0.0) {
            timeOffsetSeconds = 0.0;
        }
        var lipSyncValue = Number.MAX_VALUE;
        var eyeBlinkValue = Number.MAX_VALUE;
        var MaxTargetSize = 64;
        var lipSyncFlags = 0;
        var eyeBlinkFlags = 0;
        if (this._eyeBlinkParameterIds.getSize() > MaxTargetSize) {
            (0, cubismdebug_1.CubismLogDebug)('too many eye blink targets : {0}', this._eyeBlinkParameterIds.getSize());
        }
        if (this._lipSyncParameterIds.getSize() > MaxTargetSize) {
            (0, cubismdebug_1.CubismLogDebug)('too many lip sync targets : {0}', this._lipSyncParameterIds.getSize());
        }
        var tmpFadeIn = this._fadeInSeconds <= 0.0
            ? 1.0
            : cubismmath_1.CubismMath.getEasingSine((userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /
                this._fadeInSeconds);
        var tmpFadeOut = this._fadeOutSeconds <= 0.0 || motionQueueEntry.getEndTime() < 0.0
            ? 1.0
            : cubismmath_1.CubismMath.getEasingSine((motionQueueEntry.getEndTime() - userTimeSeconds) /
                this._fadeOutSeconds);
        var value;
        var c, parameterIndex;
        var time = timeOffsetSeconds;
        if (this._isLoop) {
            while (time > this._motionData.duration) {
                time -= this._motionData.duration;
            }
        }
        var curves = this._motionData.curves;
        for (c = 0; c < this._motionData.curveCount &&
            curves.at(c).type ==
                cubismmotioninternal_1.CubismMotionCurveTarget.CubismMotionCurveTarget_Model; ++c) {
            value = evaluateCurve(this._motionData, c, time);
            if (curves.at(c).id == this._modelCurveIdEyeBlink) {
                eyeBlinkValue = value;
            }
            else if (curves.at(c).id == this._modelCurveIdLipSync) {
                lipSyncValue = value;
            }
        }
        var parameterMotionCurveCount = 0;
        for (; c < this._motionData.curveCount &&
            curves.at(c).type ==
                cubismmotioninternal_1.CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter; ++c) {
            parameterMotionCurveCount++;
            parameterIndex = model.getParameterIndex(curves.at(c).id);
            if (parameterIndex == -1) {
                continue;
            }
            var sourceValue = model.getParameterValueByIndex(parameterIndex);
            value = evaluateCurve(this._motionData, c, time);
            if (eyeBlinkValue != Number.MAX_VALUE) {
                for (var i = 0; i < this._eyeBlinkParameterIds.getSize() && i < MaxTargetSize; ++i) {
                    if (this._eyeBlinkParameterIds.at(i) == curves.at(c).id) {
                        value *= eyeBlinkValue;
                        eyeBlinkFlags |= 1 << i;
                        break;
                    }
                }
            }
            if (lipSyncValue != Number.MAX_VALUE) {
                for (var i = 0; i < this._lipSyncParameterIds.getSize() && i < MaxTargetSize; ++i) {
                    if (this._lipSyncParameterIds.at(i) == curves.at(c).id) {
                        value += lipSyncValue;
                        lipSyncFlags |= 1 << i;
                        break;
                    }
                }
            }
            var v = void 0;
            if (curves.at(c).fadeInTime < 0.0 && curves.at(c).fadeOutTime < 0.0) {
                v = sourceValue + (value - sourceValue) * fadeWeight;
            }
            else {
                var fin = void 0;
                var fout = void 0;
                if (curves.at(c).fadeInTime < 0.0) {
                    fin = tmpFadeIn;
                }
                else {
                    fin =
                        curves.at(c).fadeInTime == 0.0
                            ? 1.0
                            : cubismmath_1.CubismMath.getEasingSine((userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /
                                curves.at(c).fadeInTime);
                }
                if (curves.at(c).fadeOutTime < 0.0) {
                    fout = tmpFadeOut;
                }
                else {
                    fout =
                        curves.at(c).fadeOutTime == 0.0 ||
                            motionQueueEntry.getEndTime() < 0.0
                            ? 1.0
                            : cubismmath_1.CubismMath.getEasingSine((motionQueueEntry.getEndTime() - userTimeSeconds) /
                                curves.at(c).fadeOutTime);
                }
                var paramWeight = this._weight * fin * fout;
                v = sourceValue + (value - sourceValue) * paramWeight;
            }
            model.setParameterValueByIndex(parameterIndex, v, 1.0);
        }
        {
            if (eyeBlinkValue != Number.MAX_VALUE) {
                for (var i = 0; i < this._eyeBlinkParameterIds.getSize() && i < MaxTargetSize; ++i) {
                    var sourceValue = model.getParameterValueById(this._eyeBlinkParameterIds.at(i));
                    if ((eyeBlinkFlags >> i) & 0x01) {
                        continue;
                    }
                    var v = sourceValue + (eyeBlinkValue - sourceValue) * fadeWeight;
                    model.setParameterValueById(this._eyeBlinkParameterIds.at(i), v);
                }
            }
            if (lipSyncValue != Number.MAX_VALUE) {
                for (var i = 0; i < this._lipSyncParameterIds.getSize() && i < MaxTargetSize; ++i) {
                    var sourceValue = model.getParameterValueById(this._lipSyncParameterIds.at(i));
                    if ((lipSyncFlags >> i) & 0x01) {
                        continue;
                    }
                    var v = sourceValue + (lipSyncValue - sourceValue) * fadeWeight;
                    model.setParameterValueById(this._lipSyncParameterIds.at(i), v);
                }
            }
        }
        for (; c < this._motionData.curveCount &&
            curves.at(c).type ==
                cubismmotioninternal_1.CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity; ++c) {
            parameterIndex = model.getParameterIndex(curves.at(c).id);
            if (parameterIndex == -1) {
                continue;
            }
            value = evaluateCurve(this._motionData, c, time);
            model.setParameterValueByIndex(parameterIndex, value);
        }
        if (timeOffsetSeconds >= this._motionData.duration) {
            if (this._isLoop) {
                motionQueueEntry.setStartTime(userTimeSeconds);
                if (this._isLoopFadeIn) {
                    motionQueueEntry.setFadeInStartTime(userTimeSeconds);
                }
            }
            else {
                if (this._onFinishedMotion) {
                    this._onFinishedMotion(this);
                }
                motionQueueEntry.setIsFinished(true);
            }
        }
        this._lastWeight = fadeWeight;
    };
    CubismMotion.prototype.setIsLoop = function (loop) {
        this._isLoop = loop;
    };
    CubismMotion.prototype.isLoop = function () {
        return this._isLoop;
    };
    CubismMotion.prototype.setIsLoopFadeIn = function (loopFadeIn) {
        this._isLoopFadeIn = loopFadeIn;
    };
    CubismMotion.prototype.isLoopFadeIn = function () {
        return this._isLoopFadeIn;
    };
    CubismMotion.prototype.getDuration = function () {
        return this._isLoop ? -1.0 : this._loopDurationSeconds;
    };
    CubismMotion.prototype.getLoopDuration = function () {
        return this._loopDurationSeconds;
    };
    CubismMotion.prototype.setParameterFadeInTime = function (parameterId, value) {
        var curves = this._motionData.curves;
        for (var i = 0; i < this._motionData.curveCount; ++i) {
            if (parameterId == curves.at(i).id) {
                curves.at(i).fadeInTime = value;
                return;
            }
        }
    };
    CubismMotion.prototype.setParameterFadeOutTime = function (parameterId, value) {
        var curves = this._motionData.curves;
        for (var i = 0; i < this._motionData.curveCount; ++i) {
            if (parameterId == curves.at(i).id) {
                curves.at(i).fadeOutTime = value;
                return;
            }
        }
    };
    CubismMotion.prototype.getParameterFadeInTime = function (parameterId) {
        var curves = this._motionData.curves;
        for (var i = 0; i < this._motionData.curveCount; ++i) {
            if (parameterId == curves.at(i).id) {
                return curves.at(i).fadeInTime;
            }
        }
        return -1;
    };
    CubismMotion.prototype.getParameterFadeOutTime = function (parameterId) {
        var curves = this._motionData.curves;
        for (var i = 0; i < this._motionData.curveCount; ++i) {
            if (parameterId == curves.at(i).id) {
                return curves.at(i).fadeOutTime;
            }
        }
        return -1;
    };
    CubismMotion.prototype.setEffectIds = function (eyeBlinkParameterIds, lipSyncParameterIds) {
        this._eyeBlinkParameterIds = eyeBlinkParameterIds;
        this._lipSyncParameterIds = lipSyncParameterIds;
    };
    CubismMotion.prototype.release = function () {
        this._motionData = void 0;
        this._motionData = null;
    };
    CubismMotion.prototype.parse = function (motionJson, size) {
        this._motionData = new cubismmotioninternal_1.CubismMotionData();
        var json = new cubismmotionjson_1.CubismMotionJson(motionJson, size);
        this._motionData.duration = json.getMotionDuration();
        this._motionData.loop = json.isMotionLoop();
        this._motionData.curveCount = json.getMotionCurveCount();
        this._motionData.fps = json.getMotionFps();
        this._motionData.eventCount = json.getEventCount();
        var areBeziersRestructed = json.getEvaluationOptionFlag(cubismmotionjson_1.EvaluationOptionFlag.EvaluationOptionFlag_AreBeziersRistricted);
        if (json.isExistMotionFadeInTime()) {
            this._fadeInSeconds =
                json.getMotionFadeInTime() < 0.0 ? 1.0 : json.getMotionFadeInTime();
        }
        else {
            this._fadeInSeconds = 1.0;
        }
        if (json.isExistMotionFadeOutTime()) {
            this._fadeOutSeconds =
                json.getMotionFadeOutTime() < 0.0 ? 1.0 : json.getMotionFadeOutTime();
        }
        else {
            this._fadeOutSeconds = 1.0;
        }
        this._motionData.curves.updateSize(this._motionData.curveCount, cubismmotioninternal_1.CubismMotionCurve, true);
        this._motionData.segments.updateSize(json.getMotionTotalSegmentCount(), cubismmotioninternal_1.CubismMotionSegment, true);
        this._motionData.points.updateSize(json.getMotionTotalPointCount(), cubismmotioninternal_1.CubismMotionPoint, true);
        this._motionData.events.updateSize(this._motionData.eventCount, cubismmotioninternal_1.CubismMotionEvent, true);
        var totalPointCount = 0;
        var totalSegmentCount = 0;
        for (var curveCount = 0; curveCount < this._motionData.curveCount; ++curveCount) {
            if (json.getMotionCurveTarget(curveCount) == TargetNameModel) {
                this._motionData.curves.at(curveCount).type =
                    cubismmotioninternal_1.CubismMotionCurveTarget.CubismMotionCurveTarget_Model;
            }
            else if (json.getMotionCurveTarget(curveCount) == TargetNameParameter) {
                this._motionData.curves.at(curveCount).type =
                    cubismmotioninternal_1.CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter;
            }
            else if (json.getMotionCurveTarget(curveCount) == TargetNamePartOpacity) {
                this._motionData.curves.at(curveCount).type =
                    cubismmotioninternal_1.CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity;
            }
            else {
                (0, cubismdebug_1.CubismLogWarning)('Warning : Unable to get segment type from Curve! The number of "CurveCount" may be incorrect!');
            }
            this._motionData.curves.at(curveCount).id =
                json.getMotionCurveId(curveCount);
            this._motionData.curves.at(curveCount).baseSegmentIndex =
                totalSegmentCount;
            this._motionData.curves.at(curveCount).fadeInTime =
                json.isExistMotionCurveFadeInTime(curveCount)
                    ? json.getMotionCurveFadeInTime(curveCount)
                    : -1.0;
            this._motionData.curves.at(curveCount).fadeOutTime =
                json.isExistMotionCurveFadeOutTime(curveCount)
                    ? json.getMotionCurveFadeOutTime(curveCount)
                    : -1.0;
            for (var segmentPosition = 0; segmentPosition < json.getMotionCurveSegmentCount(curveCount);) {
                if (segmentPosition == 0) {
                    this._motionData.segments.at(totalSegmentCount).basePointIndex =
                        totalPointCount;
                    this._motionData.points.at(totalPointCount).time =
                        json.getMotionCurveSegment(curveCount, segmentPosition);
                    this._motionData.points.at(totalPointCount).value =
                        json.getMotionCurveSegment(curveCount, segmentPosition + 1);
                    totalPointCount += 1;
                    segmentPosition += 2;
                }
                else {
                    this._motionData.segments.at(totalSegmentCount).basePointIndex =
                        totalPointCount - 1;
                }
                var segment = json.getMotionCurveSegment(curveCount, segmentPosition);
                switch (segment) {
                    case cubismmotioninternal_1.CubismMotionSegmentType.CubismMotionSegmentType_Linear: {
                        this._motionData.segments.at(totalSegmentCount).segmentType =
                            cubismmotioninternal_1.CubismMotionSegmentType.CubismMotionSegmentType_Linear;
                        this._motionData.segments.at(totalSegmentCount).evaluate =
                            linearEvaluate;
                        this._motionData.points.at(totalPointCount).time =
                            json.getMotionCurveSegment(curveCount, segmentPosition + 1);
                        this._motionData.points.at(totalPointCount).value =
                            json.getMotionCurveSegment(curveCount, segmentPosition + 2);
                        totalPointCount += 1;
                        segmentPosition += 3;
                        break;
                    }
                    case cubismmotioninternal_1.CubismMotionSegmentType.CubismMotionSegmentType_Bezier: {
                        this._motionData.segments.at(totalSegmentCount).segmentType =
                            cubismmotioninternal_1.CubismMotionSegmentType.CubismMotionSegmentType_Bezier;
                        if (areBeziersRestructed || UseOldBeziersCurveMotion) {
                            this._motionData.segments.at(totalSegmentCount).evaluate =
                                bezierEvaluate;
                        }
                        else {
                            this._motionData.segments.at(totalSegmentCount).evaluate =
                                bezierEvaluateCardanoInterpretation;
                        }
                        this._motionData.points.at(totalPointCount).time =
                            json.getMotionCurveSegment(curveCount, segmentPosition + 1);
                        this._motionData.points.at(totalPointCount).value =
                            json.getMotionCurveSegment(curveCount, segmentPosition + 2);
                        this._motionData.points.at(totalPointCount + 1).time =
                            json.getMotionCurveSegment(curveCount, segmentPosition + 3);
                        this._motionData.points.at(totalPointCount + 1).value =
                            json.getMotionCurveSegment(curveCount, segmentPosition + 4);
                        this._motionData.points.at(totalPointCount + 2).time =
                            json.getMotionCurveSegment(curveCount, segmentPosition + 5);
                        this._motionData.points.at(totalPointCount + 2).value =
                            json.getMotionCurveSegment(curveCount, segmentPosition + 6);
                        totalPointCount += 3;
                        segmentPosition += 7;
                        break;
                    }
                    case cubismmotioninternal_1.CubismMotionSegmentType.CubismMotionSegmentType_Stepped: {
                        this._motionData.segments.at(totalSegmentCount).segmentType =
                            cubismmotioninternal_1.CubismMotionSegmentType.CubismMotionSegmentType_Stepped;
                        this._motionData.segments.at(totalSegmentCount).evaluate =
                            steppedEvaluate;
                        this._motionData.points.at(totalPointCount).time =
                            json.getMotionCurveSegment(curveCount, segmentPosition + 1);
                        this._motionData.points.at(totalPointCount).value =
                            json.getMotionCurveSegment(curveCount, segmentPosition + 2);
                        totalPointCount += 1;
                        segmentPosition += 3;
                        break;
                    }
                    case cubismmotioninternal_1.CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped: {
                        this._motionData.segments.at(totalSegmentCount).segmentType =
                            cubismmotioninternal_1.CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped;
                        this._motionData.segments.at(totalSegmentCount).evaluate =
                            inverseSteppedEvaluate;
                        this._motionData.points.at(totalPointCount).time =
                            json.getMotionCurveSegment(curveCount, segmentPosition + 1);
                        this._motionData.points.at(totalPointCount).value =
                            json.getMotionCurveSegment(curveCount, segmentPosition + 2);
                        totalPointCount += 1;
                        segmentPosition += 3;
                        break;
                    }
                    default: {
                        (0, cubismdebug_1.CSM_ASSERT)(0);
                        break;
                    }
                }
                ++this._motionData.curves.at(curveCount).segmentCount;
                ++totalSegmentCount;
            }
        }
        for (var userdatacount = 0; userdatacount < json.getEventCount(); ++userdatacount) {
            this._motionData.events.at(userdatacount).fireTime =
                json.getEventTime(userdatacount);
            this._motionData.events.at(userdatacount).value =
                json.getEventValue(userdatacount);
        }
        json.release();
        json = void 0;
        json = null;
    };
    CubismMotion.prototype.getFiredEvent = function (beforeCheckTimeSeconds, motionTimeSeconds) {
        this._firedEventValues.updateSize(0);
        for (var u = 0; u < this._motionData.eventCount; ++u) {
            if (this._motionData.events.at(u).fireTime > beforeCheckTimeSeconds &&
                this._motionData.events.at(u).fireTime <= motionTimeSeconds) {
                this._firedEventValues.pushBack(new csmstring_1.csmString(this._motionData.events.at(u).value.s));
            }
        }
        return this._firedEventValues;
    };
    return CubismMotion;
}(acubismmotion_1.ACubismMotion));
exports.CubismMotion = CubismMotion;
var $ = __importStar(__webpack_require__(/*! ./cubismmotion */ "./vendor/Framework/src/motion/cubismmotion.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismMotion = $.CubismMotion;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/motion/cubismmotioninternal.ts":
/*!*************************************************************!*\
  !*** ./vendor/Framework/src/motion/cubismmotioninternal.ts ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismMotionData = exports.CubismMotionEvent = exports.CubismMotionCurve = exports.CubismMotionSegment = exports.CubismMotionPoint = exports.CubismMotionSegmentType = exports.CubismMotionCurveTarget = void 0;
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "./vendor/Framework/src/type/csmvector.ts");
var CubismMotionCurveTarget;
(function (CubismMotionCurveTarget) {
    CubismMotionCurveTarget[CubismMotionCurveTarget["CubismMotionCurveTarget_Model"] = 0] = "CubismMotionCurveTarget_Model";
    CubismMotionCurveTarget[CubismMotionCurveTarget["CubismMotionCurveTarget_Parameter"] = 1] = "CubismMotionCurveTarget_Parameter";
    CubismMotionCurveTarget[CubismMotionCurveTarget["CubismMotionCurveTarget_PartOpacity"] = 2] = "CubismMotionCurveTarget_PartOpacity";
})(CubismMotionCurveTarget = exports.CubismMotionCurveTarget || (exports.CubismMotionCurveTarget = {}));
var CubismMotionSegmentType;
(function (CubismMotionSegmentType) {
    CubismMotionSegmentType[CubismMotionSegmentType["CubismMotionSegmentType_Linear"] = 0] = "CubismMotionSegmentType_Linear";
    CubismMotionSegmentType[CubismMotionSegmentType["CubismMotionSegmentType_Bezier"] = 1] = "CubismMotionSegmentType_Bezier";
    CubismMotionSegmentType[CubismMotionSegmentType["CubismMotionSegmentType_Stepped"] = 2] = "CubismMotionSegmentType_Stepped";
    CubismMotionSegmentType[CubismMotionSegmentType["CubismMotionSegmentType_InverseStepped"] = 3] = "CubismMotionSegmentType_InverseStepped";
})(CubismMotionSegmentType = exports.CubismMotionSegmentType || (exports.CubismMotionSegmentType = {}));
var CubismMotionPoint = (function () {
    function CubismMotionPoint() {
        this.time = 0.0;
        this.value = 0.0;
    }
    return CubismMotionPoint;
}());
exports.CubismMotionPoint = CubismMotionPoint;
var CubismMotionSegment = (function () {
    function CubismMotionSegment() {
        this.evaluate = null;
        this.basePointIndex = 0;
        this.segmentType = 0;
    }
    return CubismMotionSegment;
}());
exports.CubismMotionSegment = CubismMotionSegment;
var CubismMotionCurve = (function () {
    function CubismMotionCurve() {
        this.type = CubismMotionCurveTarget.CubismMotionCurveTarget_Model;
        this.segmentCount = 0;
        this.baseSegmentIndex = 0;
        this.fadeInTime = 0.0;
        this.fadeOutTime = 0.0;
    }
    return CubismMotionCurve;
}());
exports.CubismMotionCurve = CubismMotionCurve;
var CubismMotionEvent = (function () {
    function CubismMotionEvent() {
        this.fireTime = 0.0;
    }
    return CubismMotionEvent;
}());
exports.CubismMotionEvent = CubismMotionEvent;
var CubismMotionData = (function () {
    function CubismMotionData() {
        this.duration = 0.0;
        this.loop = false;
        this.curveCount = 0;
        this.eventCount = 0;
        this.fps = 0.0;
        this.curves = new csmvector_1.csmVector();
        this.segments = new csmvector_1.csmVector();
        this.points = new csmvector_1.csmVector();
        this.events = new csmvector_1.csmVector();
    }
    return CubismMotionData;
}());
exports.CubismMotionData = CubismMotionData;
var $ = __importStar(__webpack_require__(/*! ./cubismmotioninternal */ "./vendor/Framework/src/motion/cubismmotioninternal.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismMotionCurve = $.CubismMotionCurve;
    Live2DCubismFramework.CubismMotionCurveTarget = $.CubismMotionCurveTarget;
    Live2DCubismFramework.CubismMotionData = $.CubismMotionData;
    Live2DCubismFramework.CubismMotionEvent = $.CubismMotionEvent;
    Live2DCubismFramework.CubismMotionPoint = $.CubismMotionPoint;
    Live2DCubismFramework.CubismMotionSegment = $.CubismMotionSegment;
    Live2DCubismFramework.CubismMotionSegmentType = $.CubismMotionSegmentType;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/motion/cubismmotionjson.ts":
/*!*********************************************************!*\
  !*** ./vendor/Framework/src/motion/cubismmotionjson.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.EvaluationOptionFlag = exports.CubismMotionJson = void 0;
var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "./vendor/Framework/src/live2dcubismframework.ts");
var csmstring_1 = __webpack_require__(/*! ../type/csmstring */ "./vendor/Framework/src/type/csmstring.ts");
var cubismjson_1 = __webpack_require__(/*! ../utils/cubismjson */ "./vendor/Framework/src/utils/cubismjson.ts");
var Meta = 'Meta';
var Duration = 'Duration';
var Loop = 'Loop';
var AreBeziersRestricted = 'AreBeziersRestricted';
var CurveCount = 'CurveCount';
var Fps = 'Fps';
var TotalSegmentCount = 'TotalSegmentCount';
var TotalPointCount = 'TotalPointCount';
var Curves = 'Curves';
var Target = 'Target';
var Id = 'Id';
var FadeInTime = 'FadeInTime';
var FadeOutTime = 'FadeOutTime';
var Segments = 'Segments';
var UserData = 'UserData';
var UserDataCount = 'UserDataCount';
var TotalUserDataSize = 'TotalUserDataSize';
var Time = 'Time';
var Value = 'Value';
var CubismMotionJson = (function () {
    function CubismMotionJson(buffer, size) {
        this._json = cubismjson_1.CubismJson.create(buffer, size);
    }
    CubismMotionJson.prototype.release = function () {
        cubismjson_1.CubismJson.delete(this._json);
    };
    CubismMotionJson.prototype.getMotionDuration = function () {
        return this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(Duration)
            .toFloat();
    };
    CubismMotionJson.prototype.isMotionLoop = function () {
        return this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(Loop)
            .toBoolean();
    };
    CubismMotionJson.prototype.getEvaluationOptionFlag = function (flagType) {
        if (EvaluationOptionFlag.EvaluationOptionFlag_AreBeziersRistricted == flagType) {
            return this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(AreBeziersRestricted)
                .toBoolean();
        }
        return false;
    };
    CubismMotionJson.prototype.getMotionCurveCount = function () {
        return this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(CurveCount)
            .toInt();
    };
    CubismMotionJson.prototype.getMotionFps = function () {
        return this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(Fps)
            .toFloat();
    };
    CubismMotionJson.prototype.getMotionTotalSegmentCount = function () {
        return this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(TotalSegmentCount)
            .toInt();
    };
    CubismMotionJson.prototype.getMotionTotalPointCount = function () {
        return this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(TotalPointCount)
            .toInt();
    };
    CubismMotionJson.prototype.isExistMotionFadeInTime = function () {
        return !this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(FadeInTime)
            .isNull();
    };
    CubismMotionJson.prototype.isExistMotionFadeOutTime = function () {
        return !this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(FadeOutTime)
            .isNull();
    };
    CubismMotionJson.prototype.getMotionFadeInTime = function () {
        return this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(FadeInTime)
            .toFloat();
    };
    CubismMotionJson.prototype.getMotionFadeOutTime = function () {
        return this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(FadeOutTime)
            .toFloat();
    };
    CubismMotionJson.prototype.getMotionCurveTarget = function (curveIndex) {
        return this._json
            .getRoot()
            .getValueByString(Curves)
            .getValueByIndex(curveIndex)
            .getValueByString(Target)
            .getRawString();
    };
    CubismMotionJson.prototype.getMotionCurveId = function (curveIndex) {
        return live2dcubismframework_1.CubismFramework.getIdManager().getId(this._json
            .getRoot()
            .getValueByString(Curves)
            .getValueByIndex(curveIndex)
            .getValueByString(Id)
            .getRawString());
    };
    CubismMotionJson.prototype.isExistMotionCurveFadeInTime = function (curveIndex) {
        return !this._json
            .getRoot()
            .getValueByString(Curves)
            .getValueByIndex(curveIndex)
            .getValueByString(FadeInTime)
            .isNull();
    };
    CubismMotionJson.prototype.isExistMotionCurveFadeOutTime = function (curveIndex) {
        return !this._json
            .getRoot()
            .getValueByString(Curves)
            .getValueByIndex(curveIndex)
            .getValueByString(FadeOutTime)
            .isNull();
    };
    CubismMotionJson.prototype.getMotionCurveFadeInTime = function (curveIndex) {
        return this._json
            .getRoot()
            .getValueByString(Curves)
            .getValueByIndex(curveIndex)
            .getValueByString(FadeInTime)
            .toFloat();
    };
    CubismMotionJson.prototype.getMotionCurveFadeOutTime = function (curveIndex) {
        return this._json
            .getRoot()
            .getValueByString(Curves)
            .getValueByIndex(curveIndex)
            .getValueByString(FadeOutTime)
            .toFloat();
    };
    CubismMotionJson.prototype.getMotionCurveSegmentCount = function (curveIndex) {
        return this._json
            .getRoot()
            .getValueByString(Curves)
            .getValueByIndex(curveIndex)
            .getValueByString(Segments)
            .getVector()
            .getSize();
    };
    CubismMotionJson.prototype.getMotionCurveSegment = function (curveIndex, segmentIndex) {
        return this._json
            .getRoot()
            .getValueByString(Curves)
            .getValueByIndex(curveIndex)
            .getValueByString(Segments)
            .getValueByIndex(segmentIndex)
            .toFloat();
    };
    CubismMotionJson.prototype.getEventCount = function () {
        return this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(UserDataCount)
            .toInt();
    };
    CubismMotionJson.prototype.getTotalEventValueSize = function () {
        return this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(TotalUserDataSize)
            .toInt();
    };
    CubismMotionJson.prototype.getEventTime = function (userDataIndex) {
        return this._json
            .getRoot()
            .getValueByString(UserData)
            .getValueByIndex(userDataIndex)
            .getValueByString(Time)
            .toFloat();
    };
    CubismMotionJson.prototype.getEventValue = function (userDataIndex) {
        return new csmstring_1.csmString(this._json
            .getRoot()
            .getValueByString(UserData)
            .getValueByIndex(userDataIndex)
            .getValueByString(Value)
            .getRawString());
    };
    return CubismMotionJson;
}());
exports.CubismMotionJson = CubismMotionJson;
var EvaluationOptionFlag;
(function (EvaluationOptionFlag) {
    EvaluationOptionFlag[EvaluationOptionFlag["EvaluationOptionFlag_AreBeziersRistricted"] = 0] = "EvaluationOptionFlag_AreBeziersRistricted";
})(EvaluationOptionFlag = exports.EvaluationOptionFlag || (exports.EvaluationOptionFlag = {}));
var $ = __importStar(__webpack_require__(/*! ./cubismmotionjson */ "./vendor/Framework/src/motion/cubismmotionjson.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismMotionJson = $.CubismMotionJson;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/motion/cubismmotionmanager.ts":
/*!************************************************************!*\
  !*** ./vendor/Framework/src/motion/cubismmotionmanager.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismMotionManager = void 0;
var cubismmotionqueuemanager_1 = __webpack_require__(/*! ./cubismmotionqueuemanager */ "./vendor/Framework/src/motion/cubismmotionqueuemanager.ts");
var CubismMotionManager = (function (_super) {
    __extends(CubismMotionManager, _super);
    function CubismMotionManager() {
        var _this = _super.call(this) || this;
        _this._currentPriority = 0;
        _this._reservePriority = 0;
        return _this;
    }
    CubismMotionManager.prototype.getCurrentPriority = function () {
        return this._currentPriority;
    };
    CubismMotionManager.prototype.getReservePriority = function () {
        return this._reservePriority;
    };
    CubismMotionManager.prototype.setReservePriority = function (val) {
        this._reservePriority = val;
    };
    CubismMotionManager.prototype.startMotionPriority = function (motion, autoDelete, priority) {
        if (priority == this._reservePriority) {
            this._reservePriority = 0;
        }
        this._currentPriority = priority;
        return _super.prototype.startMotion.call(this, motion, autoDelete, this._userTimeSeconds);
    };
    CubismMotionManager.prototype.updateMotion = function (model, deltaTimeSeconds) {
        this._userTimeSeconds += deltaTimeSeconds;
        var updated = _super.prototype.doUpdateMotion.call(this, model, this._userTimeSeconds);
        if (this.isFinished()) {
            this._currentPriority = 0;
        }
        return updated;
    };
    CubismMotionManager.prototype.reserveMotion = function (priority) {
        if (priority <= this._reservePriority ||
            priority <= this._currentPriority) {
            return false;
        }
        this._reservePriority = priority;
        return true;
    };
    return CubismMotionManager;
}(cubismmotionqueuemanager_1.CubismMotionQueueManager));
exports.CubismMotionManager = CubismMotionManager;
var $ = __importStar(__webpack_require__(/*! ./cubismmotionmanager */ "./vendor/Framework/src/motion/cubismmotionmanager.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismMotionManager = $.CubismMotionManager;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/motion/cubismmotionqueueentry.ts":
/*!***************************************************************!*\
  !*** ./vendor/Framework/src/motion/cubismmotionqueueentry.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismMotionQueueEntry = void 0;
var acubismmotion_1 = __webpack_require__(/*! ./acubismmotion */ "./vendor/Framework/src/motion/acubismmotion.ts");
var CubismMotionQueueEntry = (function () {
    function CubismMotionQueueEntry() {
        this._autoDelete = false;
        this._motion = null;
        this._available = true;
        this._finished = false;
        this._started = false;
        this._startTimeSeconds = -1.0;
        this._fadeInStartTimeSeconds = 0.0;
        this._endTimeSeconds = -1.0;
        this._stateTimeSeconds = 0.0;
        this._stateWeight = 0.0;
        this._lastEventCheckSeconds = 0.0;
        this._motionQueueEntryHandle = this;
        this._fadeOutSeconds = 0.0;
        this._isTriggeredFadeOut = false;
    }
    CubismMotionQueueEntry.prototype.release = function () {
        if (this._autoDelete && this._motion) {
            acubismmotion_1.ACubismMotion.delete(this._motion);
        }
    };
    CubismMotionQueueEntry.prototype.setFadeOut = function (fadeOutSeconds) {
        this._fadeOutSeconds = fadeOutSeconds;
        this._isTriggeredFadeOut = true;
    };
    CubismMotionQueueEntry.prototype.startFadeOut = function (fadeOutSeconds, userTimeSeconds) {
        var newEndTimeSeconds = userTimeSeconds + fadeOutSeconds;
        this._isTriggeredFadeOut = true;
        if (this._endTimeSeconds < 0.0 ||
            newEndTimeSeconds < this._endTimeSeconds) {
            this._endTimeSeconds = newEndTimeSeconds;
        }
    };
    CubismMotionQueueEntry.prototype.isFinished = function () {
        return this._finished;
    };
    CubismMotionQueueEntry.prototype.isStarted = function () {
        return this._started;
    };
    CubismMotionQueueEntry.prototype.getStartTime = function () {
        return this._startTimeSeconds;
    };
    CubismMotionQueueEntry.prototype.getFadeInStartTime = function () {
        return this._fadeInStartTimeSeconds;
    };
    CubismMotionQueueEntry.prototype.getEndTime = function () {
        return this._endTimeSeconds;
    };
    CubismMotionQueueEntry.prototype.setStartTime = function (startTime) {
        this._startTimeSeconds = startTime;
    };
    CubismMotionQueueEntry.prototype.setFadeInStartTime = function (startTime) {
        this._fadeInStartTimeSeconds = startTime;
    };
    CubismMotionQueueEntry.prototype.setEndTime = function (endTime) {
        this._endTimeSeconds = endTime;
    };
    CubismMotionQueueEntry.prototype.setIsFinished = function (f) {
        this._finished = f;
    };
    CubismMotionQueueEntry.prototype.setIsStarted = function (f) {
        this._started = f;
    };
    CubismMotionQueueEntry.prototype.isAvailable = function () {
        return this._available;
    };
    CubismMotionQueueEntry.prototype.setIsAvailable = function (v) {
        this._available = v;
    };
    CubismMotionQueueEntry.prototype.setState = function (timeSeconds, weight) {
        this._stateTimeSeconds = timeSeconds;
        this._stateWeight = weight;
    };
    CubismMotionQueueEntry.prototype.getStateTime = function () {
        return this._stateTimeSeconds;
    };
    CubismMotionQueueEntry.prototype.getStateWeight = function () {
        return this._stateWeight;
    };
    CubismMotionQueueEntry.prototype.getLastCheckEventSeconds = function () {
        return this._lastEventCheckSeconds;
    };
    CubismMotionQueueEntry.prototype.setLastCheckEventSeconds = function (checkSeconds) {
        this._lastEventCheckSeconds = checkSeconds;
    };
    CubismMotionQueueEntry.prototype.isTriggeredFadeOut = function () {
        return this._isTriggeredFadeOut;
    };
    CubismMotionQueueEntry.prototype.getFadeOutSeconds = function () {
        return this._fadeOutSeconds;
    };
    return CubismMotionQueueEntry;
}());
exports.CubismMotionQueueEntry = CubismMotionQueueEntry;
var $ = __importStar(__webpack_require__(/*! ./cubismmotionqueueentry */ "./vendor/Framework/src/motion/cubismmotionqueueentry.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismMotionQueueEntry = $.CubismMotionQueueEntry;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/motion/cubismmotionqueuemanager.ts":
/*!*****************************************************************!*\
  !*** ./vendor/Framework/src/motion/cubismmotionqueuemanager.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.InvalidMotionQueueEntryHandleValue = exports.CubismMotionQueueManager = void 0;
var cubismmotionqueueentry_1 = __webpack_require__(/*! ./cubismmotionqueueentry */ "./vendor/Framework/src/motion/cubismmotionqueueentry.ts");
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "./vendor/Framework/src/type/csmvector.ts");
var CubismMotionQueueManager = (function () {
    function CubismMotionQueueManager() {
        this._userTimeSeconds = 0.0;
        this._eventCallBack = null;
        this._eventCustomData = null;
        this._motions = new csmvector_1.csmVector();
    }
    CubismMotionQueueManager.prototype.release = function () {
        for (var i = 0; i < this._motions.getSize(); ++i) {
            if (this._motions.at(i)) {
                this._motions.at(i).release();
                this._motions.set(i, null);
            }
        }
        this._motions = null;
    };
    CubismMotionQueueManager.prototype.startMotion = function (motion, autoDelete, userTimeSeconds) {
        if (motion == null) {
            return exports.InvalidMotionQueueEntryHandleValue;
        }
        var motionQueueEntry = null;
        for (var i = 0; i < this._motions.getSize(); ++i) {
            motionQueueEntry = this._motions.at(i);
            if (motionQueueEntry == null) {
                continue;
            }
            motionQueueEntry.setFadeOut(motionQueueEntry._motion.getFadeOutTime());
        }
        motionQueueEntry = new cubismmotionqueueentry_1.CubismMotionQueueEntry();
        motionQueueEntry._autoDelete = autoDelete;
        motionQueueEntry._motion = motion;
        this._motions.pushBack(motionQueueEntry);
        return motionQueueEntry._motionQueueEntryHandle;
    };
    CubismMotionQueueManager.prototype.isFinished = function () {
        for (var ite = this._motions.begin(); ite.notEqual(this._motions.end());) {
            var motionQueueEntry = ite.ptr();
            if (motionQueueEntry == null) {
                ite = this._motions.erase(ite);
                continue;
            }
            var motion = motionQueueEntry._motion;
            if (motion == null) {
                motionQueueEntry.release();
                motionQueueEntry = null;
                ite = this._motions.erase(ite);
                continue;
            }
            if (!motionQueueEntry.isFinished()) {
                return false;
            }
            else {
                ite.preIncrement();
            }
        }
        return true;
    };
    CubismMotionQueueManager.prototype.isFinishedByHandle = function (motionQueueEntryNumber) {
        for (var ite = this._motions.begin(); ite.notEqual(this._motions.end()); ite.increment()) {
            var motionQueueEntry = ite.ptr();
            if (motionQueueEntry == null) {
                continue;
            }
            if (motionQueueEntry._motionQueueEntryHandle == motionQueueEntryNumber &&
                !motionQueueEntry.isFinished()) {
                return false;
            }
        }
        return true;
    };
    CubismMotionQueueManager.prototype.stopAllMotions = function () {
        for (var ite = this._motions.begin(); ite.notEqual(this._motions.end());) {
            var motionQueueEntry = ite.ptr();
            if (motionQueueEntry == null) {
                ite = this._motions.erase(ite);
                continue;
            }
            motionQueueEntry.release();
            motionQueueEntry = null;
            ite = this._motions.erase(ite);
        }
    };
    CubismMotionQueueManager.prototype.getCubismMotionQueueEntry = function (motionQueueEntryNumber) {
        for (var ite = this._motions.begin(); ite.notEqual(this._motions.end()); ite.preIncrement()) {
            var motionQueueEntry = ite.ptr();
            if (motionQueueEntry == null) {
                continue;
            }
            if (motionQueueEntry._motionQueueEntryHandle == motionQueueEntryNumber) {
                return motionQueueEntry;
            }
        }
        return null;
    };
    CubismMotionQueueManager.prototype.setEventCallback = function (callback, customData) {
        if (customData === void 0) { customData = null; }
        this._eventCallBack = callback;
        this._eventCustomData = customData;
    };
    CubismMotionQueueManager.prototype.doUpdateMotion = function (model, userTimeSeconds) {
        var updated = false;
        for (var ite = this._motions.begin(); ite.notEqual(this._motions.end());) {
            var motionQueueEntry = ite.ptr();
            if (motionQueueEntry == null) {
                ite = this._motions.erase(ite);
                continue;
            }
            var motion = motionQueueEntry._motion;
            if (motion == null) {
                motionQueueEntry.release();
                motionQueueEntry = null;
                ite = this._motions.erase(ite);
                continue;
            }
            motion.updateParameters(model, motionQueueEntry, userTimeSeconds);
            updated = true;
            var firedList = motion.getFiredEvent(motionQueueEntry.getLastCheckEventSeconds() -
                motionQueueEntry.getStartTime(), userTimeSeconds - motionQueueEntry.getStartTime());
            for (var i = 0; i < firedList.getSize(); ++i) {
                this._eventCallBack(this, firedList.at(i), this._eventCustomData);
            }
            motionQueueEntry.setLastCheckEventSeconds(userTimeSeconds);
            if (motionQueueEntry.isFinished()) {
                motionQueueEntry.release();
                motionQueueEntry = null;
                ite = this._motions.erase(ite);
            }
            else {
                if (motionQueueEntry.isTriggeredFadeOut()) {
                    motionQueueEntry.startFadeOut(motionQueueEntry.getFadeOutSeconds(), userTimeSeconds);
                }
                ite.preIncrement();
            }
        }
        return updated;
    };
    return CubismMotionQueueManager;
}());
exports.CubismMotionQueueManager = CubismMotionQueueManager;
exports.InvalidMotionQueueEntryHandleValue = -1;
var $ = __importStar(__webpack_require__(/*! ./cubismmotionqueuemanager */ "./vendor/Framework/src/motion/cubismmotionqueuemanager.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismMotionQueueManager = $.CubismMotionQueueManager;
    Live2DCubismFramework.InvalidMotionQueueEntryHandleValue = $.InvalidMotionQueueEntryHandleValue;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/physics/cubismphysics.ts":
/*!*******************************************************!*\
  !*** ./vendor/Framework/src/physics/cubismphysics.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.PhysicsOutput = exports.Options = exports.CubismPhysics = void 0;
var cubismmath_1 = __webpack_require__(/*! ../math/cubismmath */ "./vendor/Framework/src/math/cubismmath.ts");
var cubismvector2_1 = __webpack_require__(/*! ../math/cubismvector2 */ "./vendor/Framework/src/math/cubismvector2.ts");
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "./vendor/Framework/src/type/csmvector.ts");
var cubismphysicsinternal_1 = __webpack_require__(/*! ./cubismphysicsinternal */ "./vendor/Framework/src/physics/cubismphysicsinternal.ts");
var cubismphysicsjson_1 = __webpack_require__(/*! ./cubismphysicsjson */ "./vendor/Framework/src/physics/cubismphysicsjson.ts");
var PhysicsTypeTagX = 'X';
var PhysicsTypeTagY = 'Y';
var PhysicsTypeTagAngle = 'Angle';
var AirResistance = 5.0;
var MaximumWeight = 100.0;
var MovementThreshold = 0.001;
var MaxDeltaTime = 5.0;
var CubismPhysics = (function () {
    function CubismPhysics() {
        this._physicsRig = null;
        this._options = new Options();
        this._options.gravity.y = -1.0;
        this._options.gravity.x = 0.0;
        this._options.wind.x = 0.0;
        this._options.wind.y = 0.0;
        this._currentRigOutputs = new csmvector_1.csmVector();
        this._previousRigOutputs = new csmvector_1.csmVector();
        this._currentRemainTime = 0.0;
        this._parameterCaches = null;
        this._parameterInputCaches = null;
    }
    CubismPhysics.create = function (buffer, size) {
        var ret = new CubismPhysics();
        ret.parse(buffer, size);
        ret._physicsRig.gravity.y = 0;
        return ret;
    };
    CubismPhysics.delete = function (physics) {
        if (physics != null) {
            physics.release();
            physics = null;
        }
    };
    CubismPhysics.prototype.parse = function (physicsJson, size) {
        this._physicsRig = new cubismphysicsinternal_1.CubismPhysicsRig();
        var json = new cubismphysicsjson_1.CubismPhysicsJson(physicsJson, size);
        this._physicsRig.gravity = json.getGravity();
        this._physicsRig.wind = json.getWind();
        this._physicsRig.subRigCount = json.getSubRigCount();
        this._physicsRig.fps = json.getFps();
        this._physicsRig.settings.updateSize(this._physicsRig.subRigCount, cubismphysicsinternal_1.CubismPhysicsSubRig, true);
        this._physicsRig.inputs.updateSize(json.getTotalInputCount(), cubismphysicsinternal_1.CubismPhysicsInput, true);
        this._physicsRig.outputs.updateSize(json.getTotalOutputCount(), cubismphysicsinternal_1.CubismPhysicsOutput, true);
        this._physicsRig.particles.updateSize(json.getVertexCount(), cubismphysicsinternal_1.CubismPhysicsParticle, true);
        this._currentRigOutputs.clear();
        this._previousRigOutputs.clear();
        var inputIndex = 0, outputIndex = 0, particleIndex = 0;
        for (var i = 0; i < this._physicsRig.settings.getSize(); ++i) {
            this._physicsRig.settings.at(i).normalizationPosition.minimum =
                json.getNormalizationPositionMinimumValue(i);
            this._physicsRig.settings.at(i).normalizationPosition.maximum =
                json.getNormalizationPositionMaximumValue(i);
            this._physicsRig.settings.at(i).normalizationPosition.defalut =
                json.getNormalizationPositionDefaultValue(i);
            this._physicsRig.settings.at(i).normalizationAngle.minimum =
                json.getNormalizationAngleMinimumValue(i);
            this._physicsRig.settings.at(i).normalizationAngle.maximum =
                json.getNormalizationAngleMaximumValue(i);
            this._physicsRig.settings.at(i).normalizationAngle.defalut =
                json.getNormalizationAngleDefaultValue(i);
            this._physicsRig.settings.at(i).inputCount = json.getInputCount(i);
            this._physicsRig.settings.at(i).baseInputIndex = inputIndex;
            for (var j = 0; j < this._physicsRig.settings.at(i).inputCount; ++j) {
                this._physicsRig.inputs.at(inputIndex + j).sourceParameterIndex = -1;
                this._physicsRig.inputs.at(inputIndex + j).weight = json.getInputWeight(i, j);
                this._physicsRig.inputs.at(inputIndex + j).reflect =
                    json.getInputReflect(i, j);
                if (json.getInputType(i, j) == PhysicsTypeTagX) {
                    this._physicsRig.inputs.at(inputIndex + j).type =
                        cubismphysicsinternal_1.CubismPhysicsSource.CubismPhysicsSource_X;
                    this._physicsRig.inputs.at(inputIndex + j).getNormalizedParameterValue = getInputTranslationXFromNormalizedParameterValue;
                }
                else if (json.getInputType(i, j) == PhysicsTypeTagY) {
                    this._physicsRig.inputs.at(inputIndex + j).type =
                        cubismphysicsinternal_1.CubismPhysicsSource.CubismPhysicsSource_Y;
                    this._physicsRig.inputs.at(inputIndex + j).getNormalizedParameterValue = getInputTranslationYFromNormalizedParamterValue;
                }
                else if (json.getInputType(i, j) == PhysicsTypeTagAngle) {
                    this._physicsRig.inputs.at(inputIndex + j).type =
                        cubismphysicsinternal_1.CubismPhysicsSource.CubismPhysicsSource_Angle;
                    this._physicsRig.inputs.at(inputIndex + j).getNormalizedParameterValue = getInputAngleFromNormalizedParameterValue;
                }
                this._physicsRig.inputs.at(inputIndex + j).source.targetType =
                    cubismphysicsinternal_1.CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter;
                this._physicsRig.inputs.at(inputIndex + j).source.id =
                    json.getInputSourceId(i, j);
            }
            inputIndex += this._physicsRig.settings.at(i).inputCount;
            this._physicsRig.settings.at(i).outputCount = json.getOutputCount(i);
            this._physicsRig.settings.at(i).baseOutputIndex = outputIndex;
            var currentRigOutput = new PhysicsOutput();
            currentRigOutput.outputs.resize(this._physicsRig.settings.at(i).outputCount);
            var previousRigOutput = new PhysicsOutput();
            previousRigOutput.outputs.resize(this._physicsRig.settings.at(i).outputCount);
            for (var j = 0; j < this._physicsRig.settings.at(i).outputCount; ++j) {
                currentRigOutput.outputs[j] = 0.0;
                previousRigOutput.outputs[j] = 0.0;
                this._physicsRig.outputs.at(outputIndex + j).destinationParameterIndex =
                    -1;
                this._physicsRig.outputs.at(outputIndex + j).vertexIndex =
                    json.getOutputVertexIndex(i, j);
                this._physicsRig.outputs.at(outputIndex + j).angleScale =
                    json.getOutputAngleScale(i, j);
                this._physicsRig.outputs.at(outputIndex + j).weight =
                    json.getOutputWeight(i, j);
                this._physicsRig.outputs.at(outputIndex + j).destination.targetType =
                    cubismphysicsinternal_1.CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter;
                this._physicsRig.outputs.at(outputIndex + j).destination.id =
                    json.getOutputDestinationId(i, j);
                if (json.getOutputType(i, j) == PhysicsTypeTagX) {
                    this._physicsRig.outputs.at(outputIndex + j).type =
                        cubismphysicsinternal_1.CubismPhysicsSource.CubismPhysicsSource_X;
                    this._physicsRig.outputs.at(outputIndex + j).getValue =
                        getOutputTranslationX;
                    this._physicsRig.outputs.at(outputIndex + j).getScale =
                        getOutputScaleTranslationX;
                }
                else if (json.getOutputType(i, j) == PhysicsTypeTagY) {
                    this._physicsRig.outputs.at(outputIndex + j).type =
                        cubismphysicsinternal_1.CubismPhysicsSource.CubismPhysicsSource_Y;
                    this._physicsRig.outputs.at(outputIndex + j).getValue =
                        getOutputTranslationY;
                    this._physicsRig.outputs.at(outputIndex + j).getScale =
                        getOutputScaleTranslationY;
                }
                else if (json.getOutputType(i, j) == PhysicsTypeTagAngle) {
                    this._physicsRig.outputs.at(outputIndex + j).type =
                        cubismphysicsinternal_1.CubismPhysicsSource.CubismPhysicsSource_Angle;
                    this._physicsRig.outputs.at(outputIndex + j).getValue =
                        getOutputAngle;
                    this._physicsRig.outputs.at(outputIndex + j).getScale =
                        getOutputScaleAngle;
                }
                this._physicsRig.outputs.at(outputIndex + j).reflect =
                    json.getOutputReflect(i, j);
            }
            this._currentRigOutputs.pushBack(currentRigOutput);
            this._previousRigOutputs.pushBack(previousRigOutput);
            outputIndex += this._physicsRig.settings.at(i).outputCount;
            this._physicsRig.settings.at(i).particleCount = json.getParticleCount(i);
            this._physicsRig.settings.at(i).baseParticleIndex = particleIndex;
            for (var j = 0; j < this._physicsRig.settings.at(i).particleCount; ++j) {
                this._physicsRig.particles.at(particleIndex + j).mobility =
                    json.getParticleMobility(i, j);
                this._physicsRig.particles.at(particleIndex + j).delay =
                    json.getParticleDelay(i, j);
                this._physicsRig.particles.at(particleIndex + j).acceleration =
                    json.getParticleAcceleration(i, j);
                this._physicsRig.particles.at(particleIndex + j).radius =
                    json.getParticleRadius(i, j);
                this._physicsRig.particles.at(particleIndex + j).position =
                    json.getParticlePosition(i, j);
            }
            particleIndex += this._physicsRig.settings.at(i).particleCount;
        }
        this.initialize();
        json.release();
        json = void 0;
        json = null;
    };
    CubismPhysics.prototype.stabilization = function (model) {
        var _a, _b, _c, _d;
        var totalAngle;
        var weight;
        var radAngle;
        var outputValue;
        var totalTranslation = new cubismvector2_1.CubismVector2();
        var currentSetting;
        var currentInputs;
        var currentOutputs;
        var currentParticles;
        var parameterValues;
        var parameterMaximumValues;
        var parameterMinimumValues;
        var parameterDefaultValues;
        parameterValues = model.getModel().parameters.values;
        parameterMaximumValues = model.getModel().parameters.maximumValues;
        parameterMinimumValues = model.getModel().parameters.minimumValues;
        parameterDefaultValues = model.getModel().parameters.defaultValues;
        if (((_b = (_a = this._parameterCaches) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) < model.getParameterCount()) {
            this._parameterCaches = new Float32Array(model.getParameterCount());
        }
        if (((_d = (_c = this._parameterInputCaches) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0) < model.getParameterCount()) {
            this._parameterInputCaches = new Float32Array(model.getParameterCount());
        }
        for (var j = 0; j < model.getParameterCount(); ++j) {
            this._parameterCaches[j] = parameterValues[j];
            this._parameterInputCaches[j] = parameterValues[j];
        }
        for (var settingIndex = 0; settingIndex < this._physicsRig.subRigCount; ++settingIndex) {
            totalAngle = { angle: 0.0 };
            totalTranslation.x = 0.0;
            totalTranslation.y = 0.0;
            currentSetting = this._physicsRig.settings.at(settingIndex);
            currentInputs = this._physicsRig.inputs.get(currentSetting.baseInputIndex);
            currentOutputs = this._physicsRig.outputs.get(currentSetting.baseOutputIndex);
            currentParticles = this._physicsRig.particles.get(currentSetting.baseParticleIndex);
            for (var i = 0; i < currentSetting.inputCount; ++i) {
                weight = currentInputs[i].weight / MaximumWeight;
                if (currentInputs[i].sourceParameterIndex == -1) {
                    currentInputs[i].sourceParameterIndex = model.getParameterIndex(currentInputs[i].source.id);
                }
                currentInputs[i].getNormalizedParameterValue(totalTranslation, totalAngle, parameterValues[currentInputs[i].sourceParameterIndex], parameterMinimumValues[currentInputs[i].sourceParameterIndex], parameterMaximumValues[currentInputs[i].sourceParameterIndex], parameterDefaultValues[currentInputs[i].sourceParameterIndex], currentSetting.normalizationPosition, currentSetting.normalizationAngle, currentInputs[i].reflect, weight);
                this._parameterCaches[currentInputs[i].sourceParameterIndex] =
                    parameterValues[currentInputs[i].sourceParameterIndex];
            }
            radAngle = cubismmath_1.CubismMath.degreesToRadian(-totalAngle.angle);
            totalTranslation.x =
                totalTranslation.x * cubismmath_1.CubismMath.cos(radAngle) -
                    totalTranslation.y * cubismmath_1.CubismMath.sin(radAngle);
            totalTranslation.y =
                totalTranslation.x * cubismmath_1.CubismMath.sin(radAngle) +
                    totalTranslation.y * cubismmath_1.CubismMath.cos(radAngle);
            updateParticlesForStabilization(currentParticles, currentSetting.particleCount, totalTranslation, totalAngle.angle, this._options.wind, MovementThreshold * currentSetting.normalizationPosition.maximum);
            for (var i = 0; i < currentSetting.outputCount; ++i) {
                var particleIndex = currentOutputs[i].vertexIndex;
                if (currentOutputs[i].destinationParameterIndex == -1) {
                    currentOutputs[i].destinationParameterIndex = model.getParameterIndex(currentOutputs[i].destination.id);
                }
                if (particleIndex < 1 ||
                    particleIndex >= currentSetting.particleCount) {
                    continue;
                }
                var translation = new cubismvector2_1.CubismVector2();
                translation = currentParticles[particleIndex].position.substract(currentParticles[particleIndex - 1].position);
                outputValue = currentOutputs[i].getValue(translation, currentParticles, particleIndex, currentOutputs[i].reflect, this._options.gravity);
                this._currentRigOutputs.at(settingIndex).outputs[i] = outputValue;
                this._previousRigOutputs.at(settingIndex).outputs[i] = outputValue;
                var destinationParameterIndex = currentOutputs[i].destinationParameterIndex;
                var outParameterCaches = !Float32Array.prototype.slice && 'subarray' in Float32Array.prototype
                    ? JSON.parse(JSON.stringify(parameterValues.subarray(destinationParameterIndex)))
                    : parameterValues.slice(destinationParameterIndex);
                updateOutputParameterValue(outParameterCaches, parameterMinimumValues[destinationParameterIndex], parameterMaximumValues[destinationParameterIndex], outputValue, currentOutputs[i]);
                for (var offset = destinationParameterIndex, outParamIndex = 0; offset < this._parameterCaches.length; offset++, outParamIndex++) {
                    parameterValues[offset] = this._parameterCaches[offset] =
                        outParameterCaches[outParamIndex];
                }
            }
        }
    };
    CubismPhysics.prototype.evaluate = function (model, deltaTimeSeconds) {
        var _a, _b, _c, _d;
        var totalAngle;
        var weight;
        var radAngle;
        var outputValue;
        var totalTranslation = new cubismvector2_1.CubismVector2();
        var currentSetting;
        var currentInputs;
        var currentOutputs;
        var currentParticles;
        if (0.0 >= deltaTimeSeconds) {
            return;
        }
        var parameterValues;
        var parameterMaximumValues;
        var parameterMinimumValues;
        var parameterDefaultValues;
        var physicsDeltaTime;
        this._currentRemainTime += deltaTimeSeconds;
        if (this._currentRemainTime > MaxDeltaTime) {
            this._currentRemainTime = 0.0;
        }
        parameterValues = model.getModel().parameters.values;
        parameterMaximumValues = model.getModel().parameters.maximumValues;
        parameterMinimumValues = model.getModel().parameters.minimumValues;
        parameterDefaultValues = model.getModel().parameters.defaultValues;
        if (((_b = (_a = this._parameterCaches) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) < model.getParameterCount()) {
            this._parameterCaches = new Float32Array(model.getParameterCount());
        }
        if (((_d = (_c = this._parameterInputCaches) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0) < model.getParameterCount()) {
            this._parameterInputCaches = new Float32Array(model.getParameterCount());
            for (var j = 0; j < model.getParameterCount(); ++j) {
                this._parameterInputCaches[j] = parameterValues[j];
            }
        }
        if (this._physicsRig.fps > 0.0) {
            physicsDeltaTime = 1.0 / this._physicsRig.fps;
        }
        else {
            physicsDeltaTime = deltaTimeSeconds;
        }
        while (this._currentRemainTime >= physicsDeltaTime) {
            for (var settingIndex = 0; settingIndex < this._physicsRig.subRigCount; ++settingIndex) {
                currentSetting = this._physicsRig.settings.at(settingIndex);
                currentOutputs = this._physicsRig.outputs.get(currentSetting.baseOutputIndex);
                for (var i = 0; i < currentSetting.outputCount; ++i) {
                    this._previousRigOutputs.at(settingIndex).outputs[i] =
                        this._currentRigOutputs.at(settingIndex).outputs[i];
                }
            }
            var inputWeight = physicsDeltaTime / this._currentRemainTime;
            for (var j = 0; j < model.getParameterCount(); ++j) {
                this._parameterCaches[j] =
                    this._parameterInputCaches[j] * (1.0 - inputWeight) +
                        parameterValues[j] * inputWeight;
                this._parameterInputCaches[j] = this._parameterCaches[j];
            }
            for (var settingIndex = 0; settingIndex < this._physicsRig.subRigCount; ++settingIndex) {
                totalAngle = { angle: 0.0 };
                totalTranslation.x = 0.0;
                totalTranslation.y = 0.0;
                currentSetting = this._physicsRig.settings.at(settingIndex);
                currentInputs = this._physicsRig.inputs.get(currentSetting.baseInputIndex);
                currentOutputs = this._physicsRig.outputs.get(currentSetting.baseOutputIndex);
                currentParticles = this._physicsRig.particles.get(currentSetting.baseParticleIndex);
                for (var i = 0; i < currentSetting.inputCount; ++i) {
                    weight = currentInputs[i].weight / MaximumWeight;
                    if (currentInputs[i].sourceParameterIndex == -1) {
                        currentInputs[i].sourceParameterIndex = model.getParameterIndex(currentInputs[i].source.id);
                    }
                    currentInputs[i].getNormalizedParameterValue(totalTranslation, totalAngle, this._parameterCaches[currentInputs[i].sourceParameterIndex], parameterMinimumValues[currentInputs[i].sourceParameterIndex], parameterMaximumValues[currentInputs[i].sourceParameterIndex], parameterDefaultValues[currentInputs[i].sourceParameterIndex], currentSetting.normalizationPosition, currentSetting.normalizationAngle, currentInputs[i].reflect, weight);
                }
                radAngle = cubismmath_1.CubismMath.degreesToRadian(-totalAngle.angle);
                totalTranslation.x =
                    totalTranslation.x * cubismmath_1.CubismMath.cos(radAngle) -
                        totalTranslation.y * cubismmath_1.CubismMath.sin(radAngle);
                totalTranslation.y =
                    totalTranslation.x * cubismmath_1.CubismMath.sin(radAngle) +
                        totalTranslation.y * cubismmath_1.CubismMath.cos(radAngle);
                updateParticles(currentParticles, currentSetting.particleCount, totalTranslation, totalAngle.angle, this._options.wind, MovementThreshold * currentSetting.normalizationPosition.maximum, physicsDeltaTime, AirResistance);
                for (var i = 0; i < currentSetting.outputCount; ++i) {
                    var particleIndex = currentOutputs[i].vertexIndex;
                    if (currentOutputs[i].destinationParameterIndex == -1) {
                        currentOutputs[i].destinationParameterIndex =
                            model.getParameterIndex(currentOutputs[i].destination.id);
                    }
                    if (particleIndex < 1 ||
                        particleIndex >= currentSetting.particleCount) {
                        continue;
                    }
                    var translation = new cubismvector2_1.CubismVector2();
                    translation.x =
                        currentParticles[particleIndex].position.x -
                            currentParticles[particleIndex - 1].position.x;
                    translation.y =
                        currentParticles[particleIndex].position.y -
                            currentParticles[particleIndex - 1].position.y;
                    outputValue = currentOutputs[i].getValue(translation, currentParticles, particleIndex, currentOutputs[i].reflect, this._options.gravity);
                    this._currentRigOutputs.at(settingIndex).outputs[i] = outputValue;
                    var destinationParameterIndex = currentOutputs[i].destinationParameterIndex;
                    var outParameterCaches = !Float32Array.prototype.slice &&
                        'subarray' in Float32Array.prototype
                        ? JSON.parse(JSON.stringify(this._parameterCaches.subarray(destinationParameterIndex)))
                        : this._parameterCaches.slice(destinationParameterIndex);
                    updateOutputParameterValue(outParameterCaches, parameterMinimumValues[destinationParameterIndex], parameterMaximumValues[destinationParameterIndex], outputValue, currentOutputs[i]);
                    for (var offset = destinationParameterIndex, outParamIndex = 0; offset < this._parameterCaches.length; offset++, outParamIndex++) {
                        this._parameterCaches[offset] = outParameterCaches[outParamIndex];
                    }
                }
            }
            this._currentRemainTime -= physicsDeltaTime;
        }
        var alpha = this._currentRemainTime / physicsDeltaTime;
        this.interpolate(model, alpha);
    };
    CubismPhysics.prototype.interpolate = function (model, weight) {
        var currentOutputs;
        var currentSetting;
        var parameterValues;
        var parameterMaximumValues;
        var parameterMinimumValues;
        parameterValues = model.getModel().parameters.values;
        parameterMaximumValues = model.getModel().parameters.maximumValues;
        parameterMinimumValues = model.getModel().parameters.minimumValues;
        for (var settingIndex = 0; settingIndex < this._physicsRig.subRigCount; ++settingIndex) {
            currentSetting = this._physicsRig.settings.at(settingIndex);
            currentOutputs = this._physicsRig.outputs.get(currentSetting.baseOutputIndex);
            for (var i = 0; i < currentSetting.outputCount; ++i) {
                if (currentOutputs[i].destinationParameterIndex == -1) {
                    continue;
                }
                var destinationParameterIndex = currentOutputs[i].destinationParameterIndex;
                var outParameterValues = !Float32Array.prototype.slice && 'subarray' in Float32Array.prototype
                    ? JSON.parse(JSON.stringify(parameterValues.subarray(destinationParameterIndex)))
                    : parameterValues.slice(destinationParameterIndex);
                updateOutputParameterValue(outParameterValues, parameterMinimumValues[destinationParameterIndex], parameterMaximumValues[destinationParameterIndex], this._previousRigOutputs.at(settingIndex).outputs[i] * (1 - weight) +
                    this._currentRigOutputs.at(settingIndex).outputs[i] * weight, currentOutputs[i]);
                for (var offset = destinationParameterIndex, outParamIndex = 0; offset < parameterValues.length; offset++, outParamIndex++) {
                    parameterValues[offset] = outParameterValues[outParamIndex];
                }
            }
        }
    };
    CubismPhysics.prototype.setOptions = function (options) {
        this._options = options;
    };
    CubismPhysics.prototype.getOption = function () {
        return this._options;
    };
    CubismPhysics.prototype.release = function () {
        this._physicsRig = void 0;
        this._physicsRig = null;
    };
    CubismPhysics.prototype.initialize = function () {
        var strand;
        var currentSetting;
        var radius;
        for (var settingIndex = 0; settingIndex < this._physicsRig.subRigCount; ++settingIndex) {
            currentSetting = this._physicsRig.settings.at(settingIndex);
            strand = this._physicsRig.particles.get(currentSetting.baseParticleIndex);
            strand[0].initialPosition = new cubismvector2_1.CubismVector2(0.0, 0.0);
            strand[0].lastPosition = new cubismvector2_1.CubismVector2(strand[0].initialPosition.x, strand[0].initialPosition.y);
            strand[0].lastGravity = new cubismvector2_1.CubismVector2(0.0, -1.0);
            strand[0].lastGravity.y *= -1.0;
            strand[0].velocity = new cubismvector2_1.CubismVector2(0.0, 0.0);
            strand[0].force = new cubismvector2_1.CubismVector2(0.0, 0.0);
            for (var i = 1; i < currentSetting.particleCount; ++i) {
                radius = new cubismvector2_1.CubismVector2(0.0, 0.0);
                radius.y = strand[i].radius;
                strand[i].initialPosition = new cubismvector2_1.CubismVector2(strand[i - 1].initialPosition.x + radius.x, strand[i - 1].initialPosition.y + radius.y);
                strand[i].position = new cubismvector2_1.CubismVector2(strand[i].initialPosition.x, strand[i].initialPosition.y);
                strand[i].lastPosition = new cubismvector2_1.CubismVector2(strand[i].initialPosition.x, strand[i].initialPosition.y);
                strand[i].lastGravity = new cubismvector2_1.CubismVector2(0.0, -1.0);
                strand[i].lastGravity.y *= -1.0;
                strand[i].velocity = new cubismvector2_1.CubismVector2(0.0, 0.0);
                strand[i].force = new cubismvector2_1.CubismVector2(0.0, 0.0);
            }
        }
    };
    return CubismPhysics;
}());
exports.CubismPhysics = CubismPhysics;
var Options = (function () {
    function Options() {
        this.gravity = new cubismvector2_1.CubismVector2(0, 0);
        this.wind = new cubismvector2_1.CubismVector2(0, 0);
    }
    return Options;
}());
exports.Options = Options;
var PhysicsOutput = (function () {
    function PhysicsOutput() {
        this.outputs = new csmvector_1.csmVector(0);
    }
    return PhysicsOutput;
}());
exports.PhysicsOutput = PhysicsOutput;
function sign(value) {
    var ret = 0;
    if (value > 0.0) {
        ret = 1;
    }
    else if (value < 0.0) {
        ret = -1;
    }
    return ret;
}
function getInputTranslationXFromNormalizedParameterValue(targetTranslation, targetAngle, value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition, normalizationAngle, isInverted, weight) {
    targetTranslation.x +=
        normalizeParameterValue(value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition.minimum, normalizationPosition.maximum, normalizationPosition.defalut, isInverted) * weight;
}
function getInputTranslationYFromNormalizedParamterValue(targetTranslation, targetAngle, value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition, normalizationAngle, isInverted, weight) {
    targetTranslation.y +=
        normalizeParameterValue(value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition.minimum, normalizationPosition.maximum, normalizationPosition.defalut, isInverted) * weight;
}
function getInputAngleFromNormalizedParameterValue(targetTranslation, targetAngle, value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizaitionPosition, normalizationAngle, isInverted, weight) {
    targetAngle.angle +=
        normalizeParameterValue(value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationAngle.minimum, normalizationAngle.maximum, normalizationAngle.defalut, isInverted) * weight;
}
function getOutputTranslationX(translation, particles, particleIndex, isInverted, parentGravity) {
    var outputValue = translation.x;
    if (isInverted) {
        outputValue *= -1.0;
    }
    return outputValue;
}
function getOutputTranslationY(translation, particles, particleIndex, isInverted, parentGravity) {
    var outputValue = translation.y;
    if (isInverted) {
        outputValue *= -1.0;
    }
    return outputValue;
}
function getOutputAngle(translation, particles, particleIndex, isInverted, parentGravity) {
    var outputValue;
    if (particleIndex >= 2) {
        parentGravity = particles[particleIndex - 1].position.substract(particles[particleIndex - 2].position);
    }
    else {
        parentGravity = parentGravity.multiplyByScaler(-1.0);
    }
    outputValue = cubismmath_1.CubismMath.directionToRadian(parentGravity, translation);
    if (isInverted) {
        outputValue *= -1.0;
    }
    return outputValue;
}
function getRangeValue(min, max) {
    var maxValue = cubismmath_1.CubismMath.max(min, max);
    var minValue = cubismmath_1.CubismMath.min(min, max);
    return cubismmath_1.CubismMath.abs(maxValue - minValue);
}
function getDefaultValue(min, max) {
    var minValue = cubismmath_1.CubismMath.min(min, max);
    return minValue + getRangeValue(min, max) / 2.0;
}
function getOutputScaleTranslationX(translationScale, angleScale) {
    return JSON.parse(JSON.stringify(translationScale.x));
}
function getOutputScaleTranslationY(translationScale, angleScale) {
    return JSON.parse(JSON.stringify(translationScale.y));
}
function getOutputScaleAngle(translationScale, angleScale) {
    return JSON.parse(JSON.stringify(angleScale));
}
function updateParticles(strand, strandCount, totalTranslation, totalAngle, windDirection, thresholdValue, deltaTimeSeconds, airResistance) {
    var totalRadian;
    var delay;
    var radian;
    var currentGravity;
    var direction = new cubismvector2_1.CubismVector2(0.0, 0.0);
    var velocity = new cubismvector2_1.CubismVector2(0.0, 0.0);
    var force = new cubismvector2_1.CubismVector2(0.0, 0.0);
    var newDirection = new cubismvector2_1.CubismVector2(0.0, 0.0);
    strand[0].position = new cubismvector2_1.CubismVector2(totalTranslation.x, totalTranslation.y);
    totalRadian = cubismmath_1.CubismMath.degreesToRadian(totalAngle);
    currentGravity = cubismmath_1.CubismMath.radianToDirection(totalRadian);
    currentGravity.normalize();
    for (var i = 1; i < strandCount; ++i) {
        strand[i].force = currentGravity
            .multiplyByScaler(strand[i].acceleration)
            .add(windDirection);
        strand[i].lastPosition = new cubismvector2_1.CubismVector2(strand[i].position.x, strand[i].position.y);
        delay = strand[i].delay * deltaTimeSeconds * 30.0;
        direction = strand[i].position.substract(strand[i - 1].position);
        radian =
            cubismmath_1.CubismMath.directionToRadian(strand[i].lastGravity, currentGravity) /
                airResistance;
        direction.x =
            cubismmath_1.CubismMath.cos(radian) * direction.x -
                direction.y * cubismmath_1.CubismMath.sin(radian);
        direction.y =
            cubismmath_1.CubismMath.sin(radian) * direction.x +
                direction.y * cubismmath_1.CubismMath.cos(radian);
        strand[i].position = strand[i - 1].position.add(direction);
        velocity = strand[i].velocity.multiplyByScaler(delay);
        force = strand[i].force.multiplyByScaler(delay).multiplyByScaler(delay);
        strand[i].position = strand[i].position.add(velocity).add(force);
        newDirection = strand[i].position.substract(strand[i - 1].position);
        newDirection.normalize();
        strand[i].position = strand[i - 1].position.add(newDirection.multiplyByScaler(strand[i].radius));
        if (cubismmath_1.CubismMath.abs(strand[i].position.x) < thresholdValue) {
            strand[i].position.x = 0.0;
        }
        if (delay != 0.0) {
            strand[i].velocity = strand[i].position.substract(strand[i].lastPosition);
            strand[i].velocity = strand[i].velocity.divisionByScalar(delay);
            strand[i].velocity = strand[i].velocity.multiplyByScaler(strand[i].mobility);
        }
        strand[i].force = new cubismvector2_1.CubismVector2(0.0, 0.0);
        strand[i].lastGravity = new cubismvector2_1.CubismVector2(currentGravity.x, currentGravity.y);
    }
}
function updateParticlesForStabilization(strand, strandCount, totalTranslation, totalAngle, windDirection, thresholdValue) {
    var totalRadian;
    var currentGravity;
    var force = new cubismvector2_1.CubismVector2(0.0, 0.0);
    strand[0].position = new cubismvector2_1.CubismVector2(totalTranslation.x, totalTranslation.y);
    totalRadian = cubismmath_1.CubismMath.degreesToRadian(totalAngle);
    currentGravity = cubismmath_1.CubismMath.radianToDirection(totalRadian);
    currentGravity.normalize();
    for (var i = 1; i < strandCount; ++i) {
        strand[i].force = currentGravity
            .multiplyByScaler(strand[i].acceleration)
            .add(windDirection);
        strand[i].lastPosition = new cubismvector2_1.CubismVector2(strand[i].position.x, strand[i].position.y);
        strand[i].velocity = new cubismvector2_1.CubismVector2(0.0, 0.0);
        force = strand[i].force;
        force.normalize();
        force = force.multiplyByScaler(strand[i].radius);
        strand[i].position = strand[i - 1].position.add(force);
        if (cubismmath_1.CubismMath.abs(strand[i].position.x) < thresholdValue) {
            strand[i].position.x = 0.0;
        }
        strand[i].force = new cubismvector2_1.CubismVector2(0.0, 0.0);
        strand[i].lastGravity = new cubismvector2_1.CubismVector2(currentGravity.x, currentGravity.y);
    }
}
function updateOutputParameterValue(parameterValue, parameterValueMinimum, parameterValueMaximum, translation, output) {
    var outputScale;
    var value;
    var weight;
    outputScale = output.getScale(output.translationScale, output.angleScale);
    value = translation * outputScale;
    if (value < parameterValueMinimum) {
        if (value < output.valueBelowMinimum) {
            output.valueBelowMinimum = value;
        }
        value = parameterValueMinimum;
    }
    else if (value > parameterValueMaximum) {
        if (value > output.valueExceededMaximum) {
            output.valueExceededMaximum = value;
        }
        value = parameterValueMaximum;
    }
    weight = output.weight / MaximumWeight;
    if (weight >= 1.0) {
        parameterValue[0] = value;
    }
    else {
        value = parameterValue[0] * (1.0 - weight) + value * weight;
        parameterValue[0] = value;
    }
}
function normalizeParameterValue(value, parameterMinimum, parameterMaximum, parameterDefault, normalizedMinimum, normalizedMaximum, normalizedDefault, isInverted) {
    var result = 0.0;
    var maxValue = cubismmath_1.CubismMath.max(parameterMaximum, parameterMinimum);
    if (maxValue < value) {
        value = maxValue;
    }
    var minValue = cubismmath_1.CubismMath.min(parameterMaximum, parameterMinimum);
    if (minValue > value) {
        value = minValue;
    }
    var minNormValue = cubismmath_1.CubismMath.min(normalizedMinimum, normalizedMaximum);
    var maxNormValue = cubismmath_1.CubismMath.max(normalizedMinimum, normalizedMaximum);
    var middleNormValue = normalizedDefault;
    var middleValue = getDefaultValue(minValue, maxValue);
    var paramValue = value - middleValue;
    switch (sign(paramValue)) {
        case 1: {
            var nLength = maxNormValue - middleNormValue;
            var pLength = maxValue - middleValue;
            if (pLength != 0.0) {
                result = paramValue * (nLength / pLength);
                result += middleNormValue;
            }
            break;
        }
        case -1: {
            var nLength = minNormValue - middleNormValue;
            var pLength = minValue - middleValue;
            if (pLength != 0.0) {
                result = paramValue * (nLength / pLength);
                result += middleNormValue;
            }
            break;
        }
        case 0: {
            result = middleNormValue;
            break;
        }
        default: {
            break;
        }
    }
    return isInverted ? result : result * -1.0;
}
var $ = __importStar(__webpack_require__(/*! ./cubismphysics */ "./vendor/Framework/src/physics/cubismphysics.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismPhysics = $.CubismPhysics;
    Live2DCubismFramework.Options = $.Options;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/physics/cubismphysicsinternal.ts":
/*!***************************************************************!*\
  !*** ./vendor/Framework/src/physics/cubismphysicsinternal.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismPhysicsRig = exports.CubismPhysicsOutput = exports.CubismPhysicsInput = exports.CubismPhysicsSubRig = exports.CubismPhysicsParticle = exports.CubismPhysicsNormalization = exports.CubismPhysicsParameter = exports.PhysicsJsonEffectiveForces = exports.CubismPhysicsSource = exports.CubismPhysicsTargetType = void 0;
var cubismvector2_1 = __webpack_require__(/*! ../math/cubismvector2 */ "./vendor/Framework/src/math/cubismvector2.ts");
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "./vendor/Framework/src/type/csmvector.ts");
var CubismPhysicsTargetType;
(function (CubismPhysicsTargetType) {
    CubismPhysicsTargetType[CubismPhysicsTargetType["CubismPhysicsTargetType_Parameter"] = 0] = "CubismPhysicsTargetType_Parameter";
})(CubismPhysicsTargetType = exports.CubismPhysicsTargetType || (exports.CubismPhysicsTargetType = {}));
var CubismPhysicsSource;
(function (CubismPhysicsSource) {
    CubismPhysicsSource[CubismPhysicsSource["CubismPhysicsSource_X"] = 0] = "CubismPhysicsSource_X";
    CubismPhysicsSource[CubismPhysicsSource["CubismPhysicsSource_Y"] = 1] = "CubismPhysicsSource_Y";
    CubismPhysicsSource[CubismPhysicsSource["CubismPhysicsSource_Angle"] = 2] = "CubismPhysicsSource_Angle";
})(CubismPhysicsSource = exports.CubismPhysicsSource || (exports.CubismPhysicsSource = {}));
var PhysicsJsonEffectiveForces = (function () {
    function PhysicsJsonEffectiveForces() {
        this.gravity = new cubismvector2_1.CubismVector2(0, 0);
        this.wind = new cubismvector2_1.CubismVector2(0, 0);
    }
    return PhysicsJsonEffectiveForces;
}());
exports.PhysicsJsonEffectiveForces = PhysicsJsonEffectiveForces;
var CubismPhysicsParameter = (function () {
    function CubismPhysicsParameter() {
    }
    return CubismPhysicsParameter;
}());
exports.CubismPhysicsParameter = CubismPhysicsParameter;
var CubismPhysicsNormalization = (function () {
    function CubismPhysicsNormalization() {
    }
    return CubismPhysicsNormalization;
}());
exports.CubismPhysicsNormalization = CubismPhysicsNormalization;
var CubismPhysicsParticle = (function () {
    function CubismPhysicsParticle() {
        this.initialPosition = new cubismvector2_1.CubismVector2(0, 0);
        this.position = new cubismvector2_1.CubismVector2(0, 0);
        this.lastPosition = new cubismvector2_1.CubismVector2(0, 0);
        this.lastGravity = new cubismvector2_1.CubismVector2(0, 0);
        this.force = new cubismvector2_1.CubismVector2(0, 0);
        this.velocity = new cubismvector2_1.CubismVector2(0, 0);
    }
    return CubismPhysicsParticle;
}());
exports.CubismPhysicsParticle = CubismPhysicsParticle;
var CubismPhysicsSubRig = (function () {
    function CubismPhysicsSubRig() {
        this.normalizationPosition = new CubismPhysicsNormalization();
        this.normalizationAngle = new CubismPhysicsNormalization();
    }
    return CubismPhysicsSubRig;
}());
exports.CubismPhysicsSubRig = CubismPhysicsSubRig;
var CubismPhysicsInput = (function () {
    function CubismPhysicsInput() {
        this.source = new CubismPhysicsParameter();
    }
    return CubismPhysicsInput;
}());
exports.CubismPhysicsInput = CubismPhysicsInput;
var CubismPhysicsOutput = (function () {
    function CubismPhysicsOutput() {
        this.destination = new CubismPhysicsParameter();
        this.translationScale = new cubismvector2_1.CubismVector2(0, 0);
    }
    return CubismPhysicsOutput;
}());
exports.CubismPhysicsOutput = CubismPhysicsOutput;
var CubismPhysicsRig = (function () {
    function CubismPhysicsRig() {
        this.settings = new csmvector_1.csmVector();
        this.inputs = new csmvector_1.csmVector();
        this.outputs = new csmvector_1.csmVector();
        this.particles = new csmvector_1.csmVector();
        this.gravity = new cubismvector2_1.CubismVector2(0, 0);
        this.wind = new cubismvector2_1.CubismVector2(0, 0);
        this.fps = 0.0;
    }
    return CubismPhysicsRig;
}());
exports.CubismPhysicsRig = CubismPhysicsRig;
var $ = __importStar(__webpack_require__(/*! ./cubismphysicsinternal */ "./vendor/Framework/src/physics/cubismphysicsinternal.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismPhysicsInput = $.CubismPhysicsInput;
    Live2DCubismFramework.CubismPhysicsNormalization = $.CubismPhysicsNormalization;
    Live2DCubismFramework.CubismPhysicsOutput = $.CubismPhysicsOutput;
    Live2DCubismFramework.CubismPhysicsParameter = $.CubismPhysicsParameter;
    Live2DCubismFramework.CubismPhysicsParticle = $.CubismPhysicsParticle;
    Live2DCubismFramework.CubismPhysicsRig = $.CubismPhysicsRig;
    Live2DCubismFramework.CubismPhysicsSource = $.CubismPhysicsSource;
    Live2DCubismFramework.CubismPhysicsSubRig = $.CubismPhysicsSubRig;
    Live2DCubismFramework.CubismPhysicsTargetType = $.CubismPhysicsTargetType;
    Live2DCubismFramework.PhysicsJsonEffectiveForces = $.PhysicsJsonEffectiveForces;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/physics/cubismphysicsjson.ts":
/*!***********************************************************!*\
  !*** ./vendor/Framework/src/physics/cubismphysicsjson.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismPhysicsJson = void 0;
var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "./vendor/Framework/src/live2dcubismframework.ts");
var cubismvector2_1 = __webpack_require__(/*! ../math/cubismvector2 */ "./vendor/Framework/src/math/cubismvector2.ts");
var cubismjson_1 = __webpack_require__(/*! ../utils/cubismjson */ "./vendor/Framework/src/utils/cubismjson.ts");
var Position = 'Position';
var X = 'X';
var Y = 'Y';
var Angle = 'Angle';
var Type = 'Type';
var Id = 'Id';
var Meta = 'Meta';
var EffectiveForces = 'EffectiveForces';
var TotalInputCount = 'TotalInputCount';
var TotalOutputCount = 'TotalOutputCount';
var PhysicsSettingCount = 'PhysicsSettingCount';
var Gravity = 'Gravity';
var Wind = 'Wind';
var VertexCount = 'VertexCount';
var Fps = 'Fps';
var PhysicsSettings = 'PhysicsSettings';
var Normalization = 'Normalization';
var Minimum = 'Minimum';
var Maximum = 'Maximum';
var Default = 'Default';
var Reflect = 'Reflect';
var Weight = 'Weight';
var Input = 'Input';
var Source = 'Source';
var Output = 'Output';
var Scale = 'Scale';
var VertexIndex = 'VertexIndex';
var Destination = 'Destination';
var Vertices = 'Vertices';
var Mobility = 'Mobility';
var Delay = 'Delay';
var Radius = 'Radius';
var Acceleration = 'Acceleration';
var CubismPhysicsJson = (function () {
    function CubismPhysicsJson(buffer, size) {
        this._json = cubismjson_1.CubismJson.create(buffer, size);
    }
    CubismPhysicsJson.prototype.release = function () {
        cubismjson_1.CubismJson.delete(this._json);
    };
    CubismPhysicsJson.prototype.getGravity = function () {
        var ret = new cubismvector2_1.CubismVector2(0, 0);
        ret.x = this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(EffectiveForces)
            .getValueByString(Gravity)
            .getValueByString(X)
            .toFloat();
        ret.y = this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(EffectiveForces)
            .getValueByString(Gravity)
            .getValueByString(Y)
            .toFloat();
        return ret;
    };
    CubismPhysicsJson.prototype.getWind = function () {
        var ret = new cubismvector2_1.CubismVector2(0, 0);
        ret.x = this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(EffectiveForces)
            .getValueByString(Wind)
            .getValueByString(X)
            .toFloat();
        ret.y = this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(EffectiveForces)
            .getValueByString(Wind)
            .getValueByString(Y)
            .toFloat();
        return ret;
    };
    CubismPhysicsJson.prototype.getFps = function () {
        return this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(Fps)
            .toFloat(0.0);
    };
    CubismPhysicsJson.prototype.getSubRigCount = function () {
        return this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(PhysicsSettingCount)
            .toInt();
    };
    CubismPhysicsJson.prototype.getTotalInputCount = function () {
        return this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(TotalInputCount)
            .toInt();
    };
    CubismPhysicsJson.prototype.getTotalOutputCount = function () {
        return this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(TotalOutputCount)
            .toInt();
    };
    CubismPhysicsJson.prototype.getVertexCount = function () {
        return this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(VertexCount)
            .toInt();
    };
    CubismPhysicsJson.prototype.getNormalizationPositionMinimumValue = function (physicsSettingIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Normalization)
            .getValueByString(Position)
            .getValueByString(Minimum)
            .toFloat();
    };
    CubismPhysicsJson.prototype.getNormalizationPositionMaximumValue = function (physicsSettingIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Normalization)
            .getValueByString(Position)
            .getValueByString(Maximum)
            .toFloat();
    };
    CubismPhysicsJson.prototype.getNormalizationPositionDefaultValue = function (physicsSettingIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Normalization)
            .getValueByString(Position)
            .getValueByString(Default)
            .toFloat();
    };
    CubismPhysicsJson.prototype.getNormalizationAngleMinimumValue = function (physicsSettingIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Normalization)
            .getValueByString(Angle)
            .getValueByString(Minimum)
            .toFloat();
    };
    CubismPhysicsJson.prototype.getNormalizationAngleMaximumValue = function (physicsSettingIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Normalization)
            .getValueByString(Angle)
            .getValueByString(Maximum)
            .toFloat();
    };
    CubismPhysicsJson.prototype.getNormalizationAngleDefaultValue = function (physicsSettingIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Normalization)
            .getValueByString(Angle)
            .getValueByString(Default)
            .toFloat();
    };
    CubismPhysicsJson.prototype.getInputCount = function (physicsSettingIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Input)
            .getVector()
            .getSize();
    };
    CubismPhysicsJson.prototype.getInputWeight = function (physicsSettingIndex, inputIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Input)
            .getValueByIndex(inputIndex)
            .getValueByString(Weight)
            .toFloat();
    };
    CubismPhysicsJson.prototype.getInputReflect = function (physicsSettingIndex, inputIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Input)
            .getValueByIndex(inputIndex)
            .getValueByString(Reflect)
            .toBoolean();
    };
    CubismPhysicsJson.prototype.getInputType = function (physicsSettingIndex, inputIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Input)
            .getValueByIndex(inputIndex)
            .getValueByString(Type)
            .getRawString();
    };
    CubismPhysicsJson.prototype.getInputSourceId = function (physicsSettingIndex, inputIndex) {
        return live2dcubismframework_1.CubismFramework.getIdManager().getId(this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Input)
            .getValueByIndex(inputIndex)
            .getValueByString(Source)
            .getValueByString(Id)
            .getRawString());
    };
    CubismPhysicsJson.prototype.getOutputCount = function (physicsSettingIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Output)
            .getVector()
            .getSize();
    };
    CubismPhysicsJson.prototype.getOutputVertexIndex = function (physicsSettingIndex, outputIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Output)
            .getValueByIndex(outputIndex)
            .getValueByString(VertexIndex)
            .toInt();
    };
    CubismPhysicsJson.prototype.getOutputAngleScale = function (physicsSettingIndex, outputIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Output)
            .getValueByIndex(outputIndex)
            .getValueByString(Scale)
            .toFloat();
    };
    CubismPhysicsJson.prototype.getOutputWeight = function (physicsSettingIndex, outputIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Output)
            .getValueByIndex(outputIndex)
            .getValueByString(Weight)
            .toFloat();
    };
    CubismPhysicsJson.prototype.getOutputDestinationId = function (physicsSettingIndex, outputIndex) {
        return live2dcubismframework_1.CubismFramework.getIdManager().getId(this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Output)
            .getValueByIndex(outputIndex)
            .getValueByString(Destination)
            .getValueByString(Id)
            .getRawString());
    };
    CubismPhysicsJson.prototype.getOutputType = function (physicsSettingIndex, outputIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Output)
            .getValueByIndex(outputIndex)
            .getValueByString(Type)
            .getRawString();
    };
    CubismPhysicsJson.prototype.getOutputReflect = function (physicsSettingIndex, outputIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Output)
            .getValueByIndex(outputIndex)
            .getValueByString(Reflect)
            .toBoolean();
    };
    CubismPhysicsJson.prototype.getParticleCount = function (physicsSettingIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Vertices)
            .getVector()
            .getSize();
    };
    CubismPhysicsJson.prototype.getParticleMobility = function (physicsSettingIndex, vertexIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Vertices)
            .getValueByIndex(vertexIndex)
            .getValueByString(Mobility)
            .toFloat();
    };
    CubismPhysicsJson.prototype.getParticleDelay = function (physicsSettingIndex, vertexIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Vertices)
            .getValueByIndex(vertexIndex)
            .getValueByString(Delay)
            .toFloat();
    };
    CubismPhysicsJson.prototype.getParticleAcceleration = function (physicsSettingIndex, vertexIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Vertices)
            .getValueByIndex(vertexIndex)
            .getValueByString(Acceleration)
            .toFloat();
    };
    CubismPhysicsJson.prototype.getParticleRadius = function (physicsSettingIndex, vertexIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Vertices)
            .getValueByIndex(vertexIndex)
            .getValueByString(Radius)
            .toFloat();
    };
    CubismPhysicsJson.prototype.getParticlePosition = function (physicsSettingIndex, vertexIndex) {
        var ret = new cubismvector2_1.CubismVector2(0, 0);
        ret.x = this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Vertices)
            .getValueByIndex(vertexIndex)
            .getValueByString(Position)
            .getValueByString(X)
            .toFloat();
        ret.y = this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Vertices)
            .getValueByIndex(vertexIndex)
            .getValueByString(Position)
            .getValueByString(Y)
            .toFloat();
        return ret;
    };
    return CubismPhysicsJson;
}());
exports.CubismPhysicsJson = CubismPhysicsJson;
var $ = __importStar(__webpack_require__(/*! ./cubismphysicsjson */ "./vendor/Framework/src/physics/cubismphysicsjson.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismPhysicsJson = $.CubismPhysicsJson;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/rendering/cubismrenderer.ts":
/*!**********************************************************!*\
  !*** ./vendor/Framework/src/rendering/cubismrenderer.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismTextureColor = exports.CubismBlendMode = exports.CubismRenderer = void 0;
var cubismmatrix44_1 = __webpack_require__(/*! ../math/cubismmatrix44 */ "./vendor/Framework/src/math/cubismmatrix44.ts");
var CubismRenderer = (function () {
    function CubismRenderer() {
        this._isCulling = false;
        this._isPremultipliedAlpha = false;
        this._anisotropy = 0.0;
        this._model = null;
        this._modelColor = new CubismTextureColor();
        this._mvpMatrix4x4 = new cubismmatrix44_1.CubismMatrix44();
        this._mvpMatrix4x4.loadIdentity();
    }
    CubismRenderer.create = function () {
        return null;
    };
    CubismRenderer.delete = function (renderer) {
        renderer = null;
    };
    CubismRenderer.prototype.initialize = function (model) {
        this._model = model;
    };
    CubismRenderer.prototype.drawModel = function () {
        if (this.getModel() == null)
            return;
        this.doDrawModel();
    };
    CubismRenderer.prototype.setMvpMatrix = function (matrix44) {
        this._mvpMatrix4x4.setMatrix(matrix44.getArray());
    };
    CubismRenderer.prototype.getMvpMatrix = function () {
        return this._mvpMatrix4x4;
    };
    CubismRenderer.prototype.setModelColor = function (red, green, blue, alpha) {
        if (red < 0.0) {
            red = 0.0;
        }
        else if (red > 1.0) {
            red = 1.0;
        }
        if (green < 0.0) {
            green = 0.0;
        }
        else if (green > 1.0) {
            green = 1.0;
        }
        if (blue < 0.0) {
            blue = 0.0;
        }
        else if (blue > 1.0) {
            blue = 1.0;
        }
        if (alpha < 0.0) {
            alpha = 0.0;
        }
        else if (alpha > 1.0) {
            alpha = 1.0;
        }
        this._modelColor.R = red;
        this._modelColor.G = green;
        this._modelColor.B = blue;
        this._modelColor.A = alpha;
    };
    CubismRenderer.prototype.getModelColor = function () {
        return JSON.parse(JSON.stringify(this._modelColor));
    };
    CubismRenderer.prototype.setIsPremultipliedAlpha = function (enable) {
        this._isPremultipliedAlpha = enable;
    };
    CubismRenderer.prototype.isPremultipliedAlpha = function () {
        return this._isPremultipliedAlpha;
    };
    CubismRenderer.prototype.setIsCulling = function (culling) {
        this._isCulling = culling;
    };
    CubismRenderer.prototype.isCulling = function () {
        return this._isCulling;
    };
    CubismRenderer.prototype.setAnisotropy = function (n) {
        this._anisotropy = n;
    };
    CubismRenderer.prototype.getAnisotropy = function () {
        return this._anisotropy;
    };
    CubismRenderer.prototype.getModel = function () {
        return this._model;
    };
    return CubismRenderer;
}());
exports.CubismRenderer = CubismRenderer;
var CubismBlendMode;
(function (CubismBlendMode) {
    CubismBlendMode[CubismBlendMode["CubismBlendMode_Normal"] = 0] = "CubismBlendMode_Normal";
    CubismBlendMode[CubismBlendMode["CubismBlendMode_Additive"] = 1] = "CubismBlendMode_Additive";
    CubismBlendMode[CubismBlendMode["CubismBlendMode_Multiplicative"] = 2] = "CubismBlendMode_Multiplicative";
})(CubismBlendMode = exports.CubismBlendMode || (exports.CubismBlendMode = {}));
var CubismTextureColor = (function () {
    function CubismTextureColor() {
        this.R = 1.0;
        this.G = 1.0;
        this.B = 1.0;
        this.A = 1.0;
    }
    return CubismTextureColor;
}());
exports.CubismTextureColor = CubismTextureColor;
var $ = __importStar(__webpack_require__(/*! ./cubismrenderer */ "./vendor/Framework/src/rendering/cubismrenderer.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismBlendMode = $.CubismBlendMode;
    Live2DCubismFramework.CubismRenderer = $.CubismRenderer;
    Live2DCubismFramework.CubismTextureColor = $.CubismTextureColor;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/rendering/cubismrenderer_webgl.ts":
/*!****************************************************************!*\
  !*** ./vendor/Framework/src/rendering/cubismrenderer_webgl.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismRenderer_WebGL = exports.fragmentShaderSrcMaskInvertedPremultipliedAlpha = exports.fragmentShaderSrcMaskPremultipliedAlpha = exports.fragmentShaderSrcPremultipliedAlpha = exports.vertexShaderSrcMasked = exports.vertexShaderSrc = exports.fragmentShaderSrcsetupMask = exports.vertexShaderSrcSetupMask = exports.ShaderNames = exports.CubismShaderSet = exports.CubismShader_WebGL = exports.CubismClippingContext = exports.CubismRenderTextureResource = exports.CubismClippingManager_WebGL = void 0;
var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "./vendor/Framework/src/live2dcubismframework.ts");
var cubismmatrix44_1 = __webpack_require__(/*! ../math/cubismmatrix44 */ "./vendor/Framework/src/math/cubismmatrix44.ts");
var csmmap_1 = __webpack_require__(/*! ../type/csmmap */ "./vendor/Framework/src/type/csmmap.ts");
var csmrectf_1 = __webpack_require__(/*! ../type/csmrectf */ "./vendor/Framework/src/type/csmrectf.ts");
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "./vendor/Framework/src/type/csmvector.ts");
var cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ "./vendor/Framework/src/utils/cubismdebug.ts");
var cubismrenderer_1 = __webpack_require__(/*! ./cubismrenderer */ "./vendor/Framework/src/rendering/cubismrenderer.ts");
var ColorChannelCount = 4;
var shaderCount = 10;
var s_instance;
var s_viewport;
var s_fbo;
var CubismClippingManager_WebGL = (function () {
    function CubismClippingManager_WebGL() {
        this._maskRenderTexture = null;
        this._colorBuffer = null;
        this._currentFrameNo = 0;
        this._clippingMaskBufferSize = 256;
        this._clippingContextListForMask = new csmvector_1.csmVector();
        this._clippingContextListForDraw = new csmvector_1.csmVector();
        this._channelColors = new csmvector_1.csmVector();
        this._tmpBoundsOnModel = new csmrectf_1.csmRect();
        this._tmpMatrix = new cubismmatrix44_1.CubismMatrix44();
        this._tmpMatrixForMask = new cubismmatrix44_1.CubismMatrix44();
        this._tmpMatrixForDraw = new cubismmatrix44_1.CubismMatrix44();
        this._maskTexture = null;
        var tmp = new cubismrenderer_1.CubismTextureColor();
        tmp.R = 1.0;
        tmp.G = 0.0;
        tmp.B = 0.0;
        tmp.A = 0.0;
        this._channelColors.pushBack(tmp);
        tmp = new cubismrenderer_1.CubismTextureColor();
        tmp.R = 0.0;
        tmp.G = 1.0;
        tmp.B = 0.0;
        tmp.A = 0.0;
        this._channelColors.pushBack(tmp);
        tmp = new cubismrenderer_1.CubismTextureColor();
        tmp.R = 0.0;
        tmp.G = 0.0;
        tmp.B = 1.0;
        tmp.A = 0.0;
        this._channelColors.pushBack(tmp);
        tmp = new cubismrenderer_1.CubismTextureColor();
        tmp.R = 0.0;
        tmp.G = 0.0;
        tmp.B = 0.0;
        tmp.A = 1.0;
        this._channelColors.pushBack(tmp);
    }
    CubismClippingManager_WebGL.prototype.getChannelFlagAsColor = function (channelNo) {
        return this._channelColors.at(channelNo);
    };
    CubismClippingManager_WebGL.prototype.getMaskRenderTexture = function () {
        var ret = 0;
        if (this._maskTexture && this._maskTexture.texture != 0) {
            this._maskTexture.frameNo = this._currentFrameNo;
            ret = this._maskTexture.texture;
        }
        if (ret == 0) {
            var size = this._clippingMaskBufferSize;
            this._colorBuffer = this.gl.createTexture();
            this.gl.bindTexture(this.gl.TEXTURE_2D, this._colorBuffer);
            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, size, size, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, null);
            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);
            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);
            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR);
            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);
            this.gl.bindTexture(this.gl.TEXTURE_2D, null);
            ret = this.gl.createFramebuffer();
            this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, ret);
            this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER, this.gl.COLOR_ATTACHMENT0, this.gl.TEXTURE_2D, this._colorBuffer, 0);
            this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, s_fbo);
            this._maskTexture = new CubismRenderTextureResource(this._currentFrameNo, ret);
        }
        return ret;
    };
    CubismClippingManager_WebGL.prototype.setGL = function (gl) {
        this.gl = gl;
    };
    CubismClippingManager_WebGL.prototype.calcClippedDrawTotalBounds = function (model, clippingContext) {
        var clippedDrawTotalMinX = Number.MAX_VALUE;
        var clippedDrawTotalMinY = Number.MAX_VALUE;
        var clippedDrawTotalMaxX = Number.MIN_VALUE;
        var clippedDrawTotalMaxY = Number.MIN_VALUE;
        var clippedDrawCount = clippingContext._clippedDrawableIndexList.length;
        for (var clippedDrawableIndex = 0; clippedDrawableIndex < clippedDrawCount; clippedDrawableIndex++) {
            var drawableIndex = clippingContext._clippedDrawableIndexList[clippedDrawableIndex];
            var drawableVertexCount = model.getDrawableVertexCount(drawableIndex);
            var drawableVertexes = model.getDrawableVertices(drawableIndex);
            var minX = Number.MAX_VALUE;
            var minY = Number.MAX_VALUE;
            var maxX = Number.MIN_VALUE;
            var maxY = Number.MIN_VALUE;
            var loop = drawableVertexCount * live2dcubismframework_1.Constant.vertexStep;
            for (var pi = live2dcubismframework_1.Constant.vertexOffset; pi < loop; pi += live2dcubismframework_1.Constant.vertexStep) {
                var x = drawableVertexes[pi];
                var y = drawableVertexes[pi + 1];
                if (x < minX) {
                    minX = x;
                }
                if (x > maxX) {
                    maxX = x;
                }
                if (y < minY) {
                    minY = y;
                }
                if (y > maxY) {
                    maxY = y;
                }
            }
            if (minX == Number.MAX_VALUE) {
                continue;
            }
            if (minX < clippedDrawTotalMinX) {
                clippedDrawTotalMinX = minX;
            }
            if (minY < clippedDrawTotalMinY) {
                clippedDrawTotalMinY = minY;
            }
            if (maxX > clippedDrawTotalMaxX) {
                clippedDrawTotalMaxX = maxX;
            }
            if (maxY > clippedDrawTotalMaxY) {
                clippedDrawTotalMaxY = maxY;
            }
            if (clippedDrawTotalMinX == Number.MAX_VALUE) {
                clippingContext._allClippedDrawRect.x = 0.0;
                clippingContext._allClippedDrawRect.y = 0.0;
                clippingContext._allClippedDrawRect.width = 0.0;
                clippingContext._allClippedDrawRect.height = 0.0;
                clippingContext._isUsing = false;
            }
            else {
                clippingContext._isUsing = true;
                var w = clippedDrawTotalMaxX - clippedDrawTotalMinX;
                var h = clippedDrawTotalMaxY - clippedDrawTotalMinY;
                clippingContext._allClippedDrawRect.x = clippedDrawTotalMinX;
                clippingContext._allClippedDrawRect.y = clippedDrawTotalMinY;
                clippingContext._allClippedDrawRect.width = w;
                clippingContext._allClippedDrawRect.height = h;
            }
        }
    };
    CubismClippingManager_WebGL.prototype.release = function () {
        for (var i = 0; i < this._clippingContextListForMask.getSize(); i++) {
            if (this._clippingContextListForMask.at(i)) {
                this._clippingContextListForMask.at(i).release();
                this._clippingContextListForMask.set(i, void 0);
            }
            this._clippingContextListForMask.set(i, null);
        }
        this._clippingContextListForMask = null;
        for (var i = 0; i < this._clippingContextListForDraw.getSize(); i++) {
            this._clippingContextListForDraw.set(i, null);
        }
        this._clippingContextListForDraw = null;
        if (this._maskTexture) {
            this.gl.deleteFramebuffer(this._maskTexture.texture);
            this._maskTexture = null;
        }
        for (var i = 0; i < this._channelColors.getSize(); i++) {
            this._channelColors.set(i, null);
        }
        this._channelColors = null;
        this.gl.deleteTexture(this._colorBuffer);
        this._colorBuffer = null;
    };
    CubismClippingManager_WebGL.prototype.initialize = function (model, drawableCount, drawableMasks, drawableMaskCounts) {
        for (var i = 0; i < drawableCount; i++) {
            if (drawableMaskCounts[i] <= 0) {
                this._clippingContextListForDraw.pushBack(null);
                continue;
            }
            var clippingContext = this.findSameClip(drawableMasks[i], drawableMaskCounts[i]);
            if (clippingContext == null) {
                clippingContext = new CubismClippingContext(this, drawableMasks[i], drawableMaskCounts[i]);
                this._clippingContextListForMask.pushBack(clippingContext);
            }
            clippingContext.addClippedDrawable(i);
            this._clippingContextListForDraw.pushBack(clippingContext);
        }
    };
    CubismClippingManager_WebGL.prototype.setupClippingContext = function (model, renderer) {
        this._currentFrameNo++;
        var usingClipCount = 0;
        for (var clipIndex = 0; clipIndex < this._clippingContextListForMask.getSize(); clipIndex++) {
            var cc = this._clippingContextListForMask.at(clipIndex);
            this.calcClippedDrawTotalBounds(model, cc);
            if (cc._isUsing) {
                usingClipCount++;
            }
        }
        if (usingClipCount > 0) {
            this.gl.viewport(0, 0, this._clippingMaskBufferSize, this._clippingMaskBufferSize);
            this._maskRenderTexture = this.getMaskRenderTexture();
            var modelToWorldF = renderer.getMvpMatrix();
            renderer.preDraw();
            this.setupLayoutBounds(usingClipCount);
            this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this._maskRenderTexture);
            this.gl.clearColor(1.0, 1.0, 1.0, 1.0);
            this.gl.clear(this.gl.COLOR_BUFFER_BIT);
            for (var clipIndex = 0; clipIndex < this._clippingContextListForMask.getSize(); clipIndex++) {
                var clipContext = this._clippingContextListForMask.at(clipIndex);
                var allClipedDrawRect = clipContext._allClippedDrawRect;
                var layoutBoundsOnTex01 = clipContext._layoutBounds;
                var MARGIN = 0.05;
                this._tmpBoundsOnModel.setRect(allClipedDrawRect);
                this._tmpBoundsOnModel.expand(allClipedDrawRect.width * MARGIN, allClipedDrawRect.height * MARGIN);
                var scaleX = layoutBoundsOnTex01.width / this._tmpBoundsOnModel.width;
                var scaleY = layoutBoundsOnTex01.height / this._tmpBoundsOnModel.height;
                {
                    this._tmpMatrix.loadIdentity();
                    {
                        this._tmpMatrix.translateRelative(-1.0, -1.0);
                        this._tmpMatrix.scaleRelative(2.0, 2.0);
                    }
                    {
                        this._tmpMatrix.translateRelative(layoutBoundsOnTex01.x, layoutBoundsOnTex01.y);
                        this._tmpMatrix.scaleRelative(scaleX, scaleY);
                        this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x, -this._tmpBoundsOnModel.y);
                    }
                    this._tmpMatrixForMask.setMatrix(this._tmpMatrix.getArray());
                }
                {
                    this._tmpMatrix.loadIdentity();
                    {
                        this._tmpMatrix.translateRelative(layoutBoundsOnTex01.x, layoutBoundsOnTex01.y);
                        this._tmpMatrix.scaleRelative(scaleX, scaleY);
                        this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x, -this._tmpBoundsOnModel.y);
                    }
                    this._tmpMatrixForDraw.setMatrix(this._tmpMatrix.getArray());
                }
                clipContext._matrixForMask.setMatrix(this._tmpMatrixForMask.getArray());
                clipContext._matrixForDraw.setMatrix(this._tmpMatrixForDraw.getArray());
                var clipDrawCount = clipContext._clippingIdCount;
                for (var i = 0; i < clipDrawCount; i++) {
                    var clipDrawIndex = clipContext._clippingIdList[i];
                    if (!model.getDrawableDynamicFlagVertexPositionsDidChange(clipDrawIndex)) {
                        continue;
                    }
                    renderer.setIsCulling(model.getDrawableCulling(clipDrawIndex) != false);
                    renderer.setClippingContextBufferForMask(clipContext);
                    renderer.drawMesh(model.getDrawableTextureIndex(clipDrawIndex), model.getDrawableVertexIndexCount(clipDrawIndex), model.getDrawableVertexCount(clipDrawIndex), model.getDrawableVertexIndices(clipDrawIndex), model.getDrawableVertices(clipDrawIndex), model.getDrawableVertexUvs(clipDrawIndex), model.getMultiplyColor(clipDrawIndex), model.getScreenColor(clipDrawIndex), model.getDrawableOpacity(clipDrawIndex), cubismrenderer_1.CubismBlendMode.CubismBlendMode_Normal, false);
                }
            }
            this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, s_fbo);
            renderer.setClippingContextBufferForMask(null);
            this.gl.viewport(s_viewport[0], s_viewport[1], s_viewport[2], s_viewport[3]);
        }
    };
    CubismClippingManager_WebGL.prototype.findSameClip = function (drawableMasks, drawableMaskCounts) {
        for (var i = 0; i < this._clippingContextListForMask.getSize(); i++) {
            var clippingContext = this._clippingContextListForMask.at(i);
            var count = clippingContext._clippingIdCount;
            if (count != drawableMaskCounts) {
                continue;
            }
            var sameCount = 0;
            for (var j = 0; j < count; j++) {
                var clipId = clippingContext._clippingIdList[j];
                for (var k = 0; k < count; k++) {
                    if (drawableMasks[k] == clipId) {
                        sameCount++;
                        break;
                    }
                }
            }
            if (sameCount == count) {
                return clippingContext;
            }
        }
        return null;
    };
    CubismClippingManager_WebGL.prototype.setupLayoutBounds = function (usingClipCount) {
        var div = usingClipCount / ColorChannelCount;
        var mod = usingClipCount % ColorChannelCount;
        div = ~~div;
        mod = ~~mod;
        var curClipIndex = 0;
        for (var channelNo = 0; channelNo < ColorChannelCount; channelNo++) {
            var layoutCount = div + (channelNo < mod ? 1 : 0);
            if (layoutCount == 0) {
            }
            else if (layoutCount == 1) {
                var clipContext = this._clippingContextListForMask.at(curClipIndex++);
                clipContext._layoutChannelNo = channelNo;
                clipContext._layoutBounds.x = 0.0;
                clipContext._layoutBounds.y = 0.0;
                clipContext._layoutBounds.width = 1.0;
                clipContext._layoutBounds.height = 1.0;
            }
            else if (layoutCount == 2) {
                for (var i = 0; i < layoutCount; i++) {
                    var xpos = i % 2;
                    xpos = ~~xpos;
                    var cc = this._clippingContextListForMask.at(curClipIndex++);
                    cc._layoutChannelNo = channelNo;
                    cc._layoutBounds.x = xpos * 0.5;
                    cc._layoutBounds.y = 0.0;
                    cc._layoutBounds.width = 0.5;
                    cc._layoutBounds.height = 1.0;
                }
            }
            else if (layoutCount <= 4) {
                for (var i = 0; i < layoutCount; i++) {
                    var xpos = i % 2;
                    var ypos = i / 2;
                    xpos = ~~xpos;
                    ypos = ~~ypos;
                    var cc = this._clippingContextListForMask.at(curClipIndex++);
                    cc._layoutChannelNo = channelNo;
                    cc._layoutBounds.x = xpos * 0.5;
                    cc._layoutBounds.y = ypos * 0.5;
                    cc._layoutBounds.width = 0.5;
                    cc._layoutBounds.height = 0.5;
                }
            }
            else if (layoutCount <= 9) {
                for (var i = 0; i < layoutCount; i++) {
                    var xpos = i % 3;
                    var ypos = i / 3;
                    xpos = ~~xpos;
                    ypos = ~~ypos;
                    var cc = this._clippingContextListForMask.at(curClipIndex++);
                    cc._layoutChannelNo = channelNo;
                    cc._layoutBounds.x = xpos / 3.0;
                    cc._layoutBounds.y = ypos / 3.0;
                    cc._layoutBounds.width = 1.0 / 3.0;
                    cc._layoutBounds.height = 1.0 / 3.0;
                }
            }
            else {
                (0, cubismdebug_1.CubismLogError)('not supported mask count : {0}', layoutCount);
                for (var index = 0; index < layoutCount; index++) {
                    var cc = this._clippingContextListForMask.at(curClipIndex++);
                    cc._layoutChannelNo = 0;
                    cc._layoutBounds.x = 0.0;
                    cc._layoutBounds.y = 0.0;
                    cc._layoutBounds.width = 1.0;
                    cc._layoutBounds.height = 1.0;
                }
            }
        }
    };
    CubismClippingManager_WebGL.prototype.getColorBuffer = function () {
        return this._colorBuffer;
    };
    CubismClippingManager_WebGL.prototype.getClippingContextListForDraw = function () {
        return this._clippingContextListForDraw;
    };
    CubismClippingManager_WebGL.prototype.setClippingMaskBufferSize = function (size) {
        this._clippingMaskBufferSize = size;
    };
    CubismClippingManager_WebGL.prototype.getClippingMaskBufferSize = function () {
        return this._clippingMaskBufferSize;
    };
    return CubismClippingManager_WebGL;
}());
exports.CubismClippingManager_WebGL = CubismClippingManager_WebGL;
var CubismRenderTextureResource = (function () {
    function CubismRenderTextureResource(frameNo, texture) {
        this.frameNo = frameNo;
        this.texture = texture;
    }
    return CubismRenderTextureResource;
}());
exports.CubismRenderTextureResource = CubismRenderTextureResource;
var CubismClippingContext = (function () {
    function CubismClippingContext(manager, clippingDrawableIndices, clipCount) {
        this._owner = manager;
        this._clippingIdList = clippingDrawableIndices;
        this._clippingIdCount = clipCount;
        this._allClippedDrawRect = new csmrectf_1.csmRect();
        this._layoutBounds = new csmrectf_1.csmRect();
        this._clippedDrawableIndexList = [];
        this._matrixForMask = new cubismmatrix44_1.CubismMatrix44();
        this._matrixForDraw = new cubismmatrix44_1.CubismMatrix44();
    }
    CubismClippingContext.prototype.release = function () {
        if (this._layoutBounds != null) {
            this._layoutBounds = null;
        }
        if (this._allClippedDrawRect != null) {
            this._allClippedDrawRect = null;
        }
        if (this._clippedDrawableIndexList != null) {
            this._clippedDrawableIndexList = null;
        }
    };
    CubismClippingContext.prototype.addClippedDrawable = function (drawableIndex) {
        this._clippedDrawableIndexList.push(drawableIndex);
    };
    CubismClippingContext.prototype.getClippingManager = function () {
        return this._owner;
    };
    CubismClippingContext.prototype.setGl = function (gl) {
        this._owner.setGL(gl);
    };
    return CubismClippingContext;
}());
exports.CubismClippingContext = CubismClippingContext;
var CubismShader_WebGL = (function () {
    function CubismShader_WebGL() {
        this._shaderSets = new csmvector_1.csmVector();
    }
    CubismShader_WebGL.getInstance = function () {
        if (s_instance == null) {
            s_instance = new CubismShader_WebGL();
            return s_instance;
        }
        return s_instance;
    };
    CubismShader_WebGL.deleteInstance = function () {
        if (s_instance) {
            s_instance.release();
            s_instance = null;
        }
    };
    CubismShader_WebGL.prototype.release = function () {
        this.releaseShaderProgram();
    };
    CubismShader_WebGL.prototype.setupShaderProgram = function (renderer, textureId, vertexCount, vertexArray, indexArray, uvArray, bufferData, opacity, colorBlendMode, baseColor, multiplyColor, screenColor, isPremultipliedAlpha, matrix4x4, invertedMask) {
        if (!isPremultipliedAlpha) {
            (0, cubismdebug_1.CubismLogError)('NoPremultipliedAlpha is not allowed');
        }
        if (this._shaderSets.getSize() == 0) {
            this.generateShaders();
        }
        var SRC_COLOR;
        var DST_COLOR;
        var SRC_ALPHA;
        var DST_ALPHA;
        if (renderer.getClippingContextBufferForMask() != null) {
            var shaderSet = this._shaderSets.at(ShaderNames.ShaderNames_SetupMask);
            this.gl.useProgram(shaderSet.shaderProgram);
            this.gl.activeTexture(this.gl.TEXTURE0);
            this.gl.bindTexture(this.gl.TEXTURE_2D, textureId);
            this.gl.uniform1i(shaderSet.samplerTexture0Location, 0);
            if (bufferData.vertex == null) {
                bufferData.vertex = this.gl.createBuffer();
            }
            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.vertex);
            this.gl.bufferData(this.gl.ARRAY_BUFFER, vertexArray, this.gl.DYNAMIC_DRAW);
            this.gl.enableVertexAttribArray(shaderSet.attributePositionLocation);
            this.gl.vertexAttribPointer(shaderSet.attributePositionLocation, 2, this.gl.FLOAT, false, 0, 0);
            if (bufferData.uv == null) {
                bufferData.uv = this.gl.createBuffer();
            }
            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.uv);
            this.gl.bufferData(this.gl.ARRAY_BUFFER, uvArray, this.gl.DYNAMIC_DRAW);
            this.gl.enableVertexAttribArray(shaderSet.attributeTexCoordLocation);
            this.gl.vertexAttribPointer(shaderSet.attributeTexCoordLocation, 2, this.gl.FLOAT, false, 0, 0);
            var channelNo = renderer.getClippingContextBufferForMask()._layoutChannelNo;
            var colorChannel = renderer
                .getClippingContextBufferForMask()
                .getClippingManager()
                .getChannelFlagAsColor(channelNo);
            this.gl.uniform4f(shaderSet.uniformChannelFlagLocation, colorChannel.R, colorChannel.G, colorChannel.B, colorChannel.A);
            this.gl.uniformMatrix4fv(shaderSet.uniformClipMatrixLocation, false, renderer.getClippingContextBufferForMask()._matrixForMask.getArray());
            var rect = renderer.getClippingContextBufferForMask()._layoutBounds;
            this.gl.uniform4f(shaderSet.uniformBaseColorLocation, rect.x * 2.0 - 1.0, rect.y * 2.0 - 1.0, rect.getRight() * 2.0 - 1.0, rect.getBottom() * 2.0 - 1.0);
            this.gl.uniform4f(shaderSet.uniformMultiplyColorLocation, multiplyColor.R, multiplyColor.G, multiplyColor.B, multiplyColor.A);
            this.gl.uniform4f(shaderSet.uniformScreenColorLocation, screenColor.R, screenColor.G, screenColor.B, screenColor.A);
            SRC_COLOR = this.gl.ZERO;
            DST_COLOR = this.gl.ONE_MINUS_SRC_COLOR;
            SRC_ALPHA = this.gl.ZERO;
            DST_ALPHA = this.gl.ONE_MINUS_SRC_ALPHA;
        }
        else {
            var masked = renderer.getClippingContextBufferForDraw() != null;
            var offset = masked ? (invertedMask ? 2 : 1) : 0;
            var shaderSet = new CubismShaderSet();
            switch (colorBlendMode) {
                case cubismrenderer_1.CubismBlendMode.CubismBlendMode_Normal:
                default:
                    shaderSet = this._shaderSets.at(ShaderNames.ShaderNames_NormalPremultipliedAlpha + offset);
                    SRC_COLOR = this.gl.ONE;
                    DST_COLOR = this.gl.ONE_MINUS_SRC_ALPHA;
                    SRC_ALPHA = this.gl.ONE;
                    DST_ALPHA = this.gl.ONE_MINUS_SRC_ALPHA;
                    break;
                case cubismrenderer_1.CubismBlendMode.CubismBlendMode_Additive:
                    shaderSet = this._shaderSets.at(ShaderNames.ShaderNames_AddPremultipliedAlpha + offset);
                    SRC_COLOR = this.gl.ONE;
                    DST_COLOR = this.gl.ONE;
                    SRC_ALPHA = this.gl.ZERO;
                    DST_ALPHA = this.gl.ONE;
                    break;
                case cubismrenderer_1.CubismBlendMode.CubismBlendMode_Multiplicative:
                    shaderSet = this._shaderSets.at(ShaderNames.ShaderNames_MultPremultipliedAlpha + offset);
                    SRC_COLOR = this.gl.DST_COLOR;
                    DST_COLOR = this.gl.ONE_MINUS_SRC_ALPHA;
                    SRC_ALPHA = this.gl.ZERO;
                    DST_ALPHA = this.gl.ONE;
                    break;
            }
            this.gl.useProgram(shaderSet.shaderProgram);
            if (bufferData.vertex == null) {
                bufferData.vertex = this.gl.createBuffer();
            }
            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.vertex);
            this.gl.bufferData(this.gl.ARRAY_BUFFER, vertexArray, this.gl.DYNAMIC_DRAW);
            this.gl.enableVertexAttribArray(shaderSet.attributePositionLocation);
            this.gl.vertexAttribPointer(shaderSet.attributePositionLocation, 2, this.gl.FLOAT, false, 0, 0);
            if (bufferData.uv == null) {
                bufferData.uv = this.gl.createBuffer();
            }
            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.uv);
            this.gl.bufferData(this.gl.ARRAY_BUFFER, uvArray, this.gl.DYNAMIC_DRAW);
            this.gl.enableVertexAttribArray(shaderSet.attributeTexCoordLocation);
            this.gl.vertexAttribPointer(shaderSet.attributeTexCoordLocation, 2, this.gl.FLOAT, false, 0, 0);
            if (masked) {
                this.gl.activeTexture(this.gl.TEXTURE1);
                var tex = renderer
                    .getClippingContextBufferForDraw()
                    .getClippingManager()
                    .getColorBuffer();
                this.gl.bindTexture(this.gl.TEXTURE_2D, tex);
                this.gl.uniform1i(shaderSet.samplerTexture1Location, 1);
                this.gl.uniformMatrix4fv(shaderSet.uniformClipMatrixLocation, false, renderer.getClippingContextBufferForDraw()._matrixForDraw.getArray());
                var channelNo = renderer.getClippingContextBufferForDraw()._layoutChannelNo;
                var colorChannel = renderer
                    .getClippingContextBufferForDraw()
                    .getClippingManager()
                    .getChannelFlagAsColor(channelNo);
                this.gl.uniform4f(shaderSet.uniformChannelFlagLocation, colorChannel.R, colorChannel.G, colorChannel.B, colorChannel.A);
            }
            this.gl.activeTexture(this.gl.TEXTURE0);
            this.gl.bindTexture(this.gl.TEXTURE_2D, textureId);
            this.gl.uniform1i(shaderSet.samplerTexture0Location, 0);
            this.gl.uniformMatrix4fv(shaderSet.uniformMatrixLocation, false, matrix4x4.getArray());
            this.gl.uniform4f(shaderSet.uniformBaseColorLocation, baseColor.R, baseColor.G, baseColor.B, baseColor.A);
            this.gl.uniform4f(shaderSet.uniformMultiplyColorLocation, multiplyColor.R, multiplyColor.G, multiplyColor.B, multiplyColor.A);
            this.gl.uniform4f(shaderSet.uniformScreenColorLocation, screenColor.R, screenColor.G, screenColor.B, screenColor.A);
        }
        if (bufferData.index == null) {
            bufferData.index = this.gl.createBuffer();
        }
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, bufferData.index);
        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, indexArray, this.gl.DYNAMIC_DRAW);
        this.gl.blendFuncSeparate(SRC_COLOR, DST_COLOR, SRC_ALPHA, DST_ALPHA);
    };
    CubismShader_WebGL.prototype.releaseShaderProgram = function () {
        for (var i = 0; i < this._shaderSets.getSize(); i++) {
            this.gl.deleteProgram(this._shaderSets.at(i).shaderProgram);
            this._shaderSets.at(i).shaderProgram = 0;
            this._shaderSets.set(i, void 0);
            this._shaderSets.set(i, null);
        }
    };
    CubismShader_WebGL.prototype.generateShaders = function () {
        for (var i = 0; i < shaderCount; i++) {
            this._shaderSets.pushBack(new CubismShaderSet());
        }
        this._shaderSets.at(0).shaderProgram = this.loadShaderProgram(exports.vertexShaderSrcSetupMask, exports.fragmentShaderSrcsetupMask);
        this._shaderSets.at(1).shaderProgram = this.loadShaderProgram(exports.vertexShaderSrc, exports.fragmentShaderSrcPremultipliedAlpha);
        this._shaderSets.at(2).shaderProgram = this.loadShaderProgram(exports.vertexShaderSrcMasked, exports.fragmentShaderSrcMaskPremultipliedAlpha);
        this._shaderSets.at(3).shaderProgram = this.loadShaderProgram(exports.vertexShaderSrcMasked, exports.fragmentShaderSrcMaskInvertedPremultipliedAlpha);
        this._shaderSets.at(4).shaderProgram = this._shaderSets.at(1).shaderProgram;
        this._shaderSets.at(5).shaderProgram = this._shaderSets.at(2).shaderProgram;
        this._shaderSets.at(6).shaderProgram = this._shaderSets.at(3).shaderProgram;
        this._shaderSets.at(7).shaderProgram = this._shaderSets.at(1).shaderProgram;
        this._shaderSets.at(8).shaderProgram = this._shaderSets.at(2).shaderProgram;
        this._shaderSets.at(9).shaderProgram = this._shaderSets.at(3).shaderProgram;
        this._shaderSets.at(0).attributePositionLocation =
            this.gl.getAttribLocation(this._shaderSets.at(0).shaderProgram, 'a_position');
        this._shaderSets.at(0).attributeTexCoordLocation =
            this.gl.getAttribLocation(this._shaderSets.at(0).shaderProgram, 'a_texCoord');
        this._shaderSets.at(0).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, 's_texture0');
        this._shaderSets.at(0).uniformClipMatrixLocation =
            this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, 'u_clipMatrix');
        this._shaderSets.at(0).uniformChannelFlagLocation =
            this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, 'u_channelFlag');
        this._shaderSets.at(0).uniformBaseColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, 'u_baseColor');
        this._shaderSets.at(0).uniformMultiplyColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, 'u_multiplyColor');
        this._shaderSets.at(0).uniformScreenColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, 'u_screenColor');
        this._shaderSets.at(1).attributePositionLocation =
            this.gl.getAttribLocation(this._shaderSets.at(1).shaderProgram, 'a_position');
        this._shaderSets.at(1).attributeTexCoordLocation =
            this.gl.getAttribLocation(this._shaderSets.at(1).shaderProgram, 'a_texCoord');
        this._shaderSets.at(1).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram, 's_texture0');
        this._shaderSets.at(1).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram, 'u_matrix');
        this._shaderSets.at(1).uniformBaseColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram, 'u_baseColor');
        this._shaderSets.at(1).uniformMultiplyColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram, 'u_multiplyColor');
        this._shaderSets.at(1).uniformScreenColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram, 'u_screenColor');
        this._shaderSets.at(2).attributePositionLocation =
            this.gl.getAttribLocation(this._shaderSets.at(2).shaderProgram, 'a_position');
        this._shaderSets.at(2).attributeTexCoordLocation =
            this.gl.getAttribLocation(this._shaderSets.at(2).shaderProgram, 'a_texCoord');
        this._shaderSets.at(2).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 's_texture0');
        this._shaderSets.at(2).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 's_texture1');
        this._shaderSets.at(2).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 'u_matrix');
        this._shaderSets.at(2).uniformClipMatrixLocation =
            this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 'u_clipMatrix');
        this._shaderSets.at(2).uniformChannelFlagLocation =
            this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 'u_channelFlag');
        this._shaderSets.at(2).uniformBaseColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 'u_baseColor');
        this._shaderSets.at(2).uniformMultiplyColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 'u_multiplyColor');
        this._shaderSets.at(2).uniformScreenColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 'u_screenColor');
        this._shaderSets.at(3).attributePositionLocation =
            this.gl.getAttribLocation(this._shaderSets.at(3).shaderProgram, 'a_position');
        this._shaderSets.at(3).attributeTexCoordLocation =
            this.gl.getAttribLocation(this._shaderSets.at(3).shaderProgram, 'a_texCoord');
        this._shaderSets.at(3).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 's_texture0');
        this._shaderSets.at(3).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 's_texture1');
        this._shaderSets.at(3).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 'u_matrix');
        this._shaderSets.at(3).uniformClipMatrixLocation =
            this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 'u_clipMatrix');
        this._shaderSets.at(3).uniformChannelFlagLocation =
            this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 'u_channelFlag');
        this._shaderSets.at(3).uniformBaseColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 'u_baseColor');
        this._shaderSets.at(3).uniformMultiplyColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 'u_multiplyColor');
        this._shaderSets.at(3).uniformScreenColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 'u_screenColor');
        this._shaderSets.at(4).attributePositionLocation =
            this.gl.getAttribLocation(this._shaderSets.at(4).shaderProgram, 'a_position');
        this._shaderSets.at(4).attributeTexCoordLocation =
            this.gl.getAttribLocation(this._shaderSets.at(4).shaderProgram, 'a_texCoord');
        this._shaderSets.at(4).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram, 's_texture0');
        this._shaderSets.at(4).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram, 'u_matrix');
        this._shaderSets.at(4).uniformBaseColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram, 'u_baseColor');
        this._shaderSets.at(4).uniformMultiplyColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram, 'u_multiplyColor');
        this._shaderSets.at(4).uniformScreenColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram, 'u_screenColor');
        this._shaderSets.at(5).attributePositionLocation =
            this.gl.getAttribLocation(this._shaderSets.at(5).shaderProgram, 'a_position');
        this._shaderSets.at(5).attributeTexCoordLocation =
            this.gl.getAttribLocation(this._shaderSets.at(5).shaderProgram, 'a_texCoord');
        this._shaderSets.at(5).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 's_texture0');
        this._shaderSets.at(5).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 's_texture1');
        this._shaderSets.at(5).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 'u_matrix');
        this._shaderSets.at(5).uniformClipMatrixLocation =
            this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 'u_clipMatrix');
        this._shaderSets.at(5).uniformChannelFlagLocation =
            this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 'u_channelFlag');
        this._shaderSets.at(5).uniformBaseColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 'u_baseColor');
        this._shaderSets.at(5).uniformMultiplyColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 'u_multiplyColor');
        this._shaderSets.at(5).uniformScreenColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 'u_screenColor');
        this._shaderSets.at(6).attributePositionLocation =
            this.gl.getAttribLocation(this._shaderSets.at(6).shaderProgram, 'a_position');
        this._shaderSets.at(6).attributeTexCoordLocation =
            this.gl.getAttribLocation(this._shaderSets.at(6).shaderProgram, 'a_texCoord');
        this._shaderSets.at(6).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 's_texture0');
        this._shaderSets.at(6).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 's_texture1');
        this._shaderSets.at(6).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 'u_matrix');
        this._shaderSets.at(6).uniformClipMatrixLocation =
            this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 'u_clipMatrix');
        this._shaderSets.at(6).uniformChannelFlagLocation =
            this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 'u_channelFlag');
        this._shaderSets.at(6).uniformBaseColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 'u_baseColor');
        this._shaderSets.at(6).uniformMultiplyColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 'u_multiplyColor');
        this._shaderSets.at(6).uniformScreenColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 'u_screenColor');
        this._shaderSets.at(7).attributePositionLocation =
            this.gl.getAttribLocation(this._shaderSets.at(7).shaderProgram, 'a_position');
        this._shaderSets.at(7).attributeTexCoordLocation =
            this.gl.getAttribLocation(this._shaderSets.at(7).shaderProgram, 'a_texCoord');
        this._shaderSets.at(7).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram, 's_texture0');
        this._shaderSets.at(7).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram, 'u_matrix');
        this._shaderSets.at(7).uniformBaseColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram, 'u_baseColor');
        this._shaderSets.at(7).uniformMultiplyColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram, 'u_multiplyColor');
        this._shaderSets.at(7).uniformScreenColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram, 'u_screenColor');
        this._shaderSets.at(8).attributePositionLocation =
            this.gl.getAttribLocation(this._shaderSets.at(8).shaderProgram, 'a_position');
        this._shaderSets.at(8).attributeTexCoordLocation =
            this.gl.getAttribLocation(this._shaderSets.at(8).shaderProgram, 'a_texCoord');
        this._shaderSets.at(8).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 's_texture0');
        this._shaderSets.at(8).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 's_texture1');
        this._shaderSets.at(8).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 'u_matrix');
        this._shaderSets.at(8).uniformClipMatrixLocation =
            this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 'u_clipMatrix');
        this._shaderSets.at(8).uniformChannelFlagLocation =
            this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 'u_channelFlag');
        this._shaderSets.at(8).uniformBaseColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 'u_baseColor');
        this._shaderSets.at(8).uniformMultiplyColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 'u_multiplyColor');
        this._shaderSets.at(8).uniformScreenColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 'u_screenColor');
        this._shaderSets.at(9).attributePositionLocation =
            this.gl.getAttribLocation(this._shaderSets.at(9).shaderProgram, 'a_position');
        this._shaderSets.at(9).attributeTexCoordLocation =
            this.gl.getAttribLocation(this._shaderSets.at(9).shaderProgram, 'a_texCoord');
        this._shaderSets.at(9).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 's_texture0');
        this._shaderSets.at(9).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 's_texture1');
        this._shaderSets.at(9).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 'u_matrix');
        this._shaderSets.at(9).uniformClipMatrixLocation =
            this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 'u_clipMatrix');
        this._shaderSets.at(9).uniformChannelFlagLocation =
            this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 'u_channelFlag');
        this._shaderSets.at(9).uniformBaseColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 'u_baseColor');
        this._shaderSets.at(9).uniformMultiplyColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 'u_multiplyColor');
        this._shaderSets.at(9).uniformScreenColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 'u_screenColor');
    };
    CubismShader_WebGL.prototype.loadShaderProgram = function (vertexShaderSource, fragmentShaderSource) {
        var shaderProgram = this.gl.createProgram();
        var vertShader = this.compileShaderSource(this.gl.VERTEX_SHADER, vertexShaderSource);
        if (!vertShader) {
            (0, cubismdebug_1.CubismLogError)('Vertex shader compile error!');
            return 0;
        }
        var fragShader = this.compileShaderSource(this.gl.FRAGMENT_SHADER, fragmentShaderSource);
        if (!fragShader) {
            (0, cubismdebug_1.CubismLogError)('Vertex shader compile error!');
            return 0;
        }
        this.gl.attachShader(shaderProgram, vertShader);
        this.gl.attachShader(shaderProgram, fragShader);
        this.gl.linkProgram(shaderProgram);
        var linkStatus = this.gl.getProgramParameter(shaderProgram, this.gl.LINK_STATUS);
        if (!linkStatus) {
            (0, cubismdebug_1.CubismLogError)('Failed to link program: {0}', shaderProgram);
            this.gl.deleteShader(vertShader);
            vertShader = 0;
            this.gl.deleteShader(fragShader);
            fragShader = 0;
            if (shaderProgram) {
                this.gl.deleteProgram(shaderProgram);
                shaderProgram = 0;
            }
            return 0;
        }
        this.gl.deleteShader(vertShader);
        this.gl.deleteShader(fragShader);
        return shaderProgram;
    };
    CubismShader_WebGL.prototype.compileShaderSource = function (shaderType, shaderSource) {
        var source = shaderSource;
        var shader = this.gl.createShader(shaderType);
        this.gl.shaderSource(shader, source);
        this.gl.compileShader(shader);
        if (!shader) {
            var log = this.gl.getShaderInfoLog(shader);
            (0, cubismdebug_1.CubismLogError)('Shader compile log: {0} ', log);
        }
        var status = this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS);
        if (!status) {
            this.gl.deleteShader(shader);
            return null;
        }
        return shader;
    };
    CubismShader_WebGL.prototype.setGl = function (gl) {
        this.gl = gl;
    };
    return CubismShader_WebGL;
}());
exports.CubismShader_WebGL = CubismShader_WebGL;
var CubismShaderSet = (function () {
    function CubismShaderSet() {
    }
    return CubismShaderSet;
}());
exports.CubismShaderSet = CubismShaderSet;
var ShaderNames;
(function (ShaderNames) {
    ShaderNames[ShaderNames["ShaderNames_SetupMask"] = 0] = "ShaderNames_SetupMask";
    ShaderNames[ShaderNames["ShaderNames_NormalPremultipliedAlpha"] = 1] = "ShaderNames_NormalPremultipliedAlpha";
    ShaderNames[ShaderNames["ShaderNames_NormalMaskedPremultipliedAlpha"] = 2] = "ShaderNames_NormalMaskedPremultipliedAlpha";
    ShaderNames[ShaderNames["ShaderNames_NomralMaskedInvertedPremultipliedAlpha"] = 3] = "ShaderNames_NomralMaskedInvertedPremultipliedAlpha";
    ShaderNames[ShaderNames["ShaderNames_AddPremultipliedAlpha"] = 4] = "ShaderNames_AddPremultipliedAlpha";
    ShaderNames[ShaderNames["ShaderNames_AddMaskedPremultipliedAlpha"] = 5] = "ShaderNames_AddMaskedPremultipliedAlpha";
    ShaderNames[ShaderNames["ShaderNames_AddMaskedPremultipliedAlphaInverted"] = 6] = "ShaderNames_AddMaskedPremultipliedAlphaInverted";
    ShaderNames[ShaderNames["ShaderNames_MultPremultipliedAlpha"] = 7] = "ShaderNames_MultPremultipliedAlpha";
    ShaderNames[ShaderNames["ShaderNames_MultMaskedPremultipliedAlpha"] = 8] = "ShaderNames_MultMaskedPremultipliedAlpha";
    ShaderNames[ShaderNames["ShaderNames_MultMaskedPremultipliedAlphaInverted"] = 9] = "ShaderNames_MultMaskedPremultipliedAlphaInverted";
})(ShaderNames = exports.ShaderNames || (exports.ShaderNames = {}));
exports.vertexShaderSrcSetupMask = 'attribute vec4     a_position;' +
    'attribute vec2     a_texCoord;' +
    'varying vec2       v_texCoord;' +
    'varying vec4       v_myPos;' +
    'uniform mat4       u_clipMatrix;' +
    'void main()' +
    '{' +
    '   gl_Position = u_clipMatrix * a_position;' +
    '   v_myPos = u_clipMatrix * a_position;' +
    '   v_texCoord = a_texCoord;' +
    '   v_texCoord.y = 1.0 - v_texCoord.y;' +
    '}';
exports.fragmentShaderSrcsetupMask = 'precision mediump float;' +
    'varying vec2       v_texCoord;' +
    'varying vec4       v_myPos;' +
    'uniform vec4       u_baseColor;' +
    'uniform vec4       u_channelFlag;' +
    'uniform sampler2D  s_texture0;' +
    'void main()' +
    '{' +
    '   float isInside = ' +
    '       step(u_baseColor.x, v_myPos.x/v_myPos.w)' +
    '       * step(u_baseColor.y, v_myPos.y/v_myPos.w)' +
    '       * step(v_myPos.x/v_myPos.w, u_baseColor.z)' +
    '       * step(v_myPos.y/v_myPos.w, u_baseColor.w);' +
    '   gl_FragColor = u_channelFlag * texture2D(s_texture0, v_texCoord).a * isInside;' +
    '}';
exports.vertexShaderSrc = 'attribute vec4     a_position;' +
    'attribute vec2     a_texCoord;' +
    'varying vec2       v_texCoord;' +
    'uniform mat4       u_matrix;' +
    'void main()' +
    '{' +
    '   gl_Position = u_matrix * a_position;' +
    '   v_texCoord = a_texCoord;' +
    '   v_texCoord.y = 1.0 - v_texCoord.y;' +
    '}';
exports.vertexShaderSrcMasked = 'attribute vec4     a_position;' +
    'attribute vec2     a_texCoord;' +
    'varying vec2       v_texCoord;' +
    'varying vec4       v_clipPos;' +
    'uniform mat4       u_matrix;' +
    'uniform mat4       u_clipMatrix;' +
    'void main()' +
    '{' +
    '   gl_Position = u_matrix * a_position;' +
    '   v_clipPos = u_clipMatrix * a_position;' +
    '   v_texCoord = a_texCoord;' +
    '   v_texCoord.y = 1.0 - v_texCoord.y;' +
    '}';
exports.fragmentShaderSrcPremultipliedAlpha = 'precision mediump float;' +
    'varying vec2       v_texCoord;' +
    'uniform vec4       u_baseColor;' +
    'uniform sampler2D  s_texture0;' +
    'uniform vec4       u_multiplyColor;' +
    'uniform vec4       u_screenColor;' +
    'void main()' +
    '{' +
    '   vec4 texColor = texture2D(s_texture0, v_texCoord);' +
    '   texColor.rgb = texColor.rgb * u_multiplyColor.rgb;' +
    '   texColor.rgb = (texColor.rgb + u_screenColor.rgb * texColor.a) - (texColor.rgb * u_screenColor.rgb);' +
    '   vec4 color = texColor * u_baseColor;' +
    '   gl_FragColor = vec4(color.rgb, color.a);' +
    '}';
exports.fragmentShaderSrcMaskPremultipliedAlpha = 'precision mediump float;' +
    'varying vec2       v_texCoord;' +
    'varying vec4       v_clipPos;' +
    'uniform vec4       u_baseColor;' +
    'uniform vec4       u_channelFlag;' +
    'uniform sampler2D  s_texture0;' +
    'uniform sampler2D  s_texture1;' +
    'uniform vec4       u_multiplyColor;' +
    'uniform vec4       u_screenColor;' +
    'void main()' +
    '{' +
    '   vec4 texColor = texture2D(s_texture0, v_texCoord);' +
    '   texColor.rgb = texColor.rgb * u_multiplyColor.rgb;' +
    '   texColor.rgb = (texColor.rgb + u_screenColor.rgb * texColor.a) - (texColor.rgb * u_screenColor.rgb);' +
    '   vec4 col_formask = texColor * u_baseColor;' +
    '   vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;' +
    '   float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;' +
    '   col_formask = col_formask * maskVal;' +
    '   gl_FragColor = col_formask;' +
    '}';
exports.fragmentShaderSrcMaskInvertedPremultipliedAlpha = 'precision mediump float;' +
    'varying vec2      v_texCoord;' +
    'varying vec4      v_clipPos;' +
    'uniform sampler2D s_texture0;' +
    'uniform sampler2D s_texture1;' +
    'uniform vec4      u_channelFlag;' +
    'uniform vec4      u_baseColor;' +
    'uniform vec4      u_multiplyColor;' +
    'uniform vec4      u_screenColor;' +
    'void main()' +
    '{' +
    '   vec4 texColor = texture2D(s_texture0, v_texCoord);' +
    '   texColor.rgb = texColor.rgb * u_multiplyColor.rgb;' +
    '   texColor.rgb = (texColor.rgb + u_screenColor.rgb * texColor.a) - (texColor.rgb * u_screenColor.rgb);' +
    '   vec4 col_formask = texColor * u_baseColor;' +
    '   vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;' +
    '   float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;' +
    '   col_formask = col_formask * (1.0 - maskVal);' +
    '   gl_FragColor = col_formask;' +
    '}';
var CubismRenderer_WebGL = (function (_super) {
    __extends(CubismRenderer_WebGL, _super);
    function CubismRenderer_WebGL() {
        var _this = _super.call(this) || this;
        _this._clippingContextBufferForMask = null;
        _this._clippingContextBufferForDraw = null;
        _this._clippingManager = new CubismClippingManager_WebGL();
        _this.firstDraw = true;
        _this._textures = new csmmap_1.csmMap();
        _this._sortedDrawableIndexList = new csmvector_1.csmVector();
        _this._bufferData = {
            vertex: (WebGLBuffer = null),
            uv: (WebGLBuffer = null),
            index: (WebGLBuffer = null),
        };
        _this._textures.prepareCapacity(32, true);
        return _this;
    }
    CubismRenderer_WebGL.prototype.initialize = function (model) {
        if (model.isUsingMasking()) {
            this._clippingManager = new CubismClippingManager_WebGL();
            this._clippingManager.initialize(model, model.getDrawableCount(), model.getDrawableMasks(), model.getDrawableMaskCounts());
        }
        this._sortedDrawableIndexList.resize(model.getDrawableCount(), 0);
        _super.prototype.initialize.call(this, model);
    };
    CubismRenderer_WebGL.prototype.bindTexture = function (modelTextureNo, glTexture) {
        this._textures.setValue(modelTextureNo, glTexture);
    };
    CubismRenderer_WebGL.prototype.getBindedTextures = function () {
        return this._textures;
    };
    CubismRenderer_WebGL.prototype.setClippingMaskBufferSize = function (size) {
        this._clippingManager.release();
        this._clippingManager = void 0;
        this._clippingManager = null;
        this._clippingManager = new CubismClippingManager_WebGL();
        this._clippingManager.setClippingMaskBufferSize(size);
        this._clippingManager.initialize(this.getModel(), this.getModel().getDrawableCount(), this.getModel().getDrawableMasks(), this.getModel().getDrawableMaskCounts());
    };
    CubismRenderer_WebGL.prototype.getClippingMaskBufferSize = function () {
        return this._clippingManager.getClippingMaskBufferSize();
    };
    CubismRenderer_WebGL.prototype.release = function () {
        this._clippingManager.release();
        this._clippingManager = void 0;
        this._clippingManager = null;
        this.gl.deleteBuffer(this._bufferData.vertex);
        this._bufferData.vertex = null;
        this.gl.deleteBuffer(this._bufferData.uv);
        this._bufferData.uv = null;
        this.gl.deleteBuffer(this._bufferData.index);
        this._bufferData.index = null;
        this._bufferData = null;
        this._textures = null;
    };
    CubismRenderer_WebGL.prototype.doDrawModel = function () {
        if (this._clippingManager != null) {
            this.preDraw();
            this._clippingManager.setupClippingContext(this.getModel(), this);
        }
        this.preDraw();
        var drawableCount = this.getModel().getDrawableCount();
        var renderOrder = this.getModel().getDrawableRenderOrders();
        for (var i = 0; i < drawableCount; ++i) {
            var order = renderOrder[i];
            this._sortedDrawableIndexList.set(order, i);
        }
        for (var i = 0; i < drawableCount; ++i) {
            var drawableIndex = this._sortedDrawableIndexList.at(i);
            if (!this.getModel().getDrawableDynamicFlagIsVisible(drawableIndex)) {
                continue;
            }
            this.setClippingContextBufferForDraw(this._clippingManager != null
                ? this._clippingManager
                    .getClippingContextListForDraw()
                    .at(drawableIndex)
                : null);
            this.setIsCulling(this.getModel().getDrawableCulling(drawableIndex));
            this.drawMesh(this.getModel().getDrawableTextureIndex(drawableIndex), this.getModel().getDrawableVertexIndexCount(drawableIndex), this.getModel().getDrawableVertexCount(drawableIndex), this.getModel().getDrawableVertexIndices(drawableIndex), this.getModel().getDrawableVertices(drawableIndex), this.getModel().getDrawableVertexUvs(drawableIndex), this.getModel().getMultiplyColor(drawableIndex), this.getModel().getScreenColor(drawableIndex), this.getModel().getDrawableOpacity(drawableIndex), this.getModel().getDrawableBlendMode(drawableIndex), this.getModel().getDrawableInvertedMaskBit(drawableIndex));
        }
    };
    CubismRenderer_WebGL.prototype.drawMesh = function (textureNo, indexCount, vertexCount, indexArray, vertexArray, uvArray, multiplyColor, screenColor, opacity, colorBlendMode, invertedMask) {
        if (this.isCulling()) {
            this.gl.enable(this.gl.CULL_FACE);
        }
        else {
            this.gl.disable(this.gl.CULL_FACE);
        }
        this.gl.frontFace(this.gl.CCW);
        var modelColorRGBA = this.getModelColor();
        if (this.getClippingContextBufferForMask() == null) {
            modelColorRGBA.A *= opacity;
            if (this.isPremultipliedAlpha()) {
                modelColorRGBA.R *= modelColorRGBA.A;
                modelColorRGBA.G *= modelColorRGBA.A;
                modelColorRGBA.B *= modelColorRGBA.A;
            }
        }
        var drawtexture;
        if (this._textures.getValue(textureNo) != null) {
            drawtexture = this._textures.getValue(textureNo);
        }
        else {
            drawtexture = null;
        }
        CubismShader_WebGL.getInstance().setupShaderProgram(this, drawtexture, vertexCount, vertexArray, indexArray, uvArray, this._bufferData, opacity, colorBlendMode, modelColorRGBA, multiplyColor, screenColor, this.isPremultipliedAlpha(), this.getMvpMatrix(), invertedMask);
        this.gl.drawElements(this.gl.TRIANGLES, indexCount, this.gl.UNSIGNED_SHORT, 0);
        this.gl.useProgram(null);
        this.setClippingContextBufferForDraw(null);
        this.setClippingContextBufferForMask(null);
    };
    CubismRenderer_WebGL.doStaticRelease = function () {
        CubismShader_WebGL.deleteInstance();
    };
    CubismRenderer_WebGL.prototype.setRenderState = function (fbo, viewport) {
        s_fbo = fbo;
        s_viewport = viewport;
    };
    CubismRenderer_WebGL.prototype.preDraw = function () {
        if (this.firstDraw) {
            this.firstDraw = false;
        }
        this.gl.disable(this.gl.SCISSOR_TEST);
        this.gl.disable(this.gl.STENCIL_TEST);
        this.gl.disable(this.gl.DEPTH_TEST);
        this.gl.frontFace(this.gl.CW);
        this.gl.enable(this.gl.BLEND);
        this.gl.colorMask(true, true, true, true);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
        if (this.getAnisotropy() > 0.0 && this._extension) {
            for (var i = 0; i < this._textures.getSize(); ++i) {
                this.gl.bindTexture(this.gl.TEXTURE_2D, this._textures.getValue(i));
                this.gl.texParameterf(this.gl.TEXTURE_2D, this._extension.TEXTURE_MAX_ANISOTROPY_EXT, this.getAnisotropy());
            }
        }
    };
    CubismRenderer_WebGL.prototype.setClippingContextBufferForMask = function (clip) {
        this._clippingContextBufferForMask = clip;
    };
    CubismRenderer_WebGL.prototype.getClippingContextBufferForMask = function () {
        return this._clippingContextBufferForMask;
    };
    CubismRenderer_WebGL.prototype.setClippingContextBufferForDraw = function (clip) {
        this._clippingContextBufferForDraw = clip;
    };
    CubismRenderer_WebGL.prototype.getClippingContextBufferForDraw = function () {
        return this._clippingContextBufferForDraw;
    };
    CubismRenderer_WebGL.prototype.startUp = function (gl) {
        this.gl = gl;
        this._clippingManager.setGL(gl);
        CubismShader_WebGL.getInstance().setGl(gl);
        this._extension =
            this.gl.getExtension('EXT_texture_filter_anisotropic') ||
                this.gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic') ||
                this.gl.getExtension('MOZ_EXT_texture_filter_anisotropic');
    };
    return CubismRenderer_WebGL;
}(cubismrenderer_1.CubismRenderer));
exports.CubismRenderer_WebGL = CubismRenderer_WebGL;
cubismrenderer_1.CubismRenderer.staticRelease = function () {
    CubismRenderer_WebGL.doStaticRelease();
};
var $ = __importStar(__webpack_require__(/*! ./cubismrenderer_webgl */ "./vendor/Framework/src/rendering/cubismrenderer_webgl.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismClippingContext = $.CubismClippingContext;
    Live2DCubismFramework.CubismClippingManager_WebGL = $.CubismClippingManager_WebGL;
    Live2DCubismFramework.CubismRenderTextureResource = $.CubismRenderTextureResource;
    Live2DCubismFramework.CubismRenderer_WebGL = $.CubismRenderer_WebGL;
    Live2DCubismFramework.CubismShaderSet = $.CubismShaderSet;
    Live2DCubismFramework.CubismShader_WebGL = $.CubismShader_WebGL;
    Live2DCubismFramework.ShaderNames = $.ShaderNames;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/type/csmmap.ts":
/*!*********************************************!*\
  !*** ./vendor/Framework/src/type/csmmap.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.iterator = exports.csmMap = exports.csmPair = void 0;
var cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ "./vendor/Framework/src/utils/cubismdebug.ts");
var csmPair = (function () {
    function csmPair(key, value) {
        this.first = key == undefined ? null : key;
        this.second = value == undefined ? null : value;
    }
    return csmPair;
}());
exports.csmPair = csmPair;
var csmMap = (function () {
    function csmMap(size) {
        if (size != undefined) {
            if (size < 1) {
                this._keyValues = [];
                this._dummyValue = null;
                this._size = 0;
            }
            else {
                this._keyValues = new Array(size);
                this._size = size;
            }
        }
        else {
            this._keyValues = [];
            this._dummyValue = null;
            this._size = 0;
        }
    }
    csmMap.prototype.release = function () {
        this.clear();
    };
    csmMap.prototype.appendKey = function (key) {
        this.prepareCapacity(this._size + 1, false);
        this._keyValues[this._size] = new csmPair(key);
        this._size += 1;
    };
    csmMap.prototype.getValue = function (key) {
        var found = -1;
        for (var i = 0; i < this._size; i++) {
            if (this._keyValues[i].first == key) {
                found = i;
                break;
            }
        }
        if (found >= 0) {
            return this._keyValues[found].second;
        }
        else {
            this.appendKey(key);
            return this._keyValues[this._size - 1].second;
        }
    };
    csmMap.prototype.setValue = function (key, value) {
        var found = -1;
        for (var i = 0; i < this._size; i++) {
            if (this._keyValues[i].first == key) {
                found = i;
                break;
            }
        }
        if (found >= 0) {
            this._keyValues[found].second = value;
        }
        else {
            this.appendKey(key);
            this._keyValues[this._size - 1].second = value;
        }
    };
    csmMap.prototype.isExist = function (key) {
        for (var i = 0; i < this._size; i++) {
            if (this._keyValues[i].first == key) {
                return true;
            }
        }
        return false;
    };
    csmMap.prototype.clear = function () {
        this._keyValues = void 0;
        this._keyValues = null;
        this._keyValues = [];
        this._size = 0;
    };
    csmMap.prototype.getSize = function () {
        return this._size;
    };
    csmMap.prototype.prepareCapacity = function (newSize, fitToSize) {
        if (newSize > this._keyValues.length) {
            if (this._keyValues.length == 0) {
                if (!fitToSize && newSize < csmMap.DefaultSize)
                    newSize = csmMap.DefaultSize;
                this._keyValues.length = newSize;
            }
            else {
                if (!fitToSize && newSize < this._keyValues.length * 2)
                    newSize = this._keyValues.length * 2;
                this._keyValues.length = newSize;
            }
        }
    };
    csmMap.prototype.begin = function () {
        var ite = new iterator(this, 0);
        return ite;
    };
    csmMap.prototype.end = function () {
        var ite = new iterator(this, this._size);
        return ite;
    };
    csmMap.prototype.erase = function (ite) {
        var index = ite._index;
        if (index < 0 || this._size <= index) {
            return ite;
        }
        this._keyValues.splice(index, 1);
        --this._size;
        var ite2 = new iterator(this, index);
        return ite2;
    };
    csmMap.prototype.dumpAsInt = function () {
        for (var i = 0; i < this._size; i++) {
            (0, cubismdebug_1.CubismLogDebug)('{0} ,', this._keyValues[i]);
            (0, cubismdebug_1.CubismLogDebug)('\n');
        }
    };
    csmMap.DefaultSize = 10;
    return csmMap;
}());
exports.csmMap = csmMap;
var iterator = (function () {
    function iterator(v, idx) {
        this._map = v != undefined ? v : new csmMap();
        this._index = idx != undefined ? idx : 0;
    }
    iterator.prototype.set = function (ite) {
        this._index = ite._index;
        this._map = ite._map;
        return this;
    };
    iterator.prototype.preIncrement = function () {
        ++this._index;
        return this;
    };
    iterator.prototype.preDecrement = function () {
        --this._index;
        return this;
    };
    iterator.prototype.increment = function () {
        var iteold = new iterator(this._map, this._index++);
        return iteold;
    };
    iterator.prototype.decrement = function () {
        var iteold = new iterator(this._map, this._index);
        this._map = iteold._map;
        this._index = iteold._index;
        return this;
    };
    iterator.prototype.ptr = function () {
        return this._map._keyValues[this._index];
    };
    iterator.prototype.notEqual = function (ite) {
        return this._index != ite._index || this._map != ite._map;
    };
    return iterator;
}());
exports.iterator = iterator;
var $ = __importStar(__webpack_require__(/*! ./csmmap */ "./vendor/Framework/src/type/csmmap.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.csmMap = $.csmMap;
    Live2DCubismFramework.csmPair = $.csmPair;
    Live2DCubismFramework.iterator = $.iterator;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/type/csmrectf.ts":
/*!***********************************************!*\
  !*** ./vendor/Framework/src/type/csmrectf.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.csmRect = void 0;
var csmRect = (function () {
    function csmRect(x, y, w, h) {
        this.x = x;
        this.y = y;
        this.width = w;
        this.height = h;
    }
    csmRect.prototype.getCenterX = function () {
        return this.x + 0.5 * this.width;
    };
    csmRect.prototype.getCenterY = function () {
        return this.y + 0.5 * this.height;
    };
    csmRect.prototype.getRight = function () {
        return this.x + this.width;
    };
    csmRect.prototype.getBottom = function () {
        return this.y + this.height;
    };
    csmRect.prototype.setRect = function (r) {
        this.x = r.x;
        this.y = r.y;
        this.width = r.width;
        this.height = r.height;
    };
    csmRect.prototype.expand = function (w, h) {
        this.x -= w;
        this.y -= h;
        this.width += w * 2.0;
        this.height += h * 2.0;
    };
    return csmRect;
}());
exports.csmRect = csmRect;
var $ = __importStar(__webpack_require__(/*! ./csmrectf */ "./vendor/Framework/src/type/csmrectf.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.csmRect = $.csmRect;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/type/csmstring.ts":
/*!************************************************!*\
  !*** ./vendor/Framework/src/type/csmstring.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.csmString = void 0;
var csmString = (function () {
    function csmString(s) {
        this.s = s;
    }
    csmString.prototype.append = function (c, length) {
        this.s += length !== undefined ? c.substr(0, length) : c;
        return this;
    };
    csmString.prototype.expansion = function (length, v) {
        for (var i = 0; i < length; i++) {
            this.append(v);
        }
        return this;
    };
    csmString.prototype.getBytes = function () {
        return encodeURIComponent(this.s).replace(/%../g, 'x').length;
    };
    csmString.prototype.getLength = function () {
        return this.s.length;
    };
    csmString.prototype.isLess = function (s) {
        return this.s < s.s;
    };
    csmString.prototype.isGreat = function (s) {
        return this.s > s.s;
    };
    csmString.prototype.isEqual = function (s) {
        return this.s == s;
    };
    csmString.prototype.isEmpty = function () {
        return this.s.length == 0;
    };
    return csmString;
}());
exports.csmString = csmString;
var $ = __importStar(__webpack_require__(/*! ./csmstring */ "./vendor/Framework/src/type/csmstring.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.csmString = $.csmString;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/type/csmvector.ts":
/*!************************************************!*\
  !*** ./vendor/Framework/src/type/csmvector.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.iterator = exports.csmVector = void 0;
var csmVector = (function () {
    function csmVector(initialCapacity) {
        if (initialCapacity === void 0) { initialCapacity = 0; }
        if (initialCapacity < 1) {
            this._ptr = [];
            this._capacity = 0;
            this._size = 0;
        }
        else {
            this._ptr = new Array(initialCapacity);
            this._capacity = initialCapacity;
            this._size = 0;
        }
    }
    csmVector.prototype.at = function (index) {
        return this._ptr[index];
    };
    csmVector.prototype.set = function (index, value) {
        this._ptr[index] = value;
    };
    csmVector.prototype.get = function (offset) {
        if (offset === void 0) { offset = 0; }
        var ret = new Array();
        for (var i = offset; i < this._size; i++) {
            ret.push(this._ptr[i]);
        }
        return ret;
    };
    csmVector.prototype.pushBack = function (value) {
        if (this._size >= this._capacity) {
            this.prepareCapacity(this._capacity == 0 ? csmVector.s_defaultSize : this._capacity * 2);
        }
        this._ptr[this._size++] = value;
    };
    csmVector.prototype.clear = function () {
        this._ptr.length = 0;
        this._size = 0;
    };
    csmVector.prototype.getSize = function () {
        return this._size;
    };
    csmVector.prototype.assign = function (newSize, value) {
        var curSize = this._size;
        if (curSize < newSize) {
            this.prepareCapacity(newSize);
        }
        for (var i = 0; i < newSize; i++) {
            this._ptr[i] = value;
        }
        this._size = newSize;
    };
    csmVector.prototype.resize = function (newSize, value) {
        if (value === void 0) { value = null; }
        this.updateSize(newSize, value, true);
    };
    csmVector.prototype.updateSize = function (newSize, value, callPlacementNew) {
        if (value === void 0) { value = null; }
        if (callPlacementNew === void 0) { callPlacementNew = true; }
        var curSize = this._size;
        if (curSize < newSize) {
            this.prepareCapacity(newSize);
            if (callPlacementNew) {
                for (var i = this._size; i < newSize; i++) {
                    if (typeof value == 'function') {
                        this._ptr[i] = JSON.parse(JSON.stringify(new value()));
                    }
                    else {
                        this._ptr[i] = value;
                    }
                }
            }
            else {
                for (var i = this._size; i < newSize; i++) {
                    this._ptr[i] = value;
                }
            }
        }
        else {
            var sub = this._size - newSize;
            this._ptr.splice(this._size - sub, sub);
        }
        this._size = newSize;
    };
    csmVector.prototype.insert = function (position, begin, end) {
        var dstSi = position._index;
        var srcSi = begin._index;
        var srcEi = end._index;
        var addCount = srcEi - srcSi;
        this.prepareCapacity(this._size + addCount);
        var addSize = this._size - dstSi;
        if (addSize > 0) {
            for (var i = 0; i < addSize; i++) {
                this._ptr.splice(dstSi + i, 0, null);
            }
        }
        for (var i = srcSi; i < srcEi; i++, dstSi++) {
            this._ptr[dstSi] = begin._vector._ptr[i];
        }
        this._size = this._size + addCount;
    };
    csmVector.prototype.remove = function (index) {
        if (index < 0 || this._size <= index) {
            return false;
        }
        this._ptr.splice(index, 1);
        --this._size;
        return true;
    };
    csmVector.prototype.erase = function (ite) {
        var index = ite._index;
        if (index < 0 || this._size <= index) {
            return ite;
        }
        this._ptr.splice(index, 1);
        --this._size;
        var ite2 = new iterator(this, index);
        return ite2;
    };
    csmVector.prototype.prepareCapacity = function (newSize) {
        if (newSize > this._capacity) {
            if (this._capacity == 0) {
                this._ptr = new Array(newSize);
                this._capacity = newSize;
            }
            else {
                this._ptr.length = newSize;
                this._capacity = newSize;
            }
        }
    };
    csmVector.prototype.begin = function () {
        var ite = this._size == 0 ? this.end() : new iterator(this, 0);
        return ite;
    };
    csmVector.prototype.end = function () {
        var ite = new iterator(this, this._size);
        return ite;
    };
    csmVector.prototype.getOffset = function (offset) {
        var newVector = new csmVector();
        newVector._ptr = this.get(offset);
        newVector._size = this.get(offset).length;
        newVector._capacity = this.get(offset).length;
        return newVector;
    };
    csmVector.s_defaultSize = 10;
    return csmVector;
}());
exports.csmVector = csmVector;
var iterator = (function () {
    function iterator(v, index) {
        this._vector = v != undefined ? v : null;
        this._index = index != undefined ? index : 0;
    }
    iterator.prototype.set = function (ite) {
        this._index = ite._index;
        this._vector = ite._vector;
        return this;
    };
    iterator.prototype.preIncrement = function () {
        ++this._index;
        return this;
    };
    iterator.prototype.preDecrement = function () {
        --this._index;
        return this;
    };
    iterator.prototype.increment = function () {
        var iteold = new iterator(this._vector, this._index++);
        return iteold;
    };
    iterator.prototype.decrement = function () {
        var iteold = new iterator(this._vector, this._index--);
        return iteold;
    };
    iterator.prototype.ptr = function () {
        return this._vector._ptr[this._index];
    };
    iterator.prototype.substitution = function (ite) {
        this._index = ite._index;
        this._vector = ite._vector;
        return this;
    };
    iterator.prototype.notEqual = function (ite) {
        return this._index != ite._index || this._vector != ite._vector;
    };
    return iterator;
}());
exports.iterator = iterator;
var $ = __importStar(__webpack_require__(/*! ./csmvector */ "./vendor/Framework/src/type/csmvector.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.csmVector = $.csmVector;
    Live2DCubismFramework.iterator = $.iterator;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/utils/cubismdebug.ts":
/*!***************************************************!*\
  !*** ./vendor/Framework/src/utils/cubismdebug.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismDebug = exports.CubismLogError = exports.CubismLogWarning = exports.CubismLogInfo = exports.CubismLogDebug = exports.CubismLogVerbose = exports.CSM_ASSERT = exports.CubismLogPrintIn = exports.CubismLogPrint = void 0;
var cubismframeworkconfig_1 = __webpack_require__(/*! ../cubismframeworkconfig */ "./vendor/Framework/src/cubismframeworkconfig.ts");
var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "./vendor/Framework/src/live2dcubismframework.ts");
var CubismLogPrint = function (level, fmt, args) {
    CubismDebug.print(level, '[CSM]' + fmt, args);
};
exports.CubismLogPrint = CubismLogPrint;
var CubismLogPrintIn = function (level, fmt, args) {
    (0, exports.CubismLogPrint)(level, fmt + '\n', args);
};
exports.CubismLogPrintIn = CubismLogPrintIn;
var CSM_ASSERT = function (expr) {
    console.assert(expr);
};
exports.CSM_ASSERT = CSM_ASSERT;
if (cubismframeworkconfig_1.CSM_LOG_LEVEL <= cubismframeworkconfig_1.CSM_LOG_LEVEL_VERBOSE) {
    exports.CubismLogVerbose = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Verbose, '[V]' + fmt, args);
    };
    exports.CubismLogDebug = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Debug, '[D]' + fmt, args);
    };
    exports.CubismLogInfo = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Info, '[I]' + fmt, args);
    };
    exports.CubismLogWarning = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Warning, '[W]' + fmt, args);
    };
    exports.CubismLogError = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Error, '[E]' + fmt, args);
    };
}
else if (cubismframeworkconfig_1.CSM_LOG_LEVEL == cubismframeworkconfig_1.CSM_LOG_LEVEL_DEBUG) {
    exports.CubismLogDebug = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Debug, '[D]' + fmt, args);
    };
    exports.CubismLogInfo = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Info, '[I]' + fmt, args);
    };
    exports.CubismLogWarning = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Warning, '[W]' + fmt, args);
    };
    exports.CubismLogError = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Error, '[E]' + fmt, args);
    };
}
else if (cubismframeworkconfig_1.CSM_LOG_LEVEL == cubismframeworkconfig_1.CSM_LOG_LEVEL_INFO) {
    exports.CubismLogInfo = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Info, '[I]' + fmt, args);
    };
    exports.CubismLogWarning = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Warning, '[W]' + fmt, args);
    };
    exports.CubismLogError = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Error, '[E]' + fmt, args);
    };
}
else if (cubismframeworkconfig_1.CSM_LOG_LEVEL == cubismframeworkconfig_1.CSM_LOG_LEVEL_WARNING) {
    exports.CubismLogWarning = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Warning, '[W]' + fmt, args);
    };
    exports.CubismLogError = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Error, '[E]' + fmt, args);
    };
}
else if (cubismframeworkconfig_1.CSM_LOG_LEVEL == cubismframeworkconfig_1.CSM_LOG_LEVEL_ERROR) {
    exports.CubismLogError = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Error, '[E]' + fmt, args);
    };
}
var CubismDebug = (function () {
    function CubismDebug() {
    }
    CubismDebug.print = function (logLevel, format, args) {
        if (logLevel < live2dcubismframework_1.CubismFramework.getLoggingLevel()) {
            return;
        }
        var logPrint = live2dcubismframework_1.CubismFramework.coreLogFunction;
        if (!logPrint)
            return;
        var buffer = format.replace(/\{(\d+)\}/g, function (m, k) {
            return args[k];
        });
        logPrint(buffer);
    };
    CubismDebug.dumpBytes = function (logLevel, data, length) {
        for (var i = 0; i < length; i++) {
            if (i % 16 == 0 && i > 0)
                this.print(logLevel, '\n');
            else if (i % 8 == 0 && i > 0)
                this.print(logLevel, '  ');
            this.print(logLevel, '{0} ', [data[i] & 0xff]);
        }
        this.print(logLevel, '\n');
    };
    return CubismDebug;
}());
exports.CubismDebug = CubismDebug;
var $ = __importStar(__webpack_require__(/*! ./cubismdebug */ "./vendor/Framework/src/utils/cubismdebug.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismDebug = $.CubismDebug;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/utils/cubismjson.ts":
/*!**************************************************!*\
  !*** ./vendor/Framework/src/utils/cubismjson.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.JsonMap = exports.JsonArray = exports.JsonNullvalue = exports.JsonError = exports.JsonString = exports.JsonBoolean = exports.JsonFloat = exports.CubismJson = exports.Value = void 0;
var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "./vendor/Framework/src/live2dcubismframework.ts");
var csmmap_1 = __webpack_require__(/*! ../type/csmmap */ "./vendor/Framework/src/type/csmmap.ts");
var csmstring_1 = __webpack_require__(/*! ../type/csmstring */ "./vendor/Framework/src/type/csmstring.ts");
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "./vendor/Framework/src/type/csmvector.ts");
var cubismdebug_1 = __webpack_require__(/*! ./cubismdebug */ "./vendor/Framework/src/utils/cubismdebug.ts");
var CSM_JSON_ERROR_TYPE_MISMATCH = 'Error: type mismatch';
var CSM_JSON_ERROR_INDEX_OF_BOUNDS = 'Error: index out of bounds';
var Value = (function () {
    function Value() {
    }
    Value.prototype.getRawString = function (defaultValue, indent) {
        return this.getString(defaultValue, indent);
    };
    Value.prototype.toInt = function (defaultValue) {
        if (defaultValue === void 0) { defaultValue = 0; }
        return defaultValue;
    };
    Value.prototype.toFloat = function (defaultValue) {
        if (defaultValue === void 0) { defaultValue = 0; }
        return defaultValue;
    };
    Value.prototype.toBoolean = function (defaultValue) {
        if (defaultValue === void 0) { defaultValue = false; }
        return defaultValue;
    };
    Value.prototype.getSize = function () {
        return 0;
    };
    Value.prototype.getArray = function (defaultValue) {
        if (defaultValue === void 0) { defaultValue = null; }
        return defaultValue;
    };
    Value.prototype.getVector = function (defaultValue) {
        if (defaultValue === void 0) { defaultValue = new csmvector_1.csmVector(); }
        return defaultValue;
    };
    Value.prototype.getMap = function (defaultValue) {
        return defaultValue;
    };
    Value.prototype.getValueByIndex = function (index) {
        return Value.errorValue.setErrorNotForClientCall(CSM_JSON_ERROR_TYPE_MISMATCH);
    };
    Value.prototype.getValueByString = function (s) {
        return Value.nullValue.setErrorNotForClientCall(CSM_JSON_ERROR_TYPE_MISMATCH);
    };
    Value.prototype.getKeys = function () {
        return Value.s_dummyKeys;
    };
    Value.prototype.isError = function () {
        return false;
    };
    Value.prototype.isNull = function () {
        return false;
    };
    Value.prototype.isBool = function () {
        return false;
    };
    Value.prototype.isFloat = function () {
        return false;
    };
    Value.prototype.isString = function () {
        return false;
    };
    Value.prototype.isArray = function () {
        return false;
    };
    Value.prototype.isMap = function () {
        return false;
    };
    Value.prototype.equals = function (value) {
        return false;
    };
    Value.prototype.isStatic = function () {
        return false;
    };
    Value.prototype.setErrorNotForClientCall = function (errorStr) {
        return JsonError.errorValue;
    };
    Value.staticInitializeNotForClientCall = function () {
        JsonBoolean.trueValue = new JsonBoolean(true);
        JsonBoolean.falseValue = new JsonBoolean(false);
        Value.errorValue = new JsonError('ERROR', true);
        Value.nullValue = new JsonNullvalue();
        Value.s_dummyKeys = new csmvector_1.csmVector();
    };
    Value.staticReleaseNotForClientCall = function () {
        JsonBoolean.trueValue = null;
        JsonBoolean.falseValue = null;
        Value.errorValue = null;
        Value.nullValue = null;
        Value.s_dummyKeys = null;
    };
    return Value;
}());
exports.Value = Value;
var CubismJson = (function () {
    function CubismJson(buffer, length) {
        this._parseCallback = cubismjsonextension_1.CubismJsonExtension.parseJsonObject;
        this._error = null;
        this._lineCount = 0;
        this._root = null;
        if (buffer != undefined) {
            this.parseBytes(buffer, length, this._parseCallback);
        }
    }
    CubismJson.create = function (buffer, size) {
        var json = new CubismJson();
        var succeeded = json.parseBytes(buffer, size, json._parseCallback);
        if (!succeeded) {
            CubismJson.delete(json);
            return null;
        }
        else {
            return json;
        }
    };
    CubismJson.delete = function (instance) {
        instance = null;
    };
    CubismJson.prototype.getRoot = function () {
        return this._root;
    };
    CubismJson.arrayBufferToString = function (buffer) {
        var uint8Array = new Uint8Array(buffer);
        var str = '';
        for (var i = 0, len = uint8Array.length; i < len; ++i) {
            str += '%' + this.pad(uint8Array[i].toString(16));
        }
        str = decodeURIComponent(str);
        return str;
    };
    CubismJson.pad = function (n) {
        return n.length < 2 ? '0' + n : n;
    };
    CubismJson.prototype.parseBytes = function (buffer, size, parseCallback) {
        var endPos = new Array(1);
        var decodeBuffer = CubismJson.arrayBufferToString(buffer);
        if (parseCallback == undefined) {
            this._root = this.parseValue(decodeBuffer, size, 0, endPos);
        }
        else {
            this._root = parseCallback(JSON.parse(decodeBuffer), new JsonMap());
        }
        if (this._error) {
            var strbuf = '\0';
            strbuf = 'Json parse error : @line ' + (this._lineCount + 1) + '\n';
            this._root = new JsonString(strbuf);
            (0, cubismdebug_1.CubismLogInfo)('{0}', this._root.getRawString());
            return false;
        }
        else if (this._root == null) {
            this._root = new JsonError(new csmstring_1.csmString(this._error), false);
            return false;
        }
        return true;
    };
    CubismJson.prototype.getParseError = function () {
        return this._error;
    };
    CubismJson.prototype.checkEndOfFile = function () {
        return this._root.getArray()[1].equals('EOF');
    };
    CubismJson.prototype.parseValue = function (buffer, length, begin, outEndPos) {
        if (this._error)
            return null;
        var o = null;
        var i = begin;
        var f;
        for (; i < length; i++) {
            var c = buffer[i];
            switch (c) {
                case '-':
                case '.':
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9': {
                    var afterString = new Array(1);
                    f = (0, live2dcubismframework_1.strtod)(buffer.slice(i), afterString);
                    outEndPos[0] = buffer.indexOf(afterString[0]);
                    return new JsonFloat(f);
                }
                case '"':
                    return new JsonString(this.parseString(buffer, length, i + 1, outEndPos));
                case '[':
                    o = this.parseArray(buffer, length, i + 1, outEndPos);
                    return o;
                case '{':
                    o = this.parseObject(buffer, length, i + 1, outEndPos);
                    return o;
                case 'n':
                    if (i + 3 < length) {
                        o = new JsonNullvalue();
                        outEndPos[0] = i + 4;
                    }
                    else {
                        this._error = 'parse null';
                    }
                    return o;
                case 't':
                    if (i + 3 < length) {
                        o = JsonBoolean.trueValue;
                        outEndPos[0] = i + 4;
                    }
                    else {
                        this._error = 'parse true';
                    }
                    return o;
                case 'f':
                    if (i + 4 < length) {
                        o = JsonBoolean.falseValue;
                        outEndPos[0] = i + 5;
                    }
                    else {
                        this._error = "illegal ',' position";
                    }
                    return o;
                case ',':
                    this._error = "illegal ',' position";
                    return null;
                case ']':
                    outEndPos[0] = i;
                    return null;
                case '\n':
                    this._lineCount++;
                case ' ':
                case '\t':
                case '\r':
                default:
                    break;
            }
        }
        this._error = 'illegal end of value';
        return null;
    };
    CubismJson.prototype.parseString = function (string, length, begin, outEndPos) {
        if (this._error)
            return null;
        var i = begin;
        var c, c2;
        var ret = new csmstring_1.csmString('');
        var bufStart = begin;
        for (; i < length; i++) {
            c = string[i];
            switch (c) {
                case '"': {
                    outEndPos[0] = i + 1;
                    ret.append(string.slice(bufStart), i - bufStart);
                    return ret.s;
                }
                case '//': {
                    i++;
                    if (i - 1 > bufStart) {
                        ret.append(string.slice(bufStart), i - bufStart);
                    }
                    bufStart = i + 1;
                    if (i < length) {
                        c2 = string[i];
                        switch (c2) {
                            case '\\':
                                ret.expansion(1, '\\');
                                break;
                            case '"':
                                ret.expansion(1, '"');
                                break;
                            case '/':
                                ret.expansion(1, '/');
                                break;
                            case 'b':
                                ret.expansion(1, '\b');
                                break;
                            case 'f':
                                ret.expansion(1, '\f');
                                break;
                            case 'n':
                                ret.expansion(1, '\n');
                                break;
                            case 'r':
                                ret.expansion(1, '\r');
                                break;
                            case 't':
                                ret.expansion(1, '\t');
                                break;
                            case 'u':
                                this._error = 'parse string/unicord escape not supported';
                                break;
                            default:
                                break;
                        }
                    }
                    else {
                        this._error = 'parse string/escape error';
                    }
                }
                default: {
                    break;
                }
            }
        }
        this._error = 'parse string/illegal end';
        return null;
    };
    CubismJson.prototype.parseObject = function (buffer, length, begin, outEndPos) {
        if (this._error)
            return null;
        var ret = new JsonMap();
        var key = '';
        var i = begin;
        var c = '';
        var localRetEndPos2 = Array(1);
        var ok = false;
        for (; i < length; i++) {
            FOR_LOOP: for (; i < length; i++) {
                c = buffer[i];
                switch (c) {
                    case '"':
                        key = this.parseString(buffer, length, i + 1, localRetEndPos2);
                        if (this._error) {
                            return null;
                        }
                        i = localRetEndPos2[0];
                        ok = true;
                        break FOR_LOOP;
                    case '}':
                        outEndPos[0] = i + 1;
                        return ret;
                    case ':':
                        this._error = "illegal ':' position";
                        break;
                    case '\n':
                        this._lineCount++;
                    default:
                        break;
                }
            }
            if (!ok) {
                this._error = 'key not found';
                return null;
            }
            ok = false;
            FOR_LOOP2: for (; i < length; i++) {
                c = buffer[i];
                switch (c) {
                    case ':':
                        ok = true;
                        i++;
                        break FOR_LOOP2;
                    case '}':
                        this._error = "illegal '}' position";
                        break;
                    case '\n':
                        this._lineCount++;
                    default:
                        break;
                }
            }
            if (!ok) {
                this._error = "':' not found";
                return null;
            }
            var value = this.parseValue(buffer, length, i, localRetEndPos2);
            if (this._error) {
                return null;
            }
            i = localRetEndPos2[0];
            ret.put(key, value);
            FOR_LOOP3: for (; i < length; i++) {
                c = buffer[i];
                switch (c) {
                    case ',':
                        break FOR_LOOP3;
                    case '}':
                        outEndPos[0] = i + 1;
                        return ret;
                    case '\n':
                        this._lineCount++;
                    default:
                        break;
                }
            }
        }
        this._error = 'illegal end of perseObject';
        return null;
    };
    CubismJson.prototype.parseArray = function (buffer, length, begin, outEndPos) {
        if (this._error)
            return null;
        var ret = new JsonArray();
        var i = begin;
        var c;
        var localRetEndpos2 = new Array(1);
        for (; i < length; i++) {
            var value = this.parseValue(buffer, length, i, localRetEndpos2);
            if (this._error) {
                return null;
            }
            i = localRetEndpos2[0];
            if (value) {
                ret.add(value);
            }
            FOR_LOOP: for (; i < length; i++) {
                c = buffer[i];
                switch (c) {
                    case ',':
                        break FOR_LOOP;
                    case ']':
                        outEndPos[0] = i + 1;
                        return ret;
                    case '\n':
                        ++this._lineCount;
                    default:
                        break;
                }
            }
        }
        ret = void 0;
        this._error = 'illegal end of parseObject';
        return null;
    };
    return CubismJson;
}());
exports.CubismJson = CubismJson;
var JsonFloat = (function (_super) {
    __extends(JsonFloat, _super);
    function JsonFloat(v) {
        var _this = _super.call(this) || this;
        _this._value = v;
        return _this;
    }
    JsonFloat.prototype.isFloat = function () {
        return true;
    };
    JsonFloat.prototype.getString = function (defaultValue, indent) {
        var strbuf = '\0';
        this._value = parseFloat(strbuf);
        this._stringBuffer = strbuf;
        return this._stringBuffer;
    };
    JsonFloat.prototype.toInt = function (defaultValue) {
        if (defaultValue === void 0) { defaultValue = 0; }
        return parseInt(this._value.toString());
    };
    JsonFloat.prototype.toFloat = function (defaultValue) {
        if (defaultValue === void 0) { defaultValue = 0.0; }
        return this._value;
    };
    JsonFloat.prototype.equals = function (value) {
        if ('number' === typeof value) {
            if (Math.round(value)) {
                return false;
            }
            else {
                return value == this._value;
            }
        }
        return false;
    };
    return JsonFloat;
}(Value));
exports.JsonFloat = JsonFloat;
var JsonBoolean = (function (_super) {
    __extends(JsonBoolean, _super);
    function JsonBoolean(v) {
        var _this = _super.call(this) || this;
        _this._boolValue = v;
        return _this;
    }
    JsonBoolean.prototype.isBool = function () {
        return true;
    };
    JsonBoolean.prototype.toBoolean = function (defaultValue) {
        if (defaultValue === void 0) { defaultValue = false; }
        return this._boolValue;
    };
    JsonBoolean.prototype.getString = function (defaultValue, indent) {
        this._stringBuffer = this._boolValue ? 'true' : 'false';
        return this._stringBuffer;
    };
    JsonBoolean.prototype.equals = function (value) {
        if ('boolean' === typeof value) {
            return value == this._boolValue;
        }
        return false;
    };
    JsonBoolean.prototype.isStatic = function () {
        return true;
    };
    return JsonBoolean;
}(Value));
exports.JsonBoolean = JsonBoolean;
var JsonString = (function (_super) {
    __extends(JsonString, _super);
    function JsonString(s) {
        var _this = _super.call(this) || this;
        if ('string' === typeof s) {
            _this._stringBuffer = s;
        }
        if (s instanceof csmstring_1.csmString) {
            _this._stringBuffer = s.s;
        }
        return _this;
    }
    JsonString.prototype.isString = function () {
        return true;
    };
    JsonString.prototype.getString = function (defaultValue, indent) {
        return this._stringBuffer;
    };
    JsonString.prototype.equals = function (value) {
        if ('string' === typeof value) {
            return this._stringBuffer == value;
        }
        if (value instanceof csmstring_1.csmString) {
            return this._stringBuffer == value.s;
        }
        return false;
    };
    return JsonString;
}(Value));
exports.JsonString = JsonString;
var JsonError = (function (_super) {
    __extends(JsonError, _super);
    function JsonError(s, isStatic) {
        var _this = this;
        if ('string' === typeof s) {
            _this = _super.call(this, s) || this;
        }
        else {
            _this = _super.call(this, s) || this;
        }
        _this._isStatic = isStatic;
        return _this;
    }
    JsonError.prototype.isStatic = function () {
        return this._isStatic;
    };
    JsonError.prototype.setErrorNotForClientCall = function (s) {
        this._stringBuffer = s;
        return this;
    };
    JsonError.prototype.isError = function () {
        return true;
    };
    return JsonError;
}(JsonString));
exports.JsonError = JsonError;
var JsonNullvalue = (function (_super) {
    __extends(JsonNullvalue, _super);
    function JsonNullvalue() {
        var _this = _super.call(this) || this;
        _this._stringBuffer = 'NullValue';
        return _this;
    }
    JsonNullvalue.prototype.isNull = function () {
        return true;
    };
    JsonNullvalue.prototype.getString = function (defaultValue, indent) {
        return this._stringBuffer;
    };
    JsonNullvalue.prototype.isStatic = function () {
        return true;
    };
    JsonNullvalue.prototype.setErrorNotForClientCall = function (s) {
        this._stringBuffer = s;
        return JsonError.nullValue;
    };
    return JsonNullvalue;
}(Value));
exports.JsonNullvalue = JsonNullvalue;
var JsonArray = (function (_super) {
    __extends(JsonArray, _super);
    function JsonArray() {
        var _this = _super.call(this) || this;
        _this._array = new csmvector_1.csmVector();
        return _this;
    }
    JsonArray.prototype.release = function () {
        for (var ite = this._array.begin(); ite.notEqual(this._array.end()); ite.preIncrement()) {
            var v = ite.ptr();
            if (v && !v.isStatic()) {
                v = void 0;
                v = null;
            }
        }
    };
    JsonArray.prototype.isArray = function () {
        return true;
    };
    JsonArray.prototype.getValueByIndex = function (index) {
        if (index < 0 || this._array.getSize() <= index) {
            return Value.errorValue.setErrorNotForClientCall(CSM_JSON_ERROR_INDEX_OF_BOUNDS);
        }
        var v = this._array.at(index);
        if (v == null) {
            return Value.nullValue;
        }
        return v;
    };
    JsonArray.prototype.getValueByString = function (s) {
        return Value.errorValue.setErrorNotForClientCall(CSM_JSON_ERROR_TYPE_MISMATCH);
    };
    JsonArray.prototype.getString = function (defaultValue, indent) {
        var stringBuffer = indent + '[\n';
        for (var ite = this._array.begin(); ite.notEqual(this._array.end()); ite.increment()) {
            var v = ite.ptr();
            this._stringBuffer += indent + '' + v.getString(indent + ' ') + '\n';
        }
        this._stringBuffer = stringBuffer + indent + ']\n';
        return this._stringBuffer;
    };
    JsonArray.prototype.add = function (v) {
        this._array.pushBack(v);
    };
    JsonArray.prototype.getVector = function (defaultValue) {
        if (defaultValue === void 0) { defaultValue = null; }
        return this._array;
    };
    JsonArray.prototype.getSize = function () {
        return this._array.getSize();
    };
    return JsonArray;
}(Value));
exports.JsonArray = JsonArray;
var JsonMap = (function (_super) {
    __extends(JsonMap, _super);
    function JsonMap() {
        var _this = _super.call(this) || this;
        _this._map = new csmmap_1.csmMap();
        return _this;
    }
    JsonMap.prototype.release = function () {
        var ite = this._map.begin();
        while (ite.notEqual(this._map.end())) {
            var v = ite.ptr().second;
            if (v && !v.isStatic()) {
                v = void 0;
                v = null;
            }
            ite.preIncrement();
        }
    };
    JsonMap.prototype.isMap = function () {
        return true;
    };
    JsonMap.prototype.getValueByString = function (s) {
        if (s instanceof csmstring_1.csmString) {
            var ret = this._map.getValue(s.s);
            if (ret == null) {
                return Value.nullValue;
            }
            return ret;
        }
        for (var iter = this._map.begin(); iter.notEqual(this._map.end()); iter.preIncrement()) {
            if (iter.ptr().first == s) {
                if (iter.ptr().second == null) {
                    return Value.nullValue;
                }
                return iter.ptr().second;
            }
        }
        return Value.nullValue;
    };
    JsonMap.prototype.getValueByIndex = function (index) {
        return Value.errorValue.setErrorNotForClientCall(CSM_JSON_ERROR_TYPE_MISMATCH);
    };
    JsonMap.prototype.getString = function (defaultValue, indent) {
        this._stringBuffer = indent + '{\n';
        var ite = this._map.begin();
        while (ite.notEqual(this._map.end())) {
            var key = ite.ptr().first;
            var v = ite.ptr().second;
            this._stringBuffer +=
                indent + ' ' + key + ' : ' + v.getString(indent + '   ') + ' \n';
            ite.preIncrement();
        }
        this._stringBuffer += indent + '}\n';
        return this._stringBuffer;
    };
    JsonMap.prototype.getMap = function (defaultValue) {
        return this._map;
    };
    JsonMap.prototype.put = function (key, v) {
        this._map.setValue(key, v);
    };
    JsonMap.prototype.getKeys = function () {
        if (!this._keys) {
            this._keys = new csmvector_1.csmVector();
            var ite = this._map.begin();
            while (ite.notEqual(this._map.end())) {
                var key = ite.ptr().first;
                this._keys.pushBack(key);
                ite.preIncrement();
            }
        }
        return this._keys;
    };
    JsonMap.prototype.getSize = function () {
        return this._keys.getSize();
    };
    return JsonMap;
}(Value));
exports.JsonMap = JsonMap;
var $ = __importStar(__webpack_require__(/*! ./cubismjson */ "./vendor/Framework/src/utils/cubismjson.ts"));
var cubismjsonextension_1 = __webpack_require__(/*! ./cubismjsonextension */ "./vendor/Framework/src/utils/cubismjsonextension.ts");
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismJson = $.CubismJson;
    Live2DCubismFramework.JsonArray = $.JsonArray;
    Live2DCubismFramework.JsonBoolean = $.JsonBoolean;
    Live2DCubismFramework.JsonError = $.JsonError;
    Live2DCubismFramework.JsonFloat = $.JsonFloat;
    Live2DCubismFramework.JsonMap = $.JsonMap;
    Live2DCubismFramework.JsonNullvalue = $.JsonNullvalue;
    Live2DCubismFramework.JsonString = $.JsonString;
    Live2DCubismFramework.Value = $.Value;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "./vendor/Framework/src/utils/cubismjsonextension.ts":
/*!***********************************************************!*\
  !*** ./vendor/Framework/src/utils/cubismjsonextension.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CubismJsonExtension = void 0;
var cubismjson_1 = __webpack_require__(/*! ./cubismjson */ "./vendor/Framework/src/utils/cubismjson.ts");
var CubismJsonExtension = (function () {
    function CubismJsonExtension() {
    }
    CubismJsonExtension.parseJsonObject = function (obj, map) {
        Object.keys(obj).forEach(function (key) {
            if (typeof obj[key] == 'boolean') {
                map.put(key, new cubismjson_1.JsonBoolean(obj[key]));
            }
            else if (typeof obj[key] == 'string') {
                map.put(key, new cubismjson_1.JsonString(obj[key]));
            }
            else if (typeof obj[key] == 'number') {
                map.put(key, new cubismjson_1.JsonFloat(obj[key]));
            }
            else if (obj[key] instanceof Array) {
                map.put(key, CubismJsonExtension.parseJsonArray(obj[key]));
            }
            else if (obj[key] instanceof Object) {
                map.put(key, CubismJsonExtension.parseJsonObject(obj[key], new cubismjson_1.JsonMap()));
            }
            else if (obj[key] == null) {
                map.put(key, new cubismjson_1.JsonNullvalue());
            }
            else {
                map.put(key, obj[key]);
            }
        });
        return map;
    };
    CubismJsonExtension.parseJsonArray = function (obj) {
        var _this = this;
        var arr = new cubismjson_1.JsonArray();
        Object.keys(obj).forEach(function (key) {
            var convKey = Number(key);
            if (typeof convKey == 'number') {
                if (typeof obj[convKey] == 'boolean') {
                    arr.add(new cubismjson_1.JsonBoolean(obj[convKey]));
                }
                else if (typeof obj[convKey] == 'string') {
                    arr.add(new cubismjson_1.JsonString(obj[convKey]));
                }
                else if (typeof obj[convKey] == 'number') {
                    arr.add(new cubismjson_1.JsonFloat(obj[convKey]));
                }
                else if (obj[key] instanceof Array) {
                    arr.add(_this.parseJsonArray(obj[key]));
                }
                else if (obj[key] instanceof Object) {
                    arr.add(_this.parseJsonObject(obj[key], new cubismjson_1.JsonMap()));
                }
                else if (obj[key] == null) {
                    arr.add(new cubismjson_1.JsonNullvalue());
                }
                else {
                    arr.add(obj[key]);
                }
            }
            else if (obj[key] instanceof Array) {
                arr.add(_this.parseJsonArray(obj[key]));
            }
            else if (obj[key] instanceof Object) {
                arr.add(_this.parseJsonObject(obj[key], new cubismjson_1.JsonMap()));
            }
            else if (obj[key] == null) {
                arr.add(new cubismjson_1.JsonNullvalue());
            }
            else {
                for (var i = 0; i < obj[key].length; i++) {
                    arr.add(obj[key][i]);
                }
            }
        });
        return arr;
    };
    return CubismJsonExtension;
}());
exports.CubismJsonExtension = CubismJsonExtension;


/***/ }),

/***/ "./node_modules/whatwg-fetch/fetch.js":
/*!********************************************!*\
  !*** ./node_modules/whatwg-fetch/fetch.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DOMException": function() { return /* binding */ DOMException; },
/* harmony export */   "Headers": function() { return /* binding */ Headers; },
/* harmony export */   "Request": function() { return /* binding */ Request; },
/* harmony export */   "Response": function() { return /* binding */ Response; },
/* harmony export */   "fetch": function() { return /* binding */ fetch; }
/* harmony export */ });
var global =
  (typeof globalThis !== 'undefined' && globalThis) ||
  (typeof self !== 'undefined' && self) ||
  (typeof global !== 'undefined' && global)

var support = {
  searchParams: 'URLSearchParams' in global,
  iterable: 'Symbol' in global && 'iterator' in Symbol,
  blob:
    'FileReader' in global &&
    'Blob' in global &&
    (function() {
      try {
        new Blob()
        return true
      } catch (e) {
        return false
      }
    })(),
  formData: 'FormData' in global,
  arrayBuffer: 'ArrayBuffer' in global
}

function isDataView(obj) {
  return obj && DataView.prototype.isPrototypeOf(obj)
}

if (support.arrayBuffer) {
  var viewClasses = [
    '[object Int8Array]',
    '[object Uint8Array]',
    '[object Uint8ClampedArray]',
    '[object Int16Array]',
    '[object Uint16Array]',
    '[object Int32Array]',
    '[object Uint32Array]',
    '[object Float32Array]',
    '[object Float64Array]'
  ]

  var isArrayBufferView =
    ArrayBuffer.isView ||
    function(obj) {
      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
    }
}

function normalizeName(name) {
  if (typeof name !== 'string') {
    name = String(name)
  }
  if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {
    throw new TypeError('Invalid character in header field name: "' + name + '"')
  }
  return name.toLowerCase()
}

function normalizeValue(value) {
  if (typeof value !== 'string') {
    value = String(value)
  }
  return value
}

// Build a destructive iterator for the value list
function iteratorFor(items) {
  var iterator = {
    next: function() {
      var value = items.shift()
      return {done: value === undefined, value: value}
    }
  }

  if (support.iterable) {
    iterator[Symbol.iterator] = function() {
      return iterator
    }
  }

  return iterator
}

function Headers(headers) {
  this.map = {}

  if (headers instanceof Headers) {
    headers.forEach(function(value, name) {
      this.append(name, value)
    }, this)
  } else if (Array.isArray(headers)) {
    headers.forEach(function(header) {
      this.append(header[0], header[1])
    }, this)
  } else if (headers) {
    Object.getOwnPropertyNames(headers).forEach(function(name) {
      this.append(name, headers[name])
    }, this)
  }
}

Headers.prototype.append = function(name, value) {
  name = normalizeName(name)
  value = normalizeValue(value)
  var oldValue = this.map[name]
  this.map[name] = oldValue ? oldValue + ', ' + value : value
}

Headers.prototype['delete'] = function(name) {
  delete this.map[normalizeName(name)]
}

Headers.prototype.get = function(name) {
  name = normalizeName(name)
  return this.has(name) ? this.map[name] : null
}

Headers.prototype.has = function(name) {
  return this.map.hasOwnProperty(normalizeName(name))
}

Headers.prototype.set = function(name, value) {
  this.map[normalizeName(name)] = normalizeValue(value)
}

Headers.prototype.forEach = function(callback, thisArg) {
  for (var name in this.map) {
    if (this.map.hasOwnProperty(name)) {
      callback.call(thisArg, this.map[name], name, this)
    }
  }
}

Headers.prototype.keys = function() {
  var items = []
  this.forEach(function(value, name) {
    items.push(name)
  })
  return iteratorFor(items)
}

Headers.prototype.values = function() {
  var items = []
  this.forEach(function(value) {
    items.push(value)
  })
  return iteratorFor(items)
}

Headers.prototype.entries = function() {
  var items = []
  this.forEach(function(value, name) {
    items.push([name, value])
  })
  return iteratorFor(items)
}

if (support.iterable) {
  Headers.prototype[Symbol.iterator] = Headers.prototype.entries
}

function consumed(body) {
  if (body.bodyUsed) {
    return Promise.reject(new TypeError('Already read'))
  }
  body.bodyUsed = true
}

function fileReaderReady(reader) {
  return new Promise(function(resolve, reject) {
    reader.onload = function() {
      resolve(reader.result)
    }
    reader.onerror = function() {
      reject(reader.error)
    }
  })
}

function readBlobAsArrayBuffer(blob) {
  var reader = new FileReader()
  var promise = fileReaderReady(reader)
  reader.readAsArrayBuffer(blob)
  return promise
}

function readBlobAsText(blob) {
  var reader = new FileReader()
  var promise = fileReaderReady(reader)
  reader.readAsText(blob)
  return promise
}

function readArrayBufferAsText(buf) {
  var view = new Uint8Array(buf)
  var chars = new Array(view.length)

  for (var i = 0; i < view.length; i++) {
    chars[i] = String.fromCharCode(view[i])
  }
  return chars.join('')
}

function bufferClone(buf) {
  if (buf.slice) {
    return buf.slice(0)
  } else {
    var view = new Uint8Array(buf.byteLength)
    view.set(new Uint8Array(buf))
    return view.buffer
  }
}

function Body() {
  this.bodyUsed = false

  this._initBody = function(body) {
    /*
      fetch-mock wraps the Response object in an ES6 Proxy to
      provide useful test harness features such as flush. However, on
      ES5 browsers without fetch or Proxy support pollyfills must be used;
      the proxy-pollyfill is unable to proxy an attribute unless it exists
      on the object before the Proxy is created. This change ensures
      Response.bodyUsed exists on the instance, while maintaining the
      semantic of setting Request.bodyUsed in the constructor before
      _initBody is called.
    */
    this.bodyUsed = this.bodyUsed
    this._bodyInit = body
    if (!body) {
      this._bodyText = ''
    } else if (typeof body === 'string') {
      this._bodyText = body
    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
      this._bodyBlob = body
    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
      this._bodyFormData = body
    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
      this._bodyText = body.toString()
    } else if (support.arrayBuffer && support.blob && isDataView(body)) {
      this._bodyArrayBuffer = bufferClone(body.buffer)
      // IE 10-11 can't handle a DataView body.
      this._bodyInit = new Blob([this._bodyArrayBuffer])
    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
      this._bodyArrayBuffer = bufferClone(body)
    } else {
      this._bodyText = body = Object.prototype.toString.call(body)
    }

    if (!this.headers.get('content-type')) {
      if (typeof body === 'string') {
        this.headers.set('content-type', 'text/plain;charset=UTF-8')
      } else if (this._bodyBlob && this._bodyBlob.type) {
        this.headers.set('content-type', this._bodyBlob.type)
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')
      }
    }
  }

  if (support.blob) {
    this.blob = function() {
      var rejected = consumed(this)
      if (rejected) {
        return rejected
      }

      if (this._bodyBlob) {
        return Promise.resolve(this._bodyBlob)
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(new Blob([this._bodyArrayBuffer]))
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as blob')
      } else {
        return Promise.resolve(new Blob([this._bodyText]))
      }
    }

    this.arrayBuffer = function() {
      if (this._bodyArrayBuffer) {
        var isConsumed = consumed(this)
        if (isConsumed) {
          return isConsumed
        }
        if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
          return Promise.resolve(
            this._bodyArrayBuffer.buffer.slice(
              this._bodyArrayBuffer.byteOffset,
              this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
            )
          )
        } else {
          return Promise.resolve(this._bodyArrayBuffer)
        }
      } else {
        return this.blob().then(readBlobAsArrayBuffer)
      }
    }
  }

  this.text = function() {
    var rejected = consumed(this)
    if (rejected) {
      return rejected
    }

    if (this._bodyBlob) {
      return readBlobAsText(this._bodyBlob)
    } else if (this._bodyArrayBuffer) {
      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
    } else if (this._bodyFormData) {
      throw new Error('could not read FormData body as text')
    } else {
      return Promise.resolve(this._bodyText)
    }
  }

  if (support.formData) {
    this.formData = function() {
      return this.text().then(decode)
    }
  }

  this.json = function() {
    return this.text().then(JSON.parse)
  }

  return this
}

// HTTP methods whose capitalization should be normalized
var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']

function normalizeMethod(method) {
  var upcased = method.toUpperCase()
  return methods.indexOf(upcased) > -1 ? upcased : method
}

function Request(input, options) {
  if (!(this instanceof Request)) {
    throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
  }

  options = options || {}
  var body = options.body

  if (input instanceof Request) {
    if (input.bodyUsed) {
      throw new TypeError('Already read')
    }
    this.url = input.url
    this.credentials = input.credentials
    if (!options.headers) {
      this.headers = new Headers(input.headers)
    }
    this.method = input.method
    this.mode = input.mode
    this.signal = input.signal
    if (!body && input._bodyInit != null) {
      body = input._bodyInit
      input.bodyUsed = true
    }
  } else {
    this.url = String(input)
  }

  this.credentials = options.credentials || this.credentials || 'same-origin'
  if (options.headers || !this.headers) {
    this.headers = new Headers(options.headers)
  }
  this.method = normalizeMethod(options.method || this.method || 'GET')
  this.mode = options.mode || this.mode || null
  this.signal = options.signal || this.signal
  this.referrer = null

  if ((this.method === 'GET' || this.method === 'HEAD') && body) {
    throw new TypeError('Body not allowed for GET or HEAD requests')
  }
  this._initBody(body)

  if (this.method === 'GET' || this.method === 'HEAD') {
    if (options.cache === 'no-store' || options.cache === 'no-cache') {
      // Search for a '_' parameter in the query string
      var reParamSearch = /([?&])_=[^&]*/
      if (reParamSearch.test(this.url)) {
        // If it already exists then set the value with the current time
        this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime())
      } else {
        // Otherwise add a new '_' parameter to the end with the current time
        var reQueryString = /\?/
        this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime()
      }
    }
  }
}

Request.prototype.clone = function() {
  return new Request(this, {body: this._bodyInit})
}

function decode(body) {
  var form = new FormData()
  body
    .trim()
    .split('&')
    .forEach(function(bytes) {
      if (bytes) {
        var split = bytes.split('=')
        var name = split.shift().replace(/\+/g, ' ')
        var value = split.join('=').replace(/\+/g, ' ')
        form.append(decodeURIComponent(name), decodeURIComponent(value))
      }
    })
  return form
}

function parseHeaders(rawHeaders) {
  var headers = new Headers()
  // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
  // https://tools.ietf.org/html/rfc7230#section-3.2
  var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ')
  // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
  // https://github.com/github/fetch/issues/748
  // https://github.com/zloirock/core-js/issues/751
  preProcessedHeaders
    .split('\r')
    .map(function(header) {
      return header.indexOf('\n') === 0 ? header.substr(1, header.length) : header
    })
    .forEach(function(line) {
      var parts = line.split(':')
      var key = parts.shift().trim()
      if (key) {
        var value = parts.join(':').trim()
        headers.append(key, value)
      }
    })
  return headers
}

Body.call(Request.prototype)

function Response(bodyInit, options) {
  if (!(this instanceof Response)) {
    throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
  }
  if (!options) {
    options = {}
  }

  this.type = 'default'
  this.status = options.status === undefined ? 200 : options.status
  this.ok = this.status >= 200 && this.status < 300
  this.statusText = options.statusText === undefined ? '' : '' + options.statusText
  this.headers = new Headers(options.headers)
  this.url = options.url || ''
  this._initBody(bodyInit)
}

Body.call(Response.prototype)

Response.prototype.clone = function() {
  return new Response(this._bodyInit, {
    status: this.status,
    statusText: this.statusText,
    headers: new Headers(this.headers),
    url: this.url
  })
}

Response.error = function() {
  var response = new Response(null, {status: 0, statusText: ''})
  response.type = 'error'
  return response
}

var redirectStatuses = [301, 302, 303, 307, 308]

Response.redirect = function(url, status) {
  if (redirectStatuses.indexOf(status) === -1) {
    throw new RangeError('Invalid status code')
  }

  return new Response(null, {status: status, headers: {location: url}})
}

var DOMException = global.DOMException
try {
  new DOMException()
} catch (err) {
  DOMException = function(message, name) {
    this.message = message
    this.name = name
    var error = Error(message)
    this.stack = error.stack
  }
  DOMException.prototype = Object.create(Error.prototype)
  DOMException.prototype.constructor = DOMException
}

function fetch(input, init) {
  return new Promise(function(resolve, reject) {
    var request = new Request(input, init)

    if (request.signal && request.signal.aborted) {
      return reject(new DOMException('Aborted', 'AbortError'))
    }

    var xhr = new XMLHttpRequest()

    function abortXhr() {
      xhr.abort()
    }

    xhr.onload = function() {
      var options = {
        status: xhr.status,
        statusText: xhr.statusText,
        headers: parseHeaders(xhr.getAllResponseHeaders() || '')
      }
      options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')
      var body = 'response' in xhr ? xhr.response : xhr.responseText
      setTimeout(function() {
        resolve(new Response(body, options))
      }, 0)
    }

    xhr.onerror = function() {
      setTimeout(function() {
        reject(new TypeError('Network request failed'))
      }, 0)
    }

    xhr.ontimeout = function() {
      setTimeout(function() {
        reject(new TypeError('Network request failed'))
      }, 0)
    }

    xhr.onabort = function() {
      setTimeout(function() {
        reject(new DOMException('Aborted', 'AbortError'))
      }, 0)
    }

    function fixUrl(url) {
      try {
        return url === '' && global.location.href ? global.location.href : url
      } catch (e) {
        return url
      }
    }

    xhr.open(request.method, fixUrl(request.url), true)

    if (request.credentials === 'include') {
      xhr.withCredentials = true
    } else if (request.credentials === 'omit') {
      xhr.withCredentials = false
    }

    if ('responseType' in xhr) {
      if (support.blob) {
        xhr.responseType = 'blob'
      } else if (
        support.arrayBuffer &&
        request.headers.get('Content-Type') &&
        request.headers.get('Content-Type').indexOf('application/octet-stream') !== -1
      ) {
        xhr.responseType = 'arraybuffer'
      }
    }

    if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers)) {
      Object.getOwnPropertyNames(init.headers).forEach(function(name) {
        xhr.setRequestHeader(name, normalizeValue(init.headers[name]))
      })
    } else {
      request.headers.forEach(function(value, name) {
        xhr.setRequestHeader(name, value)
      })
    }

    if (request.signal) {
      request.signal.addEventListener('abort', abortXhr)

      xhr.onreadystatechange = function() {
        // DONE (success or failure)
        if (xhr.readyState === 4) {
          request.signal.removeEventListener('abort', abortXhr)
        }
      }
    }

    xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
  })
}

fetch.polyfill = true

if (!global.fetch) {
  global.fetch = fetch
  global.Headers = Headers
  global.Request = Request
  global.Response = Response
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/main.ts");
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0o7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0o7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsa0JBQWtCLGlCQUFpQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0EscURBQXFEO0FBQ3JELFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUiw0RUFBNEU7QUFDNUU7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNEJBQTRCLHFCQUFxQjtBQUNqRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTs7QUFFTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBLHFDQUFxQywwQkFBMEI7QUFDL0Q7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDZCQUE2QiwwQkFBMEIsZUFBZTtBQUN0RTs7QUFFTztBQUNQO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsTUFBTTtBQUNOO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7VUM1bEJBO1VBQ0E7O1VBRUE7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7O1VBRUE7VUFDQTs7VUFFQTtVQUNBO1VBQ0E7Ozs7O1dDdEJBO1dBQ0E7V0FDQTtXQUNBO1dBQ0EseUNBQXlDLHdDQUF3QztXQUNqRjtXQUNBO1dBQ0E7Ozs7O1dDUEEsOENBQThDOzs7OztXQ0E5QztXQUNBO1dBQ0E7V0FDQSx1REFBdUQsaUJBQWlCO1dBQ3hFO1dBQ0EsZ0RBQWdELGFBQWE7V0FDN0Q7Ozs7O1VFTkE7VUFDQTtVQUNBO1VBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGFwcGRlZmluZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGFwcGRlbGVnYXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9sYXBwbGl2ZTJkbWFuYWdlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGFwcG1vZGVsLnRzIiwid2VicGFjazovLy8uL3NyYy9sYXBwcGFsLnRzIiwid2VicGFjazovLy8uL3NyYy9sYXBwdGV4dHVyZW1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhcHB2aWV3LnRzIiwid2VicGFjazovLy8uL3NyYy9sYXBwd2F2ZmlsZWhhbmRsZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RvdWNobWFuYWdlci50cyIsIndlYnBhY2s6Ly8vLi92ZW5kb3IvRnJhbWV3b3JrL3NyYy9jdWJpc21kZWZhdWx0cGFyYW1ldGVyaWQudHMiLCJ3ZWJwYWNrOi8vLy4vdmVuZG9yL0ZyYW1ld29yay9zcmMvY3ViaXNtZnJhbWV3b3JrY29uZmlnLnRzIiwid2VicGFjazovLy8uL3ZlbmRvci9GcmFtZXdvcmsvc3JjL2N1YmlzbW1vZGVsc2V0dGluZ2pzb24udHMiLCJ3ZWJwYWNrOi8vLy4vdmVuZG9yL0ZyYW1ld29yay9zcmMvZWZmZWN0L2N1YmlzbWJyZWF0aC50cyIsIndlYnBhY2s6Ly8vLi92ZW5kb3IvRnJhbWV3b3JrL3NyYy9lZmZlY3QvY3ViaXNtZXllYmxpbmsudHMiLCJ3ZWJwYWNrOi8vLy4vdmVuZG9yL0ZyYW1ld29yay9zcmMvZWZmZWN0L2N1YmlzbXBvc2UudHMiLCJ3ZWJwYWNrOi8vLy4vdmVuZG9yL0ZyYW1ld29yay9zcmMvaWN1YmlzbW1vZGVsc2V0dGluZy50cyIsIndlYnBhY2s6Ly8vLi92ZW5kb3IvRnJhbWV3b3JrL3NyYy9pZC9jdWJpc21pZC50cyIsIndlYnBhY2s6Ly8vLi92ZW5kb3IvRnJhbWV3b3JrL3NyYy9pZC9jdWJpc21pZG1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vLy4vdmVuZG9yL0ZyYW1ld29yay9zcmMvbGl2ZTJkY3ViaXNtZnJhbWV3b3JrLnRzIiwid2VicGFjazovLy8uL3ZlbmRvci9GcmFtZXdvcmsvc3JjL21hdGgvY3ViaXNtbWF0aC50cyIsIndlYnBhY2s6Ly8vLi92ZW5kb3IvRnJhbWV3b3JrL3NyYy9tYXRoL2N1YmlzbW1hdHJpeDQ0LnRzIiwid2VicGFjazovLy8uL3ZlbmRvci9GcmFtZXdvcmsvc3JjL21hdGgvY3ViaXNtbW9kZWxtYXRyaXgudHMiLCJ3ZWJwYWNrOi8vLy4vdmVuZG9yL0ZyYW1ld29yay9zcmMvbWF0aC9jdWJpc210YXJnZXRwb2ludC50cyIsIndlYnBhY2s6Ly8vLi92ZW5kb3IvRnJhbWV3b3JrL3NyYy9tYXRoL2N1YmlzbXZlY3RvcjIudHMiLCJ3ZWJwYWNrOi8vLy4vdmVuZG9yL0ZyYW1ld29yay9zcmMvbWF0aC9jdWJpc212aWV3bWF0cml4LnRzIiwid2VicGFjazovLy8uL3ZlbmRvci9GcmFtZXdvcmsvc3JjL21vZGVsL2N1YmlzbW1vYy50cyIsIndlYnBhY2s6Ly8vLi92ZW5kb3IvRnJhbWV3b3JrL3NyYy9tb2RlbC9jdWJpc21tb2RlbC50cyIsIndlYnBhY2s6Ly8vLi92ZW5kb3IvRnJhbWV3b3JrL3NyYy9tb2RlbC9jdWJpc21tb2RlbHVzZXJkYXRhLnRzIiwid2VicGFjazovLy8uL3ZlbmRvci9GcmFtZXdvcmsvc3JjL21vZGVsL2N1YmlzbW1vZGVsdXNlcmRhdGFqc29uLnRzIiwid2VicGFjazovLy8uL3ZlbmRvci9GcmFtZXdvcmsvc3JjL21vZGVsL2N1YmlzbXVzZXJtb2RlbC50cyIsIndlYnBhY2s6Ly8vLi92ZW5kb3IvRnJhbWV3b3JrL3NyYy9tb3Rpb24vYWN1YmlzbW1vdGlvbi50cyIsIndlYnBhY2s6Ly8vLi92ZW5kb3IvRnJhbWV3b3JrL3NyYy9tb3Rpb24vY3ViaXNtZXhwcmVzc2lvbm1vdGlvbi50cyIsIndlYnBhY2s6Ly8vLi92ZW5kb3IvRnJhbWV3b3JrL3NyYy9tb3Rpb24vY3ViaXNtbW90aW9uLnRzIiwid2VicGFjazovLy8uL3ZlbmRvci9GcmFtZXdvcmsvc3JjL21vdGlvbi9jdWJpc21tb3Rpb25pbnRlcm5hbC50cyIsIndlYnBhY2s6Ly8vLi92ZW5kb3IvRnJhbWV3b3JrL3NyYy9tb3Rpb24vY3ViaXNtbW90aW9uanNvbi50cyIsIndlYnBhY2s6Ly8vLi92ZW5kb3IvRnJhbWV3b3JrL3NyYy9tb3Rpb24vY3ViaXNtbW90aW9ubWFuYWdlci50cyIsIndlYnBhY2s6Ly8vLi92ZW5kb3IvRnJhbWV3b3JrL3NyYy9tb3Rpb24vY3ViaXNtbW90aW9ucXVldWVlbnRyeS50cyIsIndlYnBhY2s6Ly8vLi92ZW5kb3IvRnJhbWV3b3JrL3NyYy9tb3Rpb24vY3ViaXNtbW90aW9ucXVldWVtYW5hZ2VyLnRzIiwid2VicGFjazovLy8uL3ZlbmRvci9GcmFtZXdvcmsvc3JjL3BoeXNpY3MvY3ViaXNtcGh5c2ljcy50cyIsIndlYnBhY2s6Ly8vLi92ZW5kb3IvRnJhbWV3b3JrL3NyYy9waHlzaWNzL2N1YmlzbXBoeXNpY3NpbnRlcm5hbC50cyIsIndlYnBhY2s6Ly8vLi92ZW5kb3IvRnJhbWV3b3JrL3NyYy9waHlzaWNzL2N1YmlzbXBoeXNpY3Nqc29uLnRzIiwid2VicGFjazovLy8uL3ZlbmRvci9GcmFtZXdvcmsvc3JjL3JlbmRlcmluZy9jdWJpc21yZW5kZXJlci50cyIsIndlYnBhY2s6Ly8vLi92ZW5kb3IvRnJhbWV3b3JrL3NyYy9yZW5kZXJpbmcvY3ViaXNtcmVuZGVyZXJfd2ViZ2wudHMiLCJ3ZWJwYWNrOi8vLy4vdmVuZG9yL0ZyYW1ld29yay9zcmMvdHlwZS9jc21tYXAudHMiLCJ3ZWJwYWNrOi8vLy4vdmVuZG9yL0ZyYW1ld29yay9zcmMvdHlwZS9jc21yZWN0Zi50cyIsIndlYnBhY2s6Ly8vLi92ZW5kb3IvRnJhbWV3b3JrL3NyYy90eXBlL2NzbXN0cmluZy50cyIsIndlYnBhY2s6Ly8vLi92ZW5kb3IvRnJhbWV3b3JrL3NyYy90eXBlL2NzbXZlY3Rvci50cyIsIndlYnBhY2s6Ly8vLi92ZW5kb3IvRnJhbWV3b3JrL3NyYy91dGlscy9jdWJpc21kZWJ1Zy50cyIsIndlYnBhY2s6Ly8vLi92ZW5kb3IvRnJhbWV3b3JrL3NyYy91dGlscy9jdWJpc21qc29uLnRzIiwid2VicGFjazovLy8uL3ZlbmRvci9GcmFtZXdvcmsvc3JjL3V0aWxzL2N1YmlzbWpzb25leHRlbnNpb24udHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3doYXR3Zy1mZXRjaC9mZXRjaC5qcyIsIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly8vd2VicGFjay9iZWZvcmUtc3RhcnR1cCIsIndlYnBhY2s6Ly8vd2VicGFjay9zdGFydHVwIiwid2VicGFjazovLy93ZWJwYWNrL2FmdGVyLXN0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgTG9nTGV2ZWwgfSBmcm9tICdAZnJhbWV3b3JrL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5cbi8qKlxuICogU2FtcGxlIEFwcOOBp+S9v+eUqOOBmeOCi+WumuaVsFxuICovXG5cbi8vIENhbnZhcyB3aWR0aCBhbmQgaGVpZ2h0IHBpeGVsIHZhbHVlcywgb3IgZHluYW1pYyBzY3JlZW4gc2l6ZSAoJ2F1dG8nKS5cbmV4cG9ydCBjb25zdCBDYW52YXNTaXplOiB7IHdpZHRoOiBudW1iZXI7IGhlaWdodDogbnVtYmVyIH0gfCAnYXV0bycgPSAnYXV0byc7XG5cbi8vIOeUu+mdolxuZXhwb3J0IGNvbnN0IFZpZXdTY2FsZSA9IDEuMDtcbmV4cG9ydCBjb25zdCBWaWV3TWF4U2NhbGUgPSAyLjA7XG5leHBvcnQgY29uc3QgVmlld01pblNjYWxlID0gMC44O1xuXG5leHBvcnQgY29uc3QgVmlld0xvZ2ljYWxMZWZ0ID0gLTEuMDtcbmV4cG9ydCBjb25zdCBWaWV3TG9naWNhbFJpZ2h0ID0gMS4wO1xuZXhwb3J0IGNvbnN0IFZpZXdMb2dpY2FsQm90dG9tID0gLTEuMDtcbmV4cG9ydCBjb25zdCBWaWV3TG9naWNhbFRvcCA9IDEuMDtcblxuZXhwb3J0IGNvbnN0IFZpZXdMb2dpY2FsTWF4TGVmdCA9IC0yLjA7XG5leHBvcnQgY29uc3QgVmlld0xvZ2ljYWxNYXhSaWdodCA9IDIuMDtcbmV4cG9ydCBjb25zdCBWaWV3TG9naWNhbE1heEJvdHRvbSA9IC0yLjA7XG5leHBvcnQgY29uc3QgVmlld0xvZ2ljYWxNYXhUb3AgPSAyLjA7XG5cbi8vIOebuOWvvuODkeOCuVxuZXhwb3J0IGNvbnN0IFJlc291cmNlc1BhdGggPSAnLi9kaXN0L1Jlc291cmNlcy8nO1xuXG4vLyDjg6Ljg4fjg6vjga7lvozjgo3jgavjgYLjgovog4zmma/jga7nlLvlg4/jg5XjgqHjgqTjg6tcbmV4cG9ydCBjb25zdCBCYWNrSW1hZ2VOYW1lID0gJ2JhY2tfY2xhc3Nfbm9ybWFsLnBuZyc7XG5cbi8vIOatr+i7ilxuZXhwb3J0IGNvbnN0IEdlYXJJbWFnZU5hbWUgPSAnaWNvbl9nZWFyLnBuZyc7XG5cbi8vIOe1guS6huODnOOCv+ODs1xuZXhwb3J0IGNvbnN0IFBvd2VySW1hZ2VOYW1lID0gJ0Nsb3NlTm9ybWFsLnBuZyc7XG5cbi8vIOODouODh+ODq+Wumue+qS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8g44Oi44OH44Or44KS6YWN572u44GX44Gf44OH44Kj44Os44Kv44OI44Oq5ZCN44Gu6YWN5YiXXG4vLyDjg4fjgqPjg6zjgq/jg4jjg6rlkI3jgahtb2RlbDMuanNvbuOBruWQjeWJjeOCkuS4gOiHtOOBleOBm+OBpuOBiuOBj+OBk+OBqFxuZXhwb3J0IGNvbnN0IE1vZGVsRGlyOiBzdHJpbmdbXSA9IFtcbiAgJ1hpbWUnXG5dO1xuZXhwb3J0IGNvbnN0IE1vZGVsRGlyU2l6ZTogbnVtYmVyID0gTW9kZWxEaXIubGVuZ3RoO1xuXG4vLyDlpJbpg6jlrprnvqnjg5XjgqHjgqTjg6vvvIhqc29u77yJ44Go5ZCI44KP44Gb44KLXG5leHBvcnQgY29uc3QgTW90aW9uR3JvdXBJZGxlID0gJ0lkbGUnOyAvLyDjgqLjgqTjg4njg6rjg7PjgrBcbmV4cG9ydCBjb25zdCBNb3Rpb25Hcm91cFRhcEJvZHkgPSAnVGFwQm9keSc7IC8vIOS9k+OCkuOCv+ODg+ODl+OBl+OBn+OBqOOBjVxuXG4vLyDlpJbpg6jlrprnvqnjg5XjgqHjgqTjg6vvvIhqc29u77yJ44Go5ZCI44KP44Gb44KLXG5leHBvcnQgY29uc3QgSGl0QXJlYU5hbWVIZWFkID0gJ0hlYWQnO1xuZXhwb3J0IGNvbnN0IEhpdEFyZWFOYW1lQm9keSA9ICdCb2R5JztcblxuLy8g44Oi44O844K344On44Oz44Gu5YSq5YWI5bqm5a6a5pWwXG5leHBvcnQgY29uc3QgUHJpb3JpdHlOb25lID0gMDtcbmV4cG9ydCBjb25zdCBQcmlvcml0eUlkbGUgPSAxO1xuZXhwb3J0IGNvbnN0IFByaW9yaXR5Tm9ybWFsID0gMjtcbmV4cG9ydCBjb25zdCBQcmlvcml0eUZvcmNlID0gMztcblxuLy8g44OH44OQ44OD44Kw55So44Ot44Kw44Gu6KGo56S644Kq44OX44K344On44OzXG5leHBvcnQgY29uc3QgRGVidWdMb2dFbmFibGUgPSB0cnVlO1xuZXhwb3J0IGNvbnN0IERlYnVnVG91Y2hMb2dFbmFibGUgPSBmYWxzZTtcblxuLy8gRnJhbWV3b3Jr44GL44KJ5Ye65Yqb44GZ44KL44Ot44Kw44Gu44Os44OZ44Or6Kit5a6aXG5leHBvcnQgY29uc3QgQ3ViaXNtTG9nZ2luZ0xldmVsOiBMb2dMZXZlbCA9IExvZ0xldmVsLkxvZ0xldmVsX1ZlcmJvc2U7XG5cbi8vIOODh+ODleOCqeODq+ODiOOBruODrOODs+ODgOODvOOCv+ODvOOCsuODg+ODiOOCteOCpOOCulxuZXhwb3J0IGNvbnN0IFJlbmRlclRhcmdldFdpZHRoID0gMTkwMDtcbmV4cG9ydCBjb25zdCBSZW5kZXJUYXJnZXRIZWlnaHQgPSAxMDAwO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQ3ViaXNtRnJhbWV3b3JrLCBPcHRpb24gfSBmcm9tICdAZnJhbWV3b3JrL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5cbmltcG9ydCAqIGFzIExBcHBEZWZpbmUgZnJvbSAnLi9sYXBwZGVmaW5lJztcbmltcG9ydCB7IExBcHBMaXZlMkRNYW5hZ2VyIH0gZnJvbSAnLi9sYXBwbGl2ZTJkbWFuYWdlcic7XG5pbXBvcnQgeyBMQXBwUGFsIH0gZnJvbSAnLi9sYXBwcGFsJztcbmltcG9ydCB7IExBcHBUZXh0dXJlTWFuYWdlciB9IGZyb20gJy4vbGFwcHRleHR1cmVtYW5hZ2VyJztcbmltcG9ydCB7IExBcHBWaWV3IH0gZnJvbSAnLi9sYXBwdmlldyc7XG5cbmV4cG9ydCBsZXQgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCA9IG51bGw7XG5leHBvcnQgbGV0IHNfaW5zdGFuY2U6IExBcHBEZWxlZ2F0ZSA9IG51bGw7XG5leHBvcnQgbGV0IGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgPSBudWxsO1xuZXhwb3J0IGxldCBmcmFtZUJ1ZmZlcjogV2ViR0xGcmFtZWJ1ZmZlciA9IG51bGw7XG5cbi8qKlxuICog44Ki44OX44Oq44Kx44O844K344On44Oz44Kv44Op44K544CCXG4gKiBDdWJpc20gU0RL44Gu566h55CG44KS6KGM44GG44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBMQXBwRGVsZWdhdGUge1xuICAvKipcbiAgICog44Kv44Op44K544Gu44Kk44Oz44K544K/44Oz44K577yI44K344Oz44Kw44Or44OI44Oz77yJ44KS6L+U44GZ44CCXG4gICAqIOOCpOODs+OCueOCv+ODs+OCueOBjOeUn+aIkOOBleOCjOOBpuOBhOOBquOBhOWgtOWQiOOBr+WGhemDqOOBp+OCpOODs+OCueOCv+ODs+OCueOCkueUn+aIkOOBmeOCi+OAglxuICAgKlxuICAgKiBAcmV0dXJuIOOCr+ODqeOCueOBruOCpOODs+OCueOCv+ODs+OCuVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZSgpOiBMQXBwRGVsZWdhdGUge1xuICAgIGlmIChzX2luc3RhbmNlID09IG51bGwpIHtcbiAgICAgIHNfaW5zdGFuY2UgPSBuZXcgTEFwcERlbGVnYXRlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNfaW5zdGFuY2U7XG4gIH1cblxuICAvKipcbiAgICog44Kv44Op44K544Gu44Kk44Oz44K544K/44Oz44K577yI44K344Oz44Kw44Or44OI44Oz77yJ44KS6Kej5pS+44GZ44KL44CCXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHJlbGVhc2VJbnN0YW5jZSgpOiB2b2lkIHtcbiAgICBpZiAoc19pbnN0YW5jZSAhPSBudWxsKSB7XG4gICAgICBzX2luc3RhbmNlLnJlbGVhc2UoKTtcbiAgICB9XG5cbiAgICBzX2luc3RhbmNlID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBUFDjgavlv4XopoHjgarnianjgpLliJ3mnJ/ljJbjgZnjgovjgIJcbiAgICovXG4gIHB1YmxpYyBpbml0aWFsaXplKCk6IGJvb2xlYW4ge1xuICAgIC8vIOOCreODo+ODs+ODkOOCueOBruS9nOaIkFxuICAgIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIGlmIChMQXBwRGVmaW5lLkNhbnZhc1NpemUgPT09ICdhdXRvJykge1xuICAgICAgdGhpcy5fcmVzaXplQ2FudmFzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbnZhcy53aWR0aCA9IExBcHBEZWZpbmUuQ2FudmFzU2l6ZS53aWR0aDtcbiAgICAgIGNhbnZhcy5oZWlnaHQgPSBMQXBwRGVmaW5lLkNhbnZhc1NpemUuaGVpZ2h0O1xuICAgIH1cblxuICAgIC8vIGds44Kz44Oz44OG44Kt44K544OI44KS5Yid5pyf5YyWXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGdsID0gY2FudmFzLmdldENvbnRleHQoJ3dlYmdsJykgfHwgY2FudmFzLmdldENvbnRleHQoJ2V4cGVyaW1lbnRhbC13ZWJnbCcpO1xuXG5cbiAgICBpZiAoIWdsKSB7XG4gICAgICBhbGVydCgnQ2Fubm90IGluaXRpYWxpemUgV2ViR0wuIFRoaXMgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0LicpO1xuICAgICAgZ2wgPSBudWxsO1xuXG4gICAgICBkb2N1bWVudC5ib2R5LmlubmVySFRNTCA9XG4gICAgICAgICdUaGlzIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB0aGUgPGNvZGU+Jmx0O2NhbnZhcyZndDs8L2NvZGU+IGVsZW1lbnQuJztcblxuICAgICAgLy8gZ2zliJ3mnJ/ljJblpLHmlZdcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyDjgq3jg6Pjg7Pjg5DjgrnjgpIgRE9NIOOBq+i/veWKoFxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY2FudmFzKTtcblxuICAgIGlmICghZnJhbWVCdWZmZXIpIHtcbiAgICAgIGZyYW1lQnVmZmVyID0gZ2wuZ2V0UGFyYW1ldGVyKGdsLkZSQU1FQlVGRkVSX0JJTkRJTkcpO1xuICAgIH1cblxuICAgIC8vIOmAj+mBjuioreWumlxuICAgIGdsLmVuYWJsZShnbC5CTEVORCk7XG4gICAgZ2wuYmxlbmRGdW5jKGdsLlNSQ19BTFBIQSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQSk7XG5cbiAgICBjb25zdCBzdXBwb3J0VG91Y2g6IGJvb2xlYW4gPSAnb250b3VjaGVuZCcgaW4gY2FudmFzO1xuXG4gICAgaWYgKHN1cHBvcnRUb3VjaCkge1xuICAgICAgLy8g44K/44OD44OB6Zai6YCj44Kz44O844Or44OQ44OD44Kv6Zai5pWw55m76YyyXG4gICAgICBjYW52YXMub250b3VjaHN0YXJ0ID0gb25Ub3VjaEJlZ2FuO1xuICAgICAgY2FudmFzLm9udG91Y2htb3ZlID0gb25Ub3VjaE1vdmVkO1xuICAgICAgY2FudmFzLm9udG91Y2hlbmQgPSBvblRvdWNoRW5kZWQ7XG4gICAgICBjYW52YXMub250b3VjaGNhbmNlbCA9IG9uVG91Y2hDYW5jZWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIOODnuOCpuOCuemWoumAo+OCs+ODvOODq+ODkOODg+OCr+mWouaVsOeZu+mMslxuICAgICAgY2FudmFzLm9ubW91c2Vkb3duID0gb25DbGlja0JlZ2FuO1xuICAgICAgY2FudmFzLm9ubW91c2Vtb3ZlID0gb25Nb3VzZU1vdmVkO1xuICAgICAgY2FudmFzLm9ubW91c2V1cCA9IG9uQ2xpY2tFbmRlZDtcbiAgICB9XG5cbiAgICAvLyBBcHBWaWV344Gu5Yid5pyf5YyWXG4gICAgdGhpcy5fdmlldy5pbml0aWFsaXplKCk7XG5cbiAgICAvLyBDdWJpc20gU0RL44Gu5Yid5pyf5YyWXG4gICAgdGhpcy5pbml0aWFsaXplQ3ViaXNtKCk7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNpemUgY2FudmFzIGFuZCByZS1pbml0aWFsaXplIHZpZXcuXG4gICAqL1xuICBwdWJsaWMgb25SZXNpemUoKTogdm9pZCB7XG4gICAgdGhpcy5fcmVzaXplQ2FudmFzKCk7XG4gICAgdGhpcy5fdmlldy5pbml0aWFsaXplKCk7XG4gICAgdGhpcy5fdmlldy5pbml0aWFsaXplU3ByaXRlKCk7XG5cbiAgICAvLyDjgq3jg6Pjg7Pjg5DjgrnjgrXjgqTjgrrjgpLmuKHjgZlcbiAgICBjb25zdCB2aWV3cG9ydDogbnVtYmVyW10gPSBbMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0XTtcblxuICAgIGdsLnZpZXdwb3J0KHZpZXdwb3J0WzBdLCB2aWV3cG9ydFsxXSwgdmlld3BvcnRbMl0sIHZpZXdwb3J0WzNdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDop6PmlL7jgZnjgovjgIJcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIHRoaXMuX3RleHR1cmVNYW5hZ2VyLnJlbGVhc2UoKTtcbiAgICB0aGlzLl90ZXh0dXJlTWFuYWdlciA9IG51bGw7XG5cbiAgICB0aGlzLl92aWV3LnJlbGVhc2UoKTtcbiAgICB0aGlzLl92aWV3ID0gbnVsbDtcblxuICAgIC8vIOODquOCveODvOOCueOCkuino+aUvlxuICAgIExBcHBMaXZlMkRNYW5hZ2VyLnJlbGVhc2VJbnN0YW5jZSgpO1xuXG4gICAgLy8gQ3ViaXNtIFNES+OBruino+aUvlxuICAgIEN1YmlzbUZyYW1ld29yay5kaXNwb3NlKCk7XG4gIH1cblxuICAvKipcbiAgICog5a6f6KGM5Yem55CG44CCXG4gICAqL1xuICBwdWJsaWMgcnVuKCk6IHZvaWQge1xuICAgIC8vIOODoeOCpOODs+ODq+ODvOODl1xuICAgIGNvbnN0IGxvb3AgPSAoKTogdm9pZCA9PiB7XG4gICAgICAvLyDjgqTjg7Pjgrnjgr/jg7Pjgrnjga7mnInnhKHjga7norroqo1cbiAgICAgIGlmIChzX2luc3RhbmNlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyDmmYLplpPmm7TmlrBcbiAgICAgIExBcHBQYWwudXBkYXRlVGltZSgpO1xuXG4gICAgICAvLyDnlLvpnaLjga7liJ3mnJ/ljJZcbiAgICAgIGZ1bmN0aW9uIGdldFBlcmNlbnQoeDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHggKiAxMDAgLyAyNTUgLyAxMDBcbiAgICAgIH1cbiAgICAgIGdsLmNsZWFyQ29sb3IoZ2V0UGVyY2VudCgxNzEpLCBnZXRQZXJjZW50KDEzMSksIGdldFBlcmNlbnQoMTMwKSwgMS4wKTtcblxuICAgICAgLy8g5rex5bqm44OG44K544OI44KS5pyJ5Yq55YyWXG4gICAgICBnbC5lbmFibGUoZ2wuREVQVEhfVEVTVCk7XG5cbiAgICAgIC8vIOi/keOBj+OBq+OBguOCi+eJqeS9k+OBr+OAgemBoOOBj+OBq+OBguOCi+eJqeS9k+OCkuimhuOBhOmaoOOBmVxuICAgICAgZ2wuZGVwdGhGdW5jKGdsLkxFUVVBTCk7XG5cbiAgICAgIC8vIOOCq+ODqeODvOODkOODg+ODleOCoeOChOa3seW6puODkOODg+ODleOCoeOCkuOCr+ODquOCouOBmeOCi1xuICAgICAgZ2wuY2xlYXIoZ2wuQ09MT1JfQlVGRkVSX0JJVCB8IGdsLkRFUFRIX0JVRkZFUl9CSVQpO1xuXG4gICAgICBnbC5jbGVhckRlcHRoKDEuMCk7XG5cbiAgICAgIC8vIOmAj+mBjuioreWumlxuICAgICAgZ2wuZW5hYmxlKGdsLkJMRU5EKTtcbiAgICAgIGdsLmJsZW5kRnVuYyhnbC5TUkNfQUxQSEEsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEpO1xuXG4gICAgICAvLyDmj4/nlLvmm7TmlrBcbiAgICAgIHRoaXMuX3ZpZXcucmVuZGVyKCk7XG5cbiAgICAgIC8vIOODq+ODvOODl+OBruOBn+OCgeOBq+WGjeW4sOWRvOOBs+WHuuOBl1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGxvb3ApO1xuICAgIH07XG4gICAgbG9vcCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCt+OCp+ODvOODgOODvOOCkueZu+mMsuOBmeOCi+OAglxuICAgKi9cbiAgcHVibGljIGNyZWF0ZVNoYWRlcigpOiBXZWJHTFByb2dyYW0ge1xuICAgIC8vIOODkOODvOODhuODg+OCr+OCueOCt+OCp+ODvOODgOODvOOBruOCs+ODs+ODkeOCpOODq1xuICAgIGNvbnN0IHZlcnRleFNoYWRlcklkID0gZ2wuY3JlYXRlU2hhZGVyKGdsLlZFUlRFWF9TSEFERVIpO1xuXG4gICAgaWYgKHZlcnRleFNoYWRlcklkID09IG51bGwpIHtcbiAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKCdmYWlsZWQgdG8gY3JlYXRlIHZlcnRleFNoYWRlcicpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgdmVydGV4U2hhZGVyOiBzdHJpbmcgPVxuICAgICAgJ3ByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OycgK1xuICAgICAgJ2F0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uOycgK1xuICAgICAgJ2F0dHJpYnV0ZSB2ZWMyIHV2OycgK1xuICAgICAgJ3ZhcnlpbmcgdmVjMiB2dXY7JyArXG4gICAgICAndm9pZCBtYWluKHZvaWQpJyArXG4gICAgICAneycgK1xuICAgICAgJyAgIGdsX1Bvc2l0aW9uID0gdmVjNChwb3NpdGlvbiwgMS4wKTsnICtcbiAgICAgICcgICB2dXYgPSB1djsnICtcbiAgICAgICd9JztcblxuICAgIGdsLnNoYWRlclNvdXJjZSh2ZXJ0ZXhTaGFkZXJJZCwgdmVydGV4U2hhZGVyKTtcbiAgICBnbC5jb21waWxlU2hhZGVyKHZlcnRleFNoYWRlcklkKTtcblxuICAgIC8vIOODleODqeOCsOODoeODs+ODiOOCt+OCp+ODvOODgOOBruOCs+ODs+ODkeOCpOODq1xuICAgIGNvbnN0IGZyYWdtZW50U2hhZGVySWQgPSBnbC5jcmVhdGVTaGFkZXIoZ2wuRlJBR01FTlRfU0hBREVSKTtcblxuICAgIGlmIChmcmFnbWVudFNoYWRlcklkID09IG51bGwpIHtcbiAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKCdmYWlsZWQgdG8gY3JlYXRlIGZyYWdtZW50U2hhZGVyJyk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBmcmFnbWVudFNoYWRlcjogc3RyaW5nID1cbiAgICAgICdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnICtcbiAgICAgICd2YXJ5aW5nIHZlYzIgdnV2OycgK1xuICAgICAgJ3VuaWZvcm0gc2FtcGxlcjJEIHRleHR1cmU7JyArXG4gICAgICAndm9pZCBtYWluKHZvaWQpJyArXG4gICAgICAneycgK1xuICAgICAgJyAgIGdsX0ZyYWdDb2xvciA9IHRleHR1cmUyRCh0ZXh0dXJlLCB2dXYpOycgK1xuICAgICAgJ30nO1xuXG4gICAgZ2wuc2hhZGVyU291cmNlKGZyYWdtZW50U2hhZGVySWQsIGZyYWdtZW50U2hhZGVyKTtcbiAgICBnbC5jb21waWxlU2hhZGVyKGZyYWdtZW50U2hhZGVySWQpO1xuXG4gICAgLy8g44OX44Ot44Kw44Op44Og44Kq44OW44K444Kn44Kv44OI44Gu5L2c5oiQXG4gICAgY29uc3QgcHJvZ3JhbUlkID0gZ2wuY3JlYXRlUHJvZ3JhbSgpO1xuICAgIGdsLmF0dGFjaFNoYWRlcihwcm9ncmFtSWQsIHZlcnRleFNoYWRlcklkKTtcbiAgICBnbC5hdHRhY2hTaGFkZXIocHJvZ3JhbUlkLCBmcmFnbWVudFNoYWRlcklkKTtcblxuICAgIGdsLmRlbGV0ZVNoYWRlcih2ZXJ0ZXhTaGFkZXJJZCk7XG4gICAgZ2wuZGVsZXRlU2hhZGVyKGZyYWdtZW50U2hhZGVySWQpO1xuXG4gICAgLy8g44Oq44Oz44KvXG4gICAgZ2wubGlua1Byb2dyYW0ocHJvZ3JhbUlkKTtcblxuICAgIGdsLnVzZVByb2dyYW0ocHJvZ3JhbUlkKTtcblxuICAgIHJldHVybiBwcm9ncmFtSWQ7XG4gIH1cblxuICAvKipcbiAgICogVmlld+aDheWgseOCkuWPluW+l+OBmeOCi+OAglxuICAgKi9cbiAgcHVibGljIGdldFZpZXcoKTogTEFwcFZpZXcge1xuICAgIHJldHVybiB0aGlzLl92aWV3O1xuICB9XG5cbiAgcHVibGljIGdldFRleHR1cmVNYW5hZ2VyKCk6IExBcHBUZXh0dXJlTWFuYWdlciB7XG4gICAgcmV0dXJuIHRoaXMuX3RleHR1cmVNYW5hZ2VyO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fY2FwdHVyZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9tb3VzZVggPSAwLjA7XG4gICAgdGhpcy5fbW91c2VZID0gMC4wO1xuICAgIHRoaXMuX2lzRW5kID0gZmFsc2U7XG5cbiAgICB0aGlzLl9jdWJpc21PcHRpb24gPSBuZXcgT3B0aW9uKCk7XG4gICAgdGhpcy5fdmlldyA9IG5ldyBMQXBwVmlldygpO1xuICAgIHRoaXMuX3RleHR1cmVNYW5hZ2VyID0gbmV3IExBcHBUZXh0dXJlTWFuYWdlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEN1YmlzbSBTREvjga7liJ3mnJ/ljJZcbiAgICovXG4gIHB1YmxpYyBpbml0aWFsaXplQ3ViaXNtKCk6IHZvaWQge1xuICAgIC8vIHNldHVwIGN1YmlzbVxuICAgIHRoaXMuX2N1YmlzbU9wdGlvbi5sb2dGdW5jdGlvbiA9IExBcHBQYWwucHJpbnRNZXNzYWdlO1xuICAgIHRoaXMuX2N1YmlzbU9wdGlvbi5sb2dnaW5nTGV2ZWwgPSBMQXBwRGVmaW5lLkN1YmlzbUxvZ2dpbmdMZXZlbDtcbiAgICBDdWJpc21GcmFtZXdvcmsuc3RhcnRVcCh0aGlzLl9jdWJpc21PcHRpb24pO1xuXG4gICAgLy8gaW5pdGlhbGl6ZSBjdWJpc21cbiAgICBDdWJpc21GcmFtZXdvcmsuaW5pdGlhbGl6ZSgpO1xuXG4gICAgLy8gbG9hZCBtb2RlbFxuICAgIExBcHBMaXZlMkRNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG5cbiAgICBMQXBwUGFsLnVwZGF0ZVRpbWUoKTtcblxuICAgIHRoaXMuX3ZpZXcuaW5pdGlhbGl6ZVNwcml0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc2l6ZSB0aGUgY2FudmFzIHRvIGZpbGwgdGhlIHNjcmVlbi5cbiAgICovXG4gIHByaXZhdGUgX3Jlc2l6ZUNhbnZhcygpOiB2b2lkIHtcbiAgICBjYW52YXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICBjYW52YXMuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuICB9XG5cbiAgX2N1YmlzbU9wdGlvbjogT3B0aW9uOyAvLyBDdWJpc20gU0RLIE9wdGlvblxuICBfdmlldzogTEFwcFZpZXc7IC8vIFZpZXfmg4XloLFcbiAgX2NhcHR1cmVkOiBib29sZWFuOyAvLyDjgq/jg6rjg4Pjgq/jgZfjgabjgYTjgovjgYtcbiAgX21vdXNlWDogbnVtYmVyOyAvLyDjg57jgqbjgrlY5bqn5qiZXG4gIF9tb3VzZVk6IG51bWJlcjsgLy8g44Oe44Km44K5WeW6p+aomVxuICBfaXNFbmQ6IGJvb2xlYW47IC8vIEFQUOe1guS6huOBl+OBpuOBhOOCi+OBi1xuICBfdGV4dHVyZU1hbmFnZXI6IExBcHBUZXh0dXJlTWFuYWdlcjsgLy8g44OG44Kv44K544OB44Oj44Oe44ON44O844K444Oj44O8XG59XG5cbi8qKlxuICog44Kv44Oq44OD44Kv44GX44Gf44Go44GN44Gr5ZG844Gw44KM44KL44CCXG4gKi9cbmZ1bmN0aW9uIG9uQ2xpY2tCZWdhbihlOiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gIGlmICghTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX3ZpZXcpIHtcbiAgICBMQXBwUGFsLnByaW50TWVzc2FnZSgndmlldyBub3Rmb3VuZCcpO1xuICAgIHJldHVybjtcbiAgfVxuICBMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fY2FwdHVyZWQgPSB0cnVlO1xuXG4gIGNvbnN0IHBvc1g6IG51bWJlciA9IGUucGFnZVg7XG4gIGNvbnN0IHBvc1k6IG51bWJlciA9IGUucGFnZVk7XG5cbiAgTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX3ZpZXcub25Ub3VjaGVzQmVnYW4ocG9zWCwgcG9zWSk7XG59XG5cbi8qKlxuICog44Oe44Km44K544Od44Kk44Oz44K/44GM5YuV44GE44Gf44KJ5ZG844Gw44KM44KL44CCXG4gKi9cbmZ1bmN0aW9uIG9uTW91c2VNb3ZlZChlOiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gIGlmICghTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX2NhcHR1cmVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCFMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fdmlldykge1xuICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKCd2aWV3IG5vdGZvdW5kJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgcmVjdCA9IChlLnRhcmdldCBhcyBFbGVtZW50KS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgY29uc3QgcG9zWDogbnVtYmVyID0gZS5jbGllbnRYIC0gcmVjdC5sZWZ0O1xuICBjb25zdCBwb3NZOiBudW1iZXIgPSBlLmNsaWVudFkgLSByZWN0LnRvcDtcblxuICBMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fdmlldy5vblRvdWNoZXNNb3ZlZChwb3NYLCBwb3NZKTtcbn1cblxuLyoqXG4gKiDjgq/jg6rjg4Pjgq/jgYzntYLkuobjgZfjgZ/jgonlkbzjgbDjgozjgovjgIJcbiAqL1xuZnVuY3Rpb24gb25DbGlja0VuZGVkKGU6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX2NhcHR1cmVkID0gZmFsc2U7XG4gIGlmICghTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX3ZpZXcpIHtcbiAgICBMQXBwUGFsLnByaW50TWVzc2FnZSgndmlldyBub3Rmb3VuZCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHJlY3QgPSAoZS50YXJnZXQgYXMgRWxlbWVudCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGNvbnN0IHBvc1g6IG51bWJlciA9IGUuY2xpZW50WCAtIHJlY3QubGVmdDtcbiAgY29uc3QgcG9zWTogbnVtYmVyID0gZS5jbGllbnRZIC0gcmVjdC50b3A7XG5cbiAgTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX3ZpZXcub25Ub3VjaGVzRW5kZWQocG9zWCwgcG9zWSk7XG59XG5cbi8qKlxuICog44K/44OD44OB44GX44Gf44Go44GN44Gr5ZG844Gw44KM44KL44CCXG4gKi9cbmZ1bmN0aW9uIG9uVG91Y2hCZWdhbihlOiBUb3VjaEV2ZW50KTogdm9pZCB7XG4gIGlmICghTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX3ZpZXcpIHtcbiAgICBMQXBwUGFsLnByaW50TWVzc2FnZSgndmlldyBub3Rmb3VuZCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl9jYXB0dXJlZCA9IHRydWU7XG5cbiAgY29uc3QgcG9zWCA9IGUuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVg7XG4gIGNvbnN0IHBvc1kgPSBlLmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VZO1xuXG4gIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3Lm9uVG91Y2hlc0JlZ2FuKHBvc1gsIHBvc1kpO1xufVxuXG4vKipcbiAqIOOCueODr+OCpOODl+OBmeOCi+OBqOWRvOOBsOOCjOOCi+OAglxuICovXG5mdW5jdGlvbiBvblRvdWNoTW92ZWQoZTogVG91Y2hFdmVudCk6IHZvaWQge1xuICBpZiAoIUxBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl9jYXB0dXJlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX3ZpZXcpIHtcbiAgICBMQXBwUGFsLnByaW50TWVzc2FnZSgndmlldyBub3Rmb3VuZCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHJlY3QgPSAoZS50YXJnZXQgYXMgRWxlbWVudCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgY29uc3QgcG9zWCA9IGUuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WCAtIHJlY3QubGVmdDtcbiAgY29uc3QgcG9zWSA9IGUuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WSAtIHJlY3QudG9wO1xuXG4gIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3Lm9uVG91Y2hlc01vdmVkKHBvc1gsIHBvc1kpO1xufVxuXG4vKipcbiAqIOOCv+ODg+ODgeOBjOe1guS6huOBl+OBn+OCieWRvOOBsOOCjOOCi+OAglxuICovXG5mdW5jdGlvbiBvblRvdWNoRW5kZWQoZTogVG91Y2hFdmVudCk6IHZvaWQge1xuICBMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fY2FwdHVyZWQgPSBmYWxzZTtcblxuICBpZiAoIUxBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3KSB7XG4gICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoJ3ZpZXcgbm90Zm91bmQnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCByZWN0ID0gKGUudGFyZ2V0IGFzIEVsZW1lbnQpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gIGNvbnN0IHBvc1ggPSBlLmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFggLSByZWN0LmxlZnQ7XG4gIGNvbnN0IHBvc1kgPSBlLmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFkgLSByZWN0LnRvcDtcblxuICBMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fdmlldy5vblRvdWNoZXNFbmRlZChwb3NYLCBwb3NZKTtcbn1cblxuLyoqXG4gKiDjgr/jg4Pjg4HjgYzjgq3jg6Pjg7Pjgrvjg6vjgZXjgozjgovjgajlkbzjgbDjgozjgovjgIJcbiAqL1xuZnVuY3Rpb24gb25Ub3VjaENhbmNlbChlOiBUb3VjaEV2ZW50KTogdm9pZCB7XG4gIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl9jYXB0dXJlZCA9IGZhbHNlO1xuXG4gIGlmICghTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX3ZpZXcpIHtcbiAgICBMQXBwUGFsLnByaW50TWVzc2FnZSgndmlldyBub3Rmb3VuZCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHJlY3QgPSAoZS50YXJnZXQgYXMgRWxlbWVudCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgY29uc3QgcG9zWCA9IGUuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WCAtIHJlY3QubGVmdDtcbiAgY29uc3QgcG9zWSA9IGUuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WSAtIHJlY3QudG9wO1xuXG4gIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3Lm9uVG91Y2hlc0VuZGVkKHBvc1gsIHBvc1kpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQ3ViaXNtTWF0cml4NDQgfSBmcm9tICdAZnJhbWV3b3JrL21hdGgvY3ViaXNtbWF0cml4NDQnO1xuaW1wb3J0IHsgQUN1YmlzbU1vdGlvbiB9IGZyb20gJ0BmcmFtZXdvcmsvbW90aW9uL2FjdWJpc21tb3Rpb24nO1xuaW1wb3J0IHsgY3NtVmVjdG9yIH0gZnJvbSAnQGZyYW1ld29yay90eXBlL2NzbXZlY3Rvcic7XG5cbmltcG9ydCAqIGFzIExBcHBEZWZpbmUgZnJvbSAnLi9sYXBwZGVmaW5lJztcbmltcG9ydCB7IGNhbnZhcyB9IGZyb20gJy4vbGFwcGRlbGVnYXRlJztcbmltcG9ydCB7IExBcHBNb2RlbCB9IGZyb20gJy4vbGFwcG1vZGVsJztcbmltcG9ydCB7IExBcHBQYWwgfSBmcm9tICcuL2xhcHBwYWwnO1xuXG5leHBvcnQgbGV0IHNfaW5zdGFuY2U6IExBcHBMaXZlMkRNYW5hZ2VyID0gbnVsbDtcblxuLyoqXG4gKiDjgrXjg7Pjg5fjg6vjgqLjg5fjg6rjgrHjg7zjgrfjg6fjg7PjgavjgYrjgYTjgaZDdWJpc21Nb2RlbOOCkueuoeeQhuOBmeOCi+OCr+ODqeOCuVxuICog44Oi44OH44Or55Sf5oiQ44Go56C05qOE44CB44K/44OD44OX44Kk44OZ44Oz44OI44Gu5Yem55CG44CB44Oi44OH44Or5YiH44KK5pu/44GI44KS6KGM44GG44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBMQXBwTGl2ZTJETWFuYWdlciB7XG4gIC8qKlxuICAgKiDjgq/jg6njgrnjga7jgqTjg7Pjgrnjgr/jg7PjgrnvvIjjgrfjg7PjgrDjg6vjg4jjg7PvvInjgpLov5TjgZnjgIJcbiAgICog44Kk44Oz44K544K/44Oz44K544GM55Sf5oiQ44GV44KM44Gm44GE44Gq44GE5aC05ZCI44Gv5YaF6YOo44Gn44Kk44Oz44K544K/44Oz44K544KS55Sf5oiQ44GZ44KL44CCXG4gICAqXG4gICAqIEByZXR1cm4g44Kv44Op44K544Gu44Kk44Oz44K544K/44Oz44K5XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKCk6IExBcHBMaXZlMkRNYW5hZ2VyIHtcbiAgICBpZiAoc19pbnN0YW5jZSA9PSBudWxsKSB7XG4gICAgICBzX2luc3RhbmNlID0gbmV3IExBcHBMaXZlMkRNYW5hZ2VyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNfaW5zdGFuY2U7XG4gIH1cblxuICAvKipcbiAgICog44Kv44Op44K544Gu44Kk44Oz44K544K/44Oz44K577yI44K344Oz44Kw44Or44OI44Oz77yJ44KS6Kej5pS+44GZ44KL44CCXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHJlbGVhc2VJbnN0YW5jZSgpOiB2b2lkIHtcbiAgICBpZiAoc19pbnN0YW5jZSAhPSBudWxsKSB7XG4gICAgICBzX2luc3RhbmNlID0gdm9pZCAwO1xuICAgIH1cblxuICAgIHNfaW5zdGFuY2UgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIOePvuWcqOOBruOCt+ODvOODs+OBp+S/neaMgeOBl+OBpuOBhOOCi+ODouODh+ODq+OCkui/lOOBmeOAglxuICAgKlxuICAgKiBAcGFyYW0gbm8g44Oi44OH44Or44Oq44K544OI44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAqIEByZXR1cm4g44Oi44OH44Or44Gu44Kk44Oz44K544K/44Oz44K544KS6L+U44GZ44CC44Kk44Oz44OH44OD44Kv44K55YCk44GM56+E5Zuy5aSW44Gu5aC05ZCI44GvTlVMTOOCkui/lOOBmeOAglxuICAgKi9cbiAgcHVibGljIGdldE1vZGVsKG5vOiBudW1iZXIpOiBMQXBwTW9kZWwge1xuICAgIGlmIChubyA8IHRoaXMuX21vZGVscy5nZXRTaXplKCkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tb2RlbHMuYXQobm8pO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIOePvuWcqOOBruOCt+ODvOODs+OBp+S/neaMgeOBl+OBpuOBhOOCi+OBmeOBueOBpuOBruODouODh+ODq+OCkuino+aUvuOBmeOCi1xuICAgKi9cbiAgcHVibGljIHJlbGVhc2VBbGxNb2RlbCgpOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX21vZGVscy5nZXRTaXplKCk7IGkrKykge1xuICAgICAgdGhpcy5fbW9kZWxzLmF0KGkpLnJlbGVhc2UoKTtcbiAgICAgIHRoaXMuX21vZGVscy5zZXQoaSwgbnVsbCk7XG4gICAgfVxuXG4gICAgdGhpcy5fbW9kZWxzLmNsZWFyKCk7XG4gIH1cblxuICAvKipcbiAgICog55S76Z2i44KS44OJ44Op44OD44Kw44GX44Gf5pmC44Gu5Yem55CGXG4gICAqXG4gICAqIEBwYXJhbSB4IOeUu+mdouOBrljluqfmqJlcbiAgICogQHBhcmFtIHkg55S76Z2i44GuWeW6p+aomVxuICAgKi9cbiAgcHVibGljIG9uRHJhZyh4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fbW9kZWxzLmdldFNpemUoKTsgaSsrKSB7XG4gICAgICBjb25zdCBtb2RlbDogTEFwcE1vZGVsID0gdGhpcy5nZXRNb2RlbChpKTtcblxuICAgICAgaWYgKG1vZGVsKSB7XG4gICAgICAgIG1vZGVsLnNldERyYWdnaW5nKHgsIHkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDnlLvpnaLjgpLjgr/jg4Pjg5fjgZfjgZ/mmYLjga7lh6bnkIZcbiAgICpcbiAgICogQHBhcmFtIHgg55S76Z2i44GuWOW6p+aomVxuICAgKiBAcGFyYW0geSDnlLvpnaLjga5Z5bqn5qiZXG4gICAqL1xuICBwdWJsaWMgb25UYXAoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAoTEFwcERlZmluZS5EZWJ1Z0xvZ0VuYWJsZSkge1xuICAgICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoXG4gICAgICAgIGBbQVBQXXRhcCBwb2ludDoge3g6ICR7eC50b0ZpeGVkKDIpfSB5OiAke3kudG9GaXhlZCgyKX19YFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX21vZGVscy5nZXRTaXplKCk7IGkrKykge1xuICAgICAgaWYgKHRoaXMuX21vZGVscy5hdChpKS5oaXRUZXN0KExBcHBEZWZpbmUuSGl0QXJlYU5hbWVIZWFkLCB4LCB5KSkge1xuICAgICAgICBpZiAoTEFwcERlZmluZS5EZWJ1Z0xvZ0VuYWJsZSkge1xuICAgICAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKFxuICAgICAgICAgICAgYFtBUFBdaGl0IGFyZWE6IFske0xBcHBEZWZpbmUuSGl0QXJlYU5hbWVIZWFkfV1gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9tb2RlbHMuYXQoaSkuc2V0UmFuZG9tRXhwcmVzc2lvbigpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLl9tb2RlbHMuYXQoaSkuaGl0VGVzdChMQXBwRGVmaW5lLkhpdEFyZWFOYW1lQm9keSwgeCwgeSkpIHtcbiAgICAgICAgaWYgKExBcHBEZWZpbmUuRGVidWdMb2dFbmFibGUpIHtcbiAgICAgICAgICBMQXBwUGFsLnByaW50TWVzc2FnZShcbiAgICAgICAgICAgIGBbQVBQXWhpdCBhcmVhOiBbJHtMQXBwRGVmaW5lLkhpdEFyZWFOYW1lQm9keX1dYFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbW9kZWxzXG4gICAgICAgICAgLmF0KGkpXG4gICAgICAgICAgLnN0YXJ0UmFuZG9tTW90aW9uKFxuICAgICAgICAgICAgTEFwcERlZmluZS5Nb3Rpb25Hcm91cFRhcEJvZHksXG4gICAgICAgICAgICBMQXBwRGVmaW5lLlByaW9yaXR5Tm9ybWFsLFxuICAgICAgICAgICAgdGhpcy5fZmluaXNoZWRNb3Rpb25cbiAgICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDnlLvpnaLjgpLmm7TmlrDjgZnjgovjgajjgY3jga7lh6bnkIZcbiAgICog44Oi44OH44Or44Gu5pu05paw5Yem55CG5Y+K44Gz5o+P55S75Yem55CG44KS6KGM44GGXG4gICAqL1xuICBwdWJsaWMgb25VcGRhdGUoKTogdm9pZCB7XG4gICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBjYW52YXM7XG5cbiAgICBjb25zdCBtb2RlbENvdW50OiBudW1iZXIgPSB0aGlzLl9tb2RlbHMuZ2V0U2l6ZSgpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtb2RlbENvdW50OyArK2kpIHtcbiAgICAgIGNvbnN0IHByb2plY3Rpb246IEN1YmlzbU1hdHJpeDQ0ID0gbmV3IEN1YmlzbU1hdHJpeDQ0KCk7XG4gICAgICBjb25zdCBtb2RlbDogTEFwcE1vZGVsID0gdGhpcy5nZXRNb2RlbChpKTtcblxuICAgICAgaWYgKG1vZGVsLmdldE1vZGVsKCkpIHtcbiAgICAgICAgaWYgKG1vZGVsLmdldE1vZGVsKCkuZ2V0Q2FudmFzV2lkdGgoKSA+IDEuMCAmJiB3aWR0aCA8IGhlaWdodCkge1xuICAgICAgICAgIC8vIOaoquOBq+mVt+OBhOODouODh+ODq+OCkue4pumVt+OCpuOCo+ODs+ODieOCpuOBq+ihqOekuuOBmeOCi+mam+ODouODh+ODq+OBruaoquOCteOCpOOCuuOBp3NjYWxl44KS566X5Ye644GZ44KLXG4gICAgICAgICAgbW9kZWwuZ2V0TW9kZWxNYXRyaXgoKS5zZXRXaWR0aCgyLjApO1xuICAgICAgICAgIHByb2plY3Rpb24uc2NhbGUoMS4wLCB3aWR0aCAvIGhlaWdodCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvamVjdGlvbi5zY2FsZShoZWlnaHQgLyB3aWR0aCwgMS4wKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOW/heimgeOBjOOBguOCjOOBsOOBk+OBk+OBp+S5l+eul1xuICAgICAgICBpZiAodGhpcy5fdmlld01hdHJpeCAhPSBudWxsKSB7XG4gICAgICAgICAgcHJvamVjdGlvbi5tdWx0aXBseUJ5TWF0cml4KHRoaXMuX3ZpZXdNYXRyaXgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1vZGVsLnVwZGF0ZSgpO1xuICAgICAgbW9kZWwuZHJhdyhwcm9qZWN0aW9uKTsgLy8g5Y+C54Wn5rih44GX44Gq44Gu44GncHJvamVjdGlvbuOBr+WkieizquOBmeOCi+OAglxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDmrKHjga7jgrfjg7zjg7PjgavliIfjgorjgYvjgYjjgotcbiAgICog44K144Oz44OX44Or44Ki44OX44Oq44Kx44O844K344On44Oz44Gn44Gv44Oi44OH44Or44K744OD44OI44Gu5YiH44KK5pu/44GI44KS6KGM44GG44CCXG4gICAqL1xuICBwdWJsaWMgbmV4dFNjZW5lKCk6IHZvaWQge1xuICAgIGNvbnN0IG5vOiBudW1iZXIgPSAodGhpcy5fc2NlbmVJbmRleCArIDEpICUgTEFwcERlZmluZS5Nb2RlbERpclNpemU7XG4gICAgdGhpcy5jaGFuZ2VTY2VuZShubyk7XG4gIH1cblxuICAvKipcbiAgICog44K344O844Oz44KS5YiH44KK5pu/44GI44KLXG4gICAqIOOCteODs+ODl+ODq+OCouODl+ODquOCseODvOOCt+ODp+ODs+OBp+OBr+ODouODh+ODq+OCu+ODg+ODiOOBruWIh+OCiuabv+OBiOOCkuihjOOBhuOAglxuICAgKi9cbiAgcHVibGljIGNoYW5nZVNjZW5lKGluZGV4OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9zY2VuZUluZGV4ID0gaW5kZXg7XG4gICAgaWYgKExBcHBEZWZpbmUuRGVidWdMb2dFbmFibGUpIHtcbiAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKGBbQVBQXW1vZGVsIGluZGV4OiAke3RoaXMuX3NjZW5lSW5kZXh9YCk7XG4gICAgfVxuXG4gICAgLy8gTW9kZWxEaXJbXeOBq+S/neaMgeOBl+OBn+ODh+OCo+ODrOOCr+ODiOODquWQjeOBi+OCiVxuICAgIC8vIG1vZGVsMy5qc29u44Gu44OR44K544KS5rG65a6a44GZ44KL44CCXG4gICAgLy8g44OH44Kj44Os44Kv44OI44Oq5ZCN44GobW9kZWwzLmpzb27jga7lkI3liY3jgpLkuIDoh7TjgZXjgZvjgabjgYrjgY/jgZPjgajjgIJcbiAgICBjb25zdCBtb2RlbDogc3RyaW5nID0gTEFwcERlZmluZS5Nb2RlbERpcltpbmRleF07XG4gICAgY29uc3QgbW9kZWxQYXRoOiBzdHJpbmcgPSBMQXBwRGVmaW5lLlJlc291cmNlc1BhdGggKyBtb2RlbCArICcvJztcbiAgICBsZXQgbW9kZWxKc29uTmFtZTogc3RyaW5nID0gTEFwcERlZmluZS5Nb2RlbERpcltpbmRleF07XG4gICAgbW9kZWxKc29uTmFtZSArPSAnLm1vZGVsMy5qc29uJztcblxuICAgIHRoaXMucmVsZWFzZUFsbE1vZGVsKCk7XG4gICAgdGhpcy5fbW9kZWxzLnB1c2hCYWNrKG5ldyBMQXBwTW9kZWwoKSk7XG4gICAgdGhpcy5fbW9kZWxzLmF0KDApLmxvYWRBc3NldHMobW9kZWxQYXRoLCBtb2RlbEpzb25OYW1lKTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRWaWV3TWF0cml4KG06IEN1YmlzbU1hdHJpeDQ0KSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG4gICAgICB0aGlzLl92aWV3TWF0cml4LmdldEFycmF5KClbaV0gPSBtLmdldEFycmF5KClbaV07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fdmlld01hdHJpeCA9IG5ldyBDdWJpc21NYXRyaXg0NCgpO1xuICAgIHRoaXMuX21vZGVscyA9IG5ldyBjc21WZWN0b3I8TEFwcE1vZGVsPigpO1xuICAgIHRoaXMuX3NjZW5lSW5kZXggPSAwO1xuICAgIHRoaXMuY2hhbmdlU2NlbmUodGhpcy5fc2NlbmVJbmRleCk7XG4gIH1cblxuICBfdmlld01hdHJpeDogQ3ViaXNtTWF0cml4NDQ7IC8vIOODouODh+ODq+aPj+eUu+OBq+eUqOOBhOOCi3ZpZXfooYzliJdcbiAgX21vZGVsczogY3NtVmVjdG9yPExBcHBNb2RlbD47IC8vIOODouODh+ODq+OCpOODs+OCueOCv+ODs+OCueOBruOCs+ODs+ODhuODilxuICBfc2NlbmVJbmRleDogbnVtYmVyOyAvLyDooajnpLrjgZnjgovjgrfjg7zjg7Pjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgLy8g44Oi44O844K344On44Oz5YaN55Sf57WC5LqG44Gu44Kz44O844Or44OQ44OD44Kv6Zai5pWwXG4gIF9maW5pc2hlZE1vdGlvbiA9IChzZWxmOiBBQ3ViaXNtTW90aW9uKTogdm9pZCA9PiB7XG4gICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoJ01vdGlvbiBGaW5pc2hlZDonKTtcbiAgICBjb25zb2xlLmxvZyhzZWxmKTtcbiAgfTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCAnd2hhdHdnLWZldGNoJztcblxuaW1wb3J0IHsgQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkIH0gZnJvbSAnQGZyYW1ld29yay9jdWJpc21kZWZhdWx0cGFyYW1ldGVyaWQnO1xuaW1wb3J0IHsgQ3ViaXNtTW9kZWxTZXR0aW5nSnNvbiB9IGZyb20gJ0BmcmFtZXdvcmsvY3ViaXNtbW9kZWxzZXR0aW5nanNvbic7XG5pbXBvcnQge1xuICBCcmVhdGhQYXJhbWV0ZXJEYXRhLFxuICBDdWJpc21CcmVhdGhcbn0gZnJvbSAnQGZyYW1ld29yay9lZmZlY3QvY3ViaXNtYnJlYXRoJztcbmltcG9ydCB7IEN1YmlzbUV5ZUJsaW5rIH0gZnJvbSAnQGZyYW1ld29yay9lZmZlY3QvY3ViaXNtZXllYmxpbmsnO1xuaW1wb3J0IHsgSUN1YmlzbU1vZGVsU2V0dGluZyB9IGZyb20gJ0BmcmFtZXdvcmsvaWN1YmlzbW1vZGVsc2V0dGluZyc7XG5pbXBvcnQgeyBDdWJpc21JZEhhbmRsZSB9IGZyb20gJ0BmcmFtZXdvcmsvaWQvY3ViaXNtaWQnO1xuaW1wb3J0IHsgQ3ViaXNtRnJhbWV3b3JrIH0gZnJvbSAnQGZyYW1ld29yay9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xuaW1wb3J0IHsgQ3ViaXNtTWF0cml4NDQgfSBmcm9tICdAZnJhbWV3b3JrL21hdGgvY3ViaXNtbWF0cml4NDQnO1xuaW1wb3J0IHsgQ3ViaXNtVXNlck1vZGVsIH0gZnJvbSAnQGZyYW1ld29yay9tb2RlbC9jdWJpc211c2VybW9kZWwnO1xuaW1wb3J0IHtcbiAgQUN1YmlzbU1vdGlvbixcbiAgRmluaXNoZWRNb3Rpb25DYWxsYmFja1xufSBmcm9tICdAZnJhbWV3b3JrL21vdGlvbi9hY3ViaXNtbW90aW9uJztcbmltcG9ydCB7IEN1YmlzbU1vdGlvbiB9IGZyb20gJ0BmcmFtZXdvcmsvbW90aW9uL2N1YmlzbW1vdGlvbic7XG5pbXBvcnQge1xuICBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5SGFuZGxlLFxuICBJbnZhbGlkTW90aW9uUXVldWVFbnRyeUhhbmRsZVZhbHVlXG59IGZyb20gJ0BmcmFtZXdvcmsvbW90aW9uL2N1YmlzbW1vdGlvbnF1ZXVlbWFuYWdlcic7XG5pbXBvcnQgeyBjc21NYXAgfSBmcm9tICdAZnJhbWV3b3JrL3R5cGUvY3NtbWFwJztcbmltcG9ydCB7IGNzbVJlY3QgfSBmcm9tICdAZnJhbWV3b3JrL3R5cGUvY3NtcmVjdGYnO1xuaW1wb3J0IHsgY3NtU3RyaW5nIH0gZnJvbSAnQGZyYW1ld29yay90eXBlL2NzbXN0cmluZyc7XG5pbXBvcnQgeyBjc21WZWN0b3IgfSBmcm9tICdAZnJhbWV3b3JrL3R5cGUvY3NtdmVjdG9yJztcbmltcG9ydCB7IEN1YmlzbUxvZ0Vycm9yLCBDdWJpc21Mb2dJbmZvIH0gZnJvbSAnQGZyYW1ld29yay91dGlscy9jdWJpc21kZWJ1Zyc7XG5cbmltcG9ydCAqIGFzIExBcHBEZWZpbmUgZnJvbSAnLi9sYXBwZGVmaW5lJztcbmltcG9ydCB7IGNhbnZhcywgZnJhbWVCdWZmZXIsIGdsLCBMQXBwRGVsZWdhdGUgfSBmcm9tICcuL2xhcHBkZWxlZ2F0ZSc7XG5pbXBvcnQgeyBMQXBwUGFsIH0gZnJvbSAnLi9sYXBwcGFsJztcbmltcG9ydCB7IFRleHR1cmVJbmZvIH0gZnJvbSAnLi9sYXBwdGV4dHVyZW1hbmFnZXInO1xuaW1wb3J0IHsgTEFwcFdhdkZpbGVIYW5kbGVyIH0gZnJvbSAnLi9sYXBwd2F2ZmlsZWhhbmRsZXInO1xuXG5lbnVtIExvYWRTdGVwIHtcbiAgTG9hZEFzc2V0cyxcbiAgTG9hZE1vZGVsLFxuICBXYWl0TG9hZE1vZGVsLFxuICBMb2FkRXhwcmVzc2lvbixcbiAgV2FpdExvYWRFeHByZXNzaW9uLFxuICBMb2FkUGh5c2ljcyxcbiAgV2FpdExvYWRQaHlzaWNzLFxuICBMb2FkUG9zZSxcbiAgV2FpdExvYWRQb3NlLFxuICBTZXR1cEV5ZUJsaW5rLFxuICBTZXR1cEJyZWF0aCxcbiAgTG9hZFVzZXJEYXRhLFxuICBXYWl0TG9hZFVzZXJEYXRhLFxuICBTZXR1cEV5ZUJsaW5rSWRzLFxuICBTZXR1cExpcFN5bmNJZHMsXG4gIFNldHVwTGF5b3V0LFxuICBMb2FkTW90aW9uLFxuICBXYWl0TG9hZE1vdGlvbixcbiAgQ29tcGxldGVJbml0aWFsaXplLFxuICBDb21wbGV0ZVNldHVwTW9kZWwsXG4gIExvYWRUZXh0dXJlLFxuICBXYWl0TG9hZFRleHR1cmUsXG4gIENvbXBsZXRlU2V0dXBcbn1cblxuLyoqXG4gKiDjg6bjg7zjgrbjg7zjgYzlrp/pmpvjgavkvb/nlKjjgZnjgovjg6Ljg4fjg6vjga7lrp/oo4Xjgq/jg6njgrk8YnI+XG4gKiDjg6Ljg4fjg6vnlJ/miJDjgIHmqZ/og73jgrPjg7Pjg53jg7zjg43jg7Pjg4jnlJ/miJDjgIHmm7TmlrDlh6bnkIbjgajjg6zjg7Pjg4Djg6rjg7PjgrDjga7lkbzjgbPlh7rjgZfjgpLooYzjgYbjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIExBcHBNb2RlbCBleHRlbmRzIEN1YmlzbVVzZXJNb2RlbCB7XG4gIC8qKlxuICAgKiBtb2RlbDMuanNvbuOBjOe9ruOBi+OCjOOBn+ODh+OCo+ODrOOCr+ODiOODquOBqOODleOCoeOCpOODq+ODkeOCueOBi+OCieODouODh+ODq+OCkueUn+aIkOOBmeOCi1xuICAgKiBAcGFyYW0gZGlyXG4gICAqIEBwYXJhbSBmaWxlTmFtZVxuICAgKi9cbiAgcHVibGljIGxvYWRBc3NldHMoZGlyOiBzdHJpbmcsIGZpbGVOYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLl9tb2RlbEhvbWVEaXIgPSBkaXI7XG5cbiAgICBmZXRjaChgJHt0aGlzLl9tb2RlbEhvbWVEaXJ9JHtmaWxlTmFtZX1gKVxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKSlcbiAgICAgIC50aGVuKGFycmF5QnVmZmVyID0+IHtcbiAgICAgICAgY29uc3Qgc2V0dGluZzogSUN1YmlzbU1vZGVsU2V0dGluZyA9IG5ldyBDdWJpc21Nb2RlbFNldHRpbmdKc29uKFxuICAgICAgICAgIGFycmF5QnVmZmVyLFxuICAgICAgICAgIGFycmF5QnVmZmVyLmJ5dGVMZW5ndGhcbiAgICAgICAgKTtcblxuICAgICAgICAvLyDjgrnjg4bjg7zjg4jjgpLmm7TmlrBcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5Mb2FkTW9kZWw7XG5cbiAgICAgICAgLy8g57WQ5p6c44KS5L+d5a2YXG4gICAgICAgIHRoaXMuc2V0dXBNb2RlbChzZXR0aW5nKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIG1vZGVsMy5qc29u44GL44KJ44Oi44OH44Or44KS55Sf5oiQ44GZ44KL44CCXG4gICAqIG1vZGVsMy5qc29u44Gu6KiY6L+w44Gr5b6T44Gj44Gm44Oi44OH44Or55Sf5oiQ44CB44Oi44O844K344On44Oz44CB54mp55CG5ryU566X44Gq44Gp44Gu44Kz44Oz44Od44O844ON44Oz44OI55Sf5oiQ44KS6KGM44GG44CCXG4gICAqXG4gICAqIEBwYXJhbSBzZXR0aW5nIElDdWJpc21Nb2RlbFNldHRpbmfjga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHByaXZhdGUgc2V0dXBNb2RlbChzZXR0aW5nOiBJQ3ViaXNtTW9kZWxTZXR0aW5nKTogdm9pZCB7XG4gICAgdGhpcy5fdXBkYXRpbmcgPSB0cnVlO1xuICAgIHRoaXMuX2luaXRpYWxpemVkID0gZmFsc2U7XG5cbiAgICB0aGlzLl9tb2RlbFNldHRpbmcgPSBzZXR0aW5nO1xuXG4gICAgLy8gQ3ViaXNtTW9kZWxcbiAgICBpZiAodGhpcy5fbW9kZWxTZXR0aW5nLmdldE1vZGVsRmlsZU5hbWUoKSAhPSAnJykge1xuICAgICAgY29uc3QgbW9kZWxGaWxlTmFtZSA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRNb2RlbEZpbGVOYW1lKCk7XG5cbiAgICAgIGZldGNoKGAke3RoaXMuX21vZGVsSG9tZURpcn0ke21vZGVsRmlsZU5hbWV9YClcbiAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKSlcbiAgICAgICAgLnRoZW4oYXJyYXlCdWZmZXIgPT4ge1xuICAgICAgICAgIHRoaXMubG9hZE1vZGVsKGFycmF5QnVmZmVyKTtcbiAgICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLkxvYWRFeHByZXNzaW9uO1xuXG4gICAgICAgICAgLy8gY2FsbGJhY2tcbiAgICAgICAgICBsb2FkQ3ViaXNtRXhwcmVzc2lvbigpO1xuICAgICAgICB9KTtcblxuICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5XYWl0TG9hZE1vZGVsO1xuICAgIH0gZWxzZSB7XG4gICAgICBMQXBwUGFsLnByaW50TWVzc2FnZSgnTW9kZWwgZGF0YSBkb2VzIG5vdCBleGlzdC4nKTtcbiAgICB9XG5cbiAgICAvLyBFeHByZXNzaW9uXG4gICAgY29uc3QgbG9hZEN1YmlzbUV4cHJlc3Npb24gPSAoKTogdm9pZCA9PiB7XG4gICAgICBpZiAodGhpcy5fbW9kZWxTZXR0aW5nLmdldEV4cHJlc3Npb25Db3VudCgpID4gMCkge1xuICAgICAgICBjb25zdCBjb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldEV4cHJlc3Npb25Db3VudCgpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICAgIGNvbnN0IGV4cHJlc3Npb25OYW1lID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldEV4cHJlc3Npb25OYW1lKGkpO1xuICAgICAgICAgIGNvbnN0IGV4cHJlc3Npb25GaWxlTmFtZSA9XG4gICAgICAgICAgICB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0RXhwcmVzc2lvbkZpbGVOYW1lKGkpO1xuXG4gICAgICAgICAgZmV0Y2goYCR7dGhpcy5fbW9kZWxIb21lRGlyfSR7ZXhwcmVzc2lvbkZpbGVOYW1lfWApXG4gICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5hcnJheUJ1ZmZlcigpKVxuICAgICAgICAgICAgLnRoZW4oYXJyYXlCdWZmZXIgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBtb3Rpb246IEFDdWJpc21Nb3Rpb24gPSB0aGlzLmxvYWRFeHByZXNzaW9uKFxuICAgICAgICAgICAgICAgIGFycmF5QnVmZmVyLFxuICAgICAgICAgICAgICAgIGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgsXG4gICAgICAgICAgICAgICAgZXhwcmVzc2lvbk5hbWVcbiAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICBpZiAodGhpcy5fZXhwcmVzc2lvbnMuZ2V0VmFsdWUoZXhwcmVzc2lvbk5hbWUpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBBQ3ViaXNtTW90aW9uLmRlbGV0ZShcbiAgICAgICAgICAgICAgICAgIHRoaXMuX2V4cHJlc3Npb25zLmdldFZhbHVlKGV4cHJlc3Npb25OYW1lKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXhwcmVzc2lvbnMuc2V0VmFsdWUoZXhwcmVzc2lvbk5hbWUsIG51bGwpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdGhpcy5fZXhwcmVzc2lvbnMuc2V0VmFsdWUoZXhwcmVzc2lvbk5hbWUsIG1vdGlvbik7XG5cbiAgICAgICAgICAgICAgdGhpcy5fZXhwcmVzc2lvbkNvdW50Kys7XG5cbiAgICAgICAgICAgICAgaWYgKHRoaXMuX2V4cHJlc3Npb25Db3VudCA+PSBjb3VudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuTG9hZFBoeXNpY3M7XG5cbiAgICAgICAgICAgICAgICAvLyBjYWxsYmFja1xuICAgICAgICAgICAgICAgIGxvYWRDdWJpc21QaHlzaWNzKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuV2FpdExvYWRFeHByZXNzaW9uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5Mb2FkUGh5c2ljcztcblxuICAgICAgICAvLyBjYWxsYmFja1xuICAgICAgICBsb2FkQ3ViaXNtUGh5c2ljcygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBQaHlzaWNzXG4gICAgY29uc3QgbG9hZEN1YmlzbVBoeXNpY3MgPSAoKTogdm9pZCA9PiB7XG4gICAgICBpZiAodGhpcy5fbW9kZWxTZXR0aW5nLmdldFBoeXNpY3NGaWxlTmFtZSgpICE9ICcnKSB7XG4gICAgICAgIGNvbnN0IHBoeXNpY3NGaWxlTmFtZSA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRQaHlzaWNzRmlsZU5hbWUoKTtcblxuICAgICAgICBmZXRjaChgJHt0aGlzLl9tb2RlbEhvbWVEaXJ9JHtwaHlzaWNzRmlsZU5hbWV9YClcbiAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5hcnJheUJ1ZmZlcigpKVxuICAgICAgICAgIC50aGVuKGFycmF5QnVmZmVyID0+IHtcbiAgICAgICAgICAgIHRoaXMubG9hZFBoeXNpY3MoYXJyYXlCdWZmZXIsIGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpO1xuXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLkxvYWRQb3NlO1xuXG4gICAgICAgICAgICAvLyBjYWxsYmFja1xuICAgICAgICAgICAgbG9hZEN1YmlzbVBvc2UoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5XYWl0TG9hZFBoeXNpY3M7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLkxvYWRQb3NlO1xuXG4gICAgICAgIC8vIGNhbGxiYWNrXG4gICAgICAgIGxvYWRDdWJpc21Qb3NlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIFBvc2VcbiAgICBjb25zdCBsb2FkQ3ViaXNtUG9zZSA9ICgpOiB2b2lkID0+IHtcbiAgICAgIGlmICh0aGlzLl9tb2RlbFNldHRpbmcuZ2V0UG9zZUZpbGVOYW1lKCkgIT0gJycpIHtcbiAgICAgICAgY29uc3QgcG9zZUZpbGVOYW1lID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldFBvc2VGaWxlTmFtZSgpO1xuXG4gICAgICAgIGZldGNoKGAke3RoaXMuX21vZGVsSG9tZURpcn0ke3Bvc2VGaWxlTmFtZX1gKVxuICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpXG4gICAgICAgICAgLnRoZW4oYXJyYXlCdWZmZXIgPT4ge1xuICAgICAgICAgICAgdGhpcy5sb2FkUG9zZShhcnJheUJ1ZmZlciwgYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG5cbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuU2V0dXBFeWVCbGluaztcblxuICAgICAgICAgICAgLy8gY2FsbGJhY2tcbiAgICAgICAgICAgIHNldHVwRXllQmxpbmsoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5XYWl0TG9hZFBvc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLlNldHVwRXllQmxpbms7XG5cbiAgICAgICAgLy8gY2FsbGJhY2tcbiAgICAgICAgc2V0dXBFeWVCbGluaygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBFeWVCbGlua1xuICAgIGNvbnN0IHNldHVwRXllQmxpbmsgPSAoKTogdm9pZCA9PiB7XG4gICAgICBpZiAodGhpcy5fbW9kZWxTZXR0aW5nLmdldEV5ZUJsaW5rUGFyYW1ldGVyQ291bnQoKSA+IDApIHtcbiAgICAgICAgdGhpcy5fZXllQmxpbmsgPSBDdWJpc21FeWVCbGluay5jcmVhdGUodGhpcy5fbW9kZWxTZXR0aW5nKTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5TZXR1cEJyZWF0aDtcbiAgICAgIH1cblxuICAgICAgLy8gY2FsbGJhY2tcbiAgICAgIHNldHVwQnJlYXRoKCk7XG4gICAgfTtcblxuICAgIC8vIEJyZWF0aFxuICAgIGNvbnN0IHNldHVwQnJlYXRoID0gKCk6IHZvaWQgPT4ge1xuICAgICAgdGhpcy5fYnJlYXRoID0gQ3ViaXNtQnJlYXRoLmNyZWF0ZSgpO1xuXG4gICAgICBjb25zdCBicmVhdGhQYXJhbWV0ZXJzOiBjc21WZWN0b3I8QnJlYXRoUGFyYW1ldGVyRGF0YT4gPSBuZXcgY3NtVmVjdG9yKCk7XG4gICAgICBicmVhdGhQYXJhbWV0ZXJzLnB1c2hCYWNrKFxuICAgICAgICBuZXcgQnJlYXRoUGFyYW1ldGVyRGF0YSh0aGlzLl9pZFBhcmFtQW5nbGVYLCAwLjAsIDE1LjAsIDYuNTM0NSwgMC41KVxuICAgICAgKTtcbiAgICAgIGJyZWF0aFBhcmFtZXRlcnMucHVzaEJhY2soXG4gICAgICAgIG5ldyBCcmVhdGhQYXJhbWV0ZXJEYXRhKHRoaXMuX2lkUGFyYW1BbmdsZVksIDAuMCwgOC4wLCAzLjUzNDUsIDAuNSlcbiAgICAgICk7XG4gICAgICBicmVhdGhQYXJhbWV0ZXJzLnB1c2hCYWNrKFxuICAgICAgICBuZXcgQnJlYXRoUGFyYW1ldGVyRGF0YSh0aGlzLl9pZFBhcmFtQW5nbGVaLCAwLjAsIDEwLjAsIDUuNTM0NSwgMC41KVxuICAgICAgKTtcbiAgICAgIGJyZWF0aFBhcmFtZXRlcnMucHVzaEJhY2soXG4gICAgICAgIG5ldyBCcmVhdGhQYXJhbWV0ZXJEYXRhKHRoaXMuX2lkUGFyYW1Cb2R5QW5nbGVYLCAwLjAsIDQuMCwgMTUuNTM0NSwgMC41KVxuICAgICAgKTtcbiAgICAgIGJyZWF0aFBhcmFtZXRlcnMucHVzaEJhY2soXG4gICAgICAgIG5ldyBCcmVhdGhQYXJhbWV0ZXJEYXRhKFxuICAgICAgICAgIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgICAgICAgIEN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUJyZWF0aFxuICAgICAgICAgICksXG4gICAgICAgICAgMC41LFxuICAgICAgICAgIDAuNSxcbiAgICAgICAgICAzLjIzNDUsXG4gICAgICAgICAgMVxuICAgICAgICApXG4gICAgICApO1xuXG4gICAgICB0aGlzLl9icmVhdGguc2V0UGFyYW1ldGVycyhicmVhdGhQYXJhbWV0ZXJzKTtcbiAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuTG9hZFVzZXJEYXRhO1xuXG4gICAgICAvLyBjYWxsYmFja1xuICAgICAgbG9hZFVzZXJEYXRhKCk7XG4gICAgfTtcblxuICAgIC8vIFVzZXJEYXRhXG4gICAgY29uc3QgbG9hZFVzZXJEYXRhID0gKCk6IHZvaWQgPT4ge1xuICAgICAgaWYgKHRoaXMuX21vZGVsU2V0dGluZy5nZXRVc2VyRGF0YUZpbGUoKSAhPSAnJykge1xuICAgICAgICBjb25zdCB1c2VyRGF0YUZpbGUgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0VXNlckRhdGFGaWxlKCk7XG5cbiAgICAgICAgZmV0Y2goYCR7dGhpcy5fbW9kZWxIb21lRGlyfSR7dXNlckRhdGFGaWxlfWApXG4gICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKSlcbiAgICAgICAgICAudGhlbihhcnJheUJ1ZmZlciA9PiB7XG4gICAgICAgICAgICB0aGlzLmxvYWRVc2VyRGF0YShhcnJheUJ1ZmZlciwgYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG5cbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuU2V0dXBFeWVCbGlua0lkcztcblxuICAgICAgICAgICAgLy8gY2FsbGJhY2tcbiAgICAgICAgICAgIHNldHVwRXllQmxpbmtJZHMoKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLldhaXRMb2FkVXNlckRhdGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLlNldHVwRXllQmxpbmtJZHM7XG5cbiAgICAgICAgLy8gY2FsbGJhY2tcbiAgICAgICAgc2V0dXBFeWVCbGlua0lkcygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBFeWVCbGlua0lkc1xuICAgIGNvbnN0IHNldHVwRXllQmxpbmtJZHMgPSAoKTogdm9pZCA9PiB7XG4gICAgICBjb25zdCBleWVCbGlua0lkQ291bnQ6IG51bWJlciA9XG4gICAgICAgIHRoaXMuX21vZGVsU2V0dGluZy5nZXRFeWVCbGlua1BhcmFtZXRlckNvdW50KCk7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZXllQmxpbmtJZENvdW50OyArK2kpIHtcbiAgICAgICAgdGhpcy5fZXllQmxpbmtJZHMucHVzaEJhY2soXG4gICAgICAgICAgdGhpcy5fbW9kZWxTZXR0aW5nLmdldEV5ZUJsaW5rUGFyYW1ldGVySWQoaSlcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5TZXR1cExpcFN5bmNJZHM7XG5cbiAgICAgIC8vIGNhbGxiYWNrXG4gICAgICBzZXR1cExpcFN5bmNJZHMoKTtcbiAgICB9O1xuXG4gICAgLy8gTGlwU3luY0lkc1xuICAgIGNvbnN0IHNldHVwTGlwU3luY0lkcyA9ICgpOiB2b2lkID0+IHtcbiAgICAgIGNvbnN0IGxpcFN5bmNJZENvdW50ID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldExpcFN5bmNQYXJhbWV0ZXJDb3VudCgpO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpcFN5bmNJZENvdW50OyArK2kpIHtcbiAgICAgICAgdGhpcy5fbGlwU3luY0lkcy5wdXNoQmFjayh0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TGlwU3luY1BhcmFtZXRlcklkKGkpKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuU2V0dXBMYXlvdXQ7XG5cbiAgICAgIC8vIGNhbGxiYWNrXG4gICAgICBzZXR1cExheW91dCgpO1xuICAgIH07XG5cbiAgICAvLyBMYXlvdXRcbiAgICBjb25zdCBzZXR1cExheW91dCA9ICgpOiB2b2lkID0+IHtcbiAgICAgIGNvbnN0IGxheW91dDogY3NtTWFwPHN0cmluZywgbnVtYmVyPiA9IG5ldyBjc21NYXA8c3RyaW5nLCBudW1iZXI+KCk7XG5cbiAgICAgIGlmICh0aGlzLl9tb2RlbFNldHRpbmcgPT0gbnVsbCB8fCB0aGlzLl9tb2RlbE1hdHJpeCA9PSBudWxsKSB7XG4gICAgICAgIEN1YmlzbUxvZ0Vycm9yKCdGYWlsZWQgdG8gc2V0dXBMYXlvdXQoKS4nKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TGF5b3V0TWFwKGxheW91dCk7XG4gICAgICB0aGlzLl9tb2RlbE1hdHJpeC5zZXR1cEZyb21MYXlvdXQobGF5b3V0KTtcbiAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuTG9hZE1vdGlvbjtcblxuICAgICAgLy8gY2FsbGJhY2tcbiAgICAgIGxvYWRDdWJpc21Nb3Rpb24oKTtcbiAgICB9O1xuXG4gICAgLy8gTW90aW9uXG4gICAgY29uc3QgbG9hZEN1YmlzbU1vdGlvbiA9ICgpOiB2b2lkID0+IHtcbiAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuV2FpdExvYWRNb3Rpb247XG4gICAgICB0aGlzLl9tb2RlbC5zYXZlUGFyYW1ldGVycygpO1xuICAgICAgdGhpcy5fYWxsTW90aW9uQ291bnQgPSAwO1xuICAgICAgdGhpcy5fbW90aW9uQ291bnQgPSAwO1xuICAgICAgY29uc3QgZ3JvdXA6IHN0cmluZ1tdID0gW107XG5cbiAgICAgIGNvbnN0IG1vdGlvbkdyb3VwQ291bnQ6IG51bWJlciA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRNb3Rpb25Hcm91cENvdW50KCk7XG5cbiAgICAgIC8vIOODouODvOOCt+ODp+ODs+OBrue3j+aVsOOCkuaxguOCgeOCi1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtb3Rpb25Hcm91cENvdW50OyBpKyspIHtcbiAgICAgICAgZ3JvdXBbaV0gPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW90aW9uR3JvdXBOYW1lKGkpO1xuICAgICAgICB0aGlzLl9hbGxNb3Rpb25Db3VudCArPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW90aW9uQ291bnQoZ3JvdXBbaV0pO1xuICAgICAgfVxuXG4gICAgICAvLyDjg6Ljg7zjgrfjg6fjg7Pjga7oqq3jgb/ovrzjgb9cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbW90aW9uR3JvdXBDb3VudDsgaSsrKSB7XG4gICAgICAgIHRoaXMucHJlTG9hZE1vdGlvbkdyb3VwKGdyb3VwW2ldKTtcbiAgICAgIH1cblxuICAgICAgLy8g44Oi44O844K344On44Oz44GM44Gq44GE5aC05ZCIXG4gICAgICBpZiAobW90aW9uR3JvdXBDb3VudCA9PSAwKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuTG9hZFRleHR1cmU7XG5cbiAgICAgICAgLy8g5YWo44Gm44Gu44Oi44O844K344On44Oz44KS5YGc5q2i44GZ44KLXG4gICAgICAgIHRoaXMuX21vdGlvbk1hbmFnZXIuc3RvcEFsbE1vdGlvbnMoKTtcblxuICAgICAgICB0aGlzLl91cGRhdGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IHRydWU7XG5cbiAgICAgICAgdGhpcy5jcmVhdGVSZW5kZXJlcigpO1xuICAgICAgICB0aGlzLnNldHVwVGV4dHVyZXMoKTtcbiAgICAgICAgdGhpcy5nZXRSZW5kZXJlcigpLnN0YXJ0VXAoZ2wpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICog44OG44Kv44K544OB44Oj44Om44OL44OD44OI44Gr44OG44Kv44K544OB44Oj44KS44Ot44O844OJ44GZ44KLXG4gICAqL1xuICBwcml2YXRlIHNldHVwVGV4dHVyZXMoKTogdm9pZCB7XG4gICAgLy8gaVBob25l44Gn44Gu44Ki44Or44OV44Kh5ZOB6LOq5ZCR5LiK44Gu44Gf44KBVHlwZXNjcmlwdOOBp+OBr3ByZW11bHRpcGxpZWRBbHBoYeOCkuaOoeeUqFxuICAgIGNvbnN0IHVzZVByZW11bHRpcGx5ID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLl9zdGF0ZSA9PSBMb2FkU3RlcC5Mb2FkVGV4dHVyZSkge1xuICAgICAgLy8g44OG44Kv44K544OB44Oj6Kqt44G/6L6844G/55SoXG4gICAgICBjb25zdCB0ZXh0dXJlQ291bnQ6IG51bWJlciA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRUZXh0dXJlQ291bnQoKTtcblxuICAgICAgZm9yIChcbiAgICAgICAgbGV0IG1vZGVsVGV4dHVyZU51bWJlciA9IDA7XG4gICAgICAgIG1vZGVsVGV4dHVyZU51bWJlciA8IHRleHR1cmVDb3VudDtcbiAgICAgICAgbW9kZWxUZXh0dXJlTnVtYmVyKytcbiAgICAgICkge1xuICAgICAgICAvLyDjg4bjgq/jgrnjg4Hjg6PlkI3jgYznqbrmloflrZfjgaDjgaPjgZ/loLTlkIjjga/jg63jg7zjg4njg7vjg5DjgqTjg7Pjg4nlh6bnkIbjgpLjgrnjgq3jg4Pjg5dcbiAgICAgICAgaWYgKHRoaXMuX21vZGVsU2V0dGluZy5nZXRUZXh0dXJlRmlsZU5hbWUobW9kZWxUZXh0dXJlTnVtYmVyKSA9PSAnJykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdnZXRUZXh0dXJlRmlsZU5hbWUgbnVsbCcpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gV2ViR0zjga7jg4bjgq/jgrnjg4Hjg6Pjg6bjg4vjg4Pjg4jjgavjg4bjgq/jgrnjg4Hjg6PjgpLjg63jg7zjg4njgZnjgotcbiAgICAgICAgbGV0IHRleHR1cmVQYXRoID1cbiAgICAgICAgICB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0VGV4dHVyZUZpbGVOYW1lKG1vZGVsVGV4dHVyZU51bWJlcik7XG4gICAgICAgIHRleHR1cmVQYXRoID0gdGhpcy5fbW9kZWxIb21lRGlyICsgdGV4dHVyZVBhdGg7XG5cbiAgICAgICAgLy8g44Ot44O844OJ5a6M5LqG5pmC44Gr5ZG844Gz5Ye644GZ44Kz44O844Or44OQ44OD44Kv6Zai5pWwXG4gICAgICAgIGNvbnN0IG9uTG9hZCA9ICh0ZXh0dXJlSW5mbzogVGV4dHVyZUluZm8pOiB2b2lkID0+IHtcbiAgICAgICAgICB0aGlzLmdldFJlbmRlcmVyKCkuYmluZFRleHR1cmUobW9kZWxUZXh0dXJlTnVtYmVyLCB0ZXh0dXJlSW5mby5pZCk7XG5cbiAgICAgICAgICB0aGlzLl90ZXh0dXJlQ291bnQrKztcblxuICAgICAgICAgIGlmICh0aGlzLl90ZXh0dXJlQ291bnQgPj0gdGV4dHVyZUNvdW50KSB7XG4gICAgICAgICAgICAvLyDjg63jg7zjg4nlrozkuoZcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuQ29tcGxldGVTZXR1cDtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8g6Kqt44G/6L6844G/XG4gICAgICAgIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpXG4gICAgICAgICAgLmdldFRleHR1cmVNYW5hZ2VyKClcbiAgICAgICAgICAuY3JlYXRlVGV4dHVyZUZyb21QbmdGaWxlKHRleHR1cmVQYXRoLCB1c2VQcmVtdWx0aXBseSwgb25Mb2FkKTtcbiAgICAgICAgdGhpcy5nZXRSZW5kZXJlcigpLnNldElzUHJlbXVsdGlwbGllZEFscGhhKHVzZVByZW11bHRpcGx5KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5XYWl0TG9hZFRleHR1cmU7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOODrOODs+ODgOODqeOCkuWGjeani+evieOBmeOCi1xuICAgKi9cbiAgcHVibGljIHJlbG9hZFJlbmRlcmVyKCk6IHZvaWQge1xuICAgIHRoaXMuZGVsZXRlUmVuZGVyZXIoKTtcbiAgICB0aGlzLmNyZWF0ZVJlbmRlcmVyKCk7XG4gICAgdGhpcy5zZXR1cFRleHR1cmVzKCk7XG4gIH1cblxuICAvKipcbiAgICog5pu05pawXG4gICAqL1xuICBwdWJsaWMgdXBkYXRlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9zdGF0ZSAhPSBMb2FkU3RlcC5Db21wbGV0ZVNldHVwKSByZXR1cm47XG5cbiAgICBjb25zdCBkZWx0YVRpbWVTZWNvbmRzOiBudW1iZXIgPSBMQXBwUGFsLmdldERlbHRhVGltZSgpO1xuICAgIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyArPSBkZWx0YVRpbWVTZWNvbmRzO1xuXG4gICAgdGhpcy5fZHJhZ01hbmFnZXIudXBkYXRlKGRlbHRhVGltZVNlY29uZHMpO1xuICAgIHRoaXMuX2RyYWdYID0gdGhpcy5fZHJhZ01hbmFnZXIuZ2V0WCgpO1xuICAgIHRoaXMuX2RyYWdZID0gdGhpcy5fZHJhZ01hbmFnZXIuZ2V0WSgpO1xuXG4gICAgLy8g44Oi44O844K344On44Oz44Gr44KI44KL44OR44Op44Oh44O844K/5pu05paw44Gu5pyJ54ShXG4gICAgbGV0IG1vdGlvblVwZGF0ZWQgPSBmYWxzZTtcblxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICB0aGlzLl9tb2RlbC5sb2FkUGFyYW1ldGVycygpOyAvLyDliY3lm57jgrvjg7zjg5bjgZXjgozjgZ/nirbmhYvjgpLjg63jg7zjg4lcbiAgICBpZiAodGhpcy5fbW90aW9uTWFuYWdlci5pc0ZpbmlzaGVkKCkpIHtcbiAgICAgIC8vIOODouODvOOCt+ODp+ODs+OBruWGjeeUn+OBjOOBquOBhOWgtOWQiOOAgeW+heapn+ODouODvOOCt+ODp+ODs+OBruS4reOBi+OCieODqeODs+ODgOODoOOBp+WGjeeUn+OBmeOCi1xuICAgICAgdGhpcy5zdGFydFJhbmRvbU1vdGlvbihcbiAgICAgICAgTEFwcERlZmluZS5Nb3Rpb25Hcm91cElkbGUsXG4gICAgICAgIExBcHBEZWZpbmUuUHJpb3JpdHlJZGxlXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBtb3Rpb25VcGRhdGVkID0gdGhpcy5fbW90aW9uTWFuYWdlci51cGRhdGVNb3Rpb24oXG4gICAgICAgIHRoaXMuX21vZGVsLFxuICAgICAgICBkZWx0YVRpbWVTZWNvbmRzXG4gICAgICApOyAvLyDjg6Ljg7zjgrfjg6fjg7PjgpLmm7TmlrBcbiAgICB9XG4gICAgdGhpcy5fbW9kZWwuc2F2ZVBhcmFtZXRlcnMoKTsgLy8g54q25oWL44KS5L+d5a2YXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgLy8g44G+44Gw44Gf44GNXG4gICAgaWYgKCFtb3Rpb25VcGRhdGVkKSB7XG4gICAgICBpZiAodGhpcy5fZXllQmxpbmsgIT0gbnVsbCkge1xuICAgICAgICAvLyDjg6HjgqTjg7Pjg6Ljg7zjgrfjg6fjg7Pjga7mm7TmlrDjgYzjgarjgYTjgajjgY1cbiAgICAgICAgdGhpcy5fZXllQmxpbmsudXBkYXRlUGFyYW1ldGVycyh0aGlzLl9tb2RlbCwgZGVsdGFUaW1lU2Vjb25kcyk7IC8vIOebruODkeODgVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9leHByZXNzaW9uTWFuYWdlciAhPSBudWxsKSB7XG4gICAgICB0aGlzLl9leHByZXNzaW9uTWFuYWdlci51cGRhdGVNb3Rpb24odGhpcy5fbW9kZWwsIGRlbHRhVGltZVNlY29uZHMpOyAvLyDooajmg4Xjgafjg5Hjg6njg6Hjg7zjgr/mm7TmlrDvvIjnm7jlr77lpInljJbvvIlcbiAgICB9XG5cbiAgICAvLyDjg4njg6njg4PjgrDjgavjgojjgovlpInljJZcbiAgICAvLyDjg4njg6njg4PjgrDjgavjgojjgovpoZTjga7lkJHjgY3jga7oqr/mlbRcbiAgICB0aGlzLl9tb2RlbC5hZGRQYXJhbWV0ZXJWYWx1ZUJ5SWQodGhpcy5faWRQYXJhbUFuZ2xlWCwgdGhpcy5fZHJhZ1ggKiAzMCk7IC8vIC0zMOOBi+OCiTMw44Gu5YCk44KS5Yqg44GI44KLXG4gICAgdGhpcy5fbW9kZWwuYWRkUGFyYW1ldGVyVmFsdWVCeUlkKHRoaXMuX2lkUGFyYW1BbmdsZVksIHRoaXMuX2RyYWdZICogMzApO1xuICAgIHRoaXMuX21vZGVsLmFkZFBhcmFtZXRlclZhbHVlQnlJZChcbiAgICAgIHRoaXMuX2lkUGFyYW1BbmdsZVosXG4gICAgICB0aGlzLl9kcmFnWCAqIHRoaXMuX2RyYWdZICogLTMwXG4gICAgKTtcblxuICAgIC8vIOODieODqeODg+OCsOOBq+OCiOOCi+S9k+OBruWQkeOBjeOBruiqv+aVtFxuICAgIHRoaXMuX21vZGVsLmFkZFBhcmFtZXRlclZhbHVlQnlJZChcbiAgICAgIHRoaXMuX2lkUGFyYW1Cb2R5QW5nbGVYLFxuICAgICAgdGhpcy5fZHJhZ1ggKiAxMFxuICAgICk7IC8vIC0xMOOBi+OCiTEw44Gu5YCk44KS5Yqg44GI44KLXG5cbiAgICAvLyDjg4njg6njg4PjgrDjgavjgojjgovnm67jga7lkJHjgY3jga7oqr/mlbRcbiAgICB0aGlzLl9tb2RlbC5hZGRQYXJhbWV0ZXJWYWx1ZUJ5SWQodGhpcy5faWRQYXJhbUV5ZUJhbGxYLCB0aGlzLl9kcmFnWCk7IC8vIC0x44GL44KJMeOBruWApOOCkuWKoOOBiOOCi1xuICAgIHRoaXMuX21vZGVsLmFkZFBhcmFtZXRlclZhbHVlQnlJZCh0aGlzLl9pZFBhcmFtRXllQmFsbFksIHRoaXMuX2RyYWdZKTtcblxuICAgIC8vIOWRvOWQuOOBquOBqVxuICAgIGlmICh0aGlzLl9icmVhdGggIT0gbnVsbCkge1xuICAgICAgdGhpcy5fYnJlYXRoLnVwZGF0ZVBhcmFtZXRlcnModGhpcy5fbW9kZWwsIGRlbHRhVGltZVNlY29uZHMpO1xuICAgIH1cblxuICAgIC8vIOeJqeeQhua8lOeul+OBruioreWumlxuICAgIGlmICh0aGlzLl9waHlzaWNzICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX3BoeXNpY3MuZXZhbHVhdGUodGhpcy5fbW9kZWwsIGRlbHRhVGltZVNlY29uZHMpO1xuICAgIH1cblxuICAgIC8vIOODquODg+ODl+OCt+ODs+OCr+OBruioreWumlxuICAgIGlmICh0aGlzLl9saXBzeW5jKSB7XG4gICAgICBsZXQgdmFsdWUgPSAwLjA7IC8vIOODquOCouODq+OCv+OCpOODoOOBp+ODquODg+ODl+OCt+ODs+OCr+OCkuihjOOBhuWgtOWQiOOAgeOCt+OCueODhuODoOOBi+OCiemfs+mHj+OCkuWPluW+l+OBl+OBpuOAgTB+MeOBruevhOWbsuOBp+WApOOCkuWFpeWKm+OBl+OBvuOBmeOAglxuXG4gICAgICB0aGlzLl93YXZGaWxlSGFuZGxlci51cGRhdGUoZGVsdGFUaW1lU2Vjb25kcyk7XG4gICAgICB2YWx1ZSA9IHRoaXMuX3dhdkZpbGVIYW5kbGVyLmdldFJtcygpO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2xpcFN5bmNJZHMuZ2V0U2l6ZSgpOyArK2kpIHtcbiAgICAgICAgdGhpcy5fbW9kZWwuYWRkUGFyYW1ldGVyVmFsdWVCeUlkKHRoaXMuX2xpcFN5bmNJZHMuYXQoaSksIHZhbHVlLCAwLjgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIOODneODvOOCuuOBruioreWumlxuICAgIGlmICh0aGlzLl9wb3NlICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX3Bvc2UudXBkYXRlUGFyYW1ldGVycyh0aGlzLl9tb2RlbCwgZGVsdGFUaW1lU2Vjb25kcyk7XG4gICAgfVxuXG4gICAgdGhpcy5fbW9kZWwudXBkYXRlKCk7XG4gIH1cblxuICAvKipcbiAgICog5byV5pWw44Gn5oyH5a6a44GX44Gf44Oi44O844K344On44Oz44Gu5YaN55Sf44KS6ZaL5aeL44GZ44KLXG4gICAqIEBwYXJhbSBncm91cCDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5flkI1cbiAgICogQHBhcmFtIG5vIOOCsOODq+ODvOODl+WGheOBrueVquWPt1xuICAgKiBAcGFyYW0gcHJpb3JpdHkg5YSq5YWI5bqmXG4gICAqIEBwYXJhbSBvbkZpbmlzaGVkTW90aW9uSGFuZGxlciDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/ntYLkuobmmYLjgavlkbzjgbPlh7rjgZXjgozjgovjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbBcbiAgICogQHJldHVybiDplovlp4vjgZfjgZ/jg6Ljg7zjgrfjg6fjg7Pjga7orZjliKXnlarlj7fjgpLov5TjgZnjgILlgIvliKXjga7jg6Ljg7zjgrfjg6fjg7PjgYzntYLkuobjgZfjgZ/jgYvlkKbjgYvjgpLliKTlrprjgZnjgotpc0ZpbmlzaGVkKCnjga7lvJXmlbDjgafkvb/nlKjjgZnjgovjgILplovlp4vjgafjgY3jgarjgYTmmYLjga9bLTFdXG4gICAqL1xuICBwdWJsaWMgc3RhcnRNb3Rpb24oXG4gICAgZ3JvdXA6IHN0cmluZyxcbiAgICBubzogbnVtYmVyLFxuICAgIHByaW9yaXR5OiBudW1iZXIsXG4gICAgb25GaW5pc2hlZE1vdGlvbkhhbmRsZXI/OiBGaW5pc2hlZE1vdGlvbkNhbGxiYWNrXG4gICk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGUge1xuICAgIGlmIChwcmlvcml0eSA9PSBMQXBwRGVmaW5lLlByaW9yaXR5Rm9yY2UpIHtcbiAgICAgIHRoaXMuX21vdGlvbk1hbmFnZXIuc2V0UmVzZXJ2ZVByaW9yaXR5KHByaW9yaXR5KTtcbiAgICB9IGVsc2UgaWYgKCF0aGlzLl9tb3Rpb25NYW5hZ2VyLnJlc2VydmVNb3Rpb24ocHJpb3JpdHkpKSB7XG4gICAgICBpZiAodGhpcy5fZGVidWdNb2RlKSB7XG4gICAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKFwiW0FQUF1jYW4ndCBzdGFydCBtb3Rpb24uXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIEludmFsaWRNb3Rpb25RdWV1ZUVudHJ5SGFuZGxlVmFsdWU7XG4gICAgfVxuXG4gICAgY29uc3QgbW90aW9uRmlsZU5hbWUgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW90aW9uRmlsZU5hbWUoZ3JvdXAsIG5vKTtcblxuICAgIC8vIGV4KSBpZGxlXzBcbiAgICBjb25zdCBuYW1lID0gYCR7Z3JvdXB9XyR7bm99YDtcbiAgICBsZXQgbW90aW9uOiBDdWJpc21Nb3Rpb24gPSB0aGlzLl9tb3Rpb25zLmdldFZhbHVlKG5hbWUpIGFzIEN1YmlzbU1vdGlvbjtcbiAgICBsZXQgYXV0b0RlbGV0ZSA9IGZhbHNlO1xuXG4gICAgaWYgKG1vdGlvbiA9PSBudWxsKSB7XG4gICAgICBmZXRjaChgJHt0aGlzLl9tb2RlbEhvbWVEaXJ9JHttb3Rpb25GaWxlTmFtZX1gKVxuICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5hcnJheUJ1ZmZlcigpKVxuICAgICAgICAudGhlbihhcnJheUJ1ZmZlciA9PiB7XG4gICAgICAgICAgbW90aW9uID0gdGhpcy5sb2FkTW90aW9uKFxuICAgICAgICAgICAgYXJyYXlCdWZmZXIsXG4gICAgICAgICAgICBhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyXG4gICAgICAgICAgKTtcbiAgICAgICAgICBsZXQgZmFkZVRpbWU6IG51bWJlciA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRNb3Rpb25GYWRlSW5UaW1lVmFsdWUoXG4gICAgICAgICAgICBncm91cCxcbiAgICAgICAgICAgIG5vXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIGlmIChmYWRlVGltZSA+PSAwLjApIHtcbiAgICAgICAgICAgIG1vdGlvbi5zZXRGYWRlSW5UaW1lKGZhZGVUaW1lKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmYWRlVGltZSA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRNb3Rpb25GYWRlT3V0VGltZVZhbHVlKGdyb3VwLCBubyk7XG4gICAgICAgICAgaWYgKGZhZGVUaW1lID49IDAuMCkge1xuICAgICAgICAgICAgbW90aW9uLnNldEZhZGVPdXRUaW1lKGZhZGVUaW1lKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtb3Rpb24uc2V0RWZmZWN0SWRzKHRoaXMuX2V5ZUJsaW5rSWRzLCB0aGlzLl9saXBTeW5jSWRzKTtcbiAgICAgICAgICBhdXRvRGVsZXRlID0gdHJ1ZTsgLy8g57WC5LqG5pmC44Gr44Oh44Oi44Oq44GL44KJ5YmK6ZmkXG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBtb3Rpb24uc2V0RmluaXNoZWRNb3Rpb25IYW5kbGVyKG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyKTtcbiAgICB9XG5cbiAgICAvL3ZvaWNlXG4gICAgY29uc3Qgdm9pY2UgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW90aW9uU291bmRGaWxlTmFtZShncm91cCwgbm8pO1xuICAgIGlmICh2b2ljZS5sb2NhbGVDb21wYXJlKCcnKSAhPSAwKSB7XG4gICAgICBsZXQgcGF0aCA9IHZvaWNlO1xuICAgICAgcGF0aCA9IHRoaXMuX21vZGVsSG9tZURpciArIHBhdGg7XG4gICAgICB0aGlzLl93YXZGaWxlSGFuZGxlci5zdGFydChwYXRoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fZGVidWdNb2RlKSB7XG4gICAgICBMQXBwUGFsLnByaW50TWVzc2FnZShgW0FQUF1zdGFydCBtb3Rpb246IFske2dyb3VwfV8ke25vfWApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbW90aW9uTWFuYWdlci5zdGFydE1vdGlvblByaW9yaXR5KFxuICAgICAgbW90aW9uLFxuICAgICAgYXV0b0RlbGV0ZSxcbiAgICAgIHByaW9yaXR5XG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6njg7Pjg4Djg6DjgavpgbjjgbDjgozjgZ/jg6Ljg7zjgrfjg6fjg7Pjga7lho3nlJ/jgpLplovlp4vjgZnjgovjgIJcbiAgICogQHBhcmFtIGdyb3VwIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+WQjVxuICAgKiBAcGFyYW0gcHJpb3JpdHkg5YSq5YWI5bqmXG4gICAqIEBwYXJhbSBvbkZpbmlzaGVkTW90aW9uSGFuZGxlciDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/ntYLkuobmmYLjgavlkbzjgbPlh7rjgZXjgozjgovjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbBcbiAgICogQHJldHVybiDplovlp4vjgZfjgZ/jg6Ljg7zjgrfjg6fjg7Pjga7orZjliKXnlarlj7fjgpLov5TjgZnjgILlgIvliKXjga7jg6Ljg7zjgrfjg6fjg7PjgYzntYLkuobjgZfjgZ/jgYvlkKbjgYvjgpLliKTlrprjgZnjgotpc0ZpbmlzaGVkKCnjga7lvJXmlbDjgafkvb/nlKjjgZnjgovjgILplovlp4vjgafjgY3jgarjgYTmmYLjga9bLTFdXG4gICAqL1xuICBwdWJsaWMgc3RhcnRSYW5kb21Nb3Rpb24oXG4gICAgZ3JvdXA6IHN0cmluZyxcbiAgICBwcmlvcml0eTogbnVtYmVyLFxuICAgIG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyPzogRmluaXNoZWRNb3Rpb25DYWxsYmFja1xuICApOiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5SGFuZGxlIHtcbiAgICBpZiAodGhpcy5fbW9kZWxTZXR0aW5nLmdldE1vdGlvbkNvdW50KGdyb3VwKSA9PSAwKSB7XG4gICAgICByZXR1cm4gSW52YWxpZE1vdGlvblF1ZXVlRW50cnlIYW5kbGVWYWx1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBubzogbnVtYmVyID0gTWF0aC5mbG9vcihcbiAgICAgIE1hdGgucmFuZG9tKCkgKiB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW90aW9uQ291bnQoZ3JvdXApXG4gICAgKTtcblxuICAgIHJldHVybiB0aGlzLnN0YXJ0TW90aW9uKGdyb3VwLCBubywgcHJpb3JpdHksIG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlvJXmlbDjgafmjIflrprjgZfjgZ/ooajmg4Xjg6Ljg7zjgrfjg6fjg7PjgpLjgrvjg4Pjg4jjgZnjgotcbiAgICpcbiAgICogQHBhcmFtIGV4cHJlc3Npb25JZCDooajmg4Xjg6Ljg7zjgrfjg6fjg7Pjga5JRFxuICAgKi9cbiAgcHVibGljIHNldEV4cHJlc3Npb24oZXhwcmVzc2lvbklkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBjb25zdCBtb3Rpb246IEFDdWJpc21Nb3Rpb24gPSB0aGlzLl9leHByZXNzaW9ucy5nZXRWYWx1ZShleHByZXNzaW9uSWQpO1xuXG4gICAgaWYgKHRoaXMuX2RlYnVnTW9kZSkge1xuICAgICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoYFtBUFBdZXhwcmVzc2lvbjogWyR7ZXhwcmVzc2lvbklkfV1gKTtcbiAgICB9XG5cbiAgICBpZiAobW90aW9uICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX2V4cHJlc3Npb25NYW5hZ2VyLnN0YXJ0TW90aW9uUHJpb3JpdHkoXG4gICAgICAgIG1vdGlvbixcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIExBcHBEZWZpbmUuUHJpb3JpdHlGb3JjZVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuX2RlYnVnTW9kZSkge1xuICAgICAgICBMQXBwUGFsLnByaW50TWVzc2FnZShgW0FQUF1leHByZXNzaW9uWyR7ZXhwcmVzc2lvbklkfV0gaXMgbnVsbGApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjg6njg7Pjg4Djg6DjgavpgbjjgbDjgozjgZ/ooajmg4Xjg6Ljg7zjgrfjg6fjg7PjgpLjgrvjg4Pjg4jjgZnjgotcbiAgICovXG4gIHB1YmxpYyBzZXRSYW5kb21FeHByZXNzaW9uKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9leHByZXNzaW9ucy5nZXRTaXplKCkgPT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IG5vOiBudW1iZXIgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB0aGlzLl9leHByZXNzaW9ucy5nZXRTaXplKCkpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9leHByZXNzaW9ucy5nZXRTaXplKCk7IGkrKykge1xuICAgICAgaWYgKGkgPT0gbm8pIHtcbiAgICAgICAgY29uc3QgbmFtZTogc3RyaW5nID0gdGhpcy5fZXhwcmVzc2lvbnMuX2tleVZhbHVlc1tpXS5maXJzdDtcbiAgICAgICAgdGhpcy5zZXRFeHByZXNzaW9uKG5hbWUpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOOCpOODmeODs+ODiOOBrueZuueBq+OCkuWPl+OBkeWPluOCi1xuICAgKi9cbiAgcHVibGljIG1vdGlvbkV2ZW50RmlyZWQoZXZlbnRWYWx1ZTogY3NtU3RyaW5nKTogdm9pZCB7XG4gICAgQ3ViaXNtTG9nSW5mbygnezB9IGlzIGZpcmVkIG9uIExBcHBNb2RlbCEhJywgZXZlbnRWYWx1ZS5zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlvZPjgZ/jgorliKTlrprjg4bjgrnjg4hcbiAgICog5oyH5a6a77yp77yk44Gu6aCC54K544Oq44K544OI44GL44KJ55+p5b2i44KS6KiI566X44GX44CB5bqn5qiZ44KS44GM55+p5b2i56+E5Zuy5YaF44GL5Yik5a6a44GZ44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSBoaXRBcmVuYU5hbWUgIOW9k+OBn+OCiuWIpOWumuOCkuODhuOCueODiOOBmeOCi+WvvuixoeOBrklEXG4gICAqIEBwYXJhbSB4ICAgICAgICAgICAgIOWIpOWumuOCkuihjOOBhljluqfmqJlcbiAgICogQHBhcmFtIHkgICAgICAgICAgICAg5Yik5a6a44KS6KGM44GGWeW6p+aomVxuICAgKi9cbiAgcHVibGljIGhpdFRlc3QoaGl0QXJlbmFOYW1lOiBzdHJpbmcsIHg6IG51bWJlciwgeTogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgLy8g6YCP5piO5pmC44Gv5b2T44Gf44KK5Yik5a6a54Sh44GX44CCXG4gICAgaWYgKHRoaXMuX29wYWNpdHkgPCAxKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgY291bnQ6IG51bWJlciA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRIaXRBcmVhc0NvdW50KCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgIGlmICh0aGlzLl9tb2RlbFNldHRpbmcuZ2V0SGl0QXJlYU5hbWUoaSkgPT0gaGl0QXJlbmFOYW1lKSB7XG4gICAgICAgIGNvbnN0IGRyYXdJZDogQ3ViaXNtSWRIYW5kbGUgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0SGl0QXJlYUlkKGkpO1xuICAgICAgICByZXR1cm4gdGhpcy5pc0hpdChkcmF3SWQsIHgsIHkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjg4fjg7zjgr/jgpLjgrDjg6vjg7zjg5flkI3jgYvjgonkuIDmi6zjgafjg63jg7zjg4njgZnjgovjgIJcbiAgICog44Oi44O844K344On44Oz44OH44O844K/44Gu5ZCN5YmN44Gv5YaF6YOo44GnTW9kZWxTZXR0aW5n44GL44KJ5Y+W5b6X44GZ44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSBncm91cCDjg6Ljg7zjgrfjg6fjg7Pjg4fjg7zjgr/jga7jgrDjg6vjg7zjg5flkI1cbiAgICovXG4gIHB1YmxpYyBwcmVMb2FkTW90aW9uR3JvdXAoZ3JvdXA6IHN0cmluZyk6IHZvaWQge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fbW9kZWxTZXR0aW5nLmdldE1vdGlvbkNvdW50KGdyb3VwKTsgaSsrKSB7XG4gICAgICBjb25zdCBtb3Rpb25GaWxlTmFtZSA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRNb3Rpb25GaWxlTmFtZShncm91cCwgaSk7XG5cbiAgICAgIC8vIGV4KSBpZGxlXzBcbiAgICAgIGNvbnN0IG5hbWUgPSBgJHtncm91cH1fJHtpfWA7XG4gICAgICBpZiAodGhpcy5fZGVidWdNb2RlKSB7XG4gICAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKFxuICAgICAgICAgIGBbQVBQXWxvYWQgbW90aW9uOiAke21vdGlvbkZpbGVOYW1lfSA9PiBbJHtuYW1lfV1gXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGZldGNoKGAke3RoaXMuX21vZGVsSG9tZURpcn0ke21vdGlvbkZpbGVOYW1lfWApXG4gICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpXG4gICAgICAgIC50aGVuKGFycmF5QnVmZmVyID0+IHtcbiAgICAgICAgICBjb25zdCB0bXBNb3Rpb246IEN1YmlzbU1vdGlvbiA9IHRoaXMubG9hZE1vdGlvbihcbiAgICAgICAgICAgIGFycmF5QnVmZmVyLFxuICAgICAgICAgICAgYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCxcbiAgICAgICAgICAgIG5hbWVcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgbGV0IGZhZGVUaW1lID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldE1vdGlvbkZhZGVJblRpbWVWYWx1ZShncm91cCwgaSk7XG4gICAgICAgICAgaWYgKGZhZGVUaW1lID49IDAuMCkge1xuICAgICAgICAgICAgdG1wTW90aW9uLnNldEZhZGVJblRpbWUoZmFkZVRpbWUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZhZGVUaW1lID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldE1vdGlvbkZhZGVPdXRUaW1lVmFsdWUoZ3JvdXAsIGkpO1xuICAgICAgICAgIGlmIChmYWRlVGltZSA+PSAwLjApIHtcbiAgICAgICAgICAgIHRtcE1vdGlvbi5zZXRGYWRlT3V0VGltZShmYWRlVGltZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRtcE1vdGlvbi5zZXRFZmZlY3RJZHModGhpcy5fZXllQmxpbmtJZHMsIHRoaXMuX2xpcFN5bmNJZHMpO1xuXG4gICAgICAgICAgaWYgKHRoaXMuX21vdGlvbnMuZ2V0VmFsdWUobmFtZSkgIT0gbnVsbCkge1xuICAgICAgICAgICAgQUN1YmlzbU1vdGlvbi5kZWxldGUodGhpcy5fbW90aW9ucy5nZXRWYWx1ZShuYW1lKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5fbW90aW9ucy5zZXRWYWx1ZShuYW1lLCB0bXBNb3Rpb24pO1xuXG4gICAgICAgICAgdGhpcy5fbW90aW9uQ291bnQrKztcbiAgICAgICAgICBpZiAodGhpcy5fbW90aW9uQ291bnQgPj0gdGhpcy5fYWxsTW90aW9uQ291bnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuTG9hZFRleHR1cmU7XG5cbiAgICAgICAgICAgIC8vIOWFqOOBpuOBruODouODvOOCt+ODp+ODs+OCkuWBnOatouOBmeOCi1xuICAgICAgICAgICAgdGhpcy5fbW90aW9uTWFuYWdlci5zdG9wQWxsTW90aW9ucygpO1xuXG4gICAgICAgICAgICB0aGlzLl91cGRhdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVJlbmRlcmVyKCk7XG4gICAgICAgICAgICB0aGlzLnNldHVwVGV4dHVyZXMoKTtcbiAgICAgICAgICAgIHRoaXMuZ2V0UmVuZGVyZXIoKS5zdGFydFVwKGdsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjgZnjgbnjgabjga7jg6Ljg7zjgrfjg6fjg7Pjg4fjg7zjgr/jgpLop6PmlL7jgZnjgovjgIJcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlTW90aW9ucygpOiB2b2lkIHtcbiAgICB0aGlzLl9tb3Rpb25zLmNsZWFyKCk7XG4gIH1cblxuICAvKipcbiAgICog5YWo44Gm44Gu6KGo5oOF44OH44O844K/44KS6Kej5pS+44GZ44KL44CCXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZUV4cHJlc3Npb25zKCk6IHZvaWQge1xuICAgIHRoaXMuX2V4cHJlc3Npb25zLmNsZWFyKCk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44KS5o+P55S744GZ44KL5Yem55CG44CC44Oi44OH44Or44KS5o+P55S744GZ44KL56m66ZaT44GuVmlldy1Qcm9qZWN0aW9u6KGM5YiX44KS5rih44GZ44CCXG4gICAqL1xuICBwdWJsaWMgZG9EcmF3KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9tb2RlbCA9PSBudWxsKSByZXR1cm47XG5cbiAgICAvLyDjgq3jg6Pjg7Pjg5DjgrnjgrXjgqTjgrrjgpLmuKHjgZlcbiAgICBjb25zdCB2aWV3cG9ydDogbnVtYmVyW10gPSBbMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0XTtcblxuICAgIHRoaXMuZ2V0UmVuZGVyZXIoKS5zZXRSZW5kZXJTdGF0ZShmcmFtZUJ1ZmZlciwgdmlld3BvcnQpO1xuICAgIHRoaXMuZ2V0UmVuZGVyZXIoKS5kcmF3TW9kZWwoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vjgpLmj4/nlLvjgZnjgovlh6bnkIbjgILjg6Ljg4fjg6vjgpLmj4/nlLvjgZnjgovnqbrplpPjga5WaWV3LVByb2plY3Rpb27ooYzliJfjgpLmuKHjgZnjgIJcbiAgICovXG4gIHB1YmxpYyBkcmF3KG1hdHJpeDogQ3ViaXNtTWF0cml4NDQpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fbW9kZWwgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIOWQhOiqreOBv+i+vOOBv+e1guS6huW+jFxuICAgIGlmICh0aGlzLl9zdGF0ZSA9PSBMb2FkU3RlcC5Db21wbGV0ZVNldHVwKSB7XG4gICAgICBtYXRyaXgubXVsdGlwbHlCeU1hdHJpeCh0aGlzLl9tb2RlbE1hdHJpeCk7XG5cbiAgICAgIHRoaXMuZ2V0UmVuZGVyZXIoKS5zZXRNdnBNYXRyaXgobWF0cml4KTtcblxuICAgICAgdGhpcy5kb0RyYXcoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuX21vZGVsU2V0dGluZyA9IG51bGw7XG4gICAgdGhpcy5fbW9kZWxIb21lRGlyID0gbnVsbDtcbiAgICB0aGlzLl91c2VyVGltZVNlY29uZHMgPSAwLjA7XG5cbiAgICB0aGlzLl9leWVCbGlua0lkcyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+KCk7XG4gICAgdGhpcy5fbGlwU3luY0lkcyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+KCk7XG5cbiAgICB0aGlzLl9tb3Rpb25zID0gbmV3IGNzbU1hcDxzdHJpbmcsIEFDdWJpc21Nb3Rpb24+KCk7XG4gICAgdGhpcy5fZXhwcmVzc2lvbnMgPSBuZXcgY3NtTWFwPHN0cmluZywgQUN1YmlzbU1vdGlvbj4oKTtcblxuICAgIHRoaXMuX2hpdEFyZWEgPSBuZXcgY3NtVmVjdG9yPGNzbVJlY3Q+KCk7XG4gICAgdGhpcy5fdXNlckFyZWEgPSBuZXcgY3NtVmVjdG9yPGNzbVJlY3Q+KCk7XG5cbiAgICB0aGlzLl9pZFBhcmFtQW5nbGVYID0gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxuICAgICAgQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQW5nbGVYXG4gICAgKTtcbiAgICB0aGlzLl9pZFBhcmFtQW5nbGVZID0gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxuICAgICAgQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQW5nbGVZXG4gICAgKTtcbiAgICB0aGlzLl9pZFBhcmFtQW5nbGVaID0gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxuICAgICAgQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQW5nbGVaXG4gICAgKTtcbiAgICB0aGlzLl9pZFBhcmFtRXllQmFsbFggPSBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICBDdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1FeWVCYWxsWFxuICAgICk7XG4gICAgdGhpcy5faWRQYXJhbUV5ZUJhbGxZID0gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxuICAgICAgQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtRXllQmFsbFlcbiAgICApO1xuICAgIHRoaXMuX2lkUGFyYW1Cb2R5QW5nbGVYID0gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxuICAgICAgQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQm9keUFuZ2xlWFxuICAgICk7XG5cbiAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLkxvYWRBc3NldHM7XG4gICAgdGhpcy5fZXhwcmVzc2lvbkNvdW50ID0gMDtcbiAgICB0aGlzLl90ZXh0dXJlQ291bnQgPSAwO1xuICAgIHRoaXMuX21vdGlvbkNvdW50ID0gMDtcbiAgICB0aGlzLl9hbGxNb3Rpb25Db3VudCA9IDA7XG4gICAgdGhpcy5fd2F2RmlsZUhhbmRsZXIgPSBuZXcgTEFwcFdhdkZpbGVIYW5kbGVyKCk7XG4gIH1cblxuICBfbW9kZWxTZXR0aW5nOiBJQ3ViaXNtTW9kZWxTZXR0aW5nOyAvLyDjg6Ljg4fjg6vjgrvjg4Pjg4bjgqPjg7PjgrDmg4XloLFcbiAgX21vZGVsSG9tZURpcjogc3RyaW5nOyAvLyDjg6Ljg4fjg6vjgrvjg4Pjg4bjgqPjg7PjgrDjgYznva7jgYvjgozjgZ/jg4fjgqPjg6zjgq/jg4jjg6pcbiAgX3VzZXJUaW1lU2Vjb25kczogbnVtYmVyOyAvLyDjg4fjg6vjgr/mmYLplpPjga7nqY3nrpflgKRb56eSXVxuXG4gIF9leWVCbGlua0lkczogY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPjsgLy8g44Oi44OH44Or44Gr6Kit5a6a44GV44KM44Gf556s44GN5qmf6IO955So44OR44Op44Oh44O844K/SURcbiAgX2xpcFN5bmNJZHM6IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT47IC8vIOODouODh+ODq+OBq+ioreWumuOBleOCjOOBn+ODquODg+ODl+OCt+ODs+OCr+apn+iDveeUqOODkeODqeODoeODvOOCv0lEXG5cbiAgX21vdGlvbnM6IGNzbU1hcDxzdHJpbmcsIEFDdWJpc21Nb3Rpb24+OyAvLyDoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg6Ljg7zjgrfjg6fjg7Pjga7jg6rjgrnjg4hcbiAgX2V4cHJlc3Npb25zOiBjc21NYXA8c3RyaW5nLCBBQ3ViaXNtTW90aW9uPjsgLy8g6Kqt44G/6L6844G+44KM44Gm44GE44KL6KGo5oOF44Gu44Oq44K544OIXG5cbiAgX2hpdEFyZWE6IGNzbVZlY3Rvcjxjc21SZWN0PjtcbiAgX3VzZXJBcmVhOiBjc21WZWN0b3I8Y3NtUmVjdD47XG5cbiAgX2lkUGFyYW1BbmdsZVg6IEN1YmlzbUlkSGFuZGxlOyAvLyDjg5Hjg6njg6Hjg7zjgr9JRDogUGFyYW1BbmdsZVhcbiAgX2lkUGFyYW1BbmdsZVk6IEN1YmlzbUlkSGFuZGxlOyAvLyDjg5Hjg6njg6Hjg7zjgr9JRDogUGFyYW1BbmdsZVlcbiAgX2lkUGFyYW1BbmdsZVo6IEN1YmlzbUlkSGFuZGxlOyAvLyDjg5Hjg6njg6Hjg7zjgr9JRDogUGFyYW1BbmdsZVpcbiAgX2lkUGFyYW1FeWVCYWxsWDogQ3ViaXNtSWRIYW5kbGU7IC8vIOODkeODqeODoeODvOOCv0lEOiBQYXJhbUV5ZUJhbGxYXG4gIF9pZFBhcmFtRXllQmFsbFk6IEN1YmlzbUlkSGFuZGxlOyAvLyDjg5Hjg6njg6Hjg7zjgr9JRDogUGFyYW1FeWVCQWxsWVxuICBfaWRQYXJhbUJvZHlBbmdsZVg6IEN1YmlzbUlkSGFuZGxlOyAvLyDjg5Hjg6njg6Hjg7zjgr9JRDogUGFyYW1Cb2R5QW5nbGVYXG5cbiAgX3N0YXRlOiBudW1iZXI7IC8vIOePvuWcqOOBruOCueODhuODvOOCv+OCueeuoeeQhueUqFxuICBfZXhwcmVzc2lvbkNvdW50OiBudW1iZXI7IC8vIOihqOaDheODh+ODvOOCv+OCq+OCpuODs+ODiFxuICBfdGV4dHVyZUNvdW50OiBudW1iZXI7IC8vIOODhuOCr+OCueODgeODo+OCq+OCpuODs+ODiFxuICBfbW90aW9uQ291bnQ6IG51bWJlcjsgLy8g44Oi44O844K344On44Oz44OH44O844K/44Kr44Km44Oz44OIXG4gIF9hbGxNb3Rpb25Db3VudDogbnVtYmVyOyAvLyDjg6Ljg7zjgrfjg6fjg7Pnt4/mlbBcbiAgX3dhdkZpbGVIYW5kbGVyOiBMQXBwV2F2RmlsZUhhbmRsZXI7IC8vd2F244OV44Kh44Kk44Or44OP44Oz44OJ44OpXG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG4vKipcbiAqIOODl+ODqeODg+ODiOODleOCqeODvOODoOS+neWtmOapn+iDveOCkuaKveixoeWMluOBmeOCiyBDdWJpc20gUGxhdGZvcm0gQWJzdHJhY3Rpb24gTGF5ZXIuXG4gKlxuICog44OV44Kh44Kk44Or6Kqt44G/6L6844G/44KE5pmC5Yi75Y+W5b6X562J44Gu44OX44Op44OD44OI44OV44Kp44O844Og44Gr5L6d5a2Y44GZ44KL6Zai5pWw44KS44G+44Go44KB44KL44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBMQXBwUGFsIHtcbiAgLyoqXG4gICAqIOODleOCoeOCpOODq+OCkuODkOOCpOODiOODh+ODvOOCv+OBqOOBl+OBpuiqreOBv+OBk+OCgFxuICAgKlxuICAgKiBAcGFyYW0gZmlsZVBhdGgg6Kqt44G/6L6844G/5a++6LGh44OV44Kh44Kk44Or44Gu44OR44K5XG4gICAqIEByZXR1cm5cbiAgICoge1xuICAgKiAgICAgIGJ1ZmZlciwgICDoqq3jgb/ovrzjgpPjgaDjg5DjgqTjg4jjg4fjg7zjgr9cbiAgICogICAgICBzaXplICAgICAgICDjg5XjgqHjgqTjg6vjgrXjgqTjgrpcbiAgICogfVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBsb2FkRmlsZUFzQnl0ZXMoXG4gICAgZmlsZVBhdGg6IHN0cmluZyxcbiAgICBjYWxsYmFjazogKGFycmF5QnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKSA9PiB2b2lkXG4gICk6IHZvaWQge1xuICAgIGZldGNoKGZpbGVQYXRoKVxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKSlcbiAgICAgIC50aGVuKGFycmF5QnVmZmVyID0+IGNhbGxiYWNrKGFycmF5QnVmZmVyLCBhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoKSk7XG4gIH1cblxuICAvKipcbiAgICog44OH44Or44K/5pmC6ZaT77yI5YmN5Zue44OV44Os44O844Og44Go44Gu5beu5YiG77yJ44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g44OH44Or44K/5pmC6ZaTW21zXVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBnZXREZWx0YVRpbWUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5zX2RlbHRhVGltZTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgdXBkYXRlVGltZSgpOiB2b2lkIHtcbiAgICB0aGlzLnNfY3VycmVudEZyYW1lID0gRGF0ZS5ub3coKTtcbiAgICB0aGlzLnNfZGVsdGFUaW1lID0gKHRoaXMuc19jdXJyZW50RnJhbWUgLSB0aGlzLnNfbGFzdEZyYW1lKSAvIDEwMDA7XG4gICAgdGhpcy5zX2xhc3RGcmFtZSA9IHRoaXMuc19jdXJyZW50RnJhbWU7XG4gIH1cblxuICAvKipcbiAgICog44Oh44OD44K744O844K444KS5Ye65Yqb44GZ44KLXG4gICAqIEBwYXJhbSBtZXNzYWdlIOaWh+Wtl+WIl1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBwcmludE1lc3NhZ2UobWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG4gICAgY29uc29sZS5sb2cobWVzc2FnZSk7XG4gIH1cblxuICBzdGF0aWMgbGFzdFVwZGF0ZSA9IERhdGUubm93KCk7XG5cbiAgc3RhdGljIHNfY3VycmVudEZyYW1lID0gMC4wO1xuICBzdGF0aWMgc19sYXN0RnJhbWUgPSAwLjA7XG4gIHN0YXRpYyBzX2RlbHRhVGltZSA9IDAuMDtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IGNzbVZlY3RvciwgaXRlcmF0b3IgfSBmcm9tICdAZnJhbWV3b3JrL3R5cGUvY3NtdmVjdG9yJztcblxuaW1wb3J0IHsgZ2wgfSBmcm9tICcuL2xhcHBkZWxlZ2F0ZSc7XG5cbi8qKlxuICog44OG44Kv44K544OB44Oj566h55CG44Kv44Op44K5XG4gKiDnlLvlg4/oqq3jgb/ovrzjgb/jgIHnrqHnkIbjgpLooYzjgYbjgq/jg6njgrnjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIExBcHBUZXh0dXJlTWFuYWdlciB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3RleHR1cmVzID0gbmV3IGNzbVZlY3RvcjxUZXh0dXJlSW5mbz4oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDop6PmlL7jgZnjgovjgIJcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIGZvciAoXG4gICAgICBsZXQgaXRlOiBpdGVyYXRvcjxUZXh0dXJlSW5mbz4gPSB0aGlzLl90ZXh0dXJlcy5iZWdpbigpO1xuICAgICAgaXRlLm5vdEVxdWFsKHRoaXMuX3RleHR1cmVzLmVuZCgpKTtcbiAgICAgIGl0ZS5wcmVJbmNyZW1lbnQoKVxuICAgICkge1xuICAgICAgZ2wuZGVsZXRlVGV4dHVyZShpdGUucHRyKCkuaWQpO1xuICAgIH1cbiAgICB0aGlzLl90ZXh0dXJlcyA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICog55S75YOP6Kqt44G/6L6844G/XG4gICAqXG4gICAqIEBwYXJhbSBmaWxlTmFtZSDoqq3jgb/ovrzjgoDnlLvlg4/jg5XjgqHjgqTjg6vjg5HjgrnlkI1cbiAgICogQHBhcmFtIHVzZVByZW11bHRpcGx5IFByZW11bHTlh6bnkIbjgpLmnInlirnjgavjgZnjgovjgYtcbiAgICogQHJldHVybiDnlLvlg4/mg4XloLHjgIHoqq3jgb/ovrzjgb/lpLHmlZfmmYLjga9udWxs44KS6L+U44GZXG4gICAqL1xuICBwdWJsaWMgY3JlYXRlVGV4dHVyZUZyb21QbmdGaWxlKFxuICAgIGZpbGVOYW1lOiBzdHJpbmcsXG4gICAgdXNlUHJlbXVsdGlwbHk6IGJvb2xlYW4sXG4gICAgY2FsbGJhY2s6ICh0ZXh0dXJlSW5mbzogVGV4dHVyZUluZm8pID0+IHZvaWRcbiAgKTogdm9pZCB7XG4gICAgLy8gc2VhcmNoIGxvYWRlZCB0ZXh0dXJlIGFscmVhZHlcbiAgICBmb3IgKFxuICAgICAgbGV0IGl0ZTogaXRlcmF0b3I8VGV4dHVyZUluZm8+ID0gdGhpcy5fdGV4dHVyZXMuYmVnaW4oKTtcbiAgICAgIGl0ZS5ub3RFcXVhbCh0aGlzLl90ZXh0dXJlcy5lbmQoKSk7XG4gICAgICBpdGUucHJlSW5jcmVtZW50KClcbiAgICApIHtcbiAgICAgIGlmIChcbiAgICAgICAgaXRlLnB0cigpLmZpbGVOYW1lID09IGZpbGVOYW1lICYmXG4gICAgICAgIGl0ZS5wdHIoKS51c2VQcmVtdWx0cGx5ID09IHVzZVByZW11bHRpcGx5XG4gICAgICApIHtcbiAgICAgICAgLy8gMuWbnuebruS7pemZjeOBr+OCreODo+ODg+OCt+ODpeOBjOS9v+eUqOOBleOCjOOCiyjlvoXjgaHmmYLplpPjgarjgZcpXG4gICAgICAgIC8vIFdlYktpdOOBp+OBr+WQjOOBmEltYWdl44Gub25sb2Fk44KS5YaN5bqm5ZG844G244Gr44Gv5YaN44Kk44Oz44K544K/44Oz44K544GM5b+F6KaBXG4gICAgICAgIC8vIOips+e0sO+8mmh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS81MDI0MTgxXG4gICAgICAgIGl0ZS5wdHIoKS5pbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgaXRlLnB0cigpLmltZy5vbmxvYWQgPSAoKTogdm9pZCA9PiBjYWxsYmFjayhpdGUucHRyKCkpO1xuICAgICAgICBpdGUucHRyKCkuaW1nLnNyYyA9IGZpbGVOYW1lO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8g44OH44O844K/44Gu44Kq44Oz44Ot44O844OJ44KS44OI44Oq44Ks44O844Gr44GZ44KLXG4gICAgY29uc3QgaW1nID0gbmV3IEltYWdlKCk7XG4gICAgaW1nLm9ubG9hZCA9ICgpOiB2b2lkID0+IHtcbiAgICAgIC8vIOODhuOCr+OCueODgeODo+OCquODluOCuOOCp+OCr+ODiOOBruS9nOaIkFxuICAgICAgY29uc3QgdGV4OiBXZWJHTFRleHR1cmUgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XG5cbiAgICAgIC8vIOODhuOCr+OCueODgeODo+OCkumBuOaKnlxuICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGV4KTtcblxuICAgICAgLy8g44OG44Kv44K544OB44Oj44Gr44OU44Kv44K744Or44KS5pu444GN6L6844KAXG4gICAgICBnbC50ZXhQYXJhbWV0ZXJpKFxuICAgICAgICBnbC5URVhUVVJFXzJELFxuICAgICAgICBnbC5URVhUVVJFX01JTl9GSUxURVIsXG4gICAgICAgIGdsLkxJTkVBUl9NSVBNQVBfTElORUFSXG4gICAgICApO1xuICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01BR19GSUxURVIsIGdsLkxJTkVBUik7XG5cbiAgICAgIC8vIFByZW11bHTlh6bnkIbjgpLooYzjgo/jgZvjgotcbiAgICAgIGlmICh1c2VQcmVtdWx0aXBseSkge1xuICAgICAgICBnbC5waXhlbFN0b3JlaShnbC5VTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wsIDEpO1xuICAgICAgfVxuXG4gICAgICAvLyDjg4bjgq/jgrnjg4Hjg6Pjgavjg5Tjgq/jgrvjg6vjgpLmm7jjgY3ovrzjgoBcbiAgICAgIGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2wuUkdCQSwgZ2wuUkdCQSwgZ2wuVU5TSUdORURfQllURSwgaW1nKTtcblxuICAgICAgLy8g44Of44OD44OX44Oe44OD44OX44KS55Sf5oiQXG4gICAgICBnbC5nZW5lcmF0ZU1pcG1hcChnbC5URVhUVVJFXzJEKTtcblxuICAgICAgLy8g44OG44Kv44K544OB44Oj44KS44OQ44Kk44Oz44OJXG4gICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBudWxsKTtcblxuICAgICAgY29uc3QgdGV4dHVyZUluZm86IFRleHR1cmVJbmZvID0gbmV3IFRleHR1cmVJbmZvKCk7XG4gICAgICBpZiAodGV4dHVyZUluZm8gIT0gbnVsbCkge1xuICAgICAgICB0ZXh0dXJlSW5mby5maWxlTmFtZSA9IGZpbGVOYW1lO1xuICAgICAgICB0ZXh0dXJlSW5mby53aWR0aCA9IGltZy53aWR0aDtcbiAgICAgICAgdGV4dHVyZUluZm8uaGVpZ2h0ID0gaW1nLmhlaWdodDtcbiAgICAgICAgdGV4dHVyZUluZm8uaWQgPSB0ZXg7XG4gICAgICAgIHRleHR1cmVJbmZvLmltZyA9IGltZztcbiAgICAgICAgdGV4dHVyZUluZm8udXNlUHJlbXVsdHBseSA9IHVzZVByZW11bHRpcGx5O1xuICAgICAgICB0aGlzLl90ZXh0dXJlcy5wdXNoQmFjayh0ZXh0dXJlSW5mbyk7XG4gICAgICB9XG5cbiAgICAgIGNhbGxiYWNrKHRleHR1cmVJbmZvKTtcbiAgICB9O1xuICAgIGltZy5zcmMgPSBmaWxlTmFtZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDnlLvlg4/jga7op6PmlL5cbiAgICpcbiAgICog6YWN5YiX44Gr5a2Y5Zyo44GZ44KL55S75YOP5YWo44Gm44KS6Kej5pS+44GZ44KL44CCXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZVRleHR1cmVzKCk6IHZvaWQge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fdGV4dHVyZXMuZ2V0U2l6ZSgpOyBpKyspIHtcbiAgICAgIHRoaXMuX3RleHR1cmVzLnNldChpLCBudWxsKTtcbiAgICB9XG5cbiAgICB0aGlzLl90ZXh0dXJlcy5jbGVhcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOeUu+WDj+OBruino+aUvlxuICAgKlxuICAgKiDmjIflrprjgZfjgZ/jg4bjgq/jgrnjg4Hjg6Pjga7nlLvlg4/jgpLop6PmlL7jgZnjgovjgIJcbiAgICogQHBhcmFtIHRleHR1cmUg6Kej5pS+44GZ44KL44OG44Kv44K544OB44OjXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZVRleHR1cmVCeVRleHR1cmUodGV4dHVyZTogV2ViR0xUZXh0dXJlKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl90ZXh0dXJlcy5nZXRTaXplKCk7IGkrKykge1xuICAgICAgaWYgKHRoaXMuX3RleHR1cmVzLmF0KGkpLmlkICE9IHRleHR1cmUpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3RleHR1cmVzLnNldChpLCBudWxsKTtcbiAgICAgIHRoaXMuX3RleHR1cmVzLnJlbW92ZShpKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDnlLvlg4/jga7op6PmlL5cbiAgICpcbiAgICog5oyH5a6a44GX44Gf5ZCN5YmN44Gu55S75YOP44KS6Kej5pS+44GZ44KL44CCXG4gICAqIEBwYXJhbSBmaWxlTmFtZSDop6PmlL7jgZnjgovnlLvlg4/jg5XjgqHjgqTjg6vjg5HjgrnlkI1cbiAgICovXG4gIHB1YmxpYyByZWxlYXNlVGV4dHVyZUJ5RmlsZVBhdGgoZmlsZU5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fdGV4dHVyZXMuZ2V0U2l6ZSgpOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLl90ZXh0dXJlcy5hdChpKS5maWxlTmFtZSA9PSBmaWxlTmFtZSkge1xuICAgICAgICB0aGlzLl90ZXh0dXJlcy5zZXQoaSwgbnVsbCk7XG4gICAgICAgIHRoaXMuX3RleHR1cmVzLnJlbW92ZShpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX3RleHR1cmVzOiBjc21WZWN0b3I8VGV4dHVyZUluZm8+O1xufVxuXG4vKipcbiAqIOeUu+WDj+aDheWgseani+mAoOS9k1xuICovXG5leHBvcnQgY2xhc3MgVGV4dHVyZUluZm8ge1xuICBpbWc6IEhUTUxJbWFnZUVsZW1lbnQ7IC8vIOeUu+WDj1xuICBpZDogV2ViR0xUZXh0dXJlID0gbnVsbDsgLy8g44OG44Kv44K544OB44OjXG4gIHdpZHRoID0gMDsgLy8g5qiq5bmFXG4gIGhlaWdodCA9IDA7IC8vIOmrmOOBlVxuICB1c2VQcmVtdWx0cGx5OiBib29sZWFuOyAvLyBQcmVtdWx05Yem55CG44KS5pyJ5Yq544Gr44GZ44KL44GLXG4gIGZpbGVOYW1lOiBzdHJpbmc7IC8vIOODleOCoeOCpOODq+WQjVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQ3ViaXNtTWF0cml4NDQgfSBmcm9tICdAZnJhbWV3b3JrL21hdGgvY3ViaXNtbWF0cml4NDQnO1xuaW1wb3J0IHsgQ3ViaXNtVmlld01hdHJpeCB9IGZyb20gJ0BmcmFtZXdvcmsvbWF0aC9jdWJpc212aWV3bWF0cml4JztcblxuaW1wb3J0ICogYXMgTEFwcERlZmluZSBmcm9tICcuL2xhcHBkZWZpbmUnO1xuaW1wb3J0IHsgY2FudmFzLCBnbCwgTEFwcERlbGVnYXRlIH0gZnJvbSAnLi9sYXBwZGVsZWdhdGUnO1xuaW1wb3J0IHsgTEFwcExpdmUyRE1hbmFnZXIgfSBmcm9tICcuL2xhcHBsaXZlMmRtYW5hZ2VyJztcbmltcG9ydCB7IExBcHBQYWwgfSBmcm9tICcuL2xhcHBwYWwnO1xuaW1wb3J0IHsgTEFwcFNwcml0ZSB9IGZyb20gJy4vbGFwcHNwcml0ZSc7XG4vLyBpbXBvcnQgeyBUZXh0dXJlSW5mbyB9IGZyb20gJy4vbGFwcHRleHR1cmVtYW5hZ2VyJztcbmltcG9ydCB7IFRvdWNoTWFuYWdlciB9IGZyb20gJy4vdG91Y2htYW5hZ2VyJztcblxuLyoqXG4gKiDmj4/nlLvjgq/jg6njgrnjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIExBcHBWaWV3IHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fcHJvZ3JhbUlkID0gbnVsbDtcbiAgICB0aGlzLl9iYWNrID0gbnVsbDtcbiAgICB0aGlzLl9nZWFyID0gbnVsbDtcblxuICAgIC8vIOOCv+ODg+ODgemWouS/guOBruOCpOODmeODs+ODiOeuoeeQhlxuICAgIHRoaXMuX3RvdWNoTWFuYWdlciA9IG5ldyBUb3VjaE1hbmFnZXIoKTtcblxuICAgIC8vIOODh+ODkOOCpOOCueW6p+aomeOBi+OCieOCueOCr+ODquODvOODs+W6p+aomeOBq+WkieaPm+OBmeOCi+OBn+OCgeOBrlxuICAgIHRoaXMuX2RldmljZVRvU2NyZWVuID0gbmV3IEN1YmlzbU1hdHJpeDQ0KCk7XG5cbiAgICAvLyDnlLvpnaLjga7ooajnpLrjga7mi6HlpKfnuK7lsI/jgoTnp7vli5Xjga7lpInmj5vjgpLooYzjgYbooYzliJdcbiAgICB0aGlzLl92aWV3TWF0cml4ID0gbmV3IEN1YmlzbVZpZXdNYXRyaXgoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDliJ3mnJ/ljJbjgZnjgovjgIJcbiAgICovXG4gIHB1YmxpYyBpbml0aWFsaXplKCk6IHZvaWQge1xuICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gY2FudmFzO1xuXG4gICAgY29uc3QgcmF0aW86IG51bWJlciA9IHdpZHRoIC8gaGVpZ2h0O1xuICAgIGNvbnN0IGxlZnQ6IG51bWJlciA9IC1yYXRpbztcbiAgICBjb25zdCByaWdodDogbnVtYmVyID0gcmF0aW87XG4gICAgY29uc3QgYm90dG9tOiBudW1iZXIgPSBMQXBwRGVmaW5lLlZpZXdMb2dpY2FsTGVmdDtcbiAgICBjb25zdCB0b3A6IG51bWJlciA9IExBcHBEZWZpbmUuVmlld0xvZ2ljYWxSaWdodDtcblxuICAgIHRoaXMuX3ZpZXdNYXRyaXguc2V0U2NyZWVuUmVjdChsZWZ0LCByaWdodCwgYm90dG9tLCB0b3ApOyAvLyDjg4fjg5DjgqTjgrnjgavlr77lv5zjgZnjgovnlLvpnaLjga7nr4Tlm7LjgIIgWOOBruW3puerr+OAgVjjga7lj7Pnq6/jgIFZ44Gu5LiL56uv44CBWeOBruS4iuerr1xuICAgIHRoaXMuX3ZpZXdNYXRyaXguc2NhbGUoTEFwcERlZmluZS5WaWV3U2NhbGUsIExBcHBEZWZpbmUuVmlld1NjYWxlKTtcblxuICAgIHRoaXMuX2RldmljZVRvU2NyZWVuLmxvYWRJZGVudGl0eSgpO1xuICAgIGlmICh3aWR0aCA+IGhlaWdodCkge1xuICAgICAgY29uc3Qgc2NyZWVuVzogbnVtYmVyID0gTWF0aC5hYnMocmlnaHQgLSBsZWZ0KTtcbiAgICAgIHRoaXMuX2RldmljZVRvU2NyZWVuLnNjYWxlUmVsYXRpdmUoc2NyZWVuVyAvIHdpZHRoLCAtc2NyZWVuVyAvIHdpZHRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgc2NyZWVuSDogbnVtYmVyID0gTWF0aC5hYnModG9wIC0gYm90dG9tKTtcbiAgICAgIHRoaXMuX2RldmljZVRvU2NyZWVuLnNjYWxlUmVsYXRpdmUoc2NyZWVuSCAvIGhlaWdodCwgLXNjcmVlbkggLyBoZWlnaHQpO1xuICAgIH1cbiAgICB0aGlzLl9kZXZpY2VUb1NjcmVlbi50cmFuc2xhdGVSZWxhdGl2ZSgtd2lkdGggKiAwLjUsIC1oZWlnaHQgKiAwLjUpO1xuXG4gICAgLy8g6KGo56S656+E5Zuy44Gu6Kit5a6aXG4gICAgdGhpcy5fdmlld01hdHJpeC5zZXRNYXhTY2FsZShMQXBwRGVmaW5lLlZpZXdNYXhTY2FsZSk7IC8vIOmZkOeVjOaLoeW8teeOh1xuICAgIHRoaXMuX3ZpZXdNYXRyaXguc2V0TWluU2NhbGUoTEFwcERlZmluZS5WaWV3TWluU2NhbGUpOyAvLyDpmZDnlYznuK7lsI/njodcblxuICAgIC8vIOihqOekuuOBp+OBjeOCi+acgOWkp+evhOWbslxuICAgIHRoaXMuX3ZpZXdNYXRyaXguc2V0TWF4U2NyZWVuUmVjdChcbiAgICAgIExBcHBEZWZpbmUuVmlld0xvZ2ljYWxNYXhMZWZ0LFxuICAgICAgTEFwcERlZmluZS5WaWV3TG9naWNhbE1heFJpZ2h0LFxuICAgICAgTEFwcERlZmluZS5WaWV3TG9naWNhbE1heEJvdHRvbSxcbiAgICAgIExBcHBEZWZpbmUuVmlld0xvZ2ljYWxNYXhUb3BcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOino+aUvuOBmeOCi1xuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgdGhpcy5fdmlld01hdHJpeCA9IG51bGw7XG4gICAgdGhpcy5fdG91Y2hNYW5hZ2VyID0gbnVsbDtcbiAgICB0aGlzLl9kZXZpY2VUb1NjcmVlbiA9IG51bGw7XG5cbiAgICB0aGlzLl9nZWFyLnJlbGVhc2UoKTtcbiAgICB0aGlzLl9nZWFyID0gbnVsbDtcblxuICAgIHRoaXMuX2JhY2sucmVsZWFzZSgpO1xuICAgIHRoaXMuX2JhY2sgPSBudWxsO1xuXG4gICAgZ2wuZGVsZXRlUHJvZ3JhbSh0aGlzLl9wcm9ncmFtSWQpO1xuICAgIHRoaXMuX3Byb2dyYW1JZCA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICog5o+P55S744GZ44KL44CCXG4gICAqL1xuICBwdWJsaWMgcmVuZGVyKCk6IHZvaWQge1xuICAgIGdsLnVzZVByb2dyYW0odGhpcy5fcHJvZ3JhbUlkKTtcblxuICAgIGlmICh0aGlzLl9iYWNrKSB7XG4gICAgICB0aGlzLl9iYWNrLnJlbmRlcih0aGlzLl9wcm9ncmFtSWQpO1xuICAgIH1cbiAgICBpZiAodGhpcy5fZ2Vhcikge1xuICAgICAgdGhpcy5fZ2Vhci5yZW5kZXIodGhpcy5fcHJvZ3JhbUlkKTtcbiAgICB9XG5cbiAgICBnbC5mbHVzaCgpO1xuXG4gICAgY29uc3QgbGl2ZTJETWFuYWdlcjogTEFwcExpdmUyRE1hbmFnZXIgPSBMQXBwTGl2ZTJETWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuXG4gICAgbGl2ZTJETWFuYWdlci5zZXRWaWV3TWF0cml4KHRoaXMuX3ZpZXdNYXRyaXgpO1xuXG4gICAgbGl2ZTJETWFuYWdlci5vblVwZGF0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOeUu+WDj+OBruWIneacn+WMluOCkuihjOOBhuOAglxuICAgKi9cbiAgcHVibGljIGluaXRpYWxpemVTcHJpdGUoKTogdm9pZCB7XG4gICAgLy8gY29uc3Qgd2lkdGg6IG51bWJlciA9IGNhbnZhcy53aWR0aDtcbiAgICAvLyBjb25zdCBoZWlnaHQ6IG51bWJlciA9IGNhbnZhcy5oZWlnaHQ7XG5cbiAgICAvLyBjb25zdCB0ZXh0dXJlTWFuYWdlciA9IExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLmdldFRleHR1cmVNYW5hZ2VyKCk7XG4gICAgLy8gY29uc3QgcmVzb3VyY2VzUGF0aCA9IExBcHBEZWZpbmUuUmVzb3VyY2VzUGF0aDtcblxuICAgIC8vIGxldCBpbWFnZU5hbWUgPSAnJztcblxuICAgIC8vIOiDjOaZr+eUu+WDj+WIneacn+WMllxuICAgIC8vIGltYWdlTmFtZSA9IExBcHBEZWZpbmUuQmFja0ltYWdlTmFtZTtcblxuICAgIC8vIC8vIOmdnuWQjOacn+OBquOBruOBp+OCs+ODvOODq+ODkOODg+OCr+mWouaVsOOCkuS9nOaIkFxuICAgIC8vIGNvbnN0IGluaXRCYWNrR3JvdW5kVGV4dHVyZSA9ICh0ZXh0dXJlSW5mbzogVGV4dHVyZUluZm8pOiB2b2lkID0+IHtcbiAgICAvLyAgIGNvbnN0IHg6IG51bWJlciA9IHdpZHRoICogMC41O1xuICAgIC8vICAgY29uc3QgeTogbnVtYmVyID0gaGVpZ2h0ICogMC41O1xuXG4gICAgLy8gICBjb25zdCBmd2lkdGggPSB0ZXh0dXJlSW5mby53aWR0aCAqIDIuMDtcbiAgICAvLyAgIGNvbnN0IGZoZWlnaHQgPSBoZWlnaHQgKiAwLjk1O1xuICAgIC8vICAgdGhpcy5fYmFjayA9IG5ldyBMQXBwU3ByaXRlKHgsIHksIGZ3aWR0aCwgZmhlaWdodCwgdGV4dHVyZUluZm8uaWQpO1xuICAgIC8vIH07XG5cbiAgICAvLyB0ZXh0dXJlTWFuYWdlci5jcmVhdGVUZXh0dXJlRnJvbVBuZ0ZpbGUoXG4gICAgLy8gICByZXNvdXJjZXNQYXRoICsgaW1hZ2VOYW1lLFxuICAgIC8vICAgZmFsc2UsXG4gICAgLy8gICBpbml0QmFja0dyb3VuZFRleHR1cmVcbiAgICAvLyApO1xuXG4gICAgLy8gLy8g5q2v6LuK55S75YOP5Yid5pyf5YyWXG4gICAgLy8gaW1hZ2VOYW1lID0gTEFwcERlZmluZS5HZWFySW1hZ2VOYW1lO1xuICAgIC8vIGNvbnN0IGluaXRHZWFyVGV4dHVyZSA9ICh0ZXh0dXJlSW5mbzogVGV4dHVyZUluZm8pOiB2b2lkID0+IHtcbiAgICAvLyAgIGNvbnN0IHggPSB3aWR0aCAtIHRleHR1cmVJbmZvLndpZHRoICogMC41O1xuICAgIC8vICAgY29uc3QgeSA9IGhlaWdodCAtIHRleHR1cmVJbmZvLmhlaWdodCAqIDAuNTtcbiAgICAvLyAgIGNvbnN0IGZ3aWR0aCA9IHRleHR1cmVJbmZvLndpZHRoO1xuICAgIC8vICAgY29uc3QgZmhlaWdodCA9IHRleHR1cmVJbmZvLmhlaWdodDtcbiAgICAvLyAgIHRoaXMuX2dlYXIgPSBuZXcgTEFwcFNwcml0ZSh4LCB5LCBmd2lkdGgsIGZoZWlnaHQsIHRleHR1cmVJbmZvLmlkKTtcbiAgICAvLyB9O1xuXG4gICAgLy8gdGV4dHVyZU1hbmFnZXIuY3JlYXRlVGV4dHVyZUZyb21QbmdGaWxlKFxuICAgIC8vICAgcmVzb3VyY2VzUGF0aCArIGltYWdlTmFtZSxcbiAgICAvLyAgIGZhbHNlLFxuICAgIC8vICAgaW5pdEdlYXJUZXh0dXJlXG4gICAgLy8gKTtcblxuICAgIC8vIOOCt+OCp+ODvOODgOODvOOCkuS9nOaIkFxuICAgIC8vIGlmICh0aGlzLl9wcm9ncmFtSWQgPT0gbnVsbCkge1xuICAgIC8vICAgdGhpcy5fcHJvZ3JhbUlkID0gTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuY3JlYXRlU2hhZGVyKCk7XG4gICAgLy8gfVxuICB9XG5cbiAgLyoqXG4gICAqIOOCv+ODg+ODgeOBleOCjOOBn+aZguOBq+WRvOOBsOOCjOOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gcG9pbnRYIOOCueOCr+ODquODvOODs1jluqfmqJlcbiAgICogQHBhcmFtIHBvaW50WSDjgrnjgq/jg6rjg7zjg7NZ5bqn5qiZXG4gICAqL1xuICBwdWJsaWMgb25Ub3VjaGVzQmVnYW4ocG9pbnRYOiBudW1iZXIsIHBvaW50WTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fdG91Y2hNYW5hZ2VyLnRvdWNoZXNCZWdhbihwb2ludFgsIHBvaW50WSk7XG4gIH1cblxuICAvKipcbiAgICog44K/44OD44OB44GX44Gm44GE44KL44Go44GN44Gr44Od44Kk44Oz44K/44GM5YuV44GE44Gf44KJ5ZG844Gw44KM44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSBwb2ludFgg44K544Kv44Oq44O844OzWOW6p+aomVxuICAgKiBAcGFyYW0gcG9pbnRZIOOCueOCr+ODquODvOODs1nluqfmqJlcbiAgICovXG4gIHB1YmxpYyBvblRvdWNoZXNNb3ZlZChwb2ludFg6IG51bWJlciwgcG9pbnRZOiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCB2aWV3WDogbnVtYmVyID0gdGhpcy50cmFuc2Zvcm1WaWV3WCh0aGlzLl90b3VjaE1hbmFnZXIuZ2V0WCgpKTtcbiAgICBjb25zdCB2aWV3WTogbnVtYmVyID0gdGhpcy50cmFuc2Zvcm1WaWV3WSh0aGlzLl90b3VjaE1hbmFnZXIuZ2V0WSgpKTtcblxuICAgIHRoaXMuX3RvdWNoTWFuYWdlci50b3VjaGVzTW92ZWQocG9pbnRYLCBwb2ludFkpO1xuXG4gICAgY29uc3QgbGl2ZTJETWFuYWdlcjogTEFwcExpdmUyRE1hbmFnZXIgPSBMQXBwTGl2ZTJETWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuICAgIGxpdmUyRE1hbmFnZXIub25EcmFnKHZpZXdYLCB2aWV3WSk7XG4gIH1cblxuICAvKipcbiAgICog44K/44OD44OB44GM57WC5LqG44GX44Gf44KJ5ZG844Gw44KM44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSBwb2ludFgg44K544Kv44Oq44O844OzWOW6p+aomVxuICAgKiBAcGFyYW0gcG9pbnRZIOOCueOCr+ODquODvOODs1nluqfmqJlcbiAgICovXG4gIHB1YmxpYyBvblRvdWNoZXNFbmRlZChwb2ludFg6IG51bWJlciwgcG9pbnRZOiBudW1iZXIpOiB2b2lkIHtcbiAgICAvLyDjgr/jg4Pjg4HntYLkuoZcbiAgICBjb25zdCBsaXZlMkRNYW5hZ2VyOiBMQXBwTGl2ZTJETWFuYWdlciA9IExBcHBMaXZlMkRNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG4gICAgbGl2ZTJETWFuYWdlci5vbkRyYWcoMC4wLCAwLjApO1xuXG4gICAge1xuICAgICAgLy8g44K344Oz44Kw44Or44K/44OD44OXXG4gICAgICBjb25zdCB4OiBudW1iZXIgPSB0aGlzLl9kZXZpY2VUb1NjcmVlbi50cmFuc2Zvcm1YKFxuICAgICAgICB0aGlzLl90b3VjaE1hbmFnZXIuZ2V0WCgpXG4gICAgICApOyAvLyDoq5bnkIbluqfmqJnlpInmj5vjgZfjgZ/luqfmqJnjgpLlj5blvpfjgIJcbiAgICAgIGNvbnN0IHk6IG51bWJlciA9IHRoaXMuX2RldmljZVRvU2NyZWVuLnRyYW5zZm9ybVkoXG4gICAgICAgIHRoaXMuX3RvdWNoTWFuYWdlci5nZXRZKClcbiAgICAgICk7IC8vIOirlueQhuW6p+aomeWkieWMluOBl+OBn+W6p+aomeOCkuWPluW+l+OAglxuXG4gICAgICBpZiAoTEFwcERlZmluZS5EZWJ1Z1RvdWNoTG9nRW5hYmxlKSB7XG4gICAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKGBbQVBQXXRvdWNoZXNFbmRlZCB4OiAke3h9IHk6ICR7eX1gKTtcbiAgICAgIH1cbiAgICAgIGxpdmUyRE1hbmFnZXIub25UYXAoeCwgeSk7XG5cbiAgICAgIC8vIOatr+i7iuOBq+OCv+ODg+ODl+OBl+OBn+OBi1xuICAgICAgLy8gaWYgKHRoaXMuX2dlYXIuaXNIaXQocG9pbnRYLCBwb2ludFkpKSB7XG4gICAgICAvLyAgIGxpdmUyRE1hbmFnZXIubmV4dFNjZW5lKCk7XG4gICAgICAvLyB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFjluqfmqJnjgpJWaWV35bqn5qiZ44Gr5aSJ5o+b44GZ44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSBkZXZpY2VYIOODh+ODkOOCpOOCuVjluqfmqJlcbiAgICovXG4gIHB1YmxpYyB0cmFuc2Zvcm1WaWV3WChkZXZpY2VYOiBudW1iZXIpOiBudW1iZXIge1xuICAgIGNvbnN0IHNjcmVlblg6IG51bWJlciA9IHRoaXMuX2RldmljZVRvU2NyZWVuLnRyYW5zZm9ybVgoZGV2aWNlWCk7IC8vIOirlueQhuW6p+aomeWkieaPm+OBl+OBn+W6p+aomeOCkuWPluW+l+OAglxuICAgIHJldHVybiB0aGlzLl92aWV3TWF0cml4LmludmVydFRyYW5zZm9ybVgoc2NyZWVuWCk7IC8vIOaLoeWkp+OAgee4ruWwj+OAgeenu+WLleW+jOOBruWApOOAglxuICB9XG5cbiAgLyoqXG4gICAqIFnluqfmqJnjgpJWaWV35bqn5qiZ44Gr5aSJ5o+b44GZ44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSBkZXZpY2VZIOODh+ODkOOCpOOCuVnluqfmqJlcbiAgICovXG4gIHB1YmxpYyB0cmFuc2Zvcm1WaWV3WShkZXZpY2VZOiBudW1iZXIpOiBudW1iZXIge1xuICAgIGNvbnN0IHNjcmVlblk6IG51bWJlciA9IHRoaXMuX2RldmljZVRvU2NyZWVuLnRyYW5zZm9ybVkoZGV2aWNlWSk7IC8vIOirlueQhuW6p+aomeWkieaPm+OBl+OBn+W6p+aomeOCkuWPluW+l+OAglxuICAgIHJldHVybiB0aGlzLl92aWV3TWF0cml4LmludmVydFRyYW5zZm9ybVkoc2NyZWVuWSk7XG4gIH1cblxuICAvKipcbiAgICogWOW6p+aomeOCklNjcmVlbuW6p+aomeOBq+WkieaPm+OBmeOCi+OAglxuICAgKiBAcGFyYW0gZGV2aWNlWCDjg4fjg5DjgqTjgrlY5bqn5qiZXG4gICAqL1xuICBwdWJsaWMgdHJhbnNmb3JtU2NyZWVuWChkZXZpY2VYOiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9kZXZpY2VUb1NjcmVlbi50cmFuc2Zvcm1YKGRldmljZVgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFnluqfmqJnjgpJTY3JlZW7luqfmqJnjgavlpInmj5vjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtIGRldmljZVkg44OH44OQ44Kk44K5WeW6p+aomVxuICAgKi9cbiAgcHVibGljIHRyYW5zZm9ybVNjcmVlblkoZGV2aWNlWTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fZGV2aWNlVG9TY3JlZW4udHJhbnNmb3JtWShkZXZpY2VZKTtcbiAgfVxuXG4gIF90b3VjaE1hbmFnZXI6IFRvdWNoTWFuYWdlcjsgLy8g44K/44OD44OB44Oe44ON44O844K444Oj44O8XG4gIF9kZXZpY2VUb1NjcmVlbjogQ3ViaXNtTWF0cml4NDQ7IC8vIOODh+ODkOOCpOOCueOBi+OCieOCueOCr+ODquODvOODs+OBuOOBruihjOWIl1xuICBfdmlld01hdHJpeDogQ3ViaXNtVmlld01hdHJpeDsgLy8gdmlld01hdHJpeFxuICBfcHJvZ3JhbUlkOiBXZWJHTFByb2dyYW07IC8vIOOCt+OCp+ODvOODgElEXG4gIF9iYWNrOiBMQXBwU3ByaXRlOyAvLyDog4zmma/nlLvlg49cbiAgX2dlYXI6IExBcHBTcHJpdGU7IC8vIOOCruOCoueUu+WDj1xuICBfY2hhbmdlTW9kZWw6IGJvb2xlYW47IC8vIOODouODh+ODq+WIh+OCiuabv+OBiOODleODqeOCsFxuICBfaXNDbGljazogYm9vbGVhbjsgLy8g44Kv44Oq44OD44Kv5LitXG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBMQXBwUGFsIH0gZnJvbSAnLi9sYXBwcGFsJztcblxuZXhwb3J0IGxldCBzX2luc3RhbmNlOiBMQXBwV2F2RmlsZUhhbmRsZXIgPSBudWxsO1xuXG5leHBvcnQgY2xhc3MgTEFwcFdhdkZpbGVIYW5kbGVyIHtcbiAgLyoqXG4gICAqIOOCr+ODqeOCueOBruOCpOODs+OCueOCv+ODs+OCue+8iOOCt+ODs+OCsOODq+ODiOODs++8ieOCkui/lOOBmeOAglxuICAgKiDjgqTjg7Pjgrnjgr/jg7PjgrnjgYznlJ/miJDjgZXjgozjgabjgYTjgarjgYTloLTlkIjjga/lhoXpg6jjgafjgqTjg7Pjgrnjgr/jg7PjgrnjgpLnlJ/miJDjgZnjgovjgIJcbiAgICpcbiAgICogQHJldHVybiDjgq/jg6njgrnjga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2UoKTogTEFwcFdhdkZpbGVIYW5kbGVyIHtcbiAgICBpZiAoc19pbnN0YW5jZSA9PSBudWxsKSB7XG4gICAgICBzX2luc3RhbmNlID0gbmV3IExBcHBXYXZGaWxlSGFuZGxlcigpO1xuICAgIH1cblxuICAgIHJldHVybiBzX2luc3RhbmNlO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCr+ODqeOCueOBruOCpOODs+OCueOCv+ODs+OCue+8iOOCt+ODs+OCsOODq+ODiOODs++8ieOCkuino+aUvuOBmeOCi+OAglxuICAgKi9cbiAgcHVibGljIHN0YXRpYyByZWxlYXNlSW5zdGFuY2UoKTogdm9pZCB7XG4gICAgaWYgKHNfaW5zdGFuY2UgIT0gbnVsbCkge1xuICAgICAgc19pbnN0YW5jZSA9IHZvaWQgMDtcbiAgICB9XG5cbiAgICBzX2luc3RhbmNlID0gbnVsbDtcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGUoZGVsdGFUaW1lU2Vjb25kczogbnVtYmVyKSB7XG4gICAgbGV0IGdvYWxPZmZzZXQ6IG51bWJlcjtcbiAgICBsZXQgcm1zOiBudW1iZXI7XG5cbiAgICAvLyDjg4fjg7zjgr/jg63jg7zjg4nliY0v44OV44Kh44Kk44Or5pyr5bC+44Gr6YGU44GX44Gf5aC05ZCI44Gv5pu05paw44GX44Gq44GEXG4gICAgaWYgKFxuICAgICAgdGhpcy5fcGNtRGF0YSA9PSBudWxsIHx8XG4gICAgICB0aGlzLl9zYW1wbGVPZmZzZXQgPj0gdGhpcy5fd2F2RmlsZUluZm8uX3NhbXBsZXNQZXJDaGFubmVsXG4gICAgKSB7XG4gICAgICB0aGlzLl9sYXN0Um1zID0gMC4wO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIOe1jOmBjuaZgumWk+W+jOOBrueKtuaFi+OCkuS/neaMgVxuICAgIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyArPSBkZWx0YVRpbWVTZWNvbmRzO1xuICAgIGdvYWxPZmZzZXQgPSBNYXRoLmZsb29yKFxuICAgICAgdGhpcy5fdXNlclRpbWVTZWNvbmRzICogdGhpcy5fd2F2RmlsZUluZm8uX3NhbXBsaW5nUmF0ZVxuICAgICk7XG4gICAgaWYgKGdvYWxPZmZzZXQgPiB0aGlzLl93YXZGaWxlSW5mby5fc2FtcGxlc1BlckNoYW5uZWwpIHtcbiAgICAgIGdvYWxPZmZzZXQgPSB0aGlzLl93YXZGaWxlSW5mby5fc2FtcGxlc1BlckNoYW5uZWw7XG4gICAgfVxuXG4gICAgLy8gUk1T6KiI5risXG4gICAgcm1zID0gMC4wO1xuICAgIGZvciAoXG4gICAgICBsZXQgY2hhbm5lbENvdW50ID0gMDtcbiAgICAgIGNoYW5uZWxDb3VudCA8IHRoaXMuX3dhdkZpbGVJbmZvLl9udW1iZXJPZkNoYW5uZWxzO1xuICAgICAgY2hhbm5lbENvdW50KytcbiAgICApIHtcbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBzYW1wbGVDb3VudCA9IHRoaXMuX3NhbXBsZU9mZnNldDtcbiAgICAgICAgc2FtcGxlQ291bnQgPCBnb2FsT2Zmc2V0O1xuICAgICAgICBzYW1wbGVDb3VudCsrXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgcGNtID0gdGhpcy5fcGNtRGF0YVtjaGFubmVsQ291bnRdW3NhbXBsZUNvdW50XTtcbiAgICAgICAgcm1zICs9IHBjbSAqIHBjbTtcbiAgICAgIH1cbiAgICB9XG4gICAgcm1zID0gTWF0aC5zcXJ0KFxuICAgICAgcm1zIC9cbiAgICAgICAgKHRoaXMuX3dhdkZpbGVJbmZvLl9udW1iZXJPZkNoYW5uZWxzICpcbiAgICAgICAgICAoZ29hbE9mZnNldCAtIHRoaXMuX3NhbXBsZU9mZnNldCkpXG4gICAgKTtcblxuICAgIHRoaXMuX2xhc3RSbXMgPSBybXM7XG4gICAgdGhpcy5fc2FtcGxlT2Zmc2V0ID0gZ29hbE9mZnNldDtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHB1YmxpYyBzdGFydChmaWxlUGF0aDogc3RyaW5nKTogdm9pZCB7XG4gICAgLy8g44K144Oz44OX44Or5L2N5Y+C54Wn5L2N572u44KS5Yid5pyf5YyWXG4gICAgdGhpcy5fc2FtcGxlT2Zmc2V0ID0gMDtcbiAgICB0aGlzLl91c2VyVGltZVNlY29uZHMgPSAwLjA7XG5cbiAgICAvLyBSTVPlgKTjgpLjg6rjgrvjg4Pjg4hcbiAgICB0aGlzLl9sYXN0Um1zID0gMC4wO1xuXG4gICAgaWYgKCF0aGlzLmxvYWRXYXZGaWxlKGZpbGVQYXRoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBnZXRSbXMoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbGFzdFJtcztcbiAgfVxuXG4gIHB1YmxpYyBsb2FkV2F2RmlsZShmaWxlUGF0aDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgbGV0IHJldCA9IGZhbHNlO1xuXG4gICAgaWYgKHRoaXMuX3BjbURhdGEgIT0gbnVsbCkge1xuICAgICAgdGhpcy5yZWxlYXNlUGNtRGF0YSgpO1xuICAgIH1cblxuICAgIC8vIOODleOCoeOCpOODq+ODreODvOODiVxuICAgIGNvbnN0IGFzeW5jRmlsZUxvYWQgPSBhc3luYyAoKSA9PiB7XG4gICAgICByZXR1cm4gZmV0Y2goZmlsZVBhdGgpLnRoZW4ocmVzcG9uY2UgPT4ge1xuICAgICAgICByZXR1cm4gcmVzcG9uY2UuYXJyYXlCdWZmZXIoKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCBhc3luY1dhdkZpbGVNYW5hZ2VyID0gKGFzeW5jICgpID0+IHtcbiAgICAgIHRoaXMuX2J5dGVSZWFkZXIuX2ZpbGVCeXRlID0gYXdhaXQgYXN5bmNGaWxlTG9hZCgpO1xuICAgICAgdGhpcy5fYnl0ZVJlYWRlci5fZmlsZURhdGFWaWV3ID0gbmV3IERhdGFWaWV3KHRoaXMuX2J5dGVSZWFkZXIuX2ZpbGVCeXRlKTtcbiAgICAgIHRoaXMuX2J5dGVSZWFkZXIuX2ZpbGVTaXplID0gdGhpcy5fYnl0ZVJlYWRlci5fZmlsZUJ5dGUuYnl0ZUxlbmd0aDtcbiAgICAgIHRoaXMuX2J5dGVSZWFkZXIuX3JlYWRPZmZzZXQgPSAwO1xuXG4gICAgICAvLyDjg5XjgqHjgqTjg6vjg63jg7zjg4njgavlpLHmlZfjgZfjgabjgYTjgovjgYvjgIHlhYjpoK3jga7jgrfjgrDjg43jg4Hjg6NcIlJJRkZcIuOCkuWFpeOCjOOCi+OCteOCpOOCuuOCguOBquOBhOWgtOWQiOOBr+WkseaVl1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLl9ieXRlUmVhZGVyLl9maWxlQnl0ZSA9PSBudWxsIHx8XG4gICAgICAgIHRoaXMuX2J5dGVSZWFkZXIuX2ZpbGVTaXplIDwgNFxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLy8g44OV44Kh44Kk44Or5ZCNXG4gICAgICB0aGlzLl93YXZGaWxlSW5mby5fZmlsZU5hbWUgPSBmaWxlUGF0aDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8g44K344Kw44ON44OB44OjIFwiUklGRlwiXG4gICAgICAgIGlmICghdGhpcy5fYnl0ZVJlYWRlci5nZXRDaGVja1NpZ25hdHVyZSgnUklGRicpKSB7XG4gICAgICAgICAgcmV0ID0gZmFsc2U7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZmluZCBTaWduZXR1cmUgXCJSSUZGXCIuJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8g44OV44Kh44Kk44Or44K144Kk44K6LTjvvIjoqq3jgb/po5vjgbDjgZfvvIlcbiAgICAgICAgdGhpcy5fYnl0ZVJlYWRlci5nZXQzMkxpdHRsZUVuZGlhbigpO1xuICAgICAgICAvLyDjgrfjgrDjg43jg4Hjg6MgXCJXQVZFXCJcbiAgICAgICAgaWYgKCF0aGlzLl9ieXRlUmVhZGVyLmdldENoZWNrU2lnbmF0dXJlKCdXQVZFJykpIHtcbiAgICAgICAgICByZXQgPSBmYWxzZTtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBmaW5kIFNpZ25ldHVyZSBcIldBVkVcIi4nKTtcbiAgICAgICAgfVxuICAgICAgICAvLyDjgrfjgrDjg43jg4Hjg6MgXCJmbXQgXCJcbiAgICAgICAgaWYgKCF0aGlzLl9ieXRlUmVhZGVyLmdldENoZWNrU2lnbmF0dXJlKCdmbXQgJykpIHtcbiAgICAgICAgICByZXQgPSBmYWxzZTtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBmaW5kIFNpZ25ldHVyZSBcImZtdFwiLicpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGZtdOODgeODo+ODs+OCr+OCteOCpOOCulxuICAgICAgICBjb25zdCBmbXRDaHVua1NpemUgPSB0aGlzLl9ieXRlUmVhZGVyLmdldDMyTGl0dGxlRW5kaWFuKCk7XG4gICAgICAgIC8vIOODleOCqeODvOODnuODg+ODiElE44GvMe+8iOODquODi+OColBDTe+8ieS7peWkluWPl+OBkeS7mOOBkeOBquOBhFxuICAgICAgICBpZiAodGhpcy5fYnl0ZVJlYWRlci5nZXQxNkxpdHRsZUVuZGlhbigpICE9IDEpIHtcbiAgICAgICAgICByZXQgPSBmYWxzZTtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZpbGUgaXMgbm90IGxpbmVhciBQQ00uJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8g44OB44Oj44Oz44ON44Or5pWwXG4gICAgICAgIHRoaXMuX3dhdkZpbGVJbmZvLl9udW1iZXJPZkNoYW5uZWxzID1cbiAgICAgICAgICB0aGlzLl9ieXRlUmVhZGVyLmdldDE2TGl0dGxlRW5kaWFuKCk7XG4gICAgICAgIC8vIOOCteODs+ODl+ODquODs+OCsOODrOODvOODiFxuICAgICAgICB0aGlzLl93YXZGaWxlSW5mby5fc2FtcGxpbmdSYXRlID0gdGhpcy5fYnl0ZVJlYWRlci5nZXQzMkxpdHRsZUVuZGlhbigpO1xuICAgICAgICAvLyDjg4fjg7zjgr/pgJ/luqZbYnl0ZS9zZWNd77yI6Kqt44G/6aOb44Gw44GX77yJXG4gICAgICAgIHRoaXMuX2J5dGVSZWFkZXIuZ2V0MzJMaXR0bGVFbmRpYW4oKTtcbiAgICAgICAgLy8g44OW44Ot44OD44Kv44K144Kk44K677yI6Kqt44G/6aOb44Gw44GX77yJXG4gICAgICAgIHRoaXMuX2J5dGVSZWFkZXIuZ2V0MTZMaXR0bGVFbmRpYW4oKTtcbiAgICAgICAgLy8g6YeP5a2Q5YyW44OT44OD44OI5pWwXG4gICAgICAgIHRoaXMuX3dhdkZpbGVJbmZvLl9iaXRzUGVyU2FtcGxlID0gdGhpcy5fYnl0ZVJlYWRlci5nZXQxNkxpdHRsZUVuZGlhbigpO1xuICAgICAgICAvLyBmbXTjg4Hjg6Pjg7Pjgq/jga7mi6HlvLXpg6jliIbjga7oqq3jgb/po5vjgbDjgZdcbiAgICAgICAgaWYgKGZtdENodW5rU2l6ZSA+IDE2KSB7XG4gICAgICAgICAgdGhpcy5fYnl0ZVJlYWRlci5fcmVhZE9mZnNldCArPSBmbXRDaHVua1NpemUgLSAxNjtcbiAgICAgICAgfVxuICAgICAgICAvLyBcImRhdGFcIuODgeODo+ODs+OCr+OBjOWHuuePvuOBmeOCi+OBvuOBp+iqreOBv+mjm+OBsOOBl1xuICAgICAgICB3aGlsZSAoXG4gICAgICAgICAgIXRoaXMuX2J5dGVSZWFkZXIuZ2V0Q2hlY2tTaWduYXR1cmUoJ2RhdGEnKSAmJlxuICAgICAgICAgIHRoaXMuX2J5dGVSZWFkZXIuX3JlYWRPZmZzZXQgPCB0aGlzLl9ieXRlUmVhZGVyLl9maWxlU2l6ZVxuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLl9ieXRlUmVhZGVyLl9yZWFkT2Zmc2V0ICs9XG4gICAgICAgICAgICB0aGlzLl9ieXRlUmVhZGVyLmdldDMyTGl0dGxlRW5kaWFuKCkgKyA0O1xuICAgICAgICB9XG4gICAgICAgIC8vIOODleOCoeOCpOODq+WGheOBq1wiZGF0YVwi44OB44Oj44Oz44Kv44GM5Ye654++44GX44Gq44GL44Gj44GfXG4gICAgICAgIGlmICh0aGlzLl9ieXRlUmVhZGVyLl9yZWFkT2Zmc2V0ID49IHRoaXMuX2J5dGVSZWFkZXIuX2ZpbGVTaXplKSB7XG4gICAgICAgICAgcmV0ID0gZmFsc2U7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZmluZCBcImRhdGFcIiBDaHVuay4nKTtcbiAgICAgICAgfVxuICAgICAgICAvLyDjgrXjg7Pjg5fjg6vmlbBcbiAgICAgICAge1xuICAgICAgICAgIGNvbnN0IGRhdGFDaHVua1NpemUgPSB0aGlzLl9ieXRlUmVhZGVyLmdldDMyTGl0dGxlRW5kaWFuKCk7XG4gICAgICAgICAgdGhpcy5fd2F2RmlsZUluZm8uX3NhbXBsZXNQZXJDaGFubmVsID1cbiAgICAgICAgICAgIChkYXRhQ2h1bmtTaXplICogOCkgL1xuICAgICAgICAgICAgKHRoaXMuX3dhdkZpbGVJbmZvLl9iaXRzUGVyU2FtcGxlICpcbiAgICAgICAgICAgICAgdGhpcy5fd2F2RmlsZUluZm8uX251bWJlck9mQ2hhbm5lbHMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIOmgmOWfn+eiuuS/nVxuICAgICAgICB0aGlzLl9wY21EYXRhID0gbmV3IEFycmF5KHRoaXMuX3dhdkZpbGVJbmZvLl9udW1iZXJPZkNoYW5uZWxzKTtcbiAgICAgICAgZm9yIChcbiAgICAgICAgICBsZXQgY2hhbm5lbENvdW50ID0gMDtcbiAgICAgICAgICBjaGFubmVsQ291bnQgPCB0aGlzLl93YXZGaWxlSW5mby5fbnVtYmVyT2ZDaGFubmVscztcbiAgICAgICAgICBjaGFubmVsQ291bnQrK1xuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLl9wY21EYXRhW2NoYW5uZWxDb3VudF0gPSBuZXcgRmxvYXQzMkFycmF5KFxuICAgICAgICAgICAgdGhpcy5fd2F2RmlsZUluZm8uX3NhbXBsZXNQZXJDaGFubmVsXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICAvLyDms6LlvaLjg4fjg7zjgr/lj5blvpdcbiAgICAgICAgZm9yIChcbiAgICAgICAgICBsZXQgc2FtcGxlQ291bnQgPSAwO1xuICAgICAgICAgIHNhbXBsZUNvdW50IDwgdGhpcy5fd2F2RmlsZUluZm8uX3NhbXBsZXNQZXJDaGFubmVsO1xuICAgICAgICAgIHNhbXBsZUNvdW50KytcbiAgICAgICAgKSB7XG4gICAgICAgICAgZm9yIChcbiAgICAgICAgICAgIGxldCBjaGFubmVsQ291bnQgPSAwO1xuICAgICAgICAgICAgY2hhbm5lbENvdW50IDwgdGhpcy5fd2F2RmlsZUluZm8uX251bWJlck9mQ2hhbm5lbHM7XG4gICAgICAgICAgICBjaGFubmVsQ291bnQrK1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5fcGNtRGF0YVtjaGFubmVsQ291bnRdW3NhbXBsZUNvdW50XSA9IHRoaXMuZ2V0UGNtU2FtcGxlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0ID0gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS5sb2coZSk7XG4gICAgICB9XG4gICAgfSkoKTtcblxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICBwdWJsaWMgZ2V0UGNtU2FtcGxlKCk6IG51bWJlciB7XG4gICAgbGV0IHBjbTMyO1xuXG4gICAgLy8gMzLjg5Pjg4Pjg4jluYXjgavmi6HlvLXjgZfjgabjgYvjgoktMe+9njHjga7nr4Tlm7LjgavkuLjjgoHjgotcbiAgICBzd2l0Y2ggKHRoaXMuX3dhdkZpbGVJbmZvLl9iaXRzUGVyU2FtcGxlKSB7XG4gICAgICBjYXNlIDg6XG4gICAgICAgIHBjbTMyID0gdGhpcy5fYnl0ZVJlYWRlci5nZXQ4KCkgLSAxMjg7XG4gICAgICAgIHBjbTMyIDw8PSAyNDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDE2OlxuICAgICAgICBwY20zMiA9IHRoaXMuX2J5dGVSZWFkZXIuZ2V0MTZMaXR0bGVFbmRpYW4oKSA8PCAxNjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI0OlxuICAgICAgICBwY20zMiA9IHRoaXMuX2J5dGVSZWFkZXIuZ2V0MjRMaXR0bGVFbmRpYW4oKSA8PCA4O1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIC8vIOWvvuW/nOOBl+OBpuOBhOOBquOBhOODk+ODg+ODiOW5hVxuICAgICAgICBwY20zMiA9IDA7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiBwY20zMiAvIDIxNDc0ODM2NDc7IC8vTnVtYmVyLk1BWF9WQUxVRTtcbiAgfVxuXG4gIHB1YmxpYyByZWxlYXNlUGNtRGF0YSgpOiB2b2lkIHtcbiAgICBmb3IgKFxuICAgICAgbGV0IGNoYW5uZWxDb3VudCA9IDA7XG4gICAgICBjaGFubmVsQ291bnQgPCB0aGlzLl93YXZGaWxlSW5mby5fbnVtYmVyT2ZDaGFubmVscztcbiAgICAgIGNoYW5uZWxDb3VudCsrXG4gICAgKSB7XG4gICAgICBkZWxldGUgdGhpcy5fcGNtRGF0YVtjaGFubmVsQ291bnRdO1xuICAgIH1cbiAgICBkZWxldGUgdGhpcy5fcGNtRGF0YTtcbiAgICB0aGlzLl9wY21EYXRhID0gbnVsbDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3BjbURhdGEgPSBudWxsO1xuICAgIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyA9IDAuMDtcbiAgICB0aGlzLl9sYXN0Um1zID0gMC4wO1xuICAgIHRoaXMuX3NhbXBsZU9mZnNldCA9IDAuMDtcbiAgICB0aGlzLl93YXZGaWxlSW5mbyA9IG5ldyBXYXZGaWxlSW5mbygpO1xuICAgIHRoaXMuX2J5dGVSZWFkZXIgPSBuZXcgQnl0ZVJlYWRlcigpO1xuICB9XG5cbiAgX3BjbURhdGE6IEFycmF5PEZsb2F0MzJBcnJheT47XG4gIF91c2VyVGltZVNlY29uZHM6IG51bWJlcjtcbiAgX2xhc3RSbXM6IG51bWJlcjtcbiAgX3NhbXBsZU9mZnNldDogbnVtYmVyO1xuICBfd2F2RmlsZUluZm86IFdhdkZpbGVJbmZvO1xuICBfYnl0ZVJlYWRlcjogQnl0ZVJlYWRlcjtcbiAgX2xvYWRGaWxldG9CeXRlcyA9IChhcnJheUJ1ZmZlcjogQXJyYXlCdWZmZXIsIGxlbmd0aDogbnVtYmVyKTogdm9pZCA9PiB7XG4gICAgdGhpcy5fYnl0ZVJlYWRlci5fZmlsZUJ5dGUgPSBhcnJheUJ1ZmZlcjtcbiAgICB0aGlzLl9ieXRlUmVhZGVyLl9maWxlRGF0YVZpZXcgPSBuZXcgRGF0YVZpZXcodGhpcy5fYnl0ZVJlYWRlci5fZmlsZUJ5dGUpO1xuICAgIHRoaXMuX2J5dGVSZWFkZXIuX2ZpbGVTaXplID0gbGVuZ3RoO1xuICB9O1xufVxuXG5leHBvcnQgY2xhc3MgV2F2RmlsZUluZm8ge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9maWxlTmFtZSA9ICcnO1xuICAgIHRoaXMuX251bWJlck9mQ2hhbm5lbHMgPSAwO1xuICAgIHRoaXMuX2JpdHNQZXJTYW1wbGUgPSAwO1xuICAgIHRoaXMuX3NhbXBsaW5nUmF0ZSA9IDA7XG4gICAgdGhpcy5fc2FtcGxlc1BlckNoYW5uZWwgPSAwO1xuICB9XG5cbiAgX2ZpbGVOYW1lOiBzdHJpbmc7IC8vLzwg44OV44Kh44Kk44Or5ZCNXG4gIF9udW1iZXJPZkNoYW5uZWxzOiBudW1iZXI7IC8vLzwg44OB44Oj44Oz44ON44Or5pWwXG4gIF9iaXRzUGVyU2FtcGxlOiBudW1iZXI7IC8vLzwg44K144Oz44OX44Or44GC44Gf44KK44OT44OD44OI5pWwXG4gIF9zYW1wbGluZ1JhdGU6IG51bWJlcjsgLy8vPCDjgrXjg7Pjg5fjg6rjg7PjgrDjg6zjg7zjg4hcbiAgX3NhbXBsZXNQZXJDaGFubmVsOiBudW1iZXI7IC8vLzwgMeODgeODo+ODs+ODjeODq+OBguOBn+OCiue3j+OCteODs+ODl+ODq+aVsFxufVxuXG5leHBvcnQgY2xhc3MgQnl0ZVJlYWRlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2ZpbGVCeXRlID0gbnVsbDtcbiAgICB0aGlzLl9maWxlRGF0YVZpZXcgPSBudWxsO1xuICAgIHRoaXMuX2ZpbGVTaXplID0gMDtcbiAgICB0aGlzLl9yZWFkT2Zmc2V0ID0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAYnJpZWYgOOODk+ODg+ODiOiqreOBv+i+vOOBv1xuICAgKiBAcmV0dXJuIENzbTo6Y3NtVWludDgg6Kqt44G/5Y+W44Gj44GfOOODk+ODg+ODiOWApFxuICAgKi9cbiAgcHVibGljIGdldDgoKTogbnVtYmVyIHtcbiAgICBjb25zdCByZXQgPSB0aGlzLl9maWxlRGF0YVZpZXcuZ2V0VWludDgodGhpcy5fcmVhZE9mZnNldCk7XG4gICAgdGhpcy5fcmVhZE9mZnNldCsrO1xuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICogQGJyaWVmIDE244OT44OD44OI6Kqt44G/6L6844G/77yI44Oq44OI44Or44Ko44Oz44OH44Kj44Ki44Oz77yJXG4gICAqIEByZXR1cm4gQ3NtOjpjc21VaW50MTYg6Kqt44G/5Y+W44Gj44GfMTbjg5Pjg4Pjg4jlgKRcbiAgICovXG4gIHB1YmxpYyBnZXQxNkxpdHRsZUVuZGlhbigpOiBudW1iZXIge1xuICAgIGNvbnN0IHJldCA9XG4gICAgICAodGhpcy5fZmlsZURhdGFWaWV3LmdldFVpbnQ4KHRoaXMuX3JlYWRPZmZzZXQgKyAxKSA8PCA4KSB8XG4gICAgICB0aGlzLl9maWxlRGF0YVZpZXcuZ2V0VWludDgodGhpcy5fcmVhZE9mZnNldCk7XG4gICAgdGhpcy5fcmVhZE9mZnNldCArPSAyO1xuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICogQGJyaWVmIDI044OT44OD44OI6Kqt44G/6L6844G/77yI44Oq44OI44Or44Ko44Oz44OH44Kj44Ki44Oz77yJXG4gICAqIEByZXR1cm4gQ3NtOjpjc21VaW50MzIg6Kqt44G/5Y+W44Gj44GfMjTjg5Pjg4Pjg4jlgKTvvIjkuIvkvY0yNOODk+ODg+ODiOOBq+ioreWumu+8iVxuICAgKi9cbiAgcHVibGljIGdldDI0TGl0dGxlRW5kaWFuKCk6IG51bWJlciB7XG4gICAgY29uc3QgcmV0ID1cbiAgICAgICh0aGlzLl9maWxlRGF0YVZpZXcuZ2V0VWludDgodGhpcy5fcmVhZE9mZnNldCArIDIpIDw8IDE2KSB8XG4gICAgICAodGhpcy5fZmlsZURhdGFWaWV3LmdldFVpbnQ4KHRoaXMuX3JlYWRPZmZzZXQgKyAxKSA8PCA4KSB8XG4gICAgICB0aGlzLl9maWxlRGF0YVZpZXcuZ2V0VWludDgodGhpcy5fcmVhZE9mZnNldCk7XG4gICAgdGhpcy5fcmVhZE9mZnNldCArPSAzO1xuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICogQGJyaWVmIDMy44OT44OD44OI6Kqt44G/6L6844G/77yI44Oq44OI44Or44Ko44Oz44OH44Kj44Ki44Oz77yJXG4gICAqIEByZXR1cm4gQ3NtOjpjc21VaW50MzIg6Kqt44G/5Y+W44Gj44GfMzLjg5Pjg4Pjg4jlgKRcbiAgICovXG4gIHB1YmxpYyBnZXQzMkxpdHRsZUVuZGlhbigpOiBudW1iZXIge1xuICAgIGNvbnN0IHJldCA9XG4gICAgICAodGhpcy5fZmlsZURhdGFWaWV3LmdldFVpbnQ4KHRoaXMuX3JlYWRPZmZzZXQgKyAzKSA8PCAyNCkgfFxuICAgICAgKHRoaXMuX2ZpbGVEYXRhVmlldy5nZXRVaW50OCh0aGlzLl9yZWFkT2Zmc2V0ICsgMikgPDwgMTYpIHxcbiAgICAgICh0aGlzLl9maWxlRGF0YVZpZXcuZ2V0VWludDgodGhpcy5fcmVhZE9mZnNldCArIDEpIDw8IDgpIHxcbiAgICAgIHRoaXMuX2ZpbGVEYXRhVmlldy5nZXRVaW50OCh0aGlzLl9yZWFkT2Zmc2V0KTtcbiAgICB0aGlzLl9yZWFkT2Zmc2V0ICs9IDQ7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAYnJpZWYg44K344Kw44ON44OB44Oj44Gu5Y+W5b6X44Go5Y+C54Wn5paH5a2X5YiX44Go44Gu5LiA6Ie044OB44Kn44OD44KvXG4gICAqIEBwYXJhbVtpbl0gcmVmZXJlbmNlIOaknOafu+WvvuixoeOBruOCt+OCsOODjeODgeODo+aWh+Wtl+WIl1xuICAgKiBAcmV0dmFsICB0cnVlICAgIOS4gOiHtOOBl+OBpuOBhOOCi1xuICAgKiBAcmV0dmFsICBmYWxzZSAgIOS4gOiHtOOBl+OBpuOBhOOBquOBhFxuICAgKi9cbiAgcHVibGljIGdldENoZWNrU2lnbmF0dXJlKHJlZmVyZW5jZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgY29uc3QgZ2V0U2lnbmF0dXJlOiBVaW50OEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoNCk7XG4gICAgY29uc3QgcmVmZXJlbmNlU3RyaW5nOiBVaW50OEFycmF5ID0gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHJlZmVyZW5jZSk7XG4gICAgaWYgKHJlZmVyZW5jZS5sZW5ndGggIT0gNCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKGxldCBzaWduYXR1cmVPZmZzZXQgPSAwOyBzaWduYXR1cmVPZmZzZXQgPCA0OyBzaWduYXR1cmVPZmZzZXQrKykge1xuICAgICAgZ2V0U2lnbmF0dXJlW3NpZ25hdHVyZU9mZnNldF0gPSB0aGlzLmdldDgoKTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIGdldFNpZ25hdHVyZVswXSA9PSByZWZlcmVuY2VTdHJpbmdbMF0gJiZcbiAgICAgIGdldFNpZ25hdHVyZVsxXSA9PSByZWZlcmVuY2VTdHJpbmdbMV0gJiZcbiAgICAgIGdldFNpZ25hdHVyZVsyXSA9PSByZWZlcmVuY2VTdHJpbmdbMl0gJiZcbiAgICAgIGdldFNpZ25hdHVyZVszXSA9PSByZWZlcmVuY2VTdHJpbmdbM11cbiAgICApO1xuICB9XG5cbiAgX2ZpbGVCeXRlOiBBcnJheUJ1ZmZlcjsgLy8vPCDjg63jg7zjg4njgZfjgZ/jg5XjgqHjgqTjg6vjga7jg5DjgqTjg4jliJdcbiAgX2ZpbGVEYXRhVmlldzogRGF0YVZpZXc7XG4gIF9maWxlU2l6ZTogbnVtYmVyOyAvLy88IOODleOCoeOCpOODq+OCteOCpOOCulxuICBfcmVhZE9mZnNldDogbnVtYmVyOyAvLy88IOODleOCoeOCpOODq+WPgueFp+S9jee9rlxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgTEFwcERlbGVnYXRlIH0gZnJvbSAnLi9sYXBwZGVsZWdhdGUnO1xuaW1wb3J0ICogYXMgTEFwcERlZmluZSBmcm9tICcuL2xhcHBkZWZpbmUnO1xuXG4vKipcbiAqIOODluODqeOCpuOCtuODreODvOODieW+jOOBruWHpueQhlxuICovXG53aW5kb3cub25sb2FkID0gKCk6IHZvaWQgPT4ge1xuICAvLyBjcmVhdGUgdGhlIGFwcGxpY2F0aW9uIGluc3RhbmNlXG4gIGlmIChMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5pbml0aWFsaXplKCkgPT0gZmFsc2UpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5ydW4oKTtcbn07XG5cbi8qKlxuICog57WC5LqG5pmC44Gu5Yem55CGXG4gKi9cbndpbmRvdy5vbmJlZm9yZXVubG9hZCA9ICgpOiB2b2lkID0+IExBcHBEZWxlZ2F0ZS5yZWxlYXNlSW5zdGFuY2UoKTtcblxuLyoqXG4gKiBQcm9jZXNzIHdoZW4gY2hhbmdpbmcgc2NyZWVuIHNpemUuXG4gKi9cbndpbmRvdy5vbnJlc2l6ZSA9ICgpID0+IHtcbiAgaWYgKExBcHBEZWZpbmUuQ2FudmFzU2l6ZSA9PT0gJ2F1dG8nKSB7XG4gICAgTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkub25SZXNpemUoKTtcbiAgfVxufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmV4cG9ydCBjbGFzcyBUb3VjaE1hbmFnZXIge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9zdGFydFggPSAwLjA7XG4gICAgdGhpcy5fc3RhcnRZID0gMC4wO1xuICAgIHRoaXMuX2xhc3RYID0gMC4wO1xuICAgIHRoaXMuX2xhc3RZID0gMC4wO1xuICAgIHRoaXMuX2xhc3RYMSA9IDAuMDtcbiAgICB0aGlzLl9sYXN0WTEgPSAwLjA7XG4gICAgdGhpcy5fbGFzdFgyID0gMC4wO1xuICAgIHRoaXMuX2xhc3RZMiA9IDAuMDtcbiAgICB0aGlzLl9sYXN0VG91Y2hEaXN0YW5jZSA9IDAuMDtcbiAgICB0aGlzLl9kZWx0YVggPSAwLjA7XG4gICAgdGhpcy5fZGVsdGFZID0gMC4wO1xuICAgIHRoaXMuX3NjYWxlID0gMS4wO1xuICAgIHRoaXMuX3RvdWNoU2luZ2xlID0gZmFsc2U7XG4gICAgdGhpcy5fZmxpcEF2YWlsYWJsZSA9IGZhbHNlO1xuICB9XG5cbiAgcHVibGljIGdldENlbnRlclgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbGFzdFg7XG4gIH1cblxuICBwdWJsaWMgZ2V0Q2VudGVyWSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9sYXN0WTtcbiAgfVxuXG4gIHB1YmxpYyBnZXREZWx0YVgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fZGVsdGFYO1xuICB9XG5cbiAgcHVibGljIGdldERlbHRhWSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9kZWx0YVk7XG4gIH1cblxuICBwdWJsaWMgZ2V0U3RhcnRYKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXJ0WDtcbiAgfVxuXG4gIHB1YmxpYyBnZXRTdGFydFkoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhcnRZO1xuICB9XG5cbiAgcHVibGljIGdldFNjYWxlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3NjYWxlO1xuICB9XG5cbiAgcHVibGljIGdldFgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbGFzdFg7XG4gIH1cblxuICBwdWJsaWMgZ2V0WSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9sYXN0WTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRYMSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9sYXN0WDE7XG4gIH1cblxuICBwdWJsaWMgZ2V0WTEoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbGFzdFkxO1xuICB9XG5cbiAgcHVibGljIGdldFgyKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2xhc3RYMjtcbiAgfVxuXG4gIHB1YmxpYyBnZXRZMigpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9sYXN0WTI7XG4gIH1cblxuICBwdWJsaWMgaXNTaW5nbGVUb3VjaCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fdG91Y2hTaW5nbGU7XG4gIH1cblxuICBwdWJsaWMgaXNGbGlja0F2YWlsYWJsZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fZmxpcEF2YWlsYWJsZTtcbiAgfVxuXG4gIHB1YmxpYyBkaXNhYmxlRmxpY2soKTogdm9pZCB7XG4gICAgdGhpcy5fZmxpcEF2YWlsYWJsZSA9IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCv+ODg+ODgemWi+Wni+aZguOCpOODmeODs+ODiFxuICAgKiBAcGFyYW0gZGV2aWNlWCDjgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5444Gu5YCkXG4gICAqIEBwYXJhbSBkZXZpY2VZIOOCv+ODg+ODgeOBl+OBn+eUu+mdouOBrnnjga7lgKRcbiAgICovXG4gIHB1YmxpYyB0b3VjaGVzQmVnYW4oZGV2aWNlWDogbnVtYmVyLCBkZXZpY2VZOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9sYXN0WCA9IGRldmljZVg7XG4gICAgdGhpcy5fbGFzdFkgPSBkZXZpY2VZO1xuICAgIHRoaXMuX3N0YXJ0WCA9IGRldmljZVg7XG4gICAgdGhpcy5fc3RhcnRZID0gZGV2aWNlWTtcbiAgICB0aGlzLl9sYXN0VG91Y2hEaXN0YW5jZSA9IC0xLjA7XG4gICAgdGhpcy5fZmxpcEF2YWlsYWJsZSA9IHRydWU7XG4gICAgdGhpcy5fdG91Y2hTaW5nbGUgPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOODieODqeODg+OCsOaZguOBruOCpOODmeODs+ODiFxuICAgKiBAcGFyYW0gZGV2aWNlWCDjgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5444Gu5YCkXG4gICAqIEBwYXJhbSBkZXZpY2VZIOOCv+ODg+ODgeOBl+OBn+eUu+mdouOBrnnjga7lgKRcbiAgICovXG4gIHB1YmxpYyB0b3VjaGVzTW92ZWQoZGV2aWNlWDogbnVtYmVyLCBkZXZpY2VZOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9sYXN0WCA9IGRldmljZVg7XG4gICAgdGhpcy5fbGFzdFkgPSBkZXZpY2VZO1xuICAgIHRoaXMuX2xhc3RUb3VjaERpc3RhbmNlID0gLTEuMDtcbiAgICB0aGlzLl90b3VjaFNpbmdsZSA9IHRydWU7XG4gIH1cblxuICAvKipcbiAgICog44OV44Oq44OD44Kv44Gu6Led6Zui5ris5a6aXG4gICAqIEByZXR1cm4g44OV44Oq44OD44Kv6Led6ZuiXG4gICAqL1xuICBwdWJsaWMgZ2V0RmxpY2tEaXN0YW5jZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmNhbGN1bGF0ZURpc3RhbmNlKFxuICAgICAgdGhpcy5fc3RhcnRYLFxuICAgICAgdGhpcy5fc3RhcnRZLFxuICAgICAgdGhpcy5fbGFzdFgsXG4gICAgICB0aGlzLl9sYXN0WVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog54K577yR44GL44KJ54K577yS44G444Gu6Led6Zui44KS5rGC44KB44KLXG4gICAqXG4gICAqIEBwYXJhbSB4MSDvvJHjgaTnm67jga7jgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5444Gu5YCkXG4gICAqIEBwYXJhbSB5MSDvvJHjgaTnm67jga7jgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5544Gu5YCkXG4gICAqIEBwYXJhbSB4MiDvvJLjgaTnm67jga7jgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5444Gu5YCkXG4gICAqIEBwYXJhbSB5MiDvvJLjgaTnm67jga7jgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5544Gu5YCkXG4gICAqL1xuICBwdWJsaWMgY2FsY3VsYXRlRGlzdGFuY2UoXG4gICAgeDE6IG51bWJlcixcbiAgICB5MTogbnVtYmVyLFxuICAgIHgyOiBudW1iZXIsXG4gICAgeTI6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIHJldHVybiBNYXRoLnNxcnQoKHgxIC0geDIpICogKHgxIC0geDIpICsgKHkxIC0geTIpICogKHkxIC0geTIpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDvvJLjgaTnm67jga7lgKTjgYvjgonjgIHnp7vli5Xph4/jgpLmsYLjgoHjgovjgIJcbiAgICog6YGV44GG5pa55ZCR44Gu5aC05ZCI44Gv56e75YuV6YeP77yQ44CC5ZCM44GY5pa55ZCR44Gu5aC05ZCI44Gv44CB57W25a++5YCk44GM5bCP44GV44GE5pa544Gu5YCk44KS5Y+C54Wn44GZ44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSB2MSDvvJHjgaTnm67jga7np7vli5Xph49cbiAgICogQHBhcmFtIHYyIO+8kuOBpOebruOBruenu+WLlemHj1xuICAgKlxuICAgKiBAcmV0dXJuIOWwj+OBleOBhOaWueOBruenu+WLlemHj1xuICAgKi9cbiAgcHVibGljIGNhbGN1bGF0ZU1vdmluZ0Ftb3VudCh2MTogbnVtYmVyLCB2MjogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBpZiAodjEgPiAwLjAgIT0gdjIgPiAwLjApIHtcbiAgICAgIHJldHVybiAwLjA7XG4gICAgfVxuXG4gICAgY29uc3Qgc2lnbjogbnVtYmVyID0gdjEgPiAwLjAgPyAxLjAgOiAtMS4wO1xuICAgIGNvbnN0IGFic29sdXRlVmFsdWUxID0gTWF0aC5hYnModjEpO1xuICAgIGNvbnN0IGFic29sdXRlVmFsdWUyID0gTWF0aC5hYnModjIpO1xuICAgIHJldHVybiAoXG4gICAgICBzaWduICogKGFic29sdXRlVmFsdWUxIDwgYWJzb2x1dGVWYWx1ZTIgPyBhYnNvbHV0ZVZhbHVlMSA6IGFic29sdXRlVmFsdWUyKVxuICAgICk7XG4gIH1cblxuICBfc3RhcnRZOiBudW1iZXI7IC8vIOOCv+ODg+ODgeOCkumWi+Wni+OBl+OBn+aZguOBrnjjga7lgKRcbiAgX3N0YXJ0WDogbnVtYmVyOyAvLyDjgr/jg4Pjg4HjgpLplovlp4vjgZfjgZ/mmYLjga5544Gu5YCkXG4gIF9sYXN0WDogbnVtYmVyOyAvLyDjgrfjg7PjgrDjg6vjgr/jg4Pjg4HmmYLjga5444Gu5YCkXG4gIF9sYXN0WTogbnVtYmVyOyAvLyDjgrfjg7PjgrDjg6vjgr/jg4Pjg4HmmYLjga5544Gu5YCkXG4gIF9sYXN0WDE6IG51bWJlcjsgLy8g44OA44OW44Or44K/44OD44OB5pmC44Gu5LiA44Gk55uu44GueOOBruWApFxuICBfbGFzdFkxOiBudW1iZXI7IC8vIOODgOODluODq+OCv+ODg+ODgeaZguOBruS4gOOBpOebruOBrnnjga7lgKRcbiAgX2xhc3RYMjogbnVtYmVyOyAvLyDjg4Djg5bjg6vjgr/jg4Pjg4HmmYLjga7kuozjgaTnm67jga5444Gu5YCkXG4gIF9sYXN0WTI6IG51bWJlcjsgLy8g44OA44OW44Or44K/44OD44OB5pmC44Gu5LqM44Gk55uu44GueeOBruWApFxuICBfbGFzdFRvdWNoRGlzdGFuY2U6IG51bWJlcjsgLy8gMuacrOS7peS4iuOBp+OCv+ODg+ODgeOBl+OBn+OBqOOBjeOBruaMh+OBrui3nembolxuICBfZGVsdGFYOiBudW1iZXI7IC8vIOWJjeWbnuOBruWApOOBi+OCieS7iuWbnuOBruWApOOBuOOBrnjjga7np7vli5Xot53pm6LjgIJcbiAgX2RlbHRhWTogbnVtYmVyOyAvLyDliY3lm57jga7lgKTjgYvjgonku4rlm57jga7lgKTjgbjjga5544Gu56e75YuV6Led6Zui44CCXG4gIF9zY2FsZTogbnVtYmVyOyAvLyDjgZPjga7jg5Xjg6zjg7zjg6DjgafmjpvjgZHlkIjjgo/jgZvjgovmi6HlpKfnjofjgILmi6HlpKfmk43kvZzkuK3ku6XlpJbjga8x44CCXG4gIF90b3VjaFNpbmdsZTogYm9vbGVhbjsgLy8g44K344Oz44Kw44Or44K/44OD44OB5pmC44GvdHJ1ZVxuICBfZmxpcEF2YWlsYWJsZTogYm9vbGVhbjsgLy8g44OV44Oq44OD44OX44GM5pyJ5Yq544GL44Gp44GG44GLXG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG4vKipcbiAqIEBicmllZiDjg5Hjg6njg6Hjg7zjgr9JROOBruODh+ODleOCqeODq+ODiOWApOOCkuS/neaMgeOBmeOCi+WumuaVsDxicj5cbiAqICAgICAgICAg44OH44OV44Kp44Or44OI5YCk44Gu5LuV5qeY44Gv5Lul5LiL44Gu44Oe44OL44Ol44Ki44Or44Gr5Z+644Gl44GPPGJyPlxuICogICAgICAgICBodHRwczovL2RvY3MubGl2ZTJkLmNvbS9jdWJpc20tZWRpdG9yLW1hbnVhbC9zdGFuZGFyZC1wYXJhbWV0b3ItbGlzdC9cbiAqL1xuZXhwb3J0IGNvbnN0IEN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZCA9IE9iamVjdC5mcmVlemU8UmVjb3JkPHN0cmluZywgc3RyaW5nPj4oe1xuICAvLyDjg5Hjg7zjg4RJRFxuICBIaXRBcmVhUHJlZml4OiAnSGl0QXJlYScsXG4gIEhpdEFyZWFIZWFkOiAnSGVhZCcsXG4gIEhpdEFyZWFCb2R5OiAnQm9keScsXG4gIFBhcnRzSWRDb3JlOiAnUGFydHMwMUNvcmUnLFxuICBQYXJ0c0FybVByZWZpeDogJ1BhcnRzMDFBcm1fJyxcbiAgUGFydHNBcm1MUHJlZml4OiAnUGFydHMwMUFybUxfJyxcbiAgUGFydHNBcm1SUHJlZml4OiAnUGFydHMwMUFybVJfJyxcbiAgLy8g44OR44Op44Oh44O844K/SURcbiAgUGFyYW1BbmdsZVg6ICdQYXJhbUFuZ2xlWCcsXG4gIFBhcmFtQW5nbGVZOiAnUGFyYW1BbmdsZVknLFxuICBQYXJhbUFuZ2xlWjogJ1BhcmFtQW5nbGVaJyxcbiAgUGFyYW1FeWVMT3BlbjogJ1BhcmFtRXllTE9wZW4nLFxuICBQYXJhbUV5ZUxTbWlsZTogJ1BhcmFtRXllTFNtaWxlJyxcbiAgUGFyYW1FeWVST3BlbjogJ1BhcmFtRXllUk9wZW4nLFxuICBQYXJhbUV5ZVJTbWlsZTogJ1BhcmFtRXllUlNtaWxlJyxcbiAgUGFyYW1FeWVCYWxsWDogJ1BhcmFtRXllQmFsbFgnLFxuICBQYXJhbUV5ZUJhbGxZOiAnUGFyYW1FeWVCYWxsWScsXG4gIFBhcmFtRXllQmFsbEZvcm06ICdQYXJhbUV5ZUJhbGxGb3JtJyxcbiAgUGFyYW1Ccm93TFk6ICdQYXJhbUJyb3dMWScsXG4gIFBhcmFtQnJvd1JZOiAnUGFyYW1Ccm93UlknLFxuICBQYXJhbUJyb3dMWDogJ1BhcmFtQnJvd0xYJyxcbiAgUGFyYW1Ccm93Ulg6ICdQYXJhbUJyb3dSWCcsXG4gIFBhcmFtQnJvd0xBbmdsZTogJ1BhcmFtQnJvd0xBbmdsZScsXG4gIFBhcmFtQnJvd1JBbmdsZTogJ1BhcmFtQnJvd1JBbmdsZScsXG4gIFBhcmFtQnJvd0xGb3JtOiAnUGFyYW1Ccm93TEZvcm0nLFxuICBQYXJhbUJyb3dSRm9ybTogJ1BhcmFtQnJvd1JGb3JtJyxcbiAgUGFyYW1Nb3V0aEZvcm06ICdQYXJhbU1vdXRoRm9ybScsXG4gIFBhcmFtTW91dGhPcGVuWTogJ1BhcmFtTW91dGhPcGVuWScsXG4gIFBhcmFtQ2hlZWs6ICdQYXJhbUNoZWVrJyxcbiAgUGFyYW1Cb2R5QW5nbGVYOiAnUGFyYW1Cb2R5QW5nbGVYJyxcbiAgUGFyYW1Cb2R5QW5nbGVZOiAnUGFyYW1Cb2R5QW5nbGVZJyxcbiAgUGFyYW1Cb2R5QW5nbGVaOiAnUGFyYW1Cb2R5QW5nbGVaJyxcbiAgUGFyYW1CcmVhdGg6ICdQYXJhbUJyZWF0aCcsXG4gIFBhcmFtQXJtTEE6ICdQYXJhbUFybUxBJyxcbiAgUGFyYW1Bcm1SQTogJ1BhcmFtQXJtUkEnLFxuICBQYXJhbUFybUxCOiAnUGFyYW1Bcm1MQicsXG4gIFBhcmFtQXJtUkI6ICdQYXJhbUFybVJCJyxcbiAgUGFyYW1IYW5kTDogJ1BhcmFtSGFuZEwnLFxuICBQYXJhbUhhbmRSOiAnUGFyYW1IYW5kUicsXG4gIFBhcmFtSGFpckZyb250OiAnUGFyYW1IYWlyRnJvbnQnLFxuICBQYXJhbUhhaXJTaWRlOiAnUGFyYW1IYWlyU2lkZScsXG4gIFBhcmFtSGFpckJhY2s6ICdQYXJhbUhhaXJCYWNrJyxcbiAgUGFyYW1IYWlyRmx1ZmZ5OiAnUGFyYW1IYWlyRmx1ZmZ5JyxcbiAgUGFyYW1TaG91bGRlclk6ICdQYXJhbVNob3VsZGVyWScsXG4gIFBhcmFtQnVzdFg6ICdQYXJhbUJ1c3RYJyxcbiAgUGFyYW1CdXN0WTogJ1BhcmFtQnVzdFknLFxuICBQYXJhbUJhc2VYOiAnUGFyYW1CYXNlWCcsXG4gIFBhcmFtQmFzZVk6ICdQYXJhbUJhc2VZJyxcbiAgUGFyYW1OT05FOiAnTk9ORTonLFxufSk7XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbWRlZmF1bHRwYXJhbWV0ZXJpZCc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgSGl0QXJlYUJvZHkgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5IaXRBcmVhQm9keTtcbiAgZXhwb3J0IGNvbnN0IEhpdEFyZWFIZWFkID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuSGl0QXJlYUhlYWQ7XG4gIGV4cG9ydCBjb25zdCBIaXRBcmVhUHJlZml4ID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuSGl0QXJlYVByZWZpeDtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQW5nbGVYID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1BbmdsZVg7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUFuZ2xlWSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQW5nbGVZO1xuICBleHBvcnQgY29uc3QgUGFyYW1BbmdsZVogPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUFuZ2xlWjtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQXJtTEEgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUFybUxBO1xuICBleHBvcnQgY29uc3QgUGFyYW1Bcm1MQiA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQXJtTEI7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUFybVJBID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1Bcm1SQTtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQXJtUkIgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUFybVJCO1xuICBleHBvcnQgY29uc3QgUGFyYW1CYXNlWCA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQmFzZVg7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUJhc2VZID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1CYXNlWTtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQm9keUFuZ2xlWCA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQm9keUFuZ2xlWDtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQm9keUFuZ2xlWSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQm9keUFuZ2xlWTtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQm9keUFuZ2xlWiA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQm9keUFuZ2xlWjtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQnJlYXRoID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1CcmVhdGg7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUJyb3dMQW5nbGUgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUJyb3dMQW5nbGU7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUJyb3dMRm9ybSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQnJvd0xGb3JtO1xuICBleHBvcnQgY29uc3QgUGFyYW1Ccm93TFggPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUJyb3dMWDtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQnJvd0xZID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1Ccm93TFk7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUJyb3dSQW5nbGUgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUJyb3dSQW5nbGU7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUJyb3dSRm9ybSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQnJvd1JGb3JtO1xuICBleHBvcnQgY29uc3QgUGFyYW1Ccm93UlggPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUJyb3dSWDtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQnJvd1JZID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1Ccm93Ulk7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUJ1c3RYID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1CdXN0WDtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQnVzdFkgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUJ1c3RZO1xuICBleHBvcnQgY29uc3QgUGFyYW1DaGVlayA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQ2hlZWs7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUV5ZUJhbGxGb3JtID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1FeWVCYWxsRm9ybTtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtRXllQmFsbFggPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUV5ZUJhbGxYO1xuICBleHBvcnQgY29uc3QgUGFyYW1FeWVCYWxsWSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtRXllQmFsbFk7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUV5ZUxPcGVuID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1FeWVMT3BlbjtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtRXllTFNtaWxlID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1FeWVMU21pbGU7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUV5ZVJPcGVuID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1FeWVST3BlbjtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtRXllUlNtaWxlID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1FeWVSU21pbGU7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUhhaXJCYWNrID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1IYWlyQmFjaztcbiAgZXhwb3J0IGNvbnN0IFBhcmFtSGFpckZsdWZmeSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtSGFpckZsdWZmeTtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtSGFpckZyb250ID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1IYWlyRnJvbnQ7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUhhaXJTaWRlID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1IYWlyU2lkZTtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtSGFuZEwgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUhhbmRMO1xuICBleHBvcnQgY29uc3QgUGFyYW1IYW5kUiA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtSGFuZFI7XG4gIGV4cG9ydCBjb25zdCBQYXJhbU1vdXRoRm9ybSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtTW91dGhGb3JtO1xuICBleHBvcnQgY29uc3QgUGFyYW1Nb3V0aE9wZW5ZID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1Nb3V0aE9wZW5ZO1xuICBleHBvcnQgY29uc3QgUGFyYW1OT05FID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1OT05FO1xuICBleHBvcnQgY29uc3QgUGFyYW1TaG91bGRlclkgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbVNob3VsZGVyWTtcbiAgZXhwb3J0IGNvbnN0IFBhcnRzQXJtTFByZWZpeCA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcnRzQXJtTFByZWZpeDtcbiAgZXhwb3J0IGNvbnN0IFBhcnRzQXJtUHJlZml4ID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFydHNBcm1QcmVmaXg7XG4gIGV4cG9ydCBjb25zdCBQYXJ0c0FybVJQcmVmaXggPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJ0c0FybVJQcmVmaXg7XG4gIGV4cG9ydCBjb25zdCBQYXJ0c0lkQ29yZSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcnRzSWRDb3JlO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gIOODreOCsOWHuuWKm+mWouaVsOOBruioreWumlxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vLy0tLS0tLS0tLS0g44Ot44Kw5Ye65Yqb44Os44OZ44OrIOmBuOaKnumgheebriDlrprnvqkgLS0tLS0tLS0tLVxuLy8g6Kmz57Sw44Ot44Kw5Ye65Yqb6Kit5a6aXG5leHBvcnQgY29uc3QgQ1NNX0xPR19MRVZFTF9WRVJCT1NFID0gMDtcbi8vIOODh+ODkOODg+OCsOODreOCsOWHuuWKm+ioreWumlxuZXhwb3J0IGNvbnN0IENTTV9MT0dfTEVWRUxfREVCVUcgPSAxO1xuLy8gSW5mb+ODreOCsOWHuuWKm+ioreWumlxuZXhwb3J0IGNvbnN0IENTTV9MT0dfTEVWRUxfSU5GTyA9IDI7XG4vLyDorablkYrjg63jgrDlh7rlipvoqK3lrppcbmV4cG9ydCBjb25zdCBDU01fTE9HX0xFVkVMX1dBUk5JTkcgPSAzO1xuLy8g44Ko44Op44O844Ot44Kw5Ye65Yqb6Kit5a6aXG5leHBvcnQgY29uc3QgQ1NNX0xPR19MRVZFTF9FUlJPUiA9IDQ7XG4vLyDjg63jgrDlh7rlipvjgqrjg5XoqK3lrppcbmV4cG9ydCBjb25zdCBDU01fTE9HX0xFVkVMX09GRiA9IDU7XG5cbi8qKlxuICog44Ot44Kw5Ye65Yqb44Os44OZ44Or6Kit5a6a44CCXG4gKlxuICog5by35Yi255qE44Gr44Ot44Kw5Ye65Yqb44Os44OZ44Or44KS5aSJ44GI44KL5pmC44Gr5a6a576p44KS5pyJ5Yq544Gr44GZ44KL44CCXG4gKiBDU01fTE9HX0xFVkVMX1ZFUkJPU0Ug772eIENTTV9MT0dfTEVWRUxfT0ZGIOOCkumBuOaKnuOBmeOCi+OAglxuICovXG5leHBvcnQgY29uc3QgQ1NNX0xPR19MRVZFTDogbnVtYmVyID0gQ1NNX0xPR19MRVZFTF9WRVJCT1NFO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgSUN1YmlzbU1vZGVsU2V0dGluZyB9IGZyb20gJy4vaWN1YmlzbW1vZGVsc2V0dGluZyc7XG5pbXBvcnQgeyBDdWJpc21JZEhhbmRsZSB9IGZyb20gJy4vaWQvY3ViaXNtaWQnO1xuaW1wb3J0IHsgQ3ViaXNtRnJhbWV3b3JrIH0gZnJvbSAnLi9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xuaW1wb3J0IHsgY3NtTWFwLCBpdGVyYXRvciB9IGZyb20gJy4vdHlwZS9jc21tYXAnO1xuaW1wb3J0IHsgY3NtVmVjdG9yIH0gZnJvbSAnLi90eXBlL2NzbXZlY3Rvcic7XG5pbXBvcnQgeyBDdWJpc21Kc29uLCBWYWx1ZSB9IGZyb20gJy4vdXRpbHMvY3ViaXNtanNvbic7XG5cbi8qKlxuICogTW9kZWwzSnNvbuOBruOCreODvOaWh+Wtl+WIl1xuICovXG5cbi8vIEpTT04gS2V5c1xuY29uc3QgVmVyc2lvbiA9ICdWZXJzaW9uJztcbmNvbnN0IEZpbGVSZWZlcmVuY2VzID0gJ0ZpbGVSZWZlcmVuY2VzJztcbmNvbnN0IEdyb3VwcyA9ICdHcm91cHMnO1xuY29uc3QgTGF5b3V0ID0gJ0xheW91dCc7XG5jb25zdCBIaXRBcmVhcyA9ICdIaXRBcmVhcyc7XG5cbmNvbnN0IE1vYyA9ICdNb2MnO1xuY29uc3QgVGV4dHVyZXMgPSAnVGV4dHVyZXMnO1xuY29uc3QgUGh5c2ljcyA9ICdQaHlzaWNzJztcbmNvbnN0IFBvc2UgPSAnUG9zZSc7XG5jb25zdCBFeHByZXNzaW9ucyA9ICdFeHByZXNzaW9ucyc7XG5jb25zdCBNb3Rpb25zID0gJ01vdGlvbnMnO1xuXG5jb25zdCBVc2VyRGF0YSA9ICdVc2VyRGF0YSc7XG5jb25zdCBOYW1lID0gJ05hbWUnO1xuY29uc3QgRmlsZVBhdGggPSAnRmlsZSc7XG5jb25zdCBJZCA9ICdJZCc7XG5jb25zdCBJZHMgPSAnSWRzJztcbmNvbnN0IFRhcmdldCA9ICdUYXJnZXQnO1xuXG4vLyBNb3Rpb25zXG5jb25zdCBJZGxlID0gJ0lkbGUnO1xuY29uc3QgVGFwQm9keSA9ICdUYXBCb2R5JztcbmNvbnN0IFBpbmNoSW4gPSAnUGluY2hJbic7XG5jb25zdCBQaW5jaE91dCA9ICdQaW5jaE91dCc7XG5jb25zdCBTaGFrZSA9ICdTaGFrZSc7XG5jb25zdCBGbGlja0hlYWQgPSAnRmxpY2tIZWFkJztcbmNvbnN0IFBhcmFtZXRlciA9ICdQYXJhbWV0ZXInO1xuXG5jb25zdCBTb3VuZFBhdGggPSAnU291bmQnO1xuY29uc3QgRmFkZUluVGltZSA9ICdGYWRlSW5UaW1lJztcbmNvbnN0IEZhZGVPdXRUaW1lID0gJ0ZhZGVPdXRUaW1lJztcblxuLy8gTGF5b3V0XG5jb25zdCBDZW50ZXJYID0gJ0NlbnRlclgnO1xuY29uc3QgQ2VudGVyWSA9ICdDZW50ZXJZJztcbmNvbnN0IFggPSAnWCc7XG5jb25zdCBZID0gJ1knO1xuY29uc3QgV2lkdGggPSAnV2lkdGgnO1xuY29uc3QgSGVpZ2h0ID0gJ0hlaWdodCc7XG5cbmNvbnN0IExpcFN5bmMgPSAnTGlwU3luYyc7XG5jb25zdCBFeWVCbGluayA9ICdFeWVCbGluayc7XG5cbmNvbnN0IEluaXRQYXJhbWV0ZXIgPSAnaW5pdF9wYXJhbSc7XG5jb25zdCBJbml0UGFydHNWaXNpYmxlID0gJ2luaXRfcGFydHNfdmlzaWJsZSc7XG5jb25zdCBWYWwgPSAndmFsJztcblxuZW51bSBGcmVxdWVzdE5vZGUge1xuICBGcmVxdWVzdE5vZGVfR3JvdXBzLCAvLyBnZXRSb290KCkuZ2V0VmFsdWVCeVN0cmluZyhHcm91cHMpXG4gIEZyZXF1ZXN0Tm9kZV9Nb2MsIC8vIGdldFJvb3QoKS5nZXRWYWx1ZUJ5U3RyaW5nKEZpbGVSZWZlcmVuY2VzKS5nZXRWYWx1ZUJ5U3RyaW5nKE1vYylcbiAgRnJlcXVlc3ROb2RlX01vdGlvbnMsIC8vIGdldFJvb3QoKS5nZXRWYWx1ZUJ5U3RyaW5nKEZpbGVSZWZlcmVuY2VzKS5nZXRWYWx1ZUJ5U3RyaW5nKE1vdGlvbnMpXG4gIEZyZXF1ZXN0Tm9kZV9FeHByZXNzaW9ucywgLy8gZ2V0Um9vdCgpLmdldFZhbHVlQnlTdHJpbmcoRmlsZVJlZmVyZW5jZXMpLmdldFZhbHVlQnlTdHJpbmcoRXhwcmVzc2lvbnMpXG4gIEZyZXF1ZXN0Tm9kZV9UZXh0dXJlcywgLy8gZ2V0Um9vdCgpLmdldFZhbHVlQnlTdHJpbmcoRmlsZVJlZmVyZW5jZXMpLmdldFZhbHVlQnlTdHJpbmcoVGV4dHVyZXMpXG4gIEZyZXF1ZXN0Tm9kZV9QaHlzaWNzLCAvLyBnZXRSb290KCkuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUmVmZXJlbmNlcykuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzKVxuICBGcmVxdWVzdE5vZGVfUG9zZSwgLy8gZ2V0Um9vdCgpLmdldFZhbHVlQnlTdHJpbmcoRmlsZVJlZmVyZW5jZXMpLmdldFZhbHVlQnlTdHJpbmcoUG9zZSlcbiAgRnJlcXVlc3ROb2RlX0hpdEFyZWFzLCAvLyBnZXRSb290KCkuZ2V0VmFsdWVCeVN0cmluZyhIaXRBcmVhcylcbn1cblxuLyoqXG4gKiBNb2RlbDNKc29u44OR44O844K144O8XG4gKlxuICogbW9kZWwzLmpzb27jg5XjgqHjgqTjg6vjgpLjg5Hjg7zjgrnjgZfjgablgKTjgpLlj5blvpfjgZnjgotcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbU1vZGVsU2V0dGluZ0pzb24gZXh0ZW5kcyBJQ3ViaXNtTW9kZWxTZXR0aW5nIHtcbiAgLyoqXG4gICAqIOW8leaVsOS7mOOBjeOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKlxuICAgKiBAcGFyYW0gYnVmZmVyICAgIE1vZGVsM0pzb27jgpLjg5DjgqTjg4jphY3liJfjgajjgZfjgaboqq3jgb/ovrzjgpPjgaDjg4fjg7zjgr/jg5Djg4Pjg5XjgqFcbiAgICogQHBhcmFtIHNpemUgICAgICBNb2RlbDNKc29u44Gu44OH44O844K/44K144Kk44K6XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9qc29uID0gQ3ViaXNtSnNvbi5jcmVhdGUoYnVmZmVyLCBzaXplKTtcblxuICAgIGlmICh0aGlzLl9qc29uKSB7XG4gICAgICB0aGlzLl9qc29uVmFsdWUgPSBuZXcgY3NtVmVjdG9yPFZhbHVlPigpO1xuXG4gICAgICAvLyDpoIbnlarjga9lbnVtIEZyZXF1ZXN0Tm9kZeOBqOS4gOiHtOOBleOBm+OCi1xuICAgICAgdGhpcy5fanNvblZhbHVlLnB1c2hCYWNrKHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldFZhbHVlQnlTdHJpbmcoR3JvdXBzKSk7XG4gICAgICB0aGlzLl9qc29uVmFsdWUucHVzaEJhY2soXG4gICAgICAgIHRoaXMuX2pzb25cbiAgICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmlsZVJlZmVyZW5jZXMpXG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTW9jKVxuICAgICAgKTtcbiAgICAgIHRoaXMuX2pzb25WYWx1ZS5wdXNoQmFjayhcbiAgICAgICAgdGhpcy5fanNvblxuICAgICAgICAgIC5nZXRSb290KClcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUmVmZXJlbmNlcylcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNb3Rpb25zKVxuICAgICAgKTtcbiAgICAgIHRoaXMuX2pzb25WYWx1ZS5wdXNoQmFjayhcbiAgICAgICAgdGhpcy5fanNvblxuICAgICAgICAgIC5nZXRSb290KClcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUmVmZXJlbmNlcylcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhFeHByZXNzaW9ucylcbiAgICAgICk7XG4gICAgICB0aGlzLl9qc29uVmFsdWUucHVzaEJhY2soXG4gICAgICAgIHRoaXMuX2pzb25cbiAgICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmlsZVJlZmVyZW5jZXMpXG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVGV4dHVyZXMpXG4gICAgICApO1xuICAgICAgdGhpcy5fanNvblZhbHVlLnB1c2hCYWNrKFxuICAgICAgICB0aGlzLl9qc29uXG4gICAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZpbGVSZWZlcmVuY2VzKVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3MpXG4gICAgICApO1xuICAgICAgdGhpcy5fanNvblZhbHVlLnB1c2hCYWNrKFxuICAgICAgICB0aGlzLl9qc29uXG4gICAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZpbGVSZWZlcmVuY2VzKVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBvc2UpXG4gICAgICApO1xuICAgICAgdGhpcy5fanNvblZhbHVlLnB1c2hCYWNrKHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldFZhbHVlQnlTdHJpbmcoSGl0QXJlYXMpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICBDdWJpc21Kc29uLmRlbGV0ZSh0aGlzLl9qc29uKTtcblxuICAgIHRoaXMuX2pzb25WYWx1ZSA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQ3ViaXNtSnNvbuOCquODluOCuOOCp+OCr+ODiOOCkuWPluW+l+OBmeOCi1xuICAgKlxuICAgKiBAcmV0dXJuIEN1YmlzbUpzb25cbiAgICovXG4gIHB1YmxpYyBHZXRKc29uKCk6IEN1YmlzbUpzb24ge1xuICAgIHJldHVybiB0aGlzLl9qc29uO1xuICB9XG5cbiAgLyoqXG4gICAqIE1vY+ODleOCoeOCpOODq+OBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIE1vY+ODleOCoeOCpOODq+OBruWQjeWJjVxuICAgKi9cbiAgcHVibGljIGdldE1vZGVsRmlsZU5hbWUoKTogc3RyaW5nIHtcbiAgICBpZiAoIXRoaXMuaXNFeGlzdE1vZGVsRmlsZSgpKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb2MpLmdldFJhd1N0cmluZygpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OBjOS9v+eUqOOBmeOCi+ODhuOCr+OCueODgeODo+OBruaVsOOCkuWPluW+l+OBmeOCi1xuICAgKiDjg4bjgq/jgrnjg4Hjg6Pjga7mlbBcbiAgICovXG4gIHB1YmxpYyBnZXRUZXh0dXJlQ291bnQoKTogbnVtYmVyIHtcbiAgICBpZiAoIXRoaXMuaXNFeGlzdFRleHR1cmVGaWxlcygpKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfVGV4dHVyZXMpLmdldFNpemUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4bjgq/jgrnjg4Hjg6PjgYzphY3nva7jgZXjgozjgZ/jg4fjgqPjg6zjgq/jg4jjg6rjga7lkI3liY3jgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDjg4bjgq/jgrnjg4Hjg6PjgYzphY3nva7jgZXjgozjgZ/jg4fjgqPjg6zjgq/jg4jjg6rjga7lkI3liY1cbiAgICovXG4gIHB1YmxpYyBnZXRUZXh0dXJlRGlyZWN0b3J5KCk6IHN0cmluZyB7XG4gICAgY29uc3QgdGV4dHVyZVBhdGggPSB0aGlzLl9qc29uVmFsdWVcbiAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX1RleHR1cmVzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleCgwKVxuICAgICAgLmdldFJhd1N0cmluZygpO1xuXG4gICAgY29uc3QgcGF0aEFycmF5ID0gdGV4dHVyZVBhdGguc3BsaXQoJy8nKTtcbiAgICAvLyDmnIDlvozjga7opoHntKDjga/jg4bjgq/jgrnjg4Hjg6PlkI3jgarjga7jgafkuI3opoFcbiAgICBjb25zdCBhcnJheUxlbmd0aCA9IHBhdGhBcnJheS5sZW5ndGggLSAxO1xuICAgIGxldCB0ZXh0dXJlRGlyZWN0b3J5U3RyID0gJyc7XG5cbiAgICAvLyDliIblibLjgZfjgZ/jg5HjgrnjgpLntZDlkIhcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5TGVuZ3RoOyBpKyspIHtcbiAgICAgIHRleHR1cmVEaXJlY3RvcnlTdHIgKz0gcGF0aEFycmF5W2ldO1xuICAgICAgaWYgKGkgPCBhcnJheUxlbmd0aCAtIDEpIHtcbiAgICAgICAgdGV4dHVyZURpcmVjdG9yeVN0ciArPSAnLyc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRleHR1cmVEaXJlY3RvcnlTdHI7XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44GM5L2/55So44GZ44KL44OG44Kv44K544OB44Oj44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHJldHVybiDjg4bjgq/jgrnjg4Hjg6Pjga7lkI3liY1cbiAgICovXG4gIHB1YmxpYyBnZXRUZXh0dXJlRmlsZU5hbWUoaW5kZXg6IG51bWJlcik6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZVxuICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfVGV4dHVyZXMpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGluZGV4KVxuICAgICAgLmdldFJhd1N0cmluZygpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OBq+ioreWumuOBleOCjOOBn+W9k+OBn+OCiuWIpOWumuOBruaVsOOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOODouODh+ODq+OBq+ioreWumuOBleOCjOOBn+W9k+OBn+OCiuWIpOWumuOBruaVsFxuICAgKi9cbiAgcHVibGljIGdldEhpdEFyZWFzQ291bnQoKTogbnVtYmVyIHtcbiAgICBpZiAoIXRoaXMuaXNFeGlzdEhpdEFyZWFzKCkpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9IaXRBcmVhcykuZ2V0U2l6ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOW9k+OBn+OCiuWIpOWumuOBq+ioreWumuOBleOCjOOBn0lE44KS5Y+W5b6X44GZ44KLXG4gICAqXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga5pbmRleFxuICAgKiBAcmV0dXJuIOW9k+OBn+OCiuWIpOWumuOBq+ioreWumuOBleOCjOOBn0lEXG4gICAqL1xuICBwdWJsaWMgZ2V0SGl0QXJlYUlkKGluZGV4OiBudW1iZXIpOiBDdWJpc21JZEhhbmRsZSB7XG4gICAgcmV0dXJuIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgIHRoaXMuX2pzb25WYWx1ZVxuICAgICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9IaXRBcmVhcylcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChpbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoSWQpXG4gICAgICAgIC5nZXRSYXdTdHJpbmcoKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog5b2T44Gf44KK5Yik5a6a44Gr6Kit5a6a44GV44KM44Gf5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHJldHVybiDlvZPjgZ/jgorliKTlrprjgavoqK3lrprjgZXjgozjgZ/lkI3liY1cbiAgICovXG4gIHB1YmxpYyBnZXRIaXRBcmVhTmFtZShpbmRleDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlXG4gICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9IaXRBcmVhcylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhOYW1lKVxuICAgICAgLmdldFJhd1N0cmluZygpO1xuICB9XG5cbiAgLyoqXG4gICAqIOeJqeeQhua8lOeul+ioreWumuODleOCoeOCpOODq+OBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOeJqeeQhua8lOeul+ioreWumuODleOCoeOCpOODq+OBruWQjeWJjVxuICAgKi9cbiAgcHVibGljIGdldFBoeXNpY3NGaWxlTmFtZSgpOiBzdHJpbmcge1xuICAgIGlmICghdGhpcy5pc0V4aXN0UGh5c2ljc0ZpbGUoKSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9QaHlzaWNzKS5nZXRSYXdTdHJpbmcoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg7zjg4TliIfjgormm7/jgYjoqK3lrprjg5XjgqHjgqTjg6vjga7lkI3liY3jgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDjg5Hjg7zjg4TliIfjgormm7/jgYjoqK3lrprjg5XjgqHjgqTjg6vjga7lkI3liY1cbiAgICovXG4gIHB1YmxpYyBnZXRQb3NlRmlsZU5hbWUoKTogc3RyaW5nIHtcbiAgICBpZiAoIXRoaXMuaXNFeGlzdFBvc2VGaWxlKCkpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfUG9zZSkuZ2V0UmF3U3RyaW5nKCk7XG4gIH1cblxuICAvKipcbiAgICog6KGo5oOF6Kit5a6a44OV44Kh44Kk44Or44Gu5pWw44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g6KGo5oOF6Kit5a6a44OV44Kh44Kk44Or44Gu5pWwXG4gICAqL1xuICBwdWJsaWMgZ2V0RXhwcmVzc2lvbkNvdW50KCk6IG51bWJlciB7XG4gICAgaWYgKCF0aGlzLmlzRXhpc3RFeHByZXNzaW9uRmlsZSgpKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfRXhwcmVzc2lvbnMpLmdldFNpemUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDooajmg4XoqK3lrprjg5XjgqHjgqTjg6vjgpLorZjliKXjgZnjgovlkI3liY3vvIjliKXlkI3vvInjgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcmV0dXJuIOihqOaDheOBruWQjeWJjVxuICAgKi9cbiAgcHVibGljIGdldEV4cHJlc3Npb25OYW1lKGluZGV4OiBudW1iZXIpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWVcbiAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0V4cHJlc3Npb25zKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChpbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE5hbWUpXG4gICAgICAuZ2V0UmF3U3RyaW5nKCk7XG4gIH1cblxuICAvKipcbiAgICog6KGo5oOF6Kit5a6a44OV44Kh44Kk44Or44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHJldHVybiDooajmg4XoqK3lrprjg5XjgqHjgqTjg6vjga7lkI3liY1cbiAgICovXG4gIHB1YmxpYyBnZXRFeHByZXNzaW9uRmlsZU5hbWUoaW5kZXg6IG51bWJlcik6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZVxuICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfRXhwcmVzc2lvbnMpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGluZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmlsZVBhdGgpXG4gICAgICAuZ2V0UmF3U3RyaW5nKCk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5pWw44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5pWwXG4gICAqL1xuICBwdWJsaWMgZ2V0TW90aW9uR3JvdXBDb3VudCgpOiBudW1iZXIge1xuICAgIGlmICghdGhpcy5pc0V4aXN0TW90aW9uR3JvdXBzKCkpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWVcbiAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX01vdGlvbnMpXG4gICAgICAuZ2V0S2V5cygpXG4gICAgICAuZ2V0U2l6ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5ZCN5YmNXG4gICAqL1xuICBwdWJsaWMgZ2V0TW90aW9uR3JvdXBOYW1lKGluZGV4OiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGlmICghdGhpcy5pc0V4aXN0TW90aW9uR3JvdXBzKCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWVcbiAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX01vdGlvbnMpXG4gICAgICAuZ2V0S2V5cygpXG4gICAgICAuYXQoaW5kZXgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBq+WQq+OBvuOCjOOCi+ODouODvOOCt+ODp+ODs+OBruaVsOOCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gZ3JvdXBOYW1lIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruWQjeWJjVxuICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruaVsFxuICAgKi9cbiAgcHVibGljIGdldE1vdGlvbkNvdW50KGdyb3VwTmFtZTogc3RyaW5nKTogbnVtYmVyIHtcbiAgICBpZiAoIXRoaXMuaXNFeGlzdE1vdGlvbkdyb3VwTmFtZShncm91cE5hbWUpKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlXG4gICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb3Rpb25zKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoZ3JvdXBOYW1lKVxuICAgICAgLmdldFNpemUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrDjg6vjg7zjg5flkI3jgajjgqTjg7Pjg4fjg4Pjgq/jgrnlgKTjgYvjgonjg6Ljg7zjgrfjg6fjg7Pjg5XjgqHjgqTjg6vlkI3jgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGdyb3VwTmFtZSDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7lkI3liY1cbiAgICogQHBhcmFtIGluZGV4ICAgICDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjg5XjgqHjgqTjg6vjga7lkI3liY1cbiAgICovXG4gIHB1YmxpYyBnZXRNb3Rpb25GaWxlTmFtZShncm91cE5hbWU6IHN0cmluZywgaW5kZXg6IG51bWJlcik6IHN0cmluZyB7XG4gICAgaWYgKCF0aGlzLmlzRXhpc3RNb3Rpb25Hcm91cE5hbWUoZ3JvdXBOYW1lKSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWVcbiAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX01vdGlvbnMpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhncm91cE5hbWUpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGluZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmlsZVBhdGgpXG4gICAgICAuZ2V0UmF3U3RyaW5nKCk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gr5a++5b+c44GZ44KL44K144Km44Oz44OJ44OV44Kh44Kk44Or44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBncm91cE5hbWUg44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5ZCN5YmNXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHJldHVybiDjgrXjgqbjg7Pjg4njg5XjgqHjgqTjg6vjga7lkI3liY1cbiAgICovXG4gIHB1YmxpYyBnZXRNb3Rpb25Tb3VuZEZpbGVOYW1lKGdyb3VwTmFtZTogc3RyaW5nLCBpbmRleDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBpZiAoIXRoaXMuaXNFeGlzdE1vdGlvblNvdW5kRmlsZShncm91cE5hbWUsIGluZGV4KSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWVcbiAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX01vdGlvbnMpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhncm91cE5hbWUpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGluZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoU291bmRQYXRoKVxuICAgICAgLmdldFJhd1N0cmluZygpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+mWi+Wni+aZguOBruODleOCp+ODvOODieOCpOODs+WHpueQhuaZgumWk+OCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gZ3JvdXBOYW1lIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruWQjeWJjVxuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAqIEByZXR1cm4g44OV44Kn44O844OJ44Kk44Oz5Yem55CG5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyBnZXRNb3Rpb25GYWRlSW5UaW1lVmFsdWUoZ3JvdXBOYW1lOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIGlmICghdGhpcy5pc0V4aXN0TW90aW9uRmFkZUluKGdyb3VwTmFtZSwgaW5kZXgpKSB7XG4gICAgICByZXR1cm4gLTEuMDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlXG4gICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb3Rpb25zKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoZ3JvdXBOYW1lKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChpbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZhZGVJblRpbWUpXG4gICAgICAudG9GbG9hdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+e1guS6huaZguOBruODleOCp+ODvOODieOCouOCpuODiOWHpueQhuaZgumWk+OCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gZ3JvdXBOYW1lIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruWQjeWJjVxuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAqIEByZXR1cm4g44OV44Kn44O844OJ44Ki44Km44OI5Yem55CG5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyBnZXRNb3Rpb25GYWRlT3V0VGltZVZhbHVlKGdyb3VwTmFtZTogc3RyaW5nLCBpbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBpZiAoIXRoaXMuaXNFeGlzdE1vdGlvbkZhZGVPdXQoZ3JvdXBOYW1lLCBpbmRleCkpIHtcbiAgICAgIHJldHVybiAtMS4wO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWVcbiAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX01vdGlvbnMpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhncm91cE5hbWUpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGluZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmFkZU91dFRpbWUpXG4gICAgICAudG9GbG9hdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODpuODvOOCtuODvOODh+ODvOOCv+OBruODleOCoeOCpOODq+WQjeOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOODpuODvOOCtuODvOODh+ODvOOCv+OBruODleOCoeOCpOODq+WQjVxuICAgKi9cbiAgcHVibGljIGdldFVzZXJEYXRhRmlsZSgpOiBzdHJpbmcge1xuICAgIGlmICghdGhpcy5pc0V4aXN0VXNlckRhdGFGaWxlKCkpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmlsZVJlZmVyZW5jZXMpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhVc2VyRGF0YSlcbiAgICAgIC5nZXRSYXdTdHJpbmcoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6zjgqTjgqLjgqbjg4jmg4XloLHjgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIG91dExheW91dE1hcCBjc21NYXDjgq/jg6njgrnjga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICogQHJldHVybiB0cnVlIOODrOOCpOOCouOCpuODiOaDheWgseOBjOWtmOWcqOOBmeOCi1xuICAgKiBAcmV0dXJuIGZhbHNlIOODrOOCpOOCouOCpuODiOaDheWgseOBjOWtmOWcqOOBl+OBquOBhFxuICAgKi9cbiAgcHVibGljIGdldExheW91dE1hcChvdXRMYXlvdXRNYXA6IGNzbU1hcDxzdHJpbmcsIG51bWJlcj4pOiBib29sZWFuIHtcbiAgICAvLyDlrZjlnKjjgZfjgarjgYTopoHntKDjgavjgqLjgq/jgrvjgrnjgZnjgovjgajjgqjjg6njg7zjgavjgarjgovjgZ/jgoFWYWx1ZeOBjG51bGzjga7loLTlkIjjga9udWxs44KS5Luj5YWl44GZ44KLXG4gICAgY29uc3QgbWFwOiBjc21NYXA8c3RyaW5nLCBWYWx1ZT4gPSB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhMYXlvdXQpXG4gICAgICAuZ2V0TWFwKCk7XG5cbiAgICBpZiAobWFwID09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBsZXQgcmV0ID0gZmFsc2U7XG5cbiAgICBmb3IgKFxuICAgICAgY29uc3QgaXRlOiBpdGVyYXRvcjxzdHJpbmcsIFZhbHVlPiA9IG1hcC5iZWdpbigpO1xuICAgICAgaXRlLm5vdEVxdWFsKG1hcC5lbmQoKSk7XG4gICAgICBpdGUucHJlSW5jcmVtZW50KClcbiAgICApIHtcbiAgICAgIG91dExheW91dE1hcC5zZXRWYWx1ZShpdGUucHRyKCkuZmlyc3QsIGl0ZS5wdHIoKS5zZWNvbmQudG9GbG9hdCgpKTtcbiAgICAgIHJldCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiDnm67jg5Hjg4HjgavplqLpgKPku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga7mlbDjgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDnm67jg5Hjg4HjgavplqLpgKPku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga7mlbBcbiAgICovXG4gIHB1YmxpYyBnZXRFeWVCbGlua1BhcmFtZXRlckNvdW50KCk6IG51bWJlciB7XG4gICAgaWYgKCF0aGlzLmlzRXhpc3RFeWVCbGlua1BhcmFtZXRlcnMoKSkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgbGV0IG51bSA9IDA7XG4gICAgZm9yIChcbiAgICAgIGxldCBpID0gMDtcbiAgICAgIGkgPCB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Hcm91cHMpLmdldFNpemUoKTtcbiAgICAgIGkrK1xuICAgICkge1xuICAgICAgY29uc3QgcmVmSTogVmFsdWUgPSB0aGlzLl9qc29uVmFsdWVcbiAgICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfR3JvdXBzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGkpO1xuICAgICAgaWYgKHJlZkkuaXNOdWxsKCkgfHwgcmVmSS5pc0Vycm9yKCkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWZJLmdldFZhbHVlQnlTdHJpbmcoTmFtZSkuZ2V0UmF3U3RyaW5nKCkgPT0gRXllQmxpbmspIHtcbiAgICAgICAgbnVtID0gcmVmSS5nZXRWYWx1ZUJ5U3RyaW5nKElkcykuZ2V0VmVjdG9yKCkuZ2V0U2l6ZSgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVtO1xuICB9XG5cbiAgLyoqXG4gICAqIOebruODkeODgeOBq+mWoumAo+S7mOOBkeOCieOCjOOBn+ODkeODqeODoeODvOOCv+OBrklE44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHJldHVybiDjg5Hjg6njg6Hjg7zjgr9JRFxuICAgKi9cbiAgcHVibGljIGdldEV5ZUJsaW5rUGFyYW1ldGVySWQoaW5kZXg6IG51bWJlcik6IEN1YmlzbUlkSGFuZGxlIHtcbiAgICBpZiAoIXRoaXMuaXNFeGlzdEV5ZUJsaW5rUGFyYW1ldGVycygpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBmb3IgKFxuICAgICAgbGV0IGkgPSAwO1xuICAgICAgaSA8IHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcykuZ2V0U2l6ZSgpO1xuICAgICAgaSsrXG4gICAgKSB7XG4gICAgICBjb25zdCByZWZJOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZVxuICAgICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Hcm91cHMpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaSk7XG4gICAgICBpZiAocmVmSS5pc051bGwoKSB8fCByZWZJLmlzRXJyb3IoKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlZkkuZ2V0VmFsdWVCeVN0cmluZyhOYW1lKS5nZXRSYXdTdHJpbmcoKSA9PSBFeWVCbGluaykge1xuICAgICAgICByZXR1cm4gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxuICAgICAgICAgIHJlZkkuZ2V0VmFsdWVCeVN0cmluZyhJZHMpLmdldFZhbHVlQnlJbmRleChpbmRleCkuZ2V0UmF3U3RyaW5nKClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICog44Oq44OD44OX44K344Oz44Kv44Gr6Zai6YCj5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44Gu5pWw44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g44Oq44OD44OX44K344Oz44Kv44Gr6Zai6YCj5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44Gu5pWwXG4gICAqL1xuICBwdWJsaWMgZ2V0TGlwU3luY1BhcmFtZXRlckNvdW50KCk6IG51bWJlciB7XG4gICAgaWYgKCF0aGlzLmlzRXhpc3RMaXBTeW5jUGFyYW1ldGVycygpKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICBsZXQgbnVtID0gMDtcbiAgICBmb3IgKFxuICAgICAgbGV0IGkgPSAwO1xuICAgICAgaSA8IHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcykuZ2V0U2l6ZSgpO1xuICAgICAgaSsrXG4gICAgKSB7XG4gICAgICBjb25zdCByZWZJOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZVxuICAgICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Hcm91cHMpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaSk7XG4gICAgICBpZiAocmVmSS5pc051bGwoKSB8fCByZWZJLmlzRXJyb3IoKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlZkkuZ2V0VmFsdWVCeVN0cmluZyhOYW1lKS5nZXRSYXdTdHJpbmcoKSA9PSBMaXBTeW5jKSB7XG4gICAgICAgIG51bSA9IHJlZkkuZ2V0VmFsdWVCeVN0cmluZyhJZHMpLmdldFZlY3RvcigpLmdldFNpemUoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6rjg4Pjg5fjgrfjg7Pjgq/jgavplqLpgKPku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga7mlbDjgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv0lEXG4gICAqL1xuICBwdWJsaWMgZ2V0TGlwU3luY1BhcmFtZXRlcklkKGluZGV4OiBudW1iZXIpOiBDdWJpc21JZEhhbmRsZSB7XG4gICAgaWYgKCF0aGlzLmlzRXhpc3RMaXBTeW5jUGFyYW1ldGVycygpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBmb3IgKFxuICAgICAgbGV0IGkgPSAwO1xuICAgICAgaSA8IHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcykuZ2V0U2l6ZSgpO1xuICAgICAgaSsrXG4gICAgKSB7XG4gICAgICBjb25zdCByZWZJOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZVxuICAgICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Hcm91cHMpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaSk7XG4gICAgICBpZiAocmVmSS5pc051bGwoKSB8fCByZWZJLmlzRXJyb3IoKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlZkkuZ2V0VmFsdWVCeVN0cmluZyhOYW1lKS5nZXRSYXdTdHJpbmcoKSA9PSBMaXBTeW5jKSB7XG4gICAgICAgIHJldHVybiBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICAgICAgcmVmSS5nZXRWYWx1ZUJ5U3RyaW5nKElkcykuZ2V0VmFsdWVCeUluZGV4KGluZGV4KS5nZXRSYXdTdHJpbmcoKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vjg5XjgqHjgqTjg6vjga7jgq3jg7zjgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcbiAgICogQHJldHVybiB0cnVlIOOCreODvOOBjOWtmOWcqOOBmeOCi1xuICAgKiBAcmV0dXJuIGZhbHNlIOOCreODvOOBjOWtmOWcqOOBl+OBquOBhFxuICAgKi9cbiAgcHJpdmF0ZSBpc0V4aXN0TW9kZWxGaWxlKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IG5vZGU6IFZhbHVlID0gdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfTW9jKTtcbiAgICByZXR1cm4gIW5vZGUuaXNOdWxsKCkgJiYgIW5vZGUuaXNFcnJvcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODhuOCr+OCueODgeODo+ODleOCoeOCpOODq+OBruOCreODvOOBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xuICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXG4gICAqL1xuICBwcml2YXRlIGlzRXhpc3RUZXh0dXJlRmlsZXMoKTogYm9vbGVhbiB7XG4gICAgY29uc3Qgbm9kZTogVmFsdWUgPSB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9UZXh0dXJlcyk7XG4gICAgcmV0dXJuICFub2RlLmlzTnVsbCgpICYmICFub2RlLmlzRXJyb3IoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlvZPjgZ/jgorliKTlrprjga7jgq3jg7zjgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcbiAgICogQHJldHVybiB0cnVlIOOCreODvOOBjOWtmOWcqOOBmeOCi1xuICAgKiBAcmV0dXJuIGZhbHNlIOOCreODvOOBjOWtmOWcqOOBl+OBquOBhFxuICAgKi9cbiAgcHJpdmF0ZSBpc0V4aXN0SGl0QXJlYXMoKTogYm9vbGVhbiB7XG4gICAgY29uc3Qgbm9kZTogVmFsdWUgPSB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9IaXRBcmVhcyk7XG4gICAgcmV0dXJuICFub2RlLmlzTnVsbCgpICYmICFub2RlLmlzRXJyb3IoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDniannkIbmvJTnrpfjg5XjgqHjgqTjg6vjga7jgq3jg7zjgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcbiAgICogQHJldHVybiB0cnVlIOOCreODvOOBjOWtmOWcqOOBmeOCi1xuICAgKiBAcmV0dXJuIGZhbHNlIOOCreODvOOBjOWtmOWcqOOBl+OBquOBhFxuICAgKi9cbiAgcHJpdmF0ZSBpc0V4aXN0UGh5c2ljc0ZpbGUoKTogYm9vbGVhbiB7XG4gICAgY29uc3Qgbm9kZTogVmFsdWUgPSB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9QaHlzaWNzKTtcbiAgICByZXR1cm4gIW5vZGUuaXNOdWxsKCkgJiYgIW5vZGUuaXNFcnJvcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODneODvOOCuuioreWumuODleOCoeOCpOODq+OBruOCreODvOOBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xuICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXG4gICAqL1xuICBwcml2YXRlIGlzRXhpc3RQb3NlRmlsZSgpOiBib29sZWFuIHtcbiAgICBjb25zdCBub2RlOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX1Bvc2UpO1xuICAgIHJldHVybiAhbm9kZS5pc051bGwoKSAmJiAhbm9kZS5pc0Vycm9yKCk7XG4gIH1cblxuICAvKipcbiAgICog6KGo5oOF6Kit5a6a44OV44Kh44Kk44Or44Gu44Kt44O844GM5a2Y5Zyo44GZ44KL44GL44Gp44GG44GL44KS56K66KqN44GZ44KLXG4gICAqIEByZXR1cm4gdHJ1ZSDjgq3jg7zjgYzlrZjlnKjjgZnjgotcbiAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcbiAgICovXG4gIHByaXZhdGUgaXNFeGlzdEV4cHJlc3Npb25GaWxlKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IG5vZGU6IFZhbHVlID0gdGhpcy5fanNvblZhbHVlLmF0KFxuICAgICAgRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9FeHByZXNzaW9uc1xuICAgICk7XG4gICAgcmV0dXJuICFub2RlLmlzTnVsbCgpICYmICFub2RlLmlzRXJyb3IoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7jgq3jg7zjgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcbiAgICogQHJldHVybiB0cnVlIOOCreODvOOBjOWtmOWcqOOBmeOCi1xuICAgKiBAcmV0dXJuIGZhbHNlIOOCreODvOOBjOWtmOWcqOOBl+OBquOBhFxuICAgKi9cbiAgcHJpdmF0ZSBpc0V4aXN0TW90aW9uR3JvdXBzKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IG5vZGU6IFZhbHVlID0gdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfTW90aW9ucyk7XG4gICAgcmV0dXJuICFub2RlLmlzTnVsbCgpICYmICFub2RlLmlzRXJyb3IoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlvJXmlbDjgafmjIflrprjgZfjgZ/jg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7jgq3jg7zjgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcbiAgICogQHBhcmFtIGdyb3VwTmFtZSAg44Kw44Or44O844OX5ZCNXG4gICAqIEByZXR1cm4gdHJ1ZSDjgq3jg7zjgYzlrZjlnKjjgZnjgotcbiAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcbiAgICovXG4gIHByaXZhdGUgaXNFeGlzdE1vdGlvbkdyb3VwTmFtZShncm91cE5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IG5vZGU6IFZhbHVlID0gdGhpcy5fanNvblZhbHVlXG4gICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb3Rpb25zKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoZ3JvdXBOYW1lKTtcbiAgICByZXR1cm4gIW5vZGUuaXNOdWxsKCkgJiYgIW5vZGUuaXNFcnJvcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOW8leaVsOOBp+aMh+WumuOBl+OBn+ODouODvOOCt+ODp+ODs+OBq+WvvuW/nOOBmeOCi+OCteOCpuODs+ODieODleOCoeOCpOODq+OBruOCreODvOOBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xuICAgKiBAcGFyYW0gZ3JvdXBOYW1lICDjgrDjg6vjg7zjg5flkI1cbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXG4gICAqL1xuICBwcml2YXRlIGlzRXhpc3RNb3Rpb25Tb3VuZEZpbGUoZ3JvdXBOYW1lOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICBjb25zdCBub2RlOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZVxuICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfTW90aW9ucylcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKGdyb3VwTmFtZSlcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhTb3VuZFBhdGgpO1xuICAgIHJldHVybiAhbm9kZS5pc051bGwoKSAmJiAhbm9kZS5pc0Vycm9yKCk7XG4gIH1cblxuICAvKipcbiAgICog5byV5pWw44Gn5oyH5a6a44GX44Gf44Oi44O844K344On44Oz44Gr5a++5b+c44GZ44KL44OV44Kn44O844OJ44Kk44Oz5pmC6ZaT44Gu44Kt44O844GM5a2Y5Zyo44GZ44KL44GL44Gp44GG44GL44KS56K66KqN44GZ44KLXG4gICAqIEBwYXJhbSBncm91cE5hbWUgIOOCsOODq+ODvOODl+WQjVxuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAqIEByZXR1cm4gdHJ1ZSDjgq3jg7zjgYzlrZjlnKjjgZnjgotcbiAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcbiAgICovXG4gIHByaXZhdGUgaXNFeGlzdE1vdGlvbkZhZGVJbihncm91cE5hbWU6IHN0cmluZywgaW5kZXg6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIGNvbnN0IG5vZGU6IFZhbHVlID0gdGhpcy5fanNvblZhbHVlXG4gICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb3Rpb25zKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoZ3JvdXBOYW1lKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChpbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZhZGVJblRpbWUpO1xuICAgIHJldHVybiAhbm9kZS5pc051bGwoKSAmJiAhbm9kZS5pc0Vycm9yKCk7XG4gIH1cblxuICAvKipcbiAgICog5byV5pWw44Gn5oyH5a6a44GX44Gf44Oi44O844K344On44Oz44Gr5a++5b+c44GZ44KL44OV44Kn44O844OJ44Ki44Km44OI5pmC6ZaT44Gu44Kt44O844GM5a2Y5Zyo44GZ44KL44GL44Gp44GG44GL44KS56K66KqN44GZ44KLXG4gICAqIEBwYXJhbSBncm91cE5hbWUgIOOCsOODq+ODvOODl+WQjVxuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAqIEByZXR1cm4gdHJ1ZSDjgq3jg7zjgYzlrZjlnKjjgZnjgotcbiAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcbiAgICovXG4gIHByaXZhdGUgaXNFeGlzdE1vdGlvbkZhZGVPdXQoZ3JvdXBOYW1lOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICBjb25zdCBub2RlOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZVxuICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfTW90aW9ucylcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKGdyb3VwTmFtZSlcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGYWRlT3V0VGltZSk7XG4gICAgcmV0dXJuICFub2RlLmlzTnVsbCgpICYmICFub2RlLmlzRXJyb3IoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VyRGF0YeOBruODleOCoeOCpOODq+WQjeOBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xuICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXG4gICAqL1xuICBwcml2YXRlIGlzRXhpc3RVc2VyRGF0YUZpbGUoKTogYm9vbGVhbiB7XG4gICAgY29uc3Qgbm9kZTogVmFsdWUgPSB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUmVmZXJlbmNlcylcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFVzZXJEYXRhKTtcbiAgICByZXR1cm4gIW5vZGUuaXNOdWxsKCkgJiYgIW5vZGUuaXNFcnJvcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOebruOBseOBoeOBq+WvvuW/nOS7mOOBkeOCieOCjOOBn+ODkeODqeODoeODvOOCv+OBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xuICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXG4gICAqL1xuICBwcml2YXRlIGlzRXhpc3RFeWVCbGlua1BhcmFtZXRlcnMoKTogYm9vbGVhbiB7XG4gICAgaWYgKFxuICAgICAgdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfR3JvdXBzKS5pc051bGwoKSB8fFxuICAgICAgdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfR3JvdXBzKS5pc0Vycm9yKClcbiAgICApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmb3IgKFxuICAgICAgbGV0IGkgPSAwO1xuICAgICAgaSA8IHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcykuZ2V0U2l6ZSgpO1xuICAgICAgKytpXG4gICAgKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuX2pzb25WYWx1ZVxuICAgICAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcylcbiAgICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGkpXG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTmFtZSlcbiAgICAgICAgICAuZ2V0UmF3U3RyaW5nKCkgPT0gRXllQmxpbmtcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICog44Oq44OD44OX44K344Oz44Kv44Gr5a++5b+c5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44GM5a2Y5Zyo44GZ44KL44GL44Gp44GG44GL44KS56K66KqN44GZ44KLXG4gICAqIEByZXR1cm4gdHJ1ZSDjgq3jg7zjgYzlrZjlnKjjgZnjgotcbiAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcbiAgICovXG4gIHByaXZhdGUgaXNFeGlzdExpcFN5bmNQYXJhbWV0ZXJzKCk6IGJvb2xlYW4ge1xuICAgIGlmIChcbiAgICAgIHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcykuaXNOdWxsKCkgfHxcbiAgICAgIHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcykuaXNFcnJvcigpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAoXG4gICAgICBsZXQgaSA9IDA7XG4gICAgICBpIDwgdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfR3JvdXBzKS5nZXRTaXplKCk7XG4gICAgICArK2lcbiAgICApIHtcbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5fanNvblZhbHVlXG4gICAgICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfR3JvdXBzKVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaSlcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhOYW1lKVxuICAgICAgICAgIC5nZXRSYXdTdHJpbmcoKSA9PSBMaXBTeW5jXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHByaXZhdGUgX2pzb246IEN1YmlzbUpzb247XG4gIHByaXZhdGUgX2pzb25WYWx1ZTogY3NtVmVjdG9yPFZhbHVlPjtcbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtbW9kZWxzZXR0aW5nanNvbic7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtTW9kZWxTZXR0aW5nSnNvbiA9ICQuQ3ViaXNtTW9kZWxTZXR0aW5nSnNvbjtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW9kZWxTZXR0aW5nSnNvbiA9ICQuQ3ViaXNtTW9kZWxTZXR0aW5nSnNvbjtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IEN1YmlzbUlkSGFuZGxlIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xuaW1wb3J0IHsgQ3ViaXNtTW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XG5pbXBvcnQgeyBjc21WZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5cbi8qKlxuICog5ZG85ZC45qmf6IO9XG4gKlxuICog5ZG85ZC45qmf6IO944KS5o+Q5L6b44GZ44KL44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21CcmVhdGgge1xuICAvKipcbiAgICog44Kk44Oz44K544K/44Oz44K544Gu5L2c5oiQXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpOiBDdWJpc21CcmVhdGgge1xuICAgIHJldHVybiBuZXcgQ3ViaXNtQnJlYXRoKCk7XG4gIH1cblxuICAvKipcbiAgICog44Kk44Oz44K544K/44Oz44K544Gu56C05qOEXG4gICAqIEBwYXJhbSBpbnN0YW5jZSDlr77osaHjga5DdWJpc21CcmVhdGhcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZGVsZXRlKGluc3RhbmNlOiBDdWJpc21CcmVhdGgpOiB2b2lkIHtcbiAgICBpZiAoaW5zdGFuY2UgIT0gbnVsbCkge1xuICAgICAgaW5zdGFuY2UgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDlkbzlkLjjga7jg5Hjg6njg6Hjg7zjgr/jga7ntJDjgaXjgZFcbiAgICogQHBhcmFtIGJyZWF0aFBhcmFtZXRlcnMg5ZG85ZC444KS57SQ44Gl44GR44Gf44GE44OR44Op44Oh44O844K/44Gu44Oq44K544OIXG4gICAqL1xuICBwdWJsaWMgc2V0UGFyYW1ldGVycyhicmVhdGhQYXJhbWV0ZXJzOiBjc21WZWN0b3I8QnJlYXRoUGFyYW1ldGVyRGF0YT4pOiB2b2lkIHtcbiAgICB0aGlzLl9icmVhdGhQYXJhbWV0ZXJzID0gYnJlYXRoUGFyYW1ldGVycztcbiAgfVxuXG4gIC8qKlxuICAgKiDlkbzlkLjjgavntJDjgaXjgYTjgabjgYTjgovjg5Hjg6njg6Hjg7zjgr/jga7lj5blvpdcbiAgICogQHJldHVybiDlkbzlkLjjgavntJDjgaXjgYTjgabjgYTjgovjg5Hjg6njg6Hjg7zjgr/jga7jg6rjgrnjg4hcbiAgICovXG4gIHB1YmxpYyBnZXRQYXJhbWV0ZXJzKCk6IGNzbVZlY3RvcjxCcmVhdGhQYXJhbWV0ZXJEYXRhPiB7XG4gICAgcmV0dXJuIHRoaXMuX2JyZWF0aFBhcmFtZXRlcnM7XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44Gu44OR44Op44Oh44O844K/44Gu5pu05pawXG4gICAqIEBwYXJhbSBtb2RlbCDlr77osaHjga7jg6Ljg4fjg6tcbiAgICogQHBhcmFtIGRlbHRhVGltZVNlY29uZHMg44OH44Or44K/5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyB1cGRhdGVQYXJhbWV0ZXJzKG1vZGVsOiBDdWJpc21Nb2RlbCwgZGVsdGFUaW1lU2Vjb25kczogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fY3VycmVudFRpbWUgKz0gZGVsdGFUaW1lU2Vjb25kcztcblxuICAgIGNvbnN0IHQ6IG51bWJlciA9IHRoaXMuX2N1cnJlbnRUaW1lICogMi4wICogMy4xNDE1OTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fYnJlYXRoUGFyYW1ldGVycy5nZXRTaXplKCk7ICsraSkge1xuICAgICAgY29uc3QgZGF0YTogQnJlYXRoUGFyYW1ldGVyRGF0YSA9IHRoaXMuX2JyZWF0aFBhcmFtZXRlcnMuYXQoaSk7XG5cbiAgICAgIG1vZGVsLmFkZFBhcmFtZXRlclZhbHVlQnlJZChcbiAgICAgICAgZGF0YS5wYXJhbWV0ZXJJZCxcbiAgICAgICAgZGF0YS5vZmZzZXQgKyBkYXRhLnBlYWsgKiBNYXRoLnNpbih0IC8gZGF0YS5jeWNsZSksXG4gICAgICAgIGRhdGEud2VpZ2h0XG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9jdXJyZW50VGltZSA9IDAuMDtcbiAgfVxuXG4gIF9icmVhdGhQYXJhbWV0ZXJzOiBjc21WZWN0b3I8QnJlYXRoUGFyYW1ldGVyRGF0YT47IC8vIOWRvOWQuOOBq+OBsuOCguOBpeOBhOOBpuOBhOOCi+ODkeODqeODoeODvOOCv+OBruODquOCueODiFxuICBfY3VycmVudFRpbWU6IG51bWJlcjsgLy8g56mN566X5pmC6ZaTW+enkl1cbn1cblxuLyoqXG4gKiDlkbzlkLjjga7jg5Hjg6njg6Hjg7zjgr/mg4XloLFcbiAqL1xuZXhwb3J0IGNsYXNzIEJyZWF0aFBhcmFtZXRlckRhdGEge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJJZCAgIOWRvOWQuOOCkuOBsuOCguOBpeOBkeOCi+ODkeODqeODoeODvOOCv0lEXG4gICAqIEBwYXJhbSBvZmZzZXQgICAgICAgIOWRvOWQuOOCkuato+W8puazouOBqOOBl+OBn+OBqOOBjeOBruOAgeazouOBruOCquODleOCu+ODg+ODiFxuICAgKiBAcGFyYW0gcGVhayAgICAgICAgICDlkbzlkLjjgpLmraPlvKbms6LjgajjgZfjgZ/jgajjgY3jga7jgIHms6Ljga7pq5jjgZVcbiAgICogQHBhcmFtIGN5Y2xlICAgICAgICAg5ZG85ZC444KS5q2j5bym5rOi44Go44GX44Gf44Go44GN44Gu44CB5rOi44Gu5ZGo5pyfXG4gICAqIEBwYXJhbSB3ZWlnaHQgICAgICAgIOODkeODqeODoeODvOOCv+OBuOOBrumHjeOBv1xuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcGFyYW1ldGVySWQ/OiBDdWJpc21JZEhhbmRsZSxcbiAgICBvZmZzZXQ/OiBudW1iZXIsXG4gICAgcGVhaz86IG51bWJlcixcbiAgICBjeWNsZT86IG51bWJlcixcbiAgICB3ZWlnaHQ/OiBudW1iZXJcbiAgKSB7XG4gICAgdGhpcy5wYXJhbWV0ZXJJZCA9IHBhcmFtZXRlcklkID09IHVuZGVmaW5lZCA/IG51bGwgOiBwYXJhbWV0ZXJJZDtcbiAgICB0aGlzLm9mZnNldCA9IG9mZnNldCA9PSB1bmRlZmluZWQgPyAwLjAgOiBvZmZzZXQ7XG4gICAgdGhpcy5wZWFrID0gcGVhayA9PSB1bmRlZmluZWQgPyAwLjAgOiBwZWFrO1xuICAgIHRoaXMuY3ljbGUgPSBjeWNsZSA9PSB1bmRlZmluZWQgPyAwLjAgOiBjeWNsZTtcbiAgICB0aGlzLndlaWdodCA9IHdlaWdodCA9PSB1bmRlZmluZWQgPyAwLjAgOiB3ZWlnaHQ7XG4gIH1cblxuICBwYXJhbWV0ZXJJZDogQ3ViaXNtSWRIYW5kbGU7IC8vIOWRvOWQuOOCkuOBsuOCguOBpeOBkeOCi+ODkeODqeODoeODvOOCv0lEXFxcbiAgb2Zmc2V0OiBudW1iZXI7IC8vIOWRvOWQuOOCkuato+W8puazouOBqOOBl+OBn+OBqOOBjeOBruOAgeazouOBruOCquODleOCu+ODg+ODiFxuICBwZWFrOiBudW1iZXI7IC8vIOWRvOWQuOOCkuato+W8puazouOBqOOBl+OBn+OBqOOBjeOBruOAgeazouOBrumrmOOBlVxuICBjeWNsZTogbnVtYmVyOyAvLyDlkbzlkLjjgpLmraPlvKbms6LjgajjgZfjgZ/jgajjgY3jga7jgIHms6Ljga7lkajmnJ9cbiAgd2VpZ2h0OiBudW1iZXI7IC8vIOODkeODqeODoeODvOOCv+OBuOOBrumHjeOBv1xufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21icmVhdGgnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEJyZWF0aFBhcmFtZXRlckRhdGEgPSAkLkJyZWF0aFBhcmFtZXRlckRhdGE7XG4gIGV4cG9ydCB0eXBlIEJyZWF0aFBhcmFtZXRlckRhdGEgPSAkLkJyZWF0aFBhcmFtZXRlckRhdGE7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21CcmVhdGggPSAkLkN1YmlzbUJyZWF0aDtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtQnJlYXRoID0gJC5DdWJpc21CcmVhdGg7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBJQ3ViaXNtTW9kZWxTZXR0aW5nIH0gZnJvbSAnLi4vaWN1YmlzbW1vZGVsc2V0dGluZyc7XG5pbXBvcnQgeyBDdWJpc21JZEhhbmRsZSB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7IEN1YmlzbU1vZGVsIH0gZnJvbSAnLi4vbW9kZWwvY3ViaXNtbW9kZWwnO1xuaW1wb3J0IHsgY3NtVmVjdG9yIH0gZnJvbSAnLi4vdHlwZS9jc212ZWN0b3InO1xuXG4vKipcbiAqIOiHquWLleOBvuOBsOOBn+OBjeapn+iDvVxuICpcbiAqIOiHquWLleOBvuOBsOOBn+OBjeapn+iDveOCkuaPkOS+m+OBmeOCi+OAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtRXllQmxpbmsge1xuICAvKipcbiAgICog44Kk44Oz44K544K/44Oz44K544KS5L2c5oiQ44GZ44KLXG4gICAqIEBwYXJhbSBtb2RlbFNldHRpbmcg44Oi44OH44Or44Gu6Kit5a6a5oOF5aCxXG4gICAqIEByZXR1cm4g5L2c5oiQ44GV44KM44Gf44Kk44Oz44K544K/44Oz44K5XG4gICAqIEBub3RlIOW8leaVsOOBjE5VTEzjga7loLTlkIjjgIHjg5Hjg6njg6Hjg7zjgr9JROOBjOioreWumuOBleOCjOOBpuOBhOOBquOBhOepuuOBruOCpOODs+OCueOCv+ODs+OCueOCkuS9nOaIkOOBmeOCi+OAglxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBjcmVhdGUoXG4gICAgbW9kZWxTZXR0aW5nOiBJQ3ViaXNtTW9kZWxTZXR0aW5nID0gbnVsbFxuICApOiBDdWJpc21FeWVCbGluayB7XG4gICAgcmV0dXJuIG5ldyBDdWJpc21FeWVCbGluayhtb2RlbFNldHRpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCpOODs+OCueOCv+ODs+OCueOBruegtOajhFxuICAgKiBAcGFyYW0gZXllQmxpbmsg5a++6LGh44GuQ3ViaXNtRXllQmxpbmtcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZGVsZXRlKGV5ZUJsaW5rOiBDdWJpc21FeWVCbGluayk6IHZvaWQge1xuICAgIGlmIChleWVCbGluayAhPSBudWxsKSB7XG4gICAgICBleWVCbGluayA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOOBvuOBsOOBn+OBjeOBrumWk+malOOBruioreWumlxuICAgKiBAcGFyYW0gYmxpbmtpbmdJbnRlcnZhbCDjgb7jgbDjgZ/jgY3jga7plpPpmpTjga7mmYLplpNb56eSXVxuICAgKi9cbiAgcHVibGljIHNldEJsaW5raW5nSW50ZXJ2YWwoYmxpbmtpbmdJbnRlcnZhbDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fYmxpbmtpbmdJbnRlcnZhbFNlY29uZHMgPSBibGlua2luZ0ludGVydmFsO1xuICB9XG5cbiAgLyoqXG4gICAqIOOBvuOBsOOBn+OBjeOBruODouODvOOCt+ODp+ODs+OBruips+e0sOioreWumlxuICAgKiBAcGFyYW0gY2xvc2luZyAgIOOBvuOBtuOBn+OCkumWieOBmOOCi+WLleS9nOOBruaJgOimgeaZgumWk1vnp5JdXG4gICAqIEBwYXJhbSBjbG9zZWQgICAg44G+44G244Gf44KS6ZaJ44GY44Gm44GE44KL5YuV5L2c44Gu5omA6KaB5pmC6ZaTW+enkl1cbiAgICogQHBhcmFtIG9wZW5pbmcgICDjgb7jgbbjgZ/jgpLplovjgY/li5XkvZzjga7miYDopoHmmYLplpNb56eSXVxuICAgKi9cbiAgcHVibGljIHNldEJsaW5raW5nU2V0dGluZyhcbiAgICBjbG9zaW5nOiBudW1iZXIsXG4gICAgY2xvc2VkOiBudW1iZXIsXG4gICAgb3BlbmluZzogbnVtYmVyXG4gICk6IHZvaWQge1xuICAgIHRoaXMuX2Nsb3NpbmdTZWNvbmRzID0gY2xvc2luZztcbiAgICB0aGlzLl9jbG9zZWRTZWNvbmRzID0gY2xvc2VkO1xuICAgIHRoaXMuX29wZW5pbmdTZWNvbmRzID0gb3BlbmluZztcbiAgfVxuXG4gIC8qKlxuICAgKiDjgb7jgbDjgZ/jgY3jgZXjgZvjgovjg5Hjg6njg6Hjg7zjgr9JROOBruODquOCueODiOOBruioreWumlxuICAgKiBAcGFyYW0gcGFyYW1ldGVySWRzIOODkeODqeODoeODvOOCv+OBrklE44Gu44Oq44K544OIXG4gICAqL1xuICBwdWJsaWMgc2V0UGFyYW1ldGVySWRzKHBhcmFtZXRlcklkczogY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPik6IHZvaWQge1xuICAgIHRoaXMuX3BhcmFtZXRlcklkcyA9IHBhcmFtZXRlcklkcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjgb7jgbDjgZ/jgY3jgZXjgZvjgovjg5Hjg6njg6Hjg7zjgr9JROOBruODquOCueODiOOBruWPluW+l1xuICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv0lE44Gu44Oq44K544OIXG4gICAqL1xuICBwdWJsaWMgZ2V0UGFyYW1ldGVySWRzKCk6IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT4ge1xuICAgIHJldHVybiB0aGlzLl9wYXJhbWV0ZXJJZHM7XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44Gu44OR44Op44Oh44O844K/44Gu5pu05pawXG4gICAqIEBwYXJhbSBtb2RlbCDlr77osaHjga7jg6Ljg4fjg6tcbiAgICogQHBhcmFtIGRlbHRhVGltZVNlY29uZHMg44OH44Or44K/5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyB1cGRhdGVQYXJhbWV0ZXJzKG1vZGVsOiBDdWJpc21Nb2RlbCwgZGVsdGFUaW1lU2Vjb25kczogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fdXNlclRpbWVTZWNvbmRzICs9IGRlbHRhVGltZVNlY29uZHM7XG4gICAgbGV0IHBhcmFtZXRlclZhbHVlOiBudW1iZXI7XG4gICAgbGV0IHQgPSAwLjA7XG5cbiAgICBzd2l0Y2ggKHRoaXMuX2JsaW5raW5nU3RhdGUpIHtcbiAgICAgIGNhc2UgRXllU3RhdGUuRXllU3RhdGVfQ2xvc2luZzpcbiAgICAgICAgdCA9XG4gICAgICAgICAgKHRoaXMuX3VzZXJUaW1lU2Vjb25kcyAtIHRoaXMuX3N0YXRlU3RhcnRUaW1lU2Vjb25kcykgL1xuICAgICAgICAgIHRoaXMuX2Nsb3NpbmdTZWNvbmRzO1xuXG4gICAgICAgIGlmICh0ID49IDEuMCkge1xuICAgICAgICAgIHQgPSAxLjA7XG4gICAgICAgICAgdGhpcy5fYmxpbmtpbmdTdGF0ZSA9IEV5ZVN0YXRlLkV5ZVN0YXRlX0Nsb3NlZDtcbiAgICAgICAgICB0aGlzLl9zdGF0ZVN0YXJ0VGltZVNlY29uZHMgPSB0aGlzLl91c2VyVGltZVNlY29uZHM7XG4gICAgICAgIH1cblxuICAgICAgICBwYXJhbWV0ZXJWYWx1ZSA9IDEuMCAtIHQ7XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEV5ZVN0YXRlLkV5ZVN0YXRlX0Nsb3NlZDpcbiAgICAgICAgdCA9XG4gICAgICAgICAgKHRoaXMuX3VzZXJUaW1lU2Vjb25kcyAtIHRoaXMuX3N0YXRlU3RhcnRUaW1lU2Vjb25kcykgL1xuICAgICAgICAgIHRoaXMuX2Nsb3NlZFNlY29uZHM7XG5cbiAgICAgICAgaWYgKHQgPj0gMS4wKSB7XG4gICAgICAgICAgdGhpcy5fYmxpbmtpbmdTdGF0ZSA9IEV5ZVN0YXRlLkV5ZVN0YXRlX09wZW5pbmc7XG4gICAgICAgICAgdGhpcy5fc3RhdGVTdGFydFRpbWVTZWNvbmRzID0gdGhpcy5fdXNlclRpbWVTZWNvbmRzO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyYW1ldGVyVmFsdWUgPSAwLjA7XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEV5ZVN0YXRlLkV5ZVN0YXRlX09wZW5pbmc6XG4gICAgICAgIHQgPVxuICAgICAgICAgICh0aGlzLl91c2VyVGltZVNlY29uZHMgLSB0aGlzLl9zdGF0ZVN0YXJ0VGltZVNlY29uZHMpIC9cbiAgICAgICAgICB0aGlzLl9vcGVuaW5nU2Vjb25kcztcblxuICAgICAgICBpZiAodCA+PSAxLjApIHtcbiAgICAgICAgICB0ID0gMS4wO1xuICAgICAgICAgIHRoaXMuX2JsaW5raW5nU3RhdGUgPSBFeWVTdGF0ZS5FeWVTdGF0ZV9JbnRlcnZhbDtcbiAgICAgICAgICB0aGlzLl9uZXh0QmxpbmtpbmdUaW1lID0gdGhpcy5kZXRlcm1pbk5leHRCbGlua2luZ1RpbWluZygpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyYW1ldGVyVmFsdWUgPSB0O1xuXG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBFeWVTdGF0ZS5FeWVTdGF0ZV9JbnRlcnZhbDpcbiAgICAgICAgaWYgKHRoaXMuX25leHRCbGlua2luZ1RpbWUgPCB0aGlzLl91c2VyVGltZVNlY29uZHMpIHtcbiAgICAgICAgICB0aGlzLl9ibGlua2luZ1N0YXRlID0gRXllU3RhdGUuRXllU3RhdGVfQ2xvc2luZztcbiAgICAgICAgICB0aGlzLl9zdGF0ZVN0YXJ0VGltZVNlY29uZHMgPSB0aGlzLl91c2VyVGltZVNlY29uZHM7XG4gICAgICAgIH1cblxuICAgICAgICBwYXJhbWV0ZXJWYWx1ZSA9IDEuMDtcblxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRXllU3RhdGUuRXllU3RhdGVfRmlyc3Q6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aGlzLl9ibGlua2luZ1N0YXRlID0gRXllU3RhdGUuRXllU3RhdGVfSW50ZXJ2YWw7XG4gICAgICAgIHRoaXMuX25leHRCbGlua2luZ1RpbWUgPSB0aGlzLmRldGVybWluTmV4dEJsaW5raW5nVGltaW5nKCk7XG5cbiAgICAgICAgcGFyYW1ldGVyVmFsdWUgPSAxLjA7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmICghQ3ViaXNtRXllQmxpbmsuQ2xvc2VJZlplcm8pIHtcbiAgICAgIHBhcmFtZXRlclZhbHVlID0gLXBhcmFtZXRlclZhbHVlO1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fcGFyYW1ldGVySWRzLmdldFNpemUoKTsgKytpKSB7XG4gICAgICBtb2RlbC5zZXRQYXJhbWV0ZXJWYWx1ZUJ5SWQodGhpcy5fcGFyYW1ldGVySWRzLmF0KGkpLCBwYXJhbWV0ZXJWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKiBAcGFyYW0gbW9kZWxTZXR0aW5nIOODouODh+ODq+OBruioreWumuaDheWgsVxuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKG1vZGVsU2V0dGluZzogSUN1YmlzbU1vZGVsU2V0dGluZykge1xuICAgIHRoaXMuX2JsaW5raW5nU3RhdGUgPSBFeWVTdGF0ZS5FeWVTdGF0ZV9GaXJzdDtcbiAgICB0aGlzLl9uZXh0QmxpbmtpbmdUaW1lID0gMC4wO1xuICAgIHRoaXMuX3N0YXRlU3RhcnRUaW1lU2Vjb25kcyA9IDAuMDtcbiAgICB0aGlzLl9ibGlua2luZ0ludGVydmFsU2Vjb25kcyA9IDQuMDtcbiAgICB0aGlzLl9jbG9zaW5nU2Vjb25kcyA9IDAuMTtcbiAgICB0aGlzLl9jbG9zZWRTZWNvbmRzID0gMC4wNTtcbiAgICB0aGlzLl9vcGVuaW5nU2Vjb25kcyA9IDAuMTU7XG4gICAgdGhpcy5fdXNlclRpbWVTZWNvbmRzID0gMC4wO1xuICAgIHRoaXMuX3BhcmFtZXRlcklkcyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+KCk7XG5cbiAgICBpZiAobW9kZWxTZXR0aW5nID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1vZGVsU2V0dGluZy5nZXRFeWVCbGlua1BhcmFtZXRlckNvdW50KCk7ICsraSkge1xuICAgICAgdGhpcy5fcGFyYW1ldGVySWRzLnB1c2hCYWNrKG1vZGVsU2V0dGluZy5nZXRFeWVCbGlua1BhcmFtZXRlcklkKGkpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog5qyh44Gu556s44GN44Gu44K/44Kk44Of44Oz44Kw44Gu5rG65a6aXG4gICAqXG4gICAqIEByZXR1cm4g5qyh44Gu44G+44Gw44Gf44GN44KS6KGM44GG5pmC5Yi7W+enkl1cbiAgICovXG4gIHB1YmxpYyBkZXRlcm1pbk5leHRCbGlua2luZ1RpbWluZygpOiBudW1iZXIge1xuICAgIGNvbnN0IHI6IG51bWJlciA9IE1hdGgucmFuZG9tKCk7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyArIHIgKiAoMi4wICogdGhpcy5fYmxpbmtpbmdJbnRlcnZhbFNlY29uZHMgLSAxLjApXG4gICAgKTtcbiAgfVxuXG4gIF9ibGlua2luZ1N0YXRlOiBudW1iZXI7IC8vIOePvuWcqOOBrueKtuaFi1xuICBfcGFyYW1ldGVySWRzOiBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+OyAvLyDmk43kvZzlr77osaHjga7jg5Hjg6njg6Hjg7zjgr/jga5JROOBruODquOCueODiFxuICBfbmV4dEJsaW5raW5nVGltZTogbnVtYmVyOyAvLyDmrKHjga7jgb7jgbDjgZ/jgY3jga7mmYLliLtb56eSXVxuICBfc3RhdGVTdGFydFRpbWVTZWNvbmRzOiBudW1iZXI7IC8vIOePvuWcqOOBrueKtuaFi+OBjOmWi+Wni+OBl+OBn+aZguWIu1vnp5JdXG4gIF9ibGlua2luZ0ludGVydmFsU2Vjb25kczogbnVtYmVyOyAvLyDjgb7jgbDjgZ/jgY3jga7plpPpmpRb56eSXVxuICBfY2xvc2luZ1NlY29uZHM6IG51bWJlcjsgLy8g44G+44G244Gf44KS6ZaJ44GY44KL5YuV5L2c44Gu5omA6KaB5pmC6ZaTW+enkl1cbiAgX2Nsb3NlZFNlY29uZHM6IG51bWJlcjsgLy8g44G+44G244Gf44KS6ZaJ44GY44Gm44GE44KL5YuV5L2c44Gu5omA6KaB5pmC6ZaTW+enkl1cbiAgX29wZW5pbmdTZWNvbmRzOiBudW1iZXI7IC8vIOOBvuOBtuOBn+OCkumWi+OBj+WLleS9nOOBruaJgOimgeaZgumWk1vnp5JdXG4gIF91c2VyVGltZVNlY29uZHM6IG51bWJlcjsgLy8g44OH44Or44K/5pmC6ZaT44Gu56mN566X5YCkW+enkl1cblxuICAvKipcbiAgICogSUTjgafmjIflrprjgZXjgozjgZ/nm67jga7jg5Hjg6njg6Hjg7zjgr/jgYzjgIEw44Gu44Go44GN44Gr6ZaJ44GY44KL44Gq44KJIHRydWUg44CBMeOBruaZguOBq+mWieOBmOOCi+OBquOCiSBmYWxzZSDjgIJcbiAgICovXG4gIHN0YXRpYyByZWFkb25seSBDbG9zZUlmWmVybzogYm9vbGVhbiA9IHRydWU7XG59XG5cbi8qKlxuICog44G+44Gw44Gf44GN44Gu54q25oWLXG4gKlxuICog44G+44Gw44Gf44GN44Gu54q25oWL44KS6KGo44GZ5YiX5oyZ5Z6LXG4gKi9cbmV4cG9ydCBlbnVtIEV5ZVN0YXRlIHtcbiAgRXllU3RhdGVfRmlyc3QgPSAwLCAvLyDliJ3mnJ/nirbmhYtcbiAgRXllU3RhdGVfSW50ZXJ2YWwsIC8vIOOBvuOBsOOBn+OBjeOBl+OBpuOBhOOBquOBhOeKtuaFi1xuICBFeWVTdGF0ZV9DbG9zaW5nLCAvLyDjgb7jgbbjgZ/jgYzplonjgZjjgabjgYTjgY/pgJTkuK3jga7nirbmhYtcbiAgRXllU3RhdGVfQ2xvc2VkLCAvLyDjgb7jgbbjgZ/jgYzplonjgZjjgabjgYTjgovnirbmhYtcbiAgRXllU3RhdGVfT3BlbmluZywgLy8g44G+44G244Gf44GM6ZaL44GE44Gm44GE44GP6YCU5Lit44Gu54q25oWLXG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbWV5ZWJsaW5rJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21FeWVCbGluayA9ICQuQ3ViaXNtRXllQmxpbms7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbUV5ZUJsaW5rID0gJC5DdWJpc21FeWVCbGluaztcbiAgZXhwb3J0IGNvbnN0IEV5ZVN0YXRlID0gJC5FeWVTdGF0ZTtcbiAgZXhwb3J0IHR5cGUgRXllU3RhdGUgPSAkLkV5ZVN0YXRlO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQ3ViaXNtSWRIYW5kbGUgfSBmcm9tICcuLi9pZC9jdWJpc21pZCc7XG5pbXBvcnQgeyBDdWJpc21GcmFtZXdvcmsgfSBmcm9tICcuLi9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xuaW1wb3J0IHsgQ3ViaXNtTW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XG5pbXBvcnQgeyBjc21WZWN0b3IsIGl0ZXJhdG9yIH0gZnJvbSAnLi4vdHlwZS9jc212ZWN0b3InO1xuaW1wb3J0IHsgQ3ViaXNtSnNvbiwgVmFsdWUgfSBmcm9tICcuLi91dGlscy9jdWJpc21qc29uJztcblxuY29uc3QgRXBzaWxvbiA9IDAuMDAxO1xuY29uc3QgRGVmYXVsdEZhZGVJblNlY29uZHMgPSAwLjU7XG5cbi8vIFBvc2UuanNvbuOBruOCv+OCsFxuY29uc3QgRmFkZUluID0gJ0ZhZGVJblRpbWUnO1xuY29uc3QgTGluayA9ICdMaW5rJztcbmNvbnN0IEdyb3VwcyA9ICdHcm91cHMnO1xuY29uc3QgSWQgPSAnSWQnO1xuXG4vKipcbiAqIOODkeODvOODhOOBruS4jemAj+aYjuW6puOBruioreWumlxuICpcbiAqIOODkeODvOODhOOBruS4jemAj+aYjuW6puOBrueuoeeQhuOBqOioreWumuOCkuihjOOBhuOAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtUG9zZSB7XG4gIC8qKlxuICAgKiDjgqTjg7Pjgrnjgr/jg7Pjgrnjga7kvZzmiJBcbiAgICogQHBhcmFtIHBvc2UzanNvbiBwb3NlMy5qc29u44Gu44OH44O844K/XG4gICAqIEBwYXJhbSBzaXplIHBvc2UzLmpzb27jga7jg4fjg7zjgr/jga7jgrXjgqTjgrpbYnl0ZV1cbiAgICogQHJldHVybiDkvZzmiJDjgZXjgozjgZ/jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlKHBvc2UzanNvbjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlcik6IEN1YmlzbVBvc2Uge1xuICAgIGNvbnN0IHJldDogQ3ViaXNtUG9zZSA9IG5ldyBDdWJpc21Qb3NlKCk7XG4gICAgY29uc3QganNvbjogQ3ViaXNtSnNvbiA9IEN1YmlzbUpzb24uY3JlYXRlKHBvc2UzanNvbiwgc2l6ZSk7XG4gICAgY29uc3Qgcm9vdDogVmFsdWUgPSBqc29uLmdldFJvb3QoKTtcblxuICAgIC8vIOODleOCp+ODvOODieaZgumWk+OBruaMh+WumlxuICAgIGlmICghcm9vdC5nZXRWYWx1ZUJ5U3RyaW5nKEZhZGVJbikuaXNOdWxsKCkpIHtcbiAgICAgIHJldC5fZmFkZVRpbWVTZWNvbmRzID0gcm9vdFxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGYWRlSW4pXG4gICAgICAgIC50b0Zsb2F0KERlZmF1bHRGYWRlSW5TZWNvbmRzKTtcblxuICAgICAgaWYgKHJldC5fZmFkZVRpbWVTZWNvbmRzIDw9IDAuMCkge1xuICAgICAgICByZXQuX2ZhZGVUaW1lU2Vjb25kcyA9IERlZmF1bHRGYWRlSW5TZWNvbmRzO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIOODkeODvOODhOOCsOODq+ODvOODl1xuICAgIGNvbnN0IHBvc2VMaXN0SW5mbzogVmFsdWUgPSByb290LmdldFZhbHVlQnlTdHJpbmcoR3JvdXBzKTtcbiAgICBjb25zdCBwb3NlQ291bnQ6IG51bWJlciA9IHBvc2VMaXN0SW5mby5nZXRTaXplKCk7XG5cbiAgICBmb3IgKGxldCBwb3NlSW5kZXggPSAwOyBwb3NlSW5kZXggPCBwb3NlQ291bnQ7ICsrcG9zZUluZGV4KSB7XG4gICAgICBjb25zdCBpZExpc3RJbmZvOiBWYWx1ZSA9IHBvc2VMaXN0SW5mby5nZXRWYWx1ZUJ5SW5kZXgocG9zZUluZGV4KTtcbiAgICAgIGNvbnN0IGlkQ291bnQ6IG51bWJlciA9IGlkTGlzdEluZm8uZ2V0U2l6ZSgpO1xuICAgICAgbGV0IGdyb3VwQ291bnQgPSAwO1xuXG4gICAgICBmb3IgKGxldCBncm91cEluZGV4ID0gMDsgZ3JvdXBJbmRleCA8IGlkQ291bnQ7ICsrZ3JvdXBJbmRleCkge1xuICAgICAgICBjb25zdCBwYXJ0SW5mbzogVmFsdWUgPSBpZExpc3RJbmZvLmdldFZhbHVlQnlJbmRleChncm91cEluZGV4KTtcbiAgICAgICAgY29uc3QgcGFydERhdGE6IFBhcnREYXRhID0gbmV3IFBhcnREYXRhKCk7XG4gICAgICAgIGNvbnN0IHBhcmFtZXRlcklkOiBDdWJpc21JZEhhbmRsZSA9XG4gICAgICAgICAgQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxuICAgICAgICAgICAgcGFydEluZm8uZ2V0VmFsdWVCeVN0cmluZyhJZCkuZ2V0UmF3U3RyaW5nKClcbiAgICAgICAgICApO1xuXG4gICAgICAgIHBhcnREYXRhLnBhcnRJZCA9IHBhcmFtZXRlcklkO1xuXG4gICAgICAgIC8vIOODquODs+OCr+OBmeOCi+ODkeODvOODhOOBruioreWumlxuICAgICAgICBpZiAoIXBhcnRJbmZvLmdldFZhbHVlQnlTdHJpbmcoTGluaykuaXNOdWxsKCkpIHtcbiAgICAgICAgICBjb25zdCBsaW5rTGlzdEluZm86IFZhbHVlID0gcGFydEluZm8uZ2V0VmFsdWVCeVN0cmluZyhMaW5rKTtcbiAgICAgICAgICBjb25zdCBsaW5rQ291bnQ6IG51bWJlciA9IGxpbmtMaXN0SW5mby5nZXRTaXplKCk7XG5cbiAgICAgICAgICBmb3IgKGxldCBsaW5rSW5kZXggPSAwOyBsaW5rSW5kZXggPCBsaW5rQ291bnQ7ICsrbGlua0luZGV4KSB7XG4gICAgICAgICAgICBjb25zdCBsaW5rUGFydDogUGFydERhdGEgPSBuZXcgUGFydERhdGEoKTtcbiAgICAgICAgICAgIGNvbnN0IGxpbmtJZDogQ3ViaXNtSWRIYW5kbGUgPSBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICAgICAgICAgIGxpbmtMaXN0SW5mby5nZXRWYWx1ZUJ5SW5kZXgobGlua0luZGV4KS5nZXRTdHJpbmcoKVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgbGlua1BhcnQucGFydElkID0gbGlua0lkO1xuXG4gICAgICAgICAgICBwYXJ0RGF0YS5saW5rLnB1c2hCYWNrKGxpbmtQYXJ0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXQuX3BhcnRHcm91cHMucHVzaEJhY2socGFydERhdGEuY2xvbmUoKSk7XG5cbiAgICAgICAgKytncm91cENvdW50O1xuICAgICAgfVxuXG4gICAgICByZXQuX3BhcnRHcm91cENvdW50cy5wdXNoQmFjayhncm91cENvdW50KTtcbiAgICB9XG5cbiAgICBDdWJpc21Kc29uLmRlbGV0ZShqc29uKTtcblxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICog44Kk44Oz44K544K/44Oz44K544KS56C05qOE44GZ44KLXG4gICAqIEBwYXJhbSBwb3NlIOWvvuixoeOBrkN1YmlzbVBvc2VcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZGVsZXRlKHBvc2U6IEN1YmlzbVBvc2UpOiB2b2lkIHtcbiAgICBpZiAocG9zZSAhPSBudWxsKSB7XG4gICAgICBwb3NlID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44Gu44OR44Op44Oh44O844K/44Gu5pu05pawXG4gICAqIEBwYXJhbSBtb2RlbCDlr77osaHjga7jg6Ljg4fjg6tcbiAgICogQHBhcmFtIGRlbHRhVGltZVNlY29uZHMg44OH44Or44K/5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyB1cGRhdGVQYXJhbWV0ZXJzKG1vZGVsOiBDdWJpc21Nb2RlbCwgZGVsdGFUaW1lU2Vjb25kczogbnVtYmVyKTogdm9pZCB7XG4gICAgLy8g5YmN5Zue44Gu44Oi44OH44Or44Go5ZCM44GY44Gn44Gq44GE5aC05ZCI44Gv5Yid5pyf5YyW44GM5b+F6KaBXG4gICAgaWYgKG1vZGVsICE9IHRoaXMuX2xhc3RNb2RlbCkge1xuICAgICAgLy8g44OR44Op44Oh44O844K/44Kk44Oz44OH44OD44Kv44K544Gu5Yid5pyf5YyWXG4gICAgICB0aGlzLnJlc2V0KG1vZGVsKTtcbiAgICB9XG5cbiAgICB0aGlzLl9sYXN0TW9kZWwgPSBtb2RlbDtcblxuICAgIC8vIOioreWumuOBi+OCieaZgumWk+OCkuWkieabtOOBmeOCi+OBqOOAgee1jOmBjuaZgumWk+OBjOODnuOCpOODiuOCueOBq+OBquOCi+S6i+OBjOOBguOCi+OBruOBp+OAgee1jOmBjuaZgumWkzDjgajjgZfjgablr77lv5xcbiAgICBpZiAoZGVsdGFUaW1lU2Vjb25kcyA8IDAuMCkge1xuICAgICAgZGVsdGFUaW1lU2Vjb25kcyA9IDAuMDtcbiAgICB9XG5cbiAgICBsZXQgYmVnaW5JbmRleCA9IDA7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3BhcnRHcm91cENvdW50cy5nZXRTaXplKCk7IGkrKykge1xuICAgICAgY29uc3QgcGFydEdyb3VwQ291bnQ6IG51bWJlciA9IHRoaXMuX3BhcnRHcm91cENvdW50cy5hdChpKTtcblxuICAgICAgdGhpcy5kb0ZhZGUobW9kZWwsIGRlbHRhVGltZVNlY29uZHMsIGJlZ2luSW5kZXgsIHBhcnRHcm91cENvdW50KTtcblxuICAgICAgYmVnaW5JbmRleCArPSBwYXJ0R3JvdXBDb3VudDtcbiAgICB9XG5cbiAgICB0aGlzLmNvcHlQYXJ0T3BhY2l0aWVzKG1vZGVsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDooajnpLrjgpLliJ3mnJ/ljJZcbiAgICogQHBhcmFtIG1vZGVsIOWvvuixoeOBruODouODh+ODq1xuICAgKiBAbm90ZSDkuI3pgI/mmI7luqbjga7liJ3mnJ/lgKTjgYww44Gn44Gq44GE44OR44Op44Oh44O844K/44Gv44CB5LiN6YCP5piO5bqm44KS77yR44Gr6Kit5a6a44GZ44KLXG4gICAqL1xuICBwdWJsaWMgcmVzZXQobW9kZWw6IEN1YmlzbU1vZGVsKTogdm9pZCB7XG4gICAgbGV0IGJlZ2luSW5kZXggPSAwO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9wYXJ0R3JvdXBDb3VudHMuZ2V0U2l6ZSgpOyArK2kpIHtcbiAgICAgIGNvbnN0IGdyb3VwQ291bnQ6IG51bWJlciA9IHRoaXMuX3BhcnRHcm91cENvdW50cy5hdChpKTtcblxuICAgICAgZm9yIChsZXQgajogbnVtYmVyID0gYmVnaW5JbmRleDsgaiA8IGJlZ2luSW5kZXggKyBncm91cENvdW50OyArK2opIHtcbiAgICAgICAgdGhpcy5fcGFydEdyb3Vwcy5hdChqKS5pbml0aWFsaXplKG1vZGVsKTtcblxuICAgICAgICBjb25zdCBwYXJ0c0luZGV4OiBudW1iZXIgPSB0aGlzLl9wYXJ0R3JvdXBzLmF0KGopLnBhcnRJbmRleDtcbiAgICAgICAgY29uc3QgcGFyYW1JbmRleDogbnVtYmVyID0gdGhpcy5fcGFydEdyb3Vwcy5hdChqKS5wYXJhbWV0ZXJJbmRleDtcblxuICAgICAgICBpZiAocGFydHNJbmRleCA8IDApIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1vZGVsLnNldFBhcnRPcGFjaXR5QnlJbmRleChwYXJ0c0luZGV4LCBqID09IGJlZ2luSW5kZXggPyAxLjAgOiAwLjApO1xuICAgICAgICBtb2RlbC5zZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgocGFyYW1JbmRleCwgaiA9PSBiZWdpbkluZGV4ID8gMS4wIDogMC4wKTtcblxuICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IHRoaXMuX3BhcnRHcm91cHMuYXQoaikubGluay5nZXRTaXplKCk7ICsraykge1xuICAgICAgICAgIHRoaXMuX3BhcnRHcm91cHMuYXQoaikubGluay5hdChrKS5pbml0aWFsaXplKG1vZGVsKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBiZWdpbkluZGV4ICs9IGdyb3VwQ291bnQ7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOODkeODvOODhOOBruS4jemAj+aYjuW6puOCkuOCs+ODlOODvFxuICAgKlxuICAgKiBAcGFyYW0gbW9kZWwg5a++6LGh44Gu44Oi44OH44OrXG4gICAqL1xuICBwdWJsaWMgY29weVBhcnRPcGFjaXRpZXMobW9kZWw6IEN1YmlzbU1vZGVsKTogdm9pZCB7XG4gICAgZm9yIChcbiAgICAgIGxldCBncm91cEluZGV4ID0gMDtcbiAgICAgIGdyb3VwSW5kZXggPCB0aGlzLl9wYXJ0R3JvdXBzLmdldFNpemUoKTtcbiAgICAgICsrZ3JvdXBJbmRleFxuICAgICkge1xuICAgICAgY29uc3QgcGFydERhdGE6IFBhcnREYXRhID0gdGhpcy5fcGFydEdyb3Vwcy5hdChncm91cEluZGV4KTtcblxuICAgICAgaWYgKHBhcnREYXRhLmxpbmsuZ2V0U2l6ZSgpID09IDApIHtcbiAgICAgICAgY29udGludWU7IC8vIOmAo+WLleOBmeOCi+ODkeODqeODoeODvOOCv+OBr+OBquOBhFxuICAgICAgfVxuXG4gICAgICBjb25zdCBwYXJ0SW5kZXg6IG51bWJlciA9IHRoaXMuX3BhcnRHcm91cHMuYXQoZ3JvdXBJbmRleCkucGFydEluZGV4O1xuICAgICAgY29uc3Qgb3BhY2l0eTogbnVtYmVyID0gbW9kZWwuZ2V0UGFydE9wYWNpdHlCeUluZGV4KHBhcnRJbmRleCk7XG5cbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBsaW5rSW5kZXggPSAwO1xuICAgICAgICBsaW5rSW5kZXggPCBwYXJ0RGF0YS5saW5rLmdldFNpemUoKTtcbiAgICAgICAgKytsaW5rSW5kZXhcbiAgICAgICkge1xuICAgICAgICBjb25zdCBsaW5rUGFydDogUGFydERhdGEgPSBwYXJ0RGF0YS5saW5rLmF0KGxpbmtJbmRleCk7XG4gICAgICAgIGNvbnN0IGxpbmtQYXJ0SW5kZXg6IG51bWJlciA9IGxpbmtQYXJ0LnBhcnRJbmRleDtcblxuICAgICAgICBpZiAobGlua1BhcnRJbmRleCA8IDApIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1vZGVsLnNldFBhcnRPcGFjaXR5QnlJbmRleChsaW5rUGFydEluZGV4LCBvcGFjaXR5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44OR44O844OE44Gu44OV44Kn44O844OJ5pON5L2c44KS6KGM44GG44CCXG4gICAqIEBwYXJhbSBtb2RlbCDlr77osaHjga7jg6Ljg4fjg6tcbiAgICogQHBhcmFtIGRlbHRhVGltZVNlY29uZHMg44OH44Or44K/5pmC6ZaTW+enkl1cbiAgICogQHBhcmFtIGJlZ2luSW5kZXgg44OV44Kn44O844OJ5pON5L2c44KS6KGM44GG44OR44O844OE44Kw44Or44O844OX44Gu5YWI6aCt44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEBwYXJhbSBwYXJ0R3JvdXBDb3VudCDjg5Xjgqfjg7zjg4nmk43kvZzjgpLooYzjgYbjg5Hjg7zjg4TjgrDjg6vjg7zjg5fjga7lgIvmlbBcbiAgICovXG4gIHB1YmxpYyBkb0ZhZGUoXG4gICAgbW9kZWw6IEN1YmlzbU1vZGVsLFxuICAgIGRlbHRhVGltZVNlY29uZHM6IG51bWJlcixcbiAgICBiZWdpbkluZGV4OiBudW1iZXIsXG4gICAgcGFydEdyb3VwQ291bnQ6IG51bWJlclxuICApOiB2b2lkIHtcbiAgICBsZXQgdmlzaWJsZVBhcnRJbmRleCA9IC0xO1xuICAgIGxldCBuZXdPcGFjaXR5ID0gMS4wO1xuXG4gICAgY29uc3QgcGhpID0gMC41O1xuICAgIGNvbnN0IGJhY2tPcGFjaXR5VGhyZXNob2xkID0gMC4xNTtcblxuICAgIC8vIOePvuWcqOOAgeihqOekuueKtuaFi+OBq+OBquOBo+OBpuOBhOOCi+ODkeODvOODhOOCkuWPluW+l1xuICAgIGZvciAobGV0IGk6IG51bWJlciA9IGJlZ2luSW5kZXg7IGkgPCBiZWdpbkluZGV4ICsgcGFydEdyb3VwQ291bnQ7ICsraSkge1xuICAgICAgY29uc3QgcGFydEluZGV4OiBudW1iZXIgPSB0aGlzLl9wYXJ0R3JvdXBzLmF0KGkpLnBhcnRJbmRleDtcbiAgICAgIGNvbnN0IHBhcmFtSW5kZXg6IG51bWJlciA9IHRoaXMuX3BhcnRHcm91cHMuYXQoaSkucGFyYW1ldGVySW5kZXg7XG5cbiAgICAgIGlmIChtb2RlbC5nZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgocGFyYW1JbmRleCkgPiBFcHNpbG9uKSB7XG4gICAgICAgIGlmICh2aXNpYmxlUGFydEluZGV4ID49IDApIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHZpc2libGVQYXJ0SW5kZXggPSBpO1xuICAgICAgICBuZXdPcGFjaXR5ID0gbW9kZWwuZ2V0UGFydE9wYWNpdHlCeUluZGV4KHBhcnRJbmRleCk7XG5cbiAgICAgICAgLy8g5paw44GX44GE5LiN6YCP5piO5bqm44KS6KiI566XXG4gICAgICAgIG5ld09wYWNpdHkgKz0gZGVsdGFUaW1lU2Vjb25kcyAvIHRoaXMuX2ZhZGVUaW1lU2Vjb25kcztcblxuICAgICAgICBpZiAobmV3T3BhY2l0eSA+IDEuMCkge1xuICAgICAgICAgIG5ld09wYWNpdHkgPSAxLjA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodmlzaWJsZVBhcnRJbmRleCA8IDApIHtcbiAgICAgIHZpc2libGVQYXJ0SW5kZXggPSAwO1xuICAgICAgbmV3T3BhY2l0eSA9IDEuMDtcbiAgICB9XG5cbiAgICAvLyDooajnpLrjg5Hjg7zjg4TjgIHpnZ7ooajnpLrjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqbjgpLoqK3lrprjgZnjgotcbiAgICBmb3IgKGxldCBpOiBudW1iZXIgPSBiZWdpbkluZGV4OyBpIDwgYmVnaW5JbmRleCArIHBhcnRHcm91cENvdW50OyArK2kpIHtcbiAgICAgIGNvbnN0IHBhcnRzSW5kZXg6IG51bWJlciA9IHRoaXMuX3BhcnRHcm91cHMuYXQoaSkucGFydEluZGV4O1xuXG4gICAgICAvLyDooajnpLrjg5Hjg7zjg4Tjga7oqK3lrppcbiAgICAgIGlmICh2aXNpYmxlUGFydEluZGV4ID09IGkpIHtcbiAgICAgICAgbW9kZWwuc2V0UGFydE9wYWNpdHlCeUluZGV4KHBhcnRzSW5kZXgsIG5ld09wYWNpdHkpOyAvLyDlhYjjgavoqK3lrppcbiAgICAgIH1cbiAgICAgIC8vIOmdnuihqOekuuODkeODvOODhOOBruioreWumlxuICAgICAgZWxzZSB7XG4gICAgICAgIGxldCBvcGFjaXR5OiBudW1iZXIgPSBtb2RlbC5nZXRQYXJ0T3BhY2l0eUJ5SW5kZXgocGFydHNJbmRleCk7XG4gICAgICAgIGxldCBhMTogbnVtYmVyOyAvLyDoqIjnrpfjgavjgojjgaPjgabmsYLjgoHjgonjgozjgovkuI3pgI/mmI7luqZcblxuICAgICAgICBpZiAobmV3T3BhY2l0eSA8IHBoaSkge1xuICAgICAgICAgIGExID0gKG5ld09wYWNpdHkgKiAocGhpIC0gMSkpIC8gcGhpICsgMS4wOyAvLyAoMCwxKSwocGhpLHBoaSnjgpLpgJrjgovnm7Tnt5rlvI9cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhMSA9ICgoMSAtIG5ld09wYWNpdHkpICogcGhpKSAvICgxLjAgLSBwaGkpOyAvLyAoMSwwKSwocGhpLHBoaSnjgpLpgJrjgovnm7Tnt5rlvI9cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOiDjOaZr+OBruimi+OBiOOCi+WJsuWQiOOCkuWItumZkOOBmeOCi+WgtOWQiFxuICAgICAgICBjb25zdCBiYWNrT3BhY2l0eTogbnVtYmVyID0gKDEuMCAtIGExKSAqICgxLjAgLSBuZXdPcGFjaXR5KTtcblxuICAgICAgICBpZiAoYmFja09wYWNpdHkgPiBiYWNrT3BhY2l0eVRocmVzaG9sZCkge1xuICAgICAgICAgIGExID0gMS4wIC0gYmFja09wYWNpdHlUaHJlc2hvbGQgLyAoMS4wIC0gbmV3T3BhY2l0eSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3BhY2l0eSA+IGExKSB7XG4gICAgICAgICAgb3BhY2l0eSA9IGExOyAvLyDoqIjnrpfjga7kuI3pgI/mmI7luqbjgojjgorjgoLlpKfjgY3jgZHjgozjgbDvvIjmv4PjgZHjgozjgbDvvInkuI3pgI/mmI7luqbjgpLkuIrjgZLjgotcbiAgICAgICAgfVxuXG4gICAgICAgIG1vZGVsLnNldFBhcnRPcGFjaXR5QnlJbmRleChwYXJ0c0luZGV4LCBvcGFjaXR5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fZmFkZVRpbWVTZWNvbmRzID0gRGVmYXVsdEZhZGVJblNlY29uZHM7XG4gICAgdGhpcy5fbGFzdE1vZGVsID0gbnVsbDtcbiAgICB0aGlzLl9wYXJ0R3JvdXBzID0gbmV3IGNzbVZlY3RvcjxQYXJ0RGF0YT4oKTtcbiAgICB0aGlzLl9wYXJ0R3JvdXBDb3VudHMgPSBuZXcgY3NtVmVjdG9yPG51bWJlcj4oKTtcbiAgfVxuXG4gIF9wYXJ0R3JvdXBzOiBjc21WZWN0b3I8UGFydERhdGE+OyAvLyDjg5Hjg7zjg4TjgrDjg6vjg7zjg5dcbiAgX3BhcnRHcm91cENvdW50czogY3NtVmVjdG9yPG51bWJlcj47IC8vIOOBneOCjOOBnuOCjOOBruODkeODvOODhOOCsOODq+ODvOODl+OBruWAi+aVsFxuICBfZmFkZVRpbWVTZWNvbmRzOiBudW1iZXI7IC8vIOODleOCp+ODvOODieaZgumWk1vnp5JdXG4gIF9sYXN0TW9kZWw6IEN1YmlzbU1vZGVsOyAvLyDliY3lm57mk43kvZzjgZfjgZ/jg6Ljg4fjg6tcbn1cblxuLyoqXG4gKiDjg5Hjg7zjg4Tjgavjgb7jgaTjgo/jgovjg4fjg7zjgr/jgpLnrqHnkIZcbiAqL1xuZXhwb3J0IGNsYXNzIFBhcnREYXRhIHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgY29uc3RydWN0b3Iodj86IFBhcnREYXRhKSB7XG4gICAgdGhpcy5wYXJhbWV0ZXJJbmRleCA9IDA7XG4gICAgdGhpcy5wYXJ0SW5kZXggPSAwO1xuICAgIHRoaXMubGluayA9IG5ldyBjc21WZWN0b3I8UGFydERhdGE+KCk7XG5cbiAgICBpZiAodiAhPSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMucGFydElkID0gdi5wYXJ0SWQ7XG5cbiAgICAgIGZvciAoXG4gICAgICAgIGNvbnN0IGl0ZTogaXRlcmF0b3I8UGFydERhdGE+ID0gdi5saW5rLmJlZ2luKCk7XG4gICAgICAgIGl0ZS5ub3RFcXVhbCh2LmxpbmsuZW5kKCkpO1xuICAgICAgICBpdGUucHJlSW5jcmVtZW50KClcbiAgICAgICkge1xuICAgICAgICB0aGlzLmxpbmsucHVzaEJhY2soaXRlLnB0cigpLmNsb25lKCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiA95ryU566X5a2Q44Gu44Kq44O844OQ44O844Ot44O844OJXG4gICAqL1xuICBwdWJsaWMgYXNzaWdubWVudCh2OiBQYXJ0RGF0YSk6IFBhcnREYXRhIHtcbiAgICB0aGlzLnBhcnRJZCA9IHYucGFydElkO1xuXG4gICAgZm9yIChcbiAgICAgIGNvbnN0IGl0ZTogaXRlcmF0b3I8UGFydERhdGE+ID0gdi5saW5rLmJlZ2luKCk7XG4gICAgICBpdGUubm90RXF1YWwodi5saW5rLmVuZCgpKTtcbiAgICAgIGl0ZS5wcmVJbmNyZW1lbnQoKVxuICAgICkge1xuICAgICAgdGhpcy5saW5rLnB1c2hCYWNrKGl0ZS5wdHIoKS5jbG9uZSgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDliJ3mnJ/ljJZcbiAgICogQHBhcmFtIG1vZGVsIOWIneacn+WMluOBq+S9v+eUqOOBmeOCi+ODouODh+ODq1xuICAgKi9cbiAgcHVibGljIGluaXRpYWxpemUobW9kZWw6IEN1YmlzbU1vZGVsKTogdm9pZCB7XG4gICAgdGhpcy5wYXJhbWV0ZXJJbmRleCA9IG1vZGVsLmdldFBhcmFtZXRlckluZGV4KHRoaXMucGFydElkKTtcbiAgICB0aGlzLnBhcnRJbmRleCA9IG1vZGVsLmdldFBhcnRJbmRleCh0aGlzLnBhcnRJZCk7XG5cbiAgICBtb2RlbC5zZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgodGhpcy5wYXJhbWV0ZXJJbmRleCwgMSk7XG4gIH1cblxuICAvKipcbiAgICog44Kq44OW44K444Kn44Kv44OI44Gu44Kz44OU44O844KS55Sf5oiQ44GZ44KLXG4gICAqL1xuICBwdWJsaWMgY2xvbmUoKTogUGFydERhdGEge1xuICAgIGNvbnN0IGNsb25lUGFydERhdGE6IFBhcnREYXRhID0gbmV3IFBhcnREYXRhKCk7XG5cbiAgICBjbG9uZVBhcnREYXRhLnBhcnRJZCA9IHRoaXMucGFydElkO1xuICAgIGNsb25lUGFydERhdGEucGFyYW1ldGVySW5kZXggPSB0aGlzLnBhcmFtZXRlckluZGV4O1xuICAgIGNsb25lUGFydERhdGEucGFydEluZGV4ID0gdGhpcy5wYXJ0SW5kZXg7XG4gICAgY2xvbmVQYXJ0RGF0YS5saW5rID0gbmV3IGNzbVZlY3RvcjxQYXJ0RGF0YT4oKTtcblxuICAgIGZvciAoXG4gICAgICBsZXQgaXRlOiBpdGVyYXRvcjxQYXJ0RGF0YT4gPSB0aGlzLmxpbmsuYmVnaW4oKTtcbiAgICAgIGl0ZS5ub3RFcXVhbCh0aGlzLmxpbmsuZW5kKCkpO1xuICAgICAgaXRlLmluY3JlbWVudCgpXG4gICAgKSB7XG4gICAgICBjbG9uZVBhcnREYXRhLmxpbmsucHVzaEJhY2soaXRlLnB0cigpLmNsb25lKCkpO1xuICAgIH1cblxuICAgIHJldHVybiBjbG9uZVBhcnREYXRhO1xuICB9XG5cbiAgcGFydElkOiBDdWJpc21JZEhhbmRsZTsgLy8g44OR44O844OESURcbiAgcGFyYW1ldGVySW5kZXg6IG51bWJlcjsgLy8g44OR44Op44Oh44O844K/44Gu44Kk44Oz44OH44OD44Kv44K5XG4gIHBhcnRJbmRleDogbnVtYmVyOyAvLyDjg5Hjg7zjg4Tjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgbGluazogY3NtVmVjdG9yPFBhcnREYXRhPjsgLy8g6YCj5YuV44GZ44KL44OR44Op44Oh44O844K/XG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbXBvc2UnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVBvc2UgPSAkLkN1YmlzbVBvc2U7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbVBvc2UgPSAkLkN1YmlzbVBvc2U7XG4gIGV4cG9ydCBjb25zdCBQYXJ0RGF0YSA9ICQuUGFydERhdGE7XG4gIGV4cG9ydCB0eXBlIFBhcnREYXRhID0gJC5QYXJ0RGF0YTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IEN1YmlzbUlkSGFuZGxlIH0gZnJvbSAnLi9pZC9jdWJpc21pZCc7XG5pbXBvcnQgeyBjc21NYXAgfSBmcm9tICcuL3R5cGUvY3NtbWFwJztcblxuLyoqXG4gKiDjg6Ljg4fjg6voqK3lrprmg4XloLHjgpLlj5bjgormibHjgYbplqLmlbDjgpLlrqPoqIDjgZfjgZ/ntJTnsovku67mg7Pjgq/jg6njgrnjgIJcbiAqXG4gKiDjgZPjga7jgq/jg6njgrnjgpLntpnmib/jgZnjgovjgZPjgajjgafjgIHjg6Ljg4fjg6voqK3lrprmg4XloLHjgpLlj5bjgormibHjgYbjgq/jg6njgrnjgavjgarjgovjgIJcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIElDdWJpc21Nb2RlbFNldHRpbmcge1xuICAvKipcbiAgICogTW9j44OV44Kh44Kk44Or44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4gTW9j44OV44Kh44Kk44Or44Gu5ZCN5YmNXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0TW9kZWxGaWxlTmFtZSgpOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OBjOS9v+eUqOOBmeOCi+ODhuOCr+OCueODgeODo+OBruaVsOOCkuWPluW+l+OBmeOCi1xuICAgKiDjg4bjgq/jgrnjg4Hjg6Pjga7mlbBcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRUZXh0dXJlQ291bnQoKTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiDjg4bjgq/jgrnjg4Hjg6PjgYzphY3nva7jgZXjgozjgZ/jg4fjgqPjg6zjgq/jg4jjg6rjga7lkI3liY3jgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDjg4bjgq/jgrnjg4Hjg6PjgYzphY3nva7jgZXjgozjgZ/jg4fjgqPjg6zjgq/jg4jjg6rjga7lkI3liY1cbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRUZXh0dXJlRGlyZWN0b3J5KCk6IHN0cmluZztcblxuICAvKipcbiAgICog44Oi44OH44Or44GM5L2/55So44GZ44KL44OG44Kv44K544OB44Oj44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHJldHVybiDjg4bjgq/jgrnjg4Hjg6Pjga7lkI3liY1cbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRUZXh0dXJlRmlsZU5hbWUoaW5kZXg6IG51bWJlcik6IHN0cmluZztcblxuICAvKipcbiAgICog44Oi44OH44Or44Gr6Kit5a6a44GV44KM44Gf5b2T44Gf44KK5Yik5a6a44Gu5pWw44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g44Oi44OH44Or44Gr6Kit5a6a44GV44KM44Gf5b2T44Gf44KK5Yik5a6a44Gu5pWwXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0SGl0QXJlYXNDb3VudCgpOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIOW9k+OBn+OCiuWIpOWumuOBq+ioreWumuOBleOCjOOBn0lE44KS5Y+W5b6X44GZ44KLXG4gICAqXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga5pbmRleFxuICAgKiBAcmV0dXJuIOW9k+OBn+OCiuWIpOWumuOBq+ioreWumuOBleOCjOOBn0lEXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0SGl0QXJlYUlkKGluZGV4OiBudW1iZXIpOiBDdWJpc21JZEhhbmRsZTtcblxuICAvKipcbiAgICog5b2T44Gf44KK5Yik5a6a44Gr6Kit5a6a44GV44KM44Gf5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHJldHVybiDlvZPjgZ/jgorliKTlrprjgavoqK3lrprjgZXjgozjgZ/lkI3liY1cbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRIaXRBcmVhTmFtZShpbmRleDogbnVtYmVyKTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiDniannkIbmvJTnrpfoqK3lrprjg5XjgqHjgqTjg6vjga7lkI3liY3jgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDniannkIbmvJTnrpfoqK3lrprjg5XjgqHjgqTjg6vjga7lkI3liY1cbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRQaHlzaWNzRmlsZU5hbWUoKTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiDjg5Hjg7zjg4TliIfjgormm7/jgYjoqK3lrprjg5XjgqHjgqTjg6vjga7lkI3liY3jgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDjg5Hjg7zjg4TliIfjgormm7/jgYjoqK3lrprjg5XjgqHjgqTjg6vjga7lkI3liY1cbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRQb3NlRmlsZU5hbWUoKTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiDooajmg4XoqK3lrprjg5XjgqHjgqTjg6vjga7mlbDjgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDooajmg4XoqK3lrprjg5XjgqHjgqTjg6vjga7mlbBcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRFeHByZXNzaW9uQ291bnQoKTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiDooajmg4XoqK3lrprjg5XjgqHjgqTjg6vjgpLorZjliKXjgZnjgovlkI3liY3vvIjliKXlkI3vvInjgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcmV0dXJuIOihqOaDheOBruWQjeWJjVxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldEV4cHJlc3Npb25OYW1lKGluZGV4OiBudW1iZXIpOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIOihqOaDheioreWumuODleOCoeOCpOODq+OBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAqIEByZXR1cm4g6KGo5oOF6Kit5a6a44OV44Kh44Kk44Or44Gu5ZCN5YmNXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0RXhwcmVzc2lvbkZpbGVOYW1lKGluZGV4OiBudW1iZXIpOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruaVsOOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruaVsFxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldE1vdGlvbkdyb3VwQ291bnQoKTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7lkI3liY3jgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruWQjeWJjVxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldE1vdGlvbkdyb3VwTmFtZShpbmRleDogbnVtYmVyKTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjgavlkKvjgb7jgozjgovjg6Ljg7zjgrfjg6fjg7Pjga7mlbDjgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGdyb3VwTmFtZSDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7lkI3liY1cbiAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7mlbBcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRNb3Rpb25Db3VudChncm91cE5hbWU6IHN0cmluZyk6IG51bWJlcjtcblxuICAvKipcbiAgICog44Kw44Or44O844OX5ZCN44Go44Kk44Oz44OH44OD44Kv44K55YCk44GL44KJ44Oi44O844K344On44Oz44OV44Kh44Kk44Or5ZCN44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBncm91cE5hbWUg44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5ZCN5YmNXG4gICAqIEBwYXJhbSBpbmRleCAgICAg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAqIEByZXR1cm4g44Oi44O844K344On44Oz44OV44Kh44Kk44Or44Gu5ZCN5YmNXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0TW90aW9uRmlsZU5hbWUoZ3JvdXBOYW1lOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBq+WvvuW/nOOBmeOCi+OCteOCpuODs+ODieODleOCoeOCpOODq+OBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gZ3JvdXBOYW1lIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruWQjeWJjVxuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAqIEByZXR1cm4g44K144Km44Oz44OJ44OV44Kh44Kk44Or44Gu5ZCN5YmNXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0TW90aW9uU291bmRGaWxlTmFtZShcbiAgICBncm91cE5hbWU6IHN0cmluZyxcbiAgICBpbmRleDogbnVtYmVyXG4gICk6IHN0cmluZztcblxuICAvKipcbiAgICog44Oi44O844K344On44Oz6ZaL5aeL5pmC44Gu44OV44Kn44O844OJ44Kk44Oz5Yem55CG5pmC6ZaT44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBncm91cE5hbWUg44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5ZCN5YmNXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHJldHVybiDjg5Xjgqfjg7zjg4njgqTjg7Plh6bnkIbmmYLplpNb56eSXVxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldE1vdGlvbkZhZGVJblRpbWVWYWx1ZShcbiAgICBncm91cE5hbWU6IHN0cmluZyxcbiAgICBpbmRleDogbnVtYmVyXG4gICk6IG51bWJlcjtcblxuICAvKipcbiAgICog44Oi44O844K344On44Oz57WC5LqG5pmC44Gu44OV44Kn44O844OJ44Ki44Km44OI5Yem55CG5pmC6ZaT44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBncm91cE5hbWUg44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5ZCN5YmNXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHJldHVybiDjg5Xjgqfjg7zjg4njgqLjgqbjg4jlh6bnkIbmmYLplpNb56eSXVxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldE1vdGlvbkZhZGVPdXRUaW1lVmFsdWUoXG4gICAgZ3JvdXBOYW1lOiBzdHJpbmcsXG4gICAgaW5kZXg6IG51bWJlclxuICApOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIOODpuODvOOCtuODvOODh+ODvOOCv+OBruODleOCoeOCpOODq+WQjeOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOODpuODvOOCtuODvOODh+ODvOOCv+OBruODleOCoeOCpOODq+WQjVxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldFVzZXJEYXRhRmlsZSgpOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIOODrOOCpOOCouOCpuODiOaDheWgseOCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gb3V0TGF5b3V0TWFwIGNzbU1hcOOCr+ODqeOCueOBruOCpOODs+OCueOCv+ODs+OCuVxuICAgKiBAcmV0dXJuIHRydWUg44Os44Kk44Ki44Km44OI5oOF5aCx44GM5a2Y5Zyo44GZ44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug44Os44Kk44Ki44Km44OI5oOF5aCx44GM5a2Y5Zyo44GX44Gq44GEXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0TGF5b3V0TWFwKG91dExheW91dE1hcDogY3NtTWFwPHN0cmluZywgbnVtYmVyPik6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIOebruODkeODgeOBq+mWoumAo+S7mOOBkeOCieOCjOOBn+ODkeODqeODoeODvOOCv+OBruaVsOOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOebruODkeODgeOBq+mWoumAo+S7mOOBkeOCieOCjOOBn+ODkeODqeODoeODvOOCv+OBruaVsFxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldEV5ZUJsaW5rUGFyYW1ldGVyQ291bnQoKTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiDnm67jg5Hjg4HjgavplqLpgKPku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga5JROOCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAqIEByZXR1cm4g44OR44Op44Oh44O844K/SURcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRFeWVCbGlua1BhcmFtZXRlcklkKGluZGV4OiBudW1iZXIpOiBDdWJpc21JZEhhbmRsZTtcblxuICAvKipcbiAgICog44Oq44OD44OX44K344Oz44Kv44Gr6Zai6YCj5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44Gu5pWw44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g44Oq44OD44OX44K344Oz44Kv44Gr6Zai6YCj5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44Gu5pWwXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0TGlwU3luY1BhcmFtZXRlckNvdW50KCk6IG51bWJlcjtcblxuICAvKipcbiAgICog44Oq44OD44OX44K344Oz44Kv44Gr6Zai6YCj5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44Gu5pWw44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHJldHVybiDjg5Hjg6njg6Hjg7zjgr9JRFxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldExpcFN5bmNQYXJhbWV0ZXJJZChpbmRleDogbnVtYmVyKTogQ3ViaXNtSWRIYW5kbGU7XG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2ljdWJpc21tb2RlbHNldHRpbmcnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IElDdWJpc21Nb2RlbFNldHRpbmcgPSAkLklDdWJpc21Nb2RlbFNldHRpbmc7XG4gIGV4cG9ydCB0eXBlIElDdWJpc21Nb2RlbFNldHRpbmcgPSAkLklDdWJpc21Nb2RlbFNldHRpbmc7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBjc21TdHJpbmcgfSBmcm9tICcuLi90eXBlL2NzbXN0cmluZyc7XG5cbi8qKlxuICog44OR44Op44Oh44O844K/5ZCN44O744OR44O844OE5ZCN44O7RHJhd2FibGXlkI3jgpLkv53mjIFcbiAqXG4gKiDjg5Hjg6njg6Hjg7zjgr/lkI3jg7vjg5Hjg7zjg4TlkI3jg7tEcmF3YWJsZeWQjeOCkuS/neaMgeOBmeOCi+OCr+ODqeOCueOAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtSWQge1xuICAvKipcbiAgICogSUTlkI3jgpLlj5blvpfjgZnjgotcbiAgICovXG4gIHB1YmxpYyBnZXRTdHJpbmcoKTogY3NtU3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5faWQ7XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoaWQ6IHN0cmluZyB8IGNzbVN0cmluZykge1xuICAgIGlmICh0eXBlb2YgaWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLl9pZCA9IG5ldyBjc21TdHJpbmcoaWQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2lkID0gaWQ7XG4gIH1cblxuICAvKipcbiAgICogaWTjgpLmr5TovINcbiAgICogQHBhcmFtIGMg5q+U6LyD44GZ44KLaWRcbiAgICogQHJldHVybiDlkIzjgZjjgarjgonjgbB0cnVlLOeVsOOBquOBo+OBpuOBhOOCjOOBsGZhbHNl44KS6L+U44GZXG4gICAqL1xuICBwdWJsaWMgaXNFcXVhbChjOiBzdHJpbmcgfCBjc21TdHJpbmcgfCBDdWJpc21JZCk6IGJvb2xlYW4ge1xuICAgIGlmICh0eXBlb2YgYyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pZC5pc0VxdWFsKGMpO1xuICAgIH0gZWxzZSBpZiAoYyBpbnN0YW5jZW9mIGNzbVN0cmluZykge1xuICAgICAgcmV0dXJuIHRoaXMuX2lkLmlzRXF1YWwoYy5zKTtcbiAgICB9IGVsc2UgaWYgKGMgaW5zdGFuY2VvZiBDdWJpc21JZCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2lkLmlzRXF1YWwoYy5faWQucyk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBpZOOCkuavlOi8g1xuICAgKiBAcGFyYW0gYyDmr5TovIPjgZnjgotpZFxuICAgKiBAcmV0dXJuIOWQjOOBmOOBquOCieOBsHRydWUs55Ww44Gq44Gj44Gm44GE44KM44GwZmFsc2XjgpLov5TjgZlcbiAgICovXG4gIHB1YmxpYyBpc05vdEVxdWFsKGM6IHN0cmluZyB8IGNzbVN0cmluZyB8IEN1YmlzbUlkKTogYm9vbGVhbiB7XG4gICAgaWYgKHR5cGVvZiBjID09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gIXRoaXMuX2lkLmlzRXF1YWwoYyk7XG4gICAgfSBlbHNlIGlmIChjIGluc3RhbmNlb2YgY3NtU3RyaW5nKSB7XG4gICAgICByZXR1cm4gIXRoaXMuX2lkLmlzRXF1YWwoYy5zKTtcbiAgICB9IGVsc2UgaWYgKGMgaW5zdGFuY2VvZiBDdWJpc21JZCkge1xuICAgICAgcmV0dXJuICF0aGlzLl9pZC5pc0VxdWFsKGMuX2lkLnMpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwcml2YXRlIF9pZDogY3NtU3RyaW5nOyAvLyBJROWQjVxufVxuXG5leHBvcnQgZGVjbGFyZSB0eXBlIEN1YmlzbUlkSGFuZGxlID0gQ3ViaXNtSWQ7XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbWlkJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21JZCA9ICQuQ3ViaXNtSWQ7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbUlkID0gJC5DdWJpc21JZDtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtSWRIYW5kbGUgPSAkLkN1YmlzbUlkSGFuZGxlO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgY3NtU3RyaW5nIH0gZnJvbSAnLi4vdHlwZS9jc21zdHJpbmcnO1xuaW1wb3J0IHsgY3NtVmVjdG9yIH0gZnJvbSAnLi4vdHlwZS9jc212ZWN0b3InO1xuaW1wb3J0IHsgQ3ViaXNtSWQgfSBmcm9tICcuL2N1YmlzbWlkJztcblxuLyoqXG4gKiBJROWQjeOBrueuoeeQhlxuICpcbiAqIElE5ZCN44KS566h55CG44GZ44KL44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21JZE1hbmFnZXIge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5faWRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21JZD4oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5faWRzLmdldFNpemUoKTsgKytpKSB7XG4gICAgICB0aGlzLl9pZHMuc2V0KGksIHZvaWQgMCk7XG4gICAgfVxuICAgIHRoaXMuX2lkcyA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogSUTlkI3jgpLjg6rjgrnjg4jjgYvjgonnmbvpjLJcbiAgICpcbiAgICogQHBhcmFtIGlkcyBJROWQjeODquOCueODiFxuICAgKiBAcGFyYW0gY291bnQgSUTjga7lgIvmlbBcbiAgICovXG4gIHB1YmxpYyByZWdpc3RlcklkcyhpZHM6IHN0cmluZ1tdIHwgY3NtU3RyaW5nW10pOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlkcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5yZWdpc3RlcklkKGlkc1tpXSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIElE5ZCN44KS55m76YyyXG4gICAqXG4gICAqIEBwYXJhbSBpZCBJROWQjVxuICAgKi9cbiAgcHVibGljIHJlZ2lzdGVySWQoaWQ6IHN0cmluZyB8IGNzbVN0cmluZyk6IEN1YmlzbUlkIHtcbiAgICBsZXQgcmVzdWx0OiBDdWJpc21JZCA9IG51bGw7XG5cbiAgICBpZiAoJ3N0cmluZycgPT0gdHlwZW9mIGlkKSB7XG4gICAgICBpZiAoKHJlc3VsdCA9IHRoaXMuZmluZElkKGlkKSkgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICByZXN1bHQgPSBuZXcgQ3ViaXNtSWQoaWQpO1xuICAgICAgdGhpcy5faWRzLnB1c2hCYWNrKHJlc3VsdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnJlZ2lzdGVySWQoaWQucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBJROWQjeOBi+OCiUlE44KS5Y+W5b6X44GZ44KLXG4gICAqXG4gICAqIEBwYXJhbSBpZCBJROWQjVxuICAgKi9cbiAgcHVibGljIGdldElkKGlkOiBjc21TdHJpbmcgfCBzdHJpbmcpOiBDdWJpc21JZCB7XG4gICAgcmV0dXJuIHRoaXMucmVnaXN0ZXJJZChpZCk7XG4gIH1cblxuICAvKipcbiAgICogSUTlkI3jgYvjgolJROOBrueiuuiqjVxuICAgKlxuICAgKiBAcmV0dXJuIHRydWUg5a2Y5Zyo44GZ44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug5a2Y5Zyo44GX44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNFeGlzdChpZDogY3NtU3RyaW5nIHwgc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgaWYgKCdzdHJpbmcnID09IHR5cGVvZiBpZCkge1xuICAgICAgcmV0dXJuIHRoaXMuZmluZElkKGlkKSAhPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5pc0V4aXN0KGlkLnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIElE5ZCN44GL44KJSUTjgpLmpJzntKLjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtIGlkIElE5ZCNXG4gICAqIEByZXR1cm4g55m76Yyy44GV44KM44Gm44GE44KLSUTjgILjgarjgZHjgozjgbBOVUxM44CCXG4gICAqL1xuICBwcml2YXRlIGZpbmRJZChpZDogc3RyaW5nKTogQ3ViaXNtSWQge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5faWRzLmdldFNpemUoKTsgKytpKSB7XG4gICAgICBpZiAodGhpcy5faWRzLmF0KGkpLmdldFN0cmluZygpLmlzRXF1YWwoaWQpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pZHMuYXQoaSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBwcml2YXRlIF9pZHM6IGNzbVZlY3RvcjxDdWJpc21JZD47IC8vIOeZu+mMsuOBleOCjOOBpuOBhOOCi0lE44Gu44Oq44K544OIXG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbWlkbWFuYWdlcic7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtSWRNYW5hZ2VyID0gJC5DdWJpc21JZE1hbmFnZXI7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbUlkTWFuYWdlciA9ICQuQ3ViaXNtSWRNYW5hZ2VyO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQ3ViaXNtSWRNYW5hZ2VyIH0gZnJvbSAnLi9pZC9jdWJpc21pZG1hbmFnZXInO1xuaW1wb3J0IHsgQ3ViaXNtUmVuZGVyZXIgfSBmcm9tICcuL3JlbmRlcmluZy9jdWJpc21yZW5kZXJlcic7XG5pbXBvcnQge1xuICBDU01fQVNTRVJULFxuICBDdWJpc21Mb2dJbmZvLFxuICBDdWJpc21Mb2dXYXJuaW5nLFxufSBmcm9tICcuL3V0aWxzL2N1YmlzbWRlYnVnJztcbmltcG9ydCB7IFZhbHVlIH0gZnJvbSAnLi91dGlscy9jdWJpc21qc29uJztcblxuZXhwb3J0IGZ1bmN0aW9uIHN0cnRvZChzOiBzdHJpbmcsIGVuZFB0cjogc3RyaW5nW10pOiBudW1iZXIge1xuICBsZXQgaW5kZXggPSAwO1xuICBmb3IgKGxldCBpID0gMTsgOyBpKyspIHtcbiAgICBjb25zdCB0ZXN0Qzogc3RyaW5nID0gcy5zbGljZShpIC0gMSwgaSk7XG5cbiAgICAvLyDmjIfmlbDjg7vjg57jgqTjg4rjgrnjga7lj6/og73mgKfjgYzjgYLjgovjga7jgafjgrnjgq3jg4Pjg5fjgZnjgotcbiAgICBpZiAodGVzdEMgPT0gJ2UnIHx8IHRlc3RDID09ICctJyB8fCB0ZXN0QyA9PSAnRScpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH0gLy8g5paH5a2X5YiX44Gu56+E5Zuy44KS5bqD44GS44Gm44GE44GPXG5cbiAgICBjb25zdCB0ZXN0OiBzdHJpbmcgPSBzLnN1YnN0cmluZygwLCBpKTtcbiAgICBjb25zdCBudW1iZXIgPSBOdW1iZXIodGVzdCk7XG4gICAgaWYgKGlzTmFOKG51bWJlcikpIHtcbiAgICAgIC8vIOaVsOWApOOBqOOBl+OBpuiqjeitmOOBp+OBjeOBquOBj+OBquOBo+OBn+OBruOBp+e1guS6hlxuICAgICAgYnJlYWs7XG4gICAgfSAvLyDmnIDlvozjgavmlbDlgKTjgajjgZfjgabjgafjgY3jgZ9pbmRleOOCkuagvOe0jeOBl+OBpuOBiuOBj1xuXG4gICAgaW5kZXggPSBpO1xuICB9XG4gIGxldCBkID0gcGFyc2VGbG9hdChzKTsgLy8g44OR44O844K544GX44Gf5pWw5YCkXG5cbiAgaWYgKGlzTmFOKGQpKSB7XG4gICAgLy8g5pWw5YCk44Go44GX44Gm6KqN6K2Y44Gn44GN44Gq44GP44Gq44Gj44Gf44Gu44Gn57WC5LqGXG4gICAgZCA9IE5hTjtcbiAgfVxuXG4gIGVuZFB0clswXSA9IHMuc2xpY2UoaW5kZXgpOyAvLyDlvozntprjga7mloflrZfliJdcbiAgcmV0dXJuIGQ7XG59XG5cbi8vIOODleOCoeOCpOODq+OCueOCs+ODvOODl+OBruWkieaVsOOCkuWIneacn+WMllxuXG5sZXQgc19pc1N0YXJ0ZWQgPSBmYWxzZTtcbmxldCBzX2lzSW5pdGlhbGl6ZWQgPSBmYWxzZTtcbmxldCBzX29wdGlvbjogT3B0aW9uID0gbnVsbDtcbmxldCBzX2N1YmlzbUlkTWFuYWdlcjogQ3ViaXNtSWRNYW5hZ2VyID0gbnVsbDtcblxuLyoqXG4gKiBGcmFtZXdvcmvlhoXjgafkvb/jgYblrprmlbDjga7lrqPoqIBcbiAqL1xuZXhwb3J0IGNvbnN0IENvbnN0YW50ID0gT2JqZWN0LmZyZWV6ZTxSZWNvcmQ8c3RyaW5nLCBudW1iZXI+Pih7XG4gIHZlcnRleE9mZnNldDogMCwgLy8g44Oh44OD44K344Ol6aCC54K544Gu44Kq44OV44K744OD44OI5YCkXG4gIHZlcnRleFN0ZXA6IDIsIC8vIOODoeODg+OCt+ODpemggueCueOBruOCueODhuODg+ODl+WApFxufSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBjc21EZWxldGU8VD4oYWRkcmVzczogVCk6IHZvaWQge1xuICBpZiAoIWFkZHJlc3MpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBhZGRyZXNzID0gdm9pZCAwO1xufVxuXG4vKipcbiAqIExpdmUyRCBDdWJpc20gU0RLIE9yaWdpbmFsIFdvcmtmbG93IFNES+OBruOCqOODs+ODiOODquODneOCpOODs+ODiFxuICog5Yip55So6ZaL5aeL5pmC44GvQ3ViaXNtRnJhbWV3b3JrLmluaXRpYWxpemUoKeOCkuWRvOOBs+OAgUN1YmlzbUZyYW1ld29yay5kaXNwb3NlKCnjgafntYLkuobjgZnjgovjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbUZyYW1ld29yayB7XG4gIC8qKlxuICAgKiBDdWJpc20gRnJhbWV3b3Jr44GuQVBJ44KS5L2/55So5Y+v6IO944Gr44GZ44KL44CCXG4gICAqICBBUEnjgpLlrp/ooYzjgZnjgovliY3jgavlv4XjgZrjgZPjga7plqLmlbDjgpLlrp/ooYzjgZnjgovjgZPjgajjgIJcbiAgICogIOS4gOW6pua6luWCmeOBjOWujOS6huOBl+OBpuS7pemZjeOBr+OAgeWGjeOBs+Wun+ihjOOBl+OBpuOCguWGhemDqOWHpueQhuOBjOOCueOCreODg+ODl+OBleOCjOOBvuOBmeOAglxuICAgKlxuICAgKiBAcGFyYW0gICAgb3B0aW9uICAgICAgT3B0aW9u44Kv44Op44K544Gu44Kk44Oz44K544K/44Oz44K5XG4gICAqXG4gICAqIEByZXR1cm4gICDmupblgpnlh6bnkIbjgYzlrozkuobjgZfjgZ/jgol0cnVl44GM6L+U44KK44G+44GZ44CCXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHN0YXJ0VXAob3B0aW9uOiBPcHRpb24gPSBudWxsKTogYm9vbGVhbiB7XG4gICAgaWYgKHNfaXNTdGFydGVkKSB7XG4gICAgICBDdWJpc21Mb2dJbmZvKCdDdWJpc21GcmFtZXdvcmsuc3RhcnRVcCgpIGlzIGFscmVhZHkgZG9uZS4nKTtcbiAgICAgIHJldHVybiBzX2lzU3RhcnRlZDtcbiAgICB9XG5cbiAgICBzX29wdGlvbiA9IG9wdGlvbjtcblxuICAgIGlmIChzX29wdGlvbiAhPSBudWxsKSB7XG4gICAgICBMaXZlMkRDdWJpc21Db3JlLkxvZ2dpbmcuY3NtU2V0TG9nRnVuY3Rpb24oc19vcHRpb24ubG9nRnVuY3Rpb24pO1xuICAgIH1cblxuICAgIHNfaXNTdGFydGVkID0gdHJ1ZTtcblxuICAgIC8vIExpdmUyRCBDdWJpc20gQ29yZeODkOODvOOCuOODp+ODs+aDheWgseOCkuihqOekulxuICAgIGlmIChzX2lzU3RhcnRlZCkge1xuICAgICAgY29uc3QgdmVyc2lvbjogbnVtYmVyID0gTGl2ZTJEQ3ViaXNtQ29yZS5WZXJzaW9uLmNzbUdldFZlcnNpb24oKTtcbiAgICAgIGNvbnN0IG1ham9yOiBudW1iZXIgPSAodmVyc2lvbiAmIDB4ZmYwMDAwMDApID4+IDI0O1xuICAgICAgY29uc3QgbWlub3I6IG51bWJlciA9ICh2ZXJzaW9uICYgMHgwMGZmMDAwMCkgPj4gMTY7XG4gICAgICBjb25zdCBwYXRjaDogbnVtYmVyID0gdmVyc2lvbiAmIDB4MDAwMGZmZmY7XG4gICAgICBjb25zdCB2ZXJzaW9uTnVtYmVyOiBudW1iZXIgPSB2ZXJzaW9uO1xuXG4gICAgICBDdWJpc21Mb2dJbmZvKFxuICAgICAgICBgTGl2ZTJEIEN1YmlzbSBDb3JlIHZlcnNpb246IHswfS57MX0uezJ9ICh7M30pYCxcbiAgICAgICAgKCcwMCcgKyBtYWpvcikuc2xpY2UoLTIpLFxuICAgICAgICAoJzAwJyArIG1pbm9yKS5zbGljZSgtMiksXG4gICAgICAgICgnMDAwMCcgKyBwYXRjaCkuc2xpY2UoLTQpLFxuICAgICAgICB2ZXJzaW9uTnVtYmVyXG4gICAgICApO1xuICAgIH1cblxuICAgIEN1YmlzbUxvZ0luZm8oJ0N1YmlzbUZyYW1ld29yay5zdGFydFVwKCkgaXMgY29tcGxldGUuJyk7XG5cbiAgICByZXR1cm4gc19pc1N0YXJ0ZWQ7XG4gIH1cblxuICAvKipcbiAgICogU3RhcnRVcCgp44Gn5Yid5pyf5YyW44GX44GfQ3ViaXNtRnJhbWV3b3Jr44Gu5ZCE44OR44Op44Oh44O844K/44KS44Kv44Oq44Ki44GX44G+44GZ44CCXG4gICAqIERpc3Bvc2UoKeOBl+OBn0N1YmlzbUZyYW1ld29ya+OCkuWGjeWIqeeUqOOBmeOCi+mam+OBq+WIqeeUqOOBl+OBpuOBj+OBoOOBleOBhOOAglxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBjbGVhblVwKCk6IHZvaWQge1xuICAgIHNfaXNTdGFydGVkID0gZmFsc2U7XG4gICAgc19pc0luaXRpYWxpemVkID0gZmFsc2U7XG4gICAgc19vcHRpb24gPSBudWxsO1xuICAgIHNfY3ViaXNtSWRNYW5hZ2VyID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDdWJpc20gRnJhbWV3b3Jr5YaF44Gu44Oq44K944O844K544KS5Yid5pyf5YyW44GX44Gm44Oi44OH44Or44KS6KGo56S65Y+v6IO944Gq54q25oWL44Gr44GX44G+44GZ44CCPGJyPlxuICAgKiAgICAg5YaN5bqmSW5pdGlhbGl6ZSgp44GZ44KL44Gr44Gv5YWI44GrRGlzcG9zZSgp44KS5a6f6KGM44GZ44KL5b+F6KaB44GM44GC44KK44G+44GZ44CCXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGluaXRpYWxpemUoKTogdm9pZCB7XG4gICAgQ1NNX0FTU0VSVChzX2lzU3RhcnRlZCk7XG4gICAgaWYgKCFzX2lzU3RhcnRlZCkge1xuICAgICAgQ3ViaXNtTG9nV2FybmluZygnQ3ViaXNtRnJhbWV3b3JrIGlzIG5vdCBzdGFydGVkLicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIC0tLSBzX2lzSW5pdGlhbGl6ZWTjgavjgojjgovpgKPntprliJ3mnJ/ljJbjgqzjg7zjg4kgLS0tXG4gICAgLy8g6YCj57aa44GX44Gm44Oq44K944O844K556K65L+d44GM6KGM44KP44KM44Gq44GE44KI44GG44Gr44GZ44KL44CCXG4gICAgLy8g5YaN5bqmSW5pdGlhbGl6ZSgp44GZ44KL44Gr44Gv5YWI44GrRGlzcG9zZSgp44KS5a6f6KGM44GZ44KL5b+F6KaB44GM44GC44KL44CCXG4gICAgaWYgKHNfaXNJbml0aWFsaXplZCkge1xuICAgICAgQ3ViaXNtTG9nV2FybmluZyhcbiAgICAgICAgJ0N1YmlzbUZyYW1ld29yay5pbml0aWFsaXplKCkgc2tpcHBlZCwgYWxyZWFkeSBpbml0aWFsaXplZC4nXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vLS0tLSBzdGF0aWMg5Yid5pyf5YyWIC0tLS1cbiAgICBWYWx1ZS5zdGF0aWNJbml0aWFsaXplTm90Rm9yQ2xpZW50Q2FsbCgpO1xuXG4gICAgc19jdWJpc21JZE1hbmFnZXIgPSBuZXcgQ3ViaXNtSWRNYW5hZ2VyKCk7XG5cbiAgICBzX2lzSW5pdGlhbGl6ZWQgPSB0cnVlO1xuXG4gICAgQ3ViaXNtTG9nSW5mbygnQ3ViaXNtRnJhbWV3b3JrLmluaXRpYWxpemUoKSBpcyBjb21wbGV0ZS4nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDdWJpc20gRnJhbWV3b3Jr5YaF44Gu5YWo44Gm44Gu44Oq44K944O844K544KS6Kej5pS+44GX44G+44GZ44CCXG4gICAqICAgICAg44Gf44Gg44GX44CB5aSW6YOo44Gn56K65L+d44GV44KM44Gf44Oq44K944O844K544Gr44Gk44GE44Gm44Gv6Kej5pS+44GX44G+44Gb44KT44CCXG4gICAqICAgICAg5aSW6YOo44Gn6YGp5YiH44Gr56C05qOE44GZ44KL5b+F6KaB44GM44GC44KK44G+44GZ44CCXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgQ1NNX0FTU0VSVChzX2lzU3RhcnRlZCk7XG4gICAgaWYgKCFzX2lzU3RhcnRlZCkge1xuICAgICAgQ3ViaXNtTG9nV2FybmluZygnQ3ViaXNtRnJhbWV3b3JrIGlzIG5vdCBzdGFydGVkLicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIC0tLSBzX2lzSW5pdGlhbGl6ZWTjgavjgojjgovmnKrliJ3mnJ/ljJbop6PmlL7jgqzjg7zjg4kgLS0tXG4gICAgLy8gZGlzcG9zZSgp44GZ44KL44Gr44Gv5YWI44GraW5pdGlhbGl6ZSgp44KS5a6f6KGM44GZ44KL5b+F6KaB44GM44GC44KL44CCXG4gICAgaWYgKCFzX2lzSW5pdGlhbGl6ZWQpIHtcbiAgICAgIC8vIGZhbHNlLi4u44Oq44K944O844K55pyq56K65L+d44Gu5aC05ZCIXG4gICAgICBDdWJpc21Mb2dXYXJuaW5nKCdDdWJpc21GcmFtZXdvcmsuZGlzcG9zZSgpIHNraXBwZWQsIG5vdCBpbml0aWFsaXplZC4nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBWYWx1ZS5zdGF0aWNSZWxlYXNlTm90Rm9yQ2xpZW50Q2FsbCgpO1xuXG4gICAgc19jdWJpc21JZE1hbmFnZXIucmVsZWFzZSgpO1xuICAgIHNfY3ViaXNtSWRNYW5hZ2VyID0gbnVsbDtcblxuICAgIC8vIOODrOODs+ODgOODqeOBrumdmeeahOODquOCveODvOOCue+8iOOCt+OCp+ODvOODgOODl+ODreOCsOODqeODoOS7lu+8ieOCkuino+aUvuOBmeOCi1xuICAgIEN1YmlzbVJlbmRlcmVyLnN0YXRpY1JlbGVhc2UoKTtcblxuICAgIHNfaXNJbml0aWFsaXplZCA9IGZhbHNlO1xuXG4gICAgQ3ViaXNtTG9nSW5mbygnQ3ViaXNtRnJhbWV3b3JrLmRpc3Bvc2UoKSBpcyBjb21wbGV0ZS4nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDdWJpc20gRnJhbWV3b3Jr44GuQVBJ44KS5L2/55So44GZ44KL5rqW5YKZ44GM5a6M5LqG44GX44Gf44GL44Gp44GG44GLXG4gICAqIEByZXR1cm4gQVBJ44KS5L2/55So44GZ44KL5rqW5YKZ44GM5a6M5LqG44GX44Gm44GE44KM44GwdHJ1ZeOBjOi/lOOCiuOBvuOBmeOAglxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBpc1N0YXJ0ZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHNfaXNTdGFydGVkO1xuICB9XG5cbiAgLyoqXG4gICAqIEN1YmlzbSBGcmFtZXdvcmvjga7jg6rjgr3jg7zjgrnliJ3mnJ/ljJbjgYzjgZnjgafjgavooYzjgo/jgozjgabjgYTjgovjgYvjganjgYbjgYtcbiAgICogQHJldHVybiDjg6rjgr3jg7zjgrnnorrkv53jgYzlrozkuobjgZfjgabjgYTjgozjgbB0cnVl44GM6L+U44KK44G+44GZXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGlzSW5pdGlhbGl6ZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHNfaXNJbml0aWFsaXplZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb3JlIEFQSeOBq+ODkOOCpOODs+ODieOBl+OBn+ODreOCsOmWouaVsOOCkuWun+ihjOOBmeOCi1xuICAgKlxuICAgKiBAcHJhcmFtIG1lc3NhZ2Ug44Ot44Kw44Oh44OD44K744O844K4XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGNvcmVMb2dGdW5jdGlvbihtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAvLyBSZXR1cm4gaWYgbG9nZ2luZyBub3QgcG9zc2libGUuXG4gICAgaWYgKCFMaXZlMkRDdWJpc21Db3JlLkxvZ2dpbmcuY3NtR2V0TG9nRnVuY3Rpb24oKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIExpdmUyREN1YmlzbUNvcmUuTG9nZ2luZy5jc21HZXRMb2dGdW5jdGlvbigpKG1lc3NhZ2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIOePvuWcqOOBruODreOCsOWHuuWKm+ODrOODmeODq+ioreWumuOBruWApOOCkui/lOOBmeOAglxuICAgKlxuICAgKiBAcmV0dXJuICDnj77lnKjjga7jg63jgrDlh7rlipvjg6zjg5njg6voqK3lrprjga7lgKRcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0TG9nZ2luZ0xldmVsKCk6IExvZ0xldmVsIHtcbiAgICBpZiAoc19vcHRpb24gIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHNfb3B0aW9uLmxvZ2dpbmdMZXZlbDtcbiAgICB9XG4gICAgcmV0dXJuIExvZ0xldmVsLkxvZ0xldmVsX09mZjtcbiAgfVxuXG4gIC8qKlxuICAgKiBJROODnuODjeODvOOCuOODo+OBruOCpOODs+OCueOCv+ODs+OCueOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIEN1YmlzbU1hbmFnZXLjgq/jg6njgrnjga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0SWRNYW5hZ2VyKCk6IEN1YmlzbUlkTWFuYWdlciB7XG4gICAgcmV0dXJuIHNfY3ViaXNtSWRNYW5hZ2VyO1xuICB9XG5cbiAgLyoqXG4gICAqIOmdmeeahOOCr+ODqeOCueOBqOOBl+OBpuS9v+eUqOOBmeOCi1xuICAgKiDjgqTjg7Pjgrnjgr/jg7PjgrnljJbjgZXjgZvjgarjgYRcbiAgICovXG4gIHByaXZhdGUgY29uc3RydWN0b3IoKSB7fVxufVxuXG5leHBvcnQgY2xhc3MgT3B0aW9uIHtcbiAgbG9nRnVuY3Rpb246IExpdmUyREN1YmlzbUNvcmUuY3NtTG9nRnVuY3Rpb247IC8vIOODreOCsOWHuuWKm+OBrumWouaVsOOCquODluOCuOOCp+OCr+ODiFxuICBsb2dnaW5nTGV2ZWw6IExvZ0xldmVsOyAvLyDjg63jgrDlh7rlipvjg6zjg5njg6vjga7oqK3lrppcbn1cblxuLyoqXG4gKiDjg63jgrDlh7rlipvjga7jg6zjg5njg6tcbiAqL1xuZXhwb3J0IGVudW0gTG9nTGV2ZWwge1xuICBMb2dMZXZlbF9WZXJib3NlID0gMCwgLy8g6Kmz57Sw44Ot44KwXG4gIExvZ0xldmVsX0RlYnVnLCAvLyDjg4fjg5Djg4PjgrDjg63jgrBcbiAgTG9nTGV2ZWxfSW5mbywgLy8gSW5mb+ODreOCsFxuICBMb2dMZXZlbF9XYXJuaW5nLCAvLyDorablkYrjg63jgrBcbiAgTG9nTGV2ZWxfRXJyb3IsIC8vIOOCqOODqeODvOODreOCsFxuICBMb2dMZXZlbF9PZmYsIC8vIOODreOCsOWHuuWKm+eEoeWKuVxufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IENvbnN0YW50ID0gJC5Db25zdGFudDtcbiAgZXhwb3J0IGNvbnN0IGNzbURlbGV0ZSA9ICQuY3NtRGVsZXRlO1xuICBleHBvcnQgY29uc3QgQ3ViaXNtRnJhbWV3b3JrID0gJC5DdWJpc21GcmFtZXdvcms7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbUZyYW1ld29yayA9ICQuQ3ViaXNtRnJhbWV3b3JrO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQ3ViaXNtVmVjdG9yMiB9IGZyb20gJy4vY3ViaXNtdmVjdG9yMic7XG5cbi8qKlxuICog5pWw5YCk6KiI566X44Gq44Gp44Gr5L2/55So44GZ44KL44Om44O844OG44Kj44Oq44OG44Kj44Kv44Op44K5XG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21NYXRoIHtcbiAgc3RhdGljIHJlYWRvbmx5IEVwc2lsb246IG51bWJlciA9IDAuMDAwMDE7XG5cbiAgLyoqXG4gICAqIOesrOS4gOW8leaVsOOBruWApOOCkuacgOWwj+WApOOBqOacgOWkp+WApOOBruevhOWbsuOBq+WPjuOCgeOBn+WApOOCkui/lOOBmVxuICAgKlxuICAgKiBAcGFyYW0gdmFsdWUg5Y+O44KB44KJ44KM44KL5YCkXG4gICAqIEBwYXJhbSBtaW4gICDnr4Tlm7Ljga7mnIDlsI/lgKRcbiAgICogQHBhcmFtIG1heCAgIOevhOWbsuOBruacgOWkp+WApFxuICAgKiBAcmV0dXJuIOacgOWwj+WApOOBqOacgOWkp+WApOOBruevhOWbsuOBq+WPjuOCgeOBn+WApFxuICAgKi9cbiAgc3RhdGljIHJhbmdlKHZhbHVlOiBudW1iZXIsIG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgaWYgKHZhbHVlIDwgbWluKSB7XG4gICAgICB2YWx1ZSA9IG1pbjtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID4gbWF4KSB7XG4gICAgICB2YWx1ZSA9IG1heDtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICog44K144Kk44Oz6Zai5pWw44Gu5YCk44KS5rGC44KB44KLXG4gICAqXG4gICAqIEBwYXJhbSB4IOinkuW6puWApO+8iOODqeOCuOOCouODs++8iVxuICAgKiBAcmV0dXJuIOOCteOCpOODs+mWouaVsHNpbih4KeOBruWApFxuICAgKi9cbiAgc3RhdGljIHNpbih4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiBNYXRoLnNpbih4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjgrXjgqTjg7PplqLmlbDjga7lgKTjgpLmsYLjgoHjgotcbiAgICpcbiAgICogQHBhcmFtIHgg6KeS5bqm5YCkKOODqeOCuOOCouODsylcbiAgICogQHJldHVybiDjgrPjgrXjgqTjg7PplqLmlbBjb3MoeCnjga7lgKRcbiAgICovXG4gIHN0YXRpYyBjb3MoeDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTWF0aC5jb3MoeCk7XG4gIH1cblxuICAvKipcbiAgICog5YCk44Gu57W25a++5YCk44KS5rGC44KB44KLXG4gICAqXG4gICAqIEBwYXJhbSB4IOe1tuWvvuWApOOCkuaxguOCgeOCi+WApFxuICAgKiBAcmV0dXJuIOWApOOBrue1tuWvvuWApFxuICAgKi9cbiAgc3RhdGljIGFicyh4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiBNYXRoLmFicyh4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlubPmlrnmoLko44Or44O844OIKeOCkuaxguOCgeOCi1xuICAgKiBAcGFyYW0geCAtPiDlubPmlrnmoLnjgpLmsYLjgoHjgovlgKRcbiAgICogQHJldHVybiDlgKTjga7lubPmlrnmoLlcbiAgICovXG4gIHN0YXRpYyBzcXJ0KHg6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIE1hdGguc3FydCh4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDnq4vmlrnmoLnjgpLmsYLjgoHjgotcbiAgICogQHBhcmFtIHggLT4g56uL5pa55qC544KS5rGC44KB44KL5YCkXG4gICAqIEByZXR1cm4g5YCk44Gu56uL5pa55qC5XG4gICAqL1xuICBzdGF0aWMgY2JydCh4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIGlmICh4ID09PSAwKSB7XG4gICAgICByZXR1cm4geDtcbiAgICB9XG5cbiAgICBsZXQgY3g6IG51bWJlciA9IHg7XG4gICAgY29uc3QgaXNOZWdhdGl2ZU51bWJlcjogYm9vbGVhbiA9IGN4IDwgMDtcblxuICAgIGlmIChpc05lZ2F0aXZlTnVtYmVyKSB7XG4gICAgICBjeCA9IC1jeDtcbiAgICB9XG5cbiAgICBsZXQgcmV0OiBudW1iZXI7XG4gICAgaWYgKGN4ID09PSBJbmZpbml0eSkge1xuICAgICAgcmV0ID0gSW5maW5pdHk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldCA9IE1hdGguZXhwKE1hdGgubG9nKGN4KSAvIDMpO1xuICAgICAgcmV0ID0gKGN4IC8gKHJldCAqIHJldCkgKyAyICogcmV0KSAvIDM7XG4gICAgfVxuICAgIHJldHVybiBpc05lZ2F0aXZlTnVtYmVyID8gLXJldCA6IHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqTjg7zjgrjjg7PjgrDlh6bnkIbjgZXjgozjgZ/jgrXjgqTjg7PjgpLmsYLjgoHjgotcbiAgICog44OV44Kn44O844OJ44Kk44Oz44O744Ki44Km44OI5pmC44Gu44Kk44O844K444Oz44Kw44Gr5Yip55So44Gn44GN44KLXG4gICAqXG4gICAqIEBwYXJhbSB2YWx1ZSDjgqTjg7zjgrjjg7PjgrDjgpLooYzjgYblgKRcbiAgICogQHJldHVybiDjgqTjg7zjgrjjg7PjgrDlh6bnkIbjgZXjgozjgZ/jgrXjgqTjg7PlgKRcbiAgICovXG4gIHN0YXRpYyBnZXRFYXNpbmdTaW5lKHZhbHVlOiBudW1iZXIpOiBudW1iZXIge1xuICAgIGlmICh2YWx1ZSA8IDAuMCkge1xuICAgICAgcmV0dXJuIDAuMDtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID4gMS4wKSB7XG4gICAgICByZXR1cm4gMS4wO1xuICAgIH1cblxuICAgIHJldHVybiAwLjUgLSAwLjUgKiB0aGlzLmNvcyh2YWx1ZSAqIE1hdGguUEkpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWkp+OBjeOBhOaWueOBruWApOOCkui/lOOBmVxuICAgKlxuICAgKiBAcGFyYW0gbGVmdCDlt6bovrrjga7lgKRcbiAgICogQHBhcmFtIHJpZ2h0IOWPs+i+uuOBruWApFxuICAgKiBAcmV0dXJuIOWkp+OBjeOBhOaWueOBruWApFxuICAgKi9cbiAgc3RhdGljIG1heChsZWZ0OiBudW1iZXIsIHJpZ2h0OiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiBsZWZ0ID4gcmlnaHQgPyBsZWZ0IDogcmlnaHQ7XG4gIH1cblxuICAvKipcbiAgICog5bCP44GV44GE5pa544Gu5YCk44KS6L+U44GZXG4gICAqXG4gICAqIEBwYXJhbSBsZWZ0ICDlt6bovrrjga7lgKRcbiAgICogQHBhcmFtIHJpZ2h0IOWPs+i+uuOBruWApFxuICAgKiBAcmV0dXJuIOWwj+OBleOBhOaWueOBruWApFxuICAgKi9cbiAgc3RhdGljIG1pbihsZWZ0OiBudW1iZXIsIHJpZ2h0OiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiBsZWZ0ID4gcmlnaHQgPyByaWdodCA6IGxlZnQ7XG4gIH1cblxuICAvKipcbiAgICog6KeS5bqm5YCk44KS44Op44K444Ki44Oz5YCk44Gr5aSJ5o+b44GZ44KLXG4gICAqXG4gICAqIEBwYXJhbSBkZWdyZWVzICAg6KeS5bqm5YCkXG4gICAqIEByZXR1cm4g6KeS5bqm5YCk44GL44KJ5aSJ5o+b44GX44Gf44Op44K444Ki44Oz5YCkXG4gICAqL1xuICBzdGF0aWMgZGVncmVlc1RvUmFkaWFuKGRlZ3JlZXM6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIChkZWdyZWVzIC8gMTgwLjApICogTWF0aC5QSTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6njgrjjgqLjg7PlgKTjgpLop5LluqblgKTjgavlpInmj5vjgZnjgotcbiAgICpcbiAgICogQHBhcmFtIHJhZGlhbiAgICDjg6njgrjjgqLjg7PlgKRcbiAgICogQHJldHVybiDjg6njgrjjgqLjg7PlgKTjgYvjgonlpInmj5vjgZfjgZ/op5LluqblgKRcbiAgICovXG4gIHN0YXRpYyByYWRpYW5Ub0RlZ3JlZXMocmFkaWFuOiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiAocmFkaWFuICogMTgwLjApIC8gTWF0aC5QSTtcbiAgfVxuXG4gIC8qKlxuICAgKiDvvJLjgaTjga7jg5njgq/jg4jjg6vjgYvjgonjg6njgrjjgqLjg7PlgKTjgpLmsYLjgoHjgotcbiAgICpcbiAgICogQHBhcmFtIGZyb20gIOWni+eCueODmeOCr+ODiOODq1xuICAgKiBAcGFyYW0gdG8gICAg57WC54K544OZ44Kv44OI44OrXG4gICAqIEByZXR1cm4g44Op44K444Ki44Oz5YCk44GL44KJ5rGC44KB44Gf5pa55ZCR44OZ44Kv44OI44OrXG4gICAqL1xuICBzdGF0aWMgZGlyZWN0aW9uVG9SYWRpYW4oZnJvbTogQ3ViaXNtVmVjdG9yMiwgdG86IEN1YmlzbVZlY3RvcjIpOiBudW1iZXIge1xuICAgIGNvbnN0IHExOiBudW1iZXIgPSBNYXRoLmF0YW4yKHRvLnksIHRvLngpO1xuICAgIGNvbnN0IHEyOiBudW1iZXIgPSBNYXRoLmF0YW4yKGZyb20ueSwgZnJvbS54KTtcblxuICAgIGxldCByZXQ6IG51bWJlciA9IHExIC0gcTI7XG5cbiAgICB3aGlsZSAocmV0IDwgLU1hdGguUEkpIHtcbiAgICAgIHJldCArPSBNYXRoLlBJICogMi4wO1xuICAgIH1cblxuICAgIHdoaWxlIChyZXQgPiBNYXRoLlBJKSB7XG4gICAgICByZXQgLT0gTWF0aC5QSSAqIDIuMDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLyoqXG4gICAqIO+8kuOBpOOBruODmeOCr+ODiOODq+OBi+OCieinkuW6puWApOOCkuaxguOCgeOCi1xuICAgKlxuICAgKiBAcGFyYW0gZnJvbSAg5aeL54K544OZ44Kv44OI44OrXG4gICAqIEBwYXJhbSB0byAgICDntYLngrnjg5njgq/jg4jjg6tcbiAgICogQHJldHVybiDop5LluqblgKTjgYvjgonmsYLjgoHjgZ/mlrnlkJHjg5njgq/jg4jjg6tcbiAgICovXG4gIHN0YXRpYyBkaXJlY3Rpb25Ub0RlZ3JlZXMoZnJvbTogQ3ViaXNtVmVjdG9yMiwgdG86IEN1YmlzbVZlY3RvcjIpOiBudW1iZXIge1xuICAgIGNvbnN0IHJhZGlhbjogbnVtYmVyID0gdGhpcy5kaXJlY3Rpb25Ub1JhZGlhbihmcm9tLCB0byk7XG4gICAgbGV0IGRlZ3JlZTogbnVtYmVyID0gdGhpcy5yYWRpYW5Ub0RlZ3JlZXMocmFkaWFuKTtcblxuICAgIGlmICh0by54IC0gZnJvbS54ID4gMC4wKSB7XG4gICAgICBkZWdyZWUgPSAtZGVncmVlO1xuICAgIH1cblxuICAgIHJldHVybiBkZWdyZWU7XG4gIH1cblxuICAvKipcbiAgICog44Op44K444Ki44Oz5YCk44KS5pa55ZCR44OZ44Kv44OI44Or44Gr5aSJ5o+b44GZ44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSB0b3RhbEFuZ2xlICAgIOODqeOCuOOCouODs+WApFxuICAgKiBAcmV0dXJuIOODqeOCuOOCouODs+WApOOBi+OCieWkieaPm+OBl+OBn+aWueWQkeODmeOCr+ODiOODq1xuICAgKi9cblxuICBzdGF0aWMgcmFkaWFuVG9EaXJlY3Rpb24odG90YWxBbmdsZTogbnVtYmVyKTogQ3ViaXNtVmVjdG9yMiB7XG4gICAgY29uc3QgcmV0OiBDdWJpc21WZWN0b3IyID0gbmV3IEN1YmlzbVZlY3RvcjIoKTtcblxuICAgIHJldC54ID0gdGhpcy5zaW4odG90YWxBbmdsZSk7XG4gICAgcmV0LnkgPSB0aGlzLmNvcyh0b3RhbEFuZ2xlKTtcblxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICog5LiJ5qyh5pa556iL5byP44Gu5LiJ5qyh6aCF44Gu5L+C5pWw44GMMOOBq+OBquOBo+OBn+OBqOOBjeOBq+ijnOasoOeahOOBq+S6jOasoeaWueeoi+W8j+OBruino+OCkuOCguOBqOOCgeOCi+OAglxuICAgKiBhICogeF4yICsgYiAqIHggKyBjID0gMFxuICAgKlxuICAgKiBAcGFyYW0gICBhIC0+IOS6jOasoemgheOBruS/guaVsOWApFxuICAgKiBAcGFyYW0gICBiIC0+IOS4gOasoemgheOBruS/guaVsOWApFxuICAgKiBAcGFyYW0gICBjIC0+IOWumuaVsOmgheOBruWApFxuICAgKiBAcmV0dXJuICDkuozmrKHmlrnnqIvlvI/jga7op6NcbiAgICovXG4gIHN0YXRpYyBxdWFkcmF0aWNFcXVhdGlvbihhOiBudW1iZXIsIGI6IG51bWJlciwgYzogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBpZiAodGhpcy5hYnMoYSkgPCBDdWJpc21NYXRoLkVwc2lsb24pIHtcbiAgICAgIGlmICh0aGlzLmFicyhiKSA8IEN1YmlzbU1hdGguRXBzaWxvbikge1xuICAgICAgICByZXR1cm4gLWM7XG4gICAgICB9XG4gICAgICByZXR1cm4gLWMgLyBiO1xuICAgIH1cblxuICAgIHJldHVybiAtKGIgKyB0aGlzLnNxcnQoYiAqIGIgLSA0LjAgKiBhICogYykpIC8gKDIuMCAqIGEpO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCq+ODq+ODgOODjuOBruWFrOW8j+OBq+OCiOOBo+OBpuODmeOCuOOCp+OBrnTlgKTjgavoqbLlvZPjgZnjgovvvJPmrKHmlrnnqIvlvI/jga7op6PjgpLmsYLjgoHjgovjgIJcbiAgICog6YeN6Kej44Gr44Gq44Gj44Gf44Go44GN44Gr44GvMC4w772eMS4w44Gu5YCk44Gr44Gq44KL6Kej44KS6L+U44GZ44CCXG4gICAqXG4gICAqIGEgKiB4XjMgKyBiICogeF4yICsgYyAqIHggKyBkID0gMFxuICAgKlxuICAgKiBAcGFyYW0gICBhIC0+IOS4ieasoemgheOBruS/guaVsOWApFxuICAgKiBAcGFyYW0gICBiIC0+IOS6jOasoemgheOBruS/guaVsOWApFxuICAgKiBAcGFyYW0gICBjIC0+IOS4gOasoemgheOBruS/guaVsOWApFxuICAgKiBAcGFyYW0gICBkIC0+IOWumuaVsOmgheOBruWApFxuICAgKiBAcmV0dXJuICAwLjDvvZ4xLjDjga7plpPjgavjgYLjgovop6NcbiAgICovXG4gIHN0YXRpYyBjYXJkYW5vQWxnb3JpdGhtRm9yQmV6aWVyKFxuICAgIGE6IG51bWJlcixcbiAgICBiOiBudW1iZXIsXG4gICAgYzogbnVtYmVyLFxuICAgIGQ6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIGlmICh0aGlzLnNxcnQoYSkgPCBDdWJpc21NYXRoLkVwc2lsb24pIHtcbiAgICAgIHJldHVybiB0aGlzLnJhbmdlKHRoaXMucXVhZHJhdGljRXF1YXRpb24oYiwgYywgZCksIDAuMCwgMS4wKTtcbiAgICB9XG5cbiAgICBjb25zdCBiYTogbnVtYmVyID0gYiAvIGE7XG4gICAgY29uc3QgY2E6IG51bWJlciA9IGMgLyBhO1xuICAgIGNvbnN0IGRhOiBudW1iZXIgPSBkIC8gYTtcblxuICAgIGNvbnN0IHA6IG51bWJlciA9ICgzLjAgKiBjYSAtIGJhICogYmEpIC8gMy4wO1xuICAgIGNvbnN0IHAzOiBudW1iZXIgPSBwIC8gMy4wO1xuICAgIGNvbnN0IHE6IG51bWJlciA9ICgyLjAgKiBiYSAqIGJhICogYmEgLSA5LjAgKiBiYSAqIGNhICsgMjcuMCAqIGRhKSAvIDI3LjA7XG4gICAgY29uc3QgcTI6IG51bWJlciA9IHEgLyAyLjA7XG4gICAgY29uc3QgZGlzY3JpbWluYW50OiBudW1iZXIgPSBxMiAqIHEyICsgcDMgKiBwMyAqIHAzO1xuXG4gICAgY29uc3QgY2VudGVyID0gMC41O1xuICAgIGNvbnN0IHRocmVzaG9sZDogbnVtYmVyID0gY2VudGVyICsgMC4wMTtcblxuICAgIGlmIChkaXNjcmltaW5hbnQgPCAwLjApIHtcbiAgICAgIGNvbnN0IG1wMzogbnVtYmVyID0gLXAgLyAzLjA7XG4gICAgICBjb25zdCBtcDMzOiBudW1iZXIgPSBtcDMgKiBtcDMgKiBtcDM7XG4gICAgICBjb25zdCByOiBudW1iZXIgPSB0aGlzLnNxcnQobXAzMyk7XG4gICAgICBjb25zdCB0OiBudW1iZXIgPSAtcSAvICgyLjAgKiByKTtcbiAgICAgIGNvbnN0IGNvc3BoaTogbnVtYmVyID0gdGhpcy5yYW5nZSh0LCAtMS4wLCAxLjApO1xuICAgICAgY29uc3QgcGhpOiBudW1iZXIgPSBNYXRoLmFjb3MoY29zcGhpKTtcbiAgICAgIGNvbnN0IGNydHI6IG51bWJlciA9IHRoaXMuY2JydChyKTtcbiAgICAgIGNvbnN0IHQxOiBudW1iZXIgPSAyLjAgKiBjcnRyO1xuXG4gICAgICBjb25zdCByb290MTogbnVtYmVyID0gdDEgKiB0aGlzLmNvcyhwaGkgLyAzLjApIC0gYmEgLyAzLjA7XG4gICAgICBpZiAodGhpcy5hYnMocm9vdDEgLSBjZW50ZXIpIDwgdGhyZXNob2xkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJhbmdlKHJvb3QxLCAwLjAsIDEuMCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJvb3QyOiBudW1iZXIgPVxuICAgICAgICB0MSAqIHRoaXMuY29zKChwaGkgKyAyLjAgKiBNYXRoLlBJKSAvIDMuMCkgLSBiYSAvIDMuMDtcbiAgICAgIGlmICh0aGlzLmFicyhyb290MiAtIGNlbnRlcikgPCB0aHJlc2hvbGQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmFuZ2Uocm9vdDIsIDAuMCwgMS4wKTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgcm9vdDM6IG51bWJlciA9XG4gICAgICAgIHQxICogdGhpcy5jb3MoKHBoaSArIDQuMCAqIE1hdGguUEkpIC8gMy4wKSAtIGJhIC8gMy4wO1xuICAgICAgcmV0dXJuIHRoaXMucmFuZ2Uocm9vdDMsIDAuMCwgMS4wKTtcbiAgICB9XG5cbiAgICBpZiAoZGlzY3JpbWluYW50ID09IDAuMCkge1xuICAgICAgbGV0IHUxOiBudW1iZXI7XG4gICAgICBpZiAocTIgPCAwLjApIHtcbiAgICAgICAgdTEgPSB0aGlzLmNicnQoLXEyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHUxID0gLXRoaXMuY2JydChxMik7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJvb3QxOiBudW1iZXIgPSAyLjAgKiB1MSAtIGJhIC8gMy4wO1xuICAgICAgaWYgKHRoaXMuYWJzKHJvb3QxIC0gY2VudGVyKSA8IHRocmVzaG9sZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yYW5nZShyb290MSwgMC4wLCAxLjApO1xuICAgICAgfVxuXG4gICAgICBjb25zdCByb290MjogbnVtYmVyID0gLXUxIC0gYmEgLyAzLjA7XG4gICAgICByZXR1cm4gdGhpcy5yYW5nZShyb290MiwgMC4wLCAxLjApO1xuICAgIH1cblxuICAgIGNvbnN0IHNkOiBudW1iZXIgPSB0aGlzLnNxcnQoZGlzY3JpbWluYW50KTtcbiAgICBjb25zdCB1MTogbnVtYmVyID0gdGhpcy5jYnJ0KHNkIC0gcTIpO1xuICAgIGNvbnN0IHYxOiBudW1iZXIgPSB0aGlzLmNicnQoc2QgKyBxMik7XG4gICAgY29uc3Qgcm9vdDE6IG51bWJlciA9IHUxIC0gdjEgLSBiYSAvIDMuMDtcbiAgICByZXR1cm4gdGhpcy5yYW5nZShyb290MSwgMC4wLCAxLjApO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHt9XG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbW1hdGgnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1hdGggPSAkLkN1YmlzbU1hdGg7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbU1hdGggPSAkLkN1YmlzbU1hdGg7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG4vKipcbiAqIDR4NOOBruihjOWIl1xuICpcbiAqIDR4NOihjOWIl+OBruS+v+WIqeOCr+ODqeOCueOAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtTWF0cml4NDQge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fdHIgPSBuZXcgRmxvYXQzMkFycmF5KDE2KTsgLy8gNCAqIDTjga7jgrXjgqTjgrpcbiAgICB0aGlzLmxvYWRJZGVudGl0eSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWPl+OBkeWPluOBo+OBn++8kuOBpOOBruihjOWIl+OBruS5l+eul+OCkuihjOOBhuOAglxuICAgKlxuICAgKiBAcGFyYW0gYSDooYzliJdhXG4gICAqIEBwYXJhbSBiIOihjOWIl2JcbiAgICogQHJldHVybiDkuZfnrpfntZDmnpzjga7ooYzliJdcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgbXVsdGlwbHkoXG4gICAgYTogRmxvYXQzMkFycmF5LFxuICAgIGI6IEZsb2F0MzJBcnJheSxcbiAgICBkc3Q6IEZsb2F0MzJBcnJheVxuICApOiB2b2lkIHtcbiAgICBjb25zdCBjOiBGbG9hdDMyQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KFtcbiAgICAgIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsXG4gICAgICAwLjAsXG4gICAgXSk7XG5cbiAgICBjb25zdCBuID0gNDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG47ICsraikge1xuICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IG47ICsraykge1xuICAgICAgICAgIGNbaiArIGkgKiA0XSArPSBhW2sgKyBpICogNF0gKiBiW2ogKyBrICogNF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICAgIGRzdFtpXSA9IGNbaV07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOWNmOS9jeihjOWIl+OBq+WIneacn+WMluOBmeOCi1xuICAgKi9cbiAgcHVibGljIGxvYWRJZGVudGl0eSgpOiB2b2lkIHtcbiAgICBjb25zdCBjOiBGbG9hdDMyQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KFtcbiAgICAgIDEuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAxLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMS4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsXG4gICAgICAxLjAsXG4gICAgXSk7XG5cbiAgICB0aGlzLnNldE1hdHJpeChjKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDooYzliJfjgpLoqK3lrppcbiAgICpcbiAgICogQHBhcmFtIHRyIDE25YCL44Gu5rWu5YuV5bCP5pWw54K55pWw44Gn6KGo44GV44KM44KLNHg044Gu6KGM5YiXXG4gICAqL1xuICBwdWJsaWMgc2V0TWF0cml4KHRyOiBGbG9hdDMyQXJyYXkpOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICAgIHRoaXMuX3RyW2ldID0gdHJbaV07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOihjOWIl+OCkua1ruWLleWwj+aVsOeCueaVsOOBrumFjeWIl+OBp+WPluW+l1xuICAgKlxuICAgKiBAcmV0dXJuIDE25YCL44Gu5rWu5YuV5bCP5pWw54K55pWw44Gn6KGo44GV44KM44KLNHg044Gu6KGM5YiXXG4gICAqL1xuICBwdWJsaWMgZ2V0QXJyYXkoKTogRmxvYXQzMkFycmF5IHtcbiAgICByZXR1cm4gdGhpcy5fdHI7XG4gIH1cblxuICAvKipcbiAgICogWOi7uOOBruaLoeWkp+eOh+OCkuWPluW+l1xuICAgKiBAcmV0dXJuIFjou7jjga7mi6HlpKfnjodcbiAgICovXG4gIHB1YmxpYyBnZXRTY2FsZVgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fdHJbMF07XG4gIH1cblxuICAvKipcbiAgICogWei7uOOBruaLoeWkp+eOh+OCkuWPluW+l+OBmeOCi1xuICAgKlxuICAgKiBAcmV0dXJuIFnou7jjga7mi6HlpKfnjodcbiAgICovXG4gIHB1YmxpYyBnZXRTY2FsZVkoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fdHJbNV07XG4gIH1cblxuICAvKipcbiAgICogWOi7uOOBruenu+WLlemHj+OCkuWPluW+l1xuICAgKiBAcmV0dXJuIFjou7jjga7np7vli5Xph49cbiAgICovXG4gIHB1YmxpYyBnZXRUcmFuc2xhdGVYKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3RyWzEyXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBZ6Lu444Gu56e75YuV6YeP44KS5Y+W5b6XXG4gICAqIEByZXR1cm4gWei7uOOBruenu+WLlemHj1xuICAgKi9cbiAgcHVibGljIGdldFRyYW5zbGF0ZVkoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fdHJbMTNdO1xuICB9XG5cbiAgLyoqXG4gICAqIFjou7jjga7lgKTjgpLnj77lnKjjga7ooYzliJfjgafoqIjnrpdcbiAgICpcbiAgICogQHBhcmFtIHNyYyBY6Lu444Gu5YCkXG4gICAqIEByZXR1cm4g54++5Zyo44Gu6KGM5YiX44Gn6KiI566X44GV44KM44GfWOi7uOOBruWApFxuICAgKi9cbiAgcHVibGljIHRyYW5zZm9ybVgoc3JjOiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl90clswXSAqIHNyYyArIHRoaXMuX3RyWzEyXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBZ6Lu444Gu5YCk44KS54++5Zyo44Gu6KGM5YiX44Gn6KiI566XXG4gICAqXG4gICAqIEBwYXJhbSBzcmMgWei7uOOBruWApFxuICAgKiBAcmV0dXJuIOePvuWcqOOBruihjOWIl+OBp+ioiOeul+OBleOCjOOBn1nou7jjga7lgKRcbiAgICovXG4gIHB1YmxpYyB0cmFuc2Zvcm1ZKHNyYzogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fdHJbNV0gKiBzcmMgKyB0aGlzLl90clsxM107XG4gIH1cblxuICAvKipcbiAgICogWOi7uOOBruWApOOCkuePvuWcqOOBruihjOWIl+OBp+mAhuioiOeul1xuICAgKi9cbiAgcHVibGljIGludmVydFRyYW5zZm9ybVgoc3JjOiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiAoc3JjIC0gdGhpcy5fdHJbMTJdKSAvIHRoaXMuX3RyWzBdO1xuICB9XG5cbiAgLyoqXG4gICAqIFnou7jjga7lgKTjgpLnj77lnKjjga7ooYzliJfjgafpgIboqIjnrpdcbiAgICovXG4gIHB1YmxpYyBpbnZlcnRUcmFuc2Zvcm1ZKHNyYzogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gKHNyYyAtIHRoaXMuX3RyWzEzXSkgLyB0aGlzLl90cls1XTtcbiAgfVxuXG4gIC8qKlxuICAgKiDnj77lnKjjga7ooYzliJfjga7kvY3nva7jgpLotbfngrnjgavjgZfjgabnp7vli5VcbiAgICpcbiAgICog54++5Zyo44Gu6KGM5YiX44Gu5L2N572u44KS6LW354K544Gr44GX44Gm55u45a++55qE44Gr56e75YuV44GZ44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSB4IFjou7jjga7np7vli5Xph49cbiAgICogQHBhcmFtIHkgWei7uOOBruenu+WLlemHj1xuICAgKi9cbiAgcHVibGljIHRyYW5zbGF0ZVJlbGF0aXZlKHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XG4gICAgY29uc3QgdHIxOiBGbG9hdDMyQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KFtcbiAgICAgIDEuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDEuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDEuMCxcbiAgICAgIDAuMCxcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgMC4wLFxuICAgICAgMS4wLFxuICAgIF0pO1xuXG4gICAgQ3ViaXNtTWF0cml4NDQubXVsdGlwbHkodHIxLCB0aGlzLl90ciwgdGhpcy5fdHIpO1xuICB9XG5cbiAgLyoqXG4gICAqIOePvuWcqOOBruihjOWIl+OBruS9jee9ruOCkuenu+WLlVxuICAgKlxuICAgKiDnj77lnKjjga7ooYzliJfjga7kvY3nva7jgpLmjIflrprjgZfjgZ/kvY3nva7jgbjnp7vli5XjgZnjgotcbiAgICpcbiAgICogQHBhcmFtIHggWOi7uOOBruenu+WLlemHj1xuICAgKiBAcGFyYW0geSB56Lu444Gu56e75YuV6YePXG4gICAqL1xuICBwdWJsaWMgdHJhbnNsYXRlKHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fdHJbMTJdID0geDtcbiAgICB0aGlzLl90clsxM10gPSB5O1xuICB9XG5cbiAgLyoqXG4gICAqIOePvuWcqOOBruihjOWIl+OBrljou7jjga7kvY3nva7jgpLmjIflrprjgZfjgZ/kvY3nva7jgbjnp7vli5XjgZnjgotcbiAgICpcbiAgICogQHBhcmFtIHggWOi7uOOBruenu+WLlemHj1xuICAgKi9cbiAgcHVibGljIHRyYW5zbGF0ZVgoeDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fdHJbMTJdID0geDtcbiAgfVxuXG4gIC8qKlxuICAgKiDnj77lnKjjga7ooYzliJfjga5Z6Lu444Gu5L2N572u44KS5oyH5a6a44GX44Gf5L2N572u44G456e75YuV44GZ44KLXG4gICAqXG4gICAqIEBwYXJhbSB5IFnou7jjga7np7vli5Xph49cbiAgICovXG4gIHB1YmxpYyB0cmFuc2xhdGVZKHk6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX3RyWzEzXSA9IHk7XG4gIH1cblxuICAvKipcbiAgICog54++5Zyo44Gu6KGM5YiX44Gu5ouh5aSn546H44KS55u45a++55qE44Gr6Kit5a6a44GZ44KLXG4gICAqXG4gICAqIEBwYXJhbSB4IFjou7jjga7mi6HlpKfnjodcbiAgICogQHBhcmFtIHkgWei7uOOBruaLoeWkp+eOh1xuICAgKi9cbiAgcHVibGljIHNjYWxlUmVsYXRpdmUoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCB0cjE6IEZsb2F0MzJBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoW1xuICAgICAgeCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIHksXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAxLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAxLjAsXG4gICAgXSk7XG5cbiAgICBDdWJpc21NYXRyaXg0NC5tdWx0aXBseSh0cjEsIHRoaXMuX3RyLCB0aGlzLl90cik7XG4gIH1cblxuICAvKipcbiAgICog54++5Zyo44Gu6KGM5YiX44Gu5ouh5aSn546H44KS5oyH5a6a44GX44Gf5YCN546H44Gr6Kit5a6a44GZ44KLXG4gICAqXG4gICAqIEBwYXJhbSB4IFjou7jjga7mi6HlpKfnjodcbiAgICogQHBhcmFtIHkgWei7uOOBruaLoeWkp+eOh1xuICAgKi9cbiAgcHVibGljIHNjYWxlKHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fdHJbMF0gPSB4O1xuICAgIHRoaXMuX3RyWzVdID0geTtcbiAgfVxuXG4gIC8qKlxuICAgKiDnj77lnKjjga7ooYzliJfjgavooYzliJfjgpLkuZfnrpdcbiAgICpcbiAgICogQHBhcmFtIG0g6KGM5YiXXG4gICAqL1xuICBwdWJsaWMgbXVsdGlwbHlCeU1hdHJpeChtOiBDdWJpc21NYXRyaXg0NCk6IHZvaWQge1xuICAgIEN1YmlzbU1hdHJpeDQ0Lm11bHRpcGx5KG0uZ2V0QXJyYXkoKSwgdGhpcy5fdHIsIHRoaXMuX3RyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqrjg5bjgrjjgqfjgq/jg4jjga7jgrPjg5Tjg7zjgpLnlJ/miJDjgZnjgotcbiAgICovXG4gIHB1YmxpYyBjbG9uZSgpOiBDdWJpc21NYXRyaXg0NCB7XG4gICAgY29uc3QgY2xvbmVNYXRyaXg6IEN1YmlzbU1hdHJpeDQ0ID0gbmV3IEN1YmlzbU1hdHJpeDQ0KCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjbG9uZU1hdHJpeC5fdHJbaV0gPSB0aGlzLl90cltpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xvbmVNYXRyaXg7XG4gIH1cblxuICBwcm90ZWN0ZWQgX3RyOiBGbG9hdDMyQXJyYXk7IC8vIDR4NOihjOWIl+ODh+ODvOOCv1xufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21tYXRyaXg0NCc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtTWF0cml4NDQgPSAkLkN1YmlzbU1hdHJpeDQ0O1xuICBleHBvcnQgdHlwZSBDdWJpc21NYXRyaXg0NCA9ICQuQ3ViaXNtTWF0cml4NDQ7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBjc21NYXAsIGl0ZXJhdG9yIH0gZnJvbSAnLi4vdHlwZS9jc21tYXAnO1xuaW1wb3J0IHsgQ3ViaXNtTWF0cml4NDQgfSBmcm9tICcuL2N1YmlzbW1hdHJpeDQ0JztcblxuLyoqXG4gKiDjg6Ljg4fjg6vluqfmqJnoqK3lrprnlKjjga40eDTooYzliJdcbiAqXG4gKiDjg6Ljg4fjg6vluqfmqJnoqK3lrprnlKjjga40eDTooYzliJfjgq/jg6njgrlcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbU1vZGVsTWF0cml4IGV4dGVuZHMgQ3ViaXNtTWF0cml4NDQge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqXG4gICAqIEBwYXJhbSB3IOaoquW5hVxuICAgKiBAcGFyYW0gaCDnuKbluYVcbiAgICovXG4gIGNvbnN0cnVjdG9yKHc/OiBudW1iZXIsIGg/OiBudW1iZXIpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5fd2lkdGggPSB3ICE9PSB1bmRlZmluZWQgPyB3IDogMC4wO1xuICAgIHRoaXMuX2hlaWdodCA9IGggIT09IHVuZGVmaW5lZCA/IGggOiAwLjA7XG5cbiAgICB0aGlzLnNldEhlaWdodCgyLjApO1xuICB9XG5cbiAgLyoqXG4gICAqIOaoquW5heOCkuioreWumlxuICAgKlxuICAgKiBAcGFyYW0gdyDmqKrluYVcbiAgICovXG4gIHB1YmxpYyBzZXRXaWR0aCh3OiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCBzY2FsZVg6IG51bWJlciA9IHcgLyB0aGlzLl93aWR0aDtcbiAgICBjb25zdCBzY2FsZVk6IG51bWJlciA9IHNjYWxlWDtcbiAgICB0aGlzLnNjYWxlKHNjYWxlWCwgc2NhbGVZKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDnuKbluYXjgpLoqK3lrppcbiAgICogQHBhcmFtIGgg57im5bmFXG4gICAqL1xuICBwdWJsaWMgc2V0SGVpZ2h0KGg6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IHNjYWxlWDogbnVtYmVyID0gaCAvIHRoaXMuX2hlaWdodDtcbiAgICBjb25zdCBzY2FsZVk6IG51bWJlciA9IHNjYWxlWDtcbiAgICB0aGlzLnNjYWxlKHNjYWxlWCwgc2NhbGVZKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDkvY3nva7jgpLoqK3lrppcbiAgICpcbiAgICogQHBhcmFtIHggWOi7uOOBruS9jee9rlxuICAgKiBAcGFyYW0geSBZ6Lu444Gu5L2N572uXG4gICAqL1xuICBwdWJsaWMgc2V0UG9zaXRpb24oeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLnRyYW5zbGF0ZSh4LCB5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDkuK3lv4PkvY3nva7jgpLoqK3lrppcbiAgICpcbiAgICogQHBhcmFtIHggWOi7uOOBruS4reW/g+S9jee9rlxuICAgKiBAcGFyYW0geSBZ6Lu444Gu5Lit5b+D5L2N572uXG4gICAqXG4gICAqIEBub3RlIHdpZHRo44GLaGVpZ2h044KS6Kit5a6a44GX44Gf44GC44Go44Gn44Gq44GE44Go44CB5ouh5aSn546H44GM5q2j44GX44GP5Y+W5b6X44Gn44GN44Gq44GE44Gf44KB44Ga44KM44KL44CCXG4gICAqL1xuICBwdWJsaWMgc2V0Q2VudGVyUG9zaXRpb24oeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICB0aGlzLmNlbnRlclgoeCk7XG4gICAgdGhpcy5jZW50ZXJZKHkpO1xuICB9XG5cbiAgLyoqXG4gICAqIOS4iui+uuOBruS9jee9ruOCkuioreWumuOBmeOCi1xuICAgKlxuICAgKiBAcGFyYW0geSDkuIrovrrjga5Z6Lu45L2N572uXG4gICAqL1xuICBwdWJsaWMgdG9wKHk6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuc2V0WSh5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDkuIvovrrjga7kvY3nva7jgpLoqK3lrprjgZnjgotcbiAgICpcbiAgICogQHBhcmFtIHkg5LiL6L6644GuWei7uOS9jee9rlxuICAgKi9cbiAgcHVibGljIGJvdHRvbSh5OiBudW1iZXIpIHtcbiAgICBjb25zdCBoOiBudW1iZXIgPSB0aGlzLl9oZWlnaHQgKiB0aGlzLmdldFNjYWxlWSgpO1xuXG4gICAgdGhpcy50cmFuc2xhdGVZKHkgLSBoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlt6bovrrjga7kvY3nva7jgpLoqK3lrppcbiAgICpcbiAgICogQHBhcmFtIHgg5bem6L6644GuWOi7uOS9jee9rlxuICAgKi9cbiAgcHVibGljIGxlZnQoeDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5zZXRYKHgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWPs+i+uuOBruS9jee9ruOCkuioreWumlxuICAgKlxuICAgKiBAcGFyYW0geCDlj7Povrrjga5Y6Lu45L2N572uXG4gICAqL1xuICBwdWJsaWMgcmlnaHQoeDogbnVtYmVyKTogdm9pZCB7XG4gICAgY29uc3QgdyA9IHRoaXMuX3dpZHRoICogdGhpcy5nZXRTY2FsZVgoKTtcblxuICAgIHRoaXMudHJhbnNsYXRlWCh4IC0gdyk7XG4gIH1cblxuICAvKipcbiAgICogWOi7uOOBruS4reW/g+S9jee9ruOCkuioreWumlxuICAgKlxuICAgKiBAcGFyYW0geCBY6Lu444Gu5Lit5b+D5L2N572uXG4gICAqL1xuICBwdWJsaWMgY2VudGVyWCh4OiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCB3ID0gdGhpcy5fd2lkdGggKiB0aGlzLmdldFNjYWxlWCgpO1xuXG4gICAgdGhpcy50cmFuc2xhdGVYKHggLSB3IC8gMi4wKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBY6Lu444Gu5L2N572u44KS6Kit5a6aXG4gICAqXG4gICAqIEBwYXJhbSB4IFjou7jjga7kvY3nva5cbiAgICovXG4gIHB1YmxpYyBzZXRYKHg6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMudHJhbnNsYXRlWCh4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBZ6Lu444Gu5Lit5b+D5L2N572u44KS6Kit5a6aXG4gICAqXG4gICAqIEBwYXJhbSB5IFnou7jjga7kuK3lv4PkvY3nva5cbiAgICovXG4gIHB1YmxpYyBjZW50ZXJZKHk6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IGg6IG51bWJlciA9IHRoaXMuX2hlaWdodCAqIHRoaXMuZ2V0U2NhbGVZKCk7XG5cbiAgICB0aGlzLnRyYW5zbGF0ZVkoeSAtIGggLyAyLjApO1xuICB9XG5cbiAgLyoqXG4gICAqIFnou7jjga7kvY3nva7jgpLoqK3lrprjgZnjgotcbiAgICpcbiAgICogQHBhcmFtIHkgWei7uOOBruS9jee9rlxuICAgKi9cbiAgcHVibGljIHNldFkoeTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy50cmFuc2xhdGVZKHkpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODrOOCpOOCouOCpuODiOaDheWgseOBi+OCieS9jee9ruOCkuioreWumlxuICAgKlxuICAgKiBAcGFyYW0gbGF5b3V0IOODrOOCpOOCouOCpuODiOaDheWgsVxuICAgKi9cbiAgcHVibGljIHNldHVwRnJvbUxheW91dChsYXlvdXQ6IGNzbU1hcDxzdHJpbmcsIG51bWJlcj4pOiB2b2lkIHtcbiAgICBjb25zdCBrZXlXaWR0aCA9ICd3aWR0aCc7XG4gICAgY29uc3Qga2V5SGVpZ2h0ID0gJ2hlaWdodCc7XG4gICAgY29uc3Qga2V5WCA9ICd4JztcbiAgICBjb25zdCBrZXlZID0gJ3knO1xuICAgIGNvbnN0IGtleUNlbnRlclggPSAnY2VudGVyX3gnO1xuICAgIGNvbnN0IGtleUNlbnRlclkgPSAnY2VudGVyX3knO1xuICAgIGNvbnN0IGtleVRvcCA9ICd0b3AnO1xuICAgIGNvbnN0IGtleUJvdHRvbSA9ICdib3R0b20nO1xuICAgIGNvbnN0IGtleUxlZnQgPSAnbGVmdCc7XG4gICAgY29uc3Qga2V5UmlnaHQgPSAncmlnaHQnO1xuXG4gICAgZm9yIChcbiAgICAgIGNvbnN0IGl0ZTogaXRlcmF0b3I8c3RyaW5nLCBudW1iZXI+ID0gbGF5b3V0LmJlZ2luKCk7XG4gICAgICBpdGUubm90RXF1YWwobGF5b3V0LmVuZCgpKTtcbiAgICAgIGl0ZS5wcmVJbmNyZW1lbnQoKVxuICAgICkge1xuICAgICAgY29uc3Qga2V5OiBzdHJpbmcgPSBpdGUucHRyKCkuZmlyc3Q7XG4gICAgICBjb25zdCB2YWx1ZTogbnVtYmVyID0gaXRlLnB0cigpLnNlY29uZDtcblxuICAgICAgaWYgKGtleSA9PSBrZXlXaWR0aCkge1xuICAgICAgICB0aGlzLnNldFdpZHRoKHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoa2V5ID09IGtleUhlaWdodCkge1xuICAgICAgICB0aGlzLnNldEhlaWdodCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChcbiAgICAgIGNvbnN0IGl0ZTogaXRlcmF0b3I8c3RyaW5nLCBudW1iZXI+ID0gbGF5b3V0LmJlZ2luKCk7XG4gICAgICBpdGUubm90RXF1YWwobGF5b3V0LmVuZCgpKTtcbiAgICAgIGl0ZS5wcmVJbmNyZW1lbnQoKVxuICAgICkge1xuICAgICAgY29uc3Qga2V5OiBzdHJpbmcgPSBpdGUucHRyKCkuZmlyc3Q7XG4gICAgICBjb25zdCB2YWx1ZTogbnVtYmVyID0gaXRlLnB0cigpLnNlY29uZDtcblxuICAgICAgaWYgKGtleSA9PSBrZXlYKSB7XG4gICAgICAgIHRoaXMuc2V0WCh2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGtleSA9PSBrZXlZKSB7XG4gICAgICAgIHRoaXMuc2V0WSh2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGtleSA9PSBrZXlDZW50ZXJYKSB7XG4gICAgICAgIHRoaXMuY2VudGVyWCh2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGtleSA9PSBrZXlDZW50ZXJZKSB7XG4gICAgICAgIHRoaXMuY2VudGVyWSh2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGtleSA9PSBrZXlUb3ApIHtcbiAgICAgICAgdGhpcy50b3AodmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChrZXkgPT0ga2V5Qm90dG9tKSB7XG4gICAgICAgIHRoaXMuYm90dG9tKHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoa2V5ID09IGtleUxlZnQpIHtcbiAgICAgICAgdGhpcy5sZWZ0KHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoa2V5ID09IGtleVJpZ2h0KSB7XG4gICAgICAgIHRoaXMucmlnaHQodmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX3dpZHRoOiBudW1iZXI7IC8vIOaoquW5hVxuICBwcml2YXRlIF9oZWlnaHQ6IG51bWJlcjsgLy8g57im5bmFXG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbW1vZGVsbWF0cml4Jztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21Nb2RlbE1hdHJpeCA9ICQuQ3ViaXNtTW9kZWxNYXRyaXg7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbU1vZGVsTWF0cml4ID0gJC5DdWJpc21Nb2RlbE1hdHJpeDtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IEN1YmlzbU1hdGggfSBmcm9tICcuL2N1YmlzbW1hdGgnO1xuXG5jb25zdCBGcmFtZVJhdGUgPSAzMDtcbmNvbnN0IEVwc2lsb24gPSAwLjAxO1xuXG4vKipcbiAqIOmhlOOBruWQkeOBjeOBruWItuW+oeapn+iDvVxuICpcbiAqIOmhlOOBruWQkeOBjeOBruWItuW+oeapn+iDveOCkuaPkOS+m+OBmeOCi+OCr+ODqeOCueOAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtVGFyZ2V0UG9pbnQge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fZmFjZVRhcmdldFggPSAwLjA7XG4gICAgdGhpcy5fZmFjZVRhcmdldFkgPSAwLjA7XG4gICAgdGhpcy5fZmFjZVggPSAwLjA7XG4gICAgdGhpcy5fZmFjZVkgPSAwLjA7XG4gICAgdGhpcy5fZmFjZVZYID0gMC4wO1xuICAgIHRoaXMuX2ZhY2VWWSA9IDAuMDtcbiAgICB0aGlzLl9sYXN0VGltZVNlY29uZHMgPSAwLjA7XG4gICAgdGhpcy5fdXNlclRpbWVTZWNvbmRzID0gMC4wO1xuICB9XG5cbiAgLyoqXG4gICAqIOabtOaWsOWHpueQhlxuICAgKi9cbiAgcHVibGljIHVwZGF0ZShkZWx0YVRpbWVTZWNvbmRzOiBudW1iZXIpOiB2b2lkIHtcbiAgICAvLyDjg4fjg6vjgr/mmYLplpPjgpLliqDnrpfjgZnjgotcbiAgICB0aGlzLl91c2VyVGltZVNlY29uZHMgKz0gZGVsdGFUaW1lU2Vjb25kcztcblxuICAgIC8vIOmmluOCkuS4reWkruOBi+OCieW3puWPs+OBq+aMr+OCi+OBqOOBjeOBruW5s+Wdh+eahOOBqumAn+OBleOBryDnp5LpgJ/luqbjgILliqDpgJ/jg7vmuJvpgJ/jgpLogIPmha7jgZfjgabjgIHjgZ3jga7vvJLlgI3jgpLmnIDpq5jpgJ/luqbjgajjgZnjgotcbiAgICAvLyDpoZTjga7mjK/jgorlhbflkIjjgpLjgIHkuK3lpK7vvIgwLjDvvInjgYvjgonjgIHlt6blj7Pjga/vvIgrLTEuMO+8ieOBqOOBmeOCi1xuICAgIGNvbnN0IGZhY2VQYXJhbU1heFY6IG51bWJlciA9IDQwLjAgLyAxMC4wOyAvLyA3LjXnp5LplpPjgas0MOWIhuenu+WLlSg1LjMvc2MpXG4gICAgY29uc3QgbWF4VjogbnVtYmVyID0gKGZhY2VQYXJhbU1heFYgKiAxLjApIC8gRnJhbWVSYXRlOyAvLyAxZnJhbWXjgYLjgZ/jgorjgavlpInljJbjgafjgY3jgovpgJ/luqbjga7kuIrpmZBcblxuICAgIGlmICh0aGlzLl9sYXN0VGltZVNlY29uZHMgPT0gMC4wKSB7XG4gICAgICB0aGlzLl9sYXN0VGltZVNlY29uZHMgPSB0aGlzLl91c2VyVGltZVNlY29uZHM7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZGVsdGFUaW1lV2VpZ2h0OiBudW1iZXIgPVxuICAgICAgKHRoaXMuX3VzZXJUaW1lU2Vjb25kcyAtIHRoaXMuX2xhc3RUaW1lU2Vjb25kcykgKiBGcmFtZVJhdGU7XG4gICAgdGhpcy5fbGFzdFRpbWVTZWNvbmRzID0gdGhpcy5fdXNlclRpbWVTZWNvbmRzO1xuXG4gICAgLy8g5pyA6auY6YCf5bqm44Gr44Gq44KL44G+44Gn44Gu5pmC6ZaT44KSXG4gICAgY29uc3QgdGltZVRvTWF4U3BlZWQgPSAwLjE1O1xuICAgIGNvbnN0IGZyYW1lVG9NYXhTcGVlZDogbnVtYmVyID0gdGltZVRvTWF4U3BlZWQgKiBGcmFtZVJhdGU7IC8vIHNlYyAqIGZyYW1lL3NlY1xuICAgIGNvbnN0IG1heEE6IG51bWJlciA9IChkZWx0YVRpbWVXZWlnaHQgKiBtYXhWKSAvIGZyYW1lVG9NYXhTcGVlZDsgLy8gMWZyYW1l44GC44Gf44KK44Gu5Yqg6YCf5bqmXG5cbiAgICAvLyDnm67mjIfjgZnlkJHjgY3jga/jgIHvvIhkeCwgZHnvvInmlrnlkJHjga7jg5njgq/jg4jjg6vjgajjgarjgotcbiAgICBjb25zdCBkeDogbnVtYmVyID0gdGhpcy5fZmFjZVRhcmdldFggLSB0aGlzLl9mYWNlWDtcbiAgICBjb25zdCBkeTogbnVtYmVyID0gdGhpcy5fZmFjZVRhcmdldFkgLSB0aGlzLl9mYWNlWTtcblxuICAgIGlmIChDdWJpc21NYXRoLmFicyhkeCkgPD0gRXBzaWxvbiAmJiBDdWJpc21NYXRoLmFicyhkeSkgPD0gRXBzaWxvbikge1xuICAgICAgcmV0dXJuOyAvLyDlpInljJbjgarjgZdcbiAgICB9XG5cbiAgICAvLyDpgJ/luqbjga7mnIDlpKfjgojjgorjgoLlpKfjgY3jgYTloLTlkIjjga/jgIHpgJ/luqbjgpLokL3jgajjgZlcbiAgICBjb25zdCBkOiBudW1iZXIgPSBDdWJpc21NYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xuXG4gICAgLy8g6YCy6KGM5pa55ZCR44Gu5pyA5aSn6YCf5bqm44OZ44Kv44OI44OrXG4gICAgY29uc3Qgdng6IG51bWJlciA9IChtYXhWICogZHgpIC8gZDtcbiAgICBjb25zdCB2eTogbnVtYmVyID0gKG1heFYgKiBkeSkgLyBkO1xuXG4gICAgLy8g54++5Zyo44Gu6YCf5bqm44GL44KJ44CB5paw6KaP6YCf5bqm44G444Gu5aSJ5YyW77yI5Yqg6YCf5bqm77yJ44KS5rGC44KB44KLXG4gICAgbGV0IGF4OiBudW1iZXIgPSB2eCAtIHRoaXMuX2ZhY2VWWDtcbiAgICBsZXQgYXk6IG51bWJlciA9IHZ5IC0gdGhpcy5fZmFjZVZZO1xuXG4gICAgY29uc3QgYTogbnVtYmVyID0gQ3ViaXNtTWF0aC5zcXJ0KGF4ICogYXggKyBheSAqIGF5KTtcblxuICAgIC8vIOWKoOmAn+OBruOBqOOBjVxuICAgIGlmIChhIDwgLW1heEEgfHwgYSA+IG1heEEpIHtcbiAgICAgIGF4ICo9IG1heEEgLyBhO1xuICAgICAgYXkgKj0gbWF4QSAvIGE7XG4gICAgfVxuXG4gICAgLy8g5Yqg6YCf5bqm44KS5YWD44Gu6YCf5bqm44Gr6Laz44GX44Gm44CB5paw6YCf5bqm44Go44GZ44KLXG4gICAgdGhpcy5fZmFjZVZYICs9IGF4O1xuICAgIHRoaXMuX2ZhY2VWWSArPSBheTtcblxuICAgIC8vIOebrueahOOBruaWueWQkeOBq+i/keOBpeOBhOOBn+OBqOOBjeOAgea7keOCieOBi+OBq+a4m+mAn+OBmeOCi+OBn+OCgeOBruWHpueQhlxuICAgIC8vIOioreWumuOBleOCjOOBn+WKoOmAn+W6puOBp+atouOBvuOCi+S6i+OBruWHuuadpeOCi+i3nembouOBqOmAn+W6puOBrumWouS/guOBi+OCiVxuICAgIC8vIOePvuWcqOOBqOOCiuOBhuOCi+acgOmrmOmAn+W6puOCkuioiOeul+OBl+OAgeOBneOCjOS7peS4iuOBruaZguOBr+mAn+W6puOCkuiQveOBqOOBmVxuICAgIC8vIOKAu+acrOadpeOAgeS6uumWk+OBr+eti+WKm+OBp+WKm++8iOWKoOmAn+W6pu+8ieOCkuiqv+aVtOOBp+OBjeOCi+OBn+OCgeOAgeOCiOOCiuiHqueUseW6puOBjOmrmOOBhOOBjOOAgeewoeWNmOOBquWHpueQhuOBp+a4iOOBvuOBm+OBpuOBhOOCi1xuICAgIHtcbiAgICAgIC8vIOWKoOmAn+W6puOAgemAn+W6puOAgei3nembouOBrumWouS/guW8j+OAglxuICAgICAgLy8gICAgICAgICAgICAyICA2ICAgICAgICAgICAyICAgICAgICAgICAgICAgM1xuICAgICAgLy8gICAgICBzcXJ0KGEgIHQgICsgMTYgYSBoIHQgIC0gOCBhIGgpIC0gYSB0XG4gICAgICAvLyB2ID0gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgIC8vICAgICAgICAgICAgICAgICAgICAyXG4gICAgICAvLyAgICAgICAgICAgICAgICAgNCB0ICAtIDJcbiAgICAgIC8vICh0PTEpXG4gICAgICAvLyBcdOaZguWIu3Tjga/jgIHjgYLjgonjgYvjgZjjgoHliqDpgJ/luqbjgIHpgJ/luqbjgpIxLzYwKOODleODrOODvOODoOODrOODvOODiOOAgeWNmOS9jeOBquOBlynjgadcbiAgICAgIC8vIFx06ICD44GI44Gm44GE44KL44Gu44Gn44CBdO+8ne+8keOBqOOBl+OBpua2iOOBl+OBpuOCiOOBhO+8iOKAu+acquaknOiovO+8iVxuXG4gICAgICBjb25zdCBtYXhWOiBudW1iZXIgPVxuICAgICAgICAwLjUgKlxuICAgICAgICAoQ3ViaXNtTWF0aC5zcXJ0KG1heEEgKiBtYXhBICsgMTYuMCAqIG1heEEgKiBkIC0gOC4wICogbWF4QSAqIGQpIC1cbiAgICAgICAgICBtYXhBKTtcbiAgICAgIGNvbnN0IGN1clY6IG51bWJlciA9IEN1YmlzbU1hdGguc3FydChcbiAgICAgICAgdGhpcy5fZmFjZVZYICogdGhpcy5fZmFjZVZYICsgdGhpcy5fZmFjZVZZICogdGhpcy5fZmFjZVZZXG4gICAgICApO1xuXG4gICAgICBpZiAoY3VyViA+IG1heFYpIHtcbiAgICAgICAgLy8g54++5Zyo44Gu6YCf5bqmID4g5pyA6auY6YCf5bqm44Gu44Go44GN44CB5pyA6auY6YCf5bqm44G+44Gn5rib6YCfXG4gICAgICAgIHRoaXMuX2ZhY2VWWCAqPSBtYXhWIC8gY3VyVjtcbiAgICAgICAgdGhpcy5fZmFjZVZZICo9IG1heFYgLyBjdXJWO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2ZhY2VYICs9IHRoaXMuX2ZhY2VWWDtcbiAgICB0aGlzLl9mYWNlWSArPSB0aGlzLl9mYWNlVlk7XG4gIH1cblxuICAvKipcbiAgICogWOi7uOOBrumhlOOBruWQkeOBjeOBruWApOOCkuWPluW+l1xuICAgKlxuICAgKiBAcmV0dXJuIFjou7jjga7poZTjga7lkJHjgY3jga7lgKTvvIgtMS4wIH4gMS4w77yJXG4gICAqL1xuICBwdWJsaWMgZ2V0WCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9mYWNlWDtcbiAgfVxuXG4gIC8qKlxuICAgKiBZ6Lu444Gu6aGU44Gu5ZCR44GN44Gu5YCk44KS5Y+W5b6XXG4gICAqXG4gICAqIEByZXR1cm4gWei7uOOBrumhlOOBruWQkeOBjeOBruWApO+8iC0xLjAgfiAxLjDvvIlcbiAgICovXG4gIHB1YmxpYyBnZXRZKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2ZhY2VZO1xuICB9XG5cbiAgLyoqXG4gICAqIOmhlOOBruWQkeOBjeOBruebruaomeWApOOCkuioreWumlxuICAgKlxuICAgKiBAcGFyYW0geCBY6Lu444Gu6aGU44Gu5ZCR44GN44Gu5YCk77yILTEuMCB+IDEuMO+8iVxuICAgKiBAcGFyYW0geSBZ6Lu444Gu6aGU44Gu5ZCR44GN44Gu5YCk77yILTEuMCB+IDEuMO+8iVxuICAgKi9cbiAgcHVibGljIHNldCh4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX2ZhY2VUYXJnZXRYID0geDtcbiAgICB0aGlzLl9mYWNlVGFyZ2V0WSA9IHk7XG4gIH1cblxuICBwcml2YXRlIF9mYWNlVGFyZ2V0WDogbnVtYmVyOyAvLyDpoZTjga7lkJHjgY3jga5Y55uu5qiZ5YCk77yI44GT44Gu5YCk44Gr6L+R44Gl44GE44Gm44GE44GP77yJXG4gIHByaXZhdGUgX2ZhY2VUYXJnZXRZOiBudW1iZXI7IC8vIOmhlOOBruWQkeOBjeOBrlnnm67mqJnlgKTvvIjjgZPjga7lgKTjgavov5HjgaXjgYTjgabjgYTjgY/vvIlcbiAgcHJpdmF0ZSBfZmFjZVg6IG51bWJlcjsgLy8g6aGU44Gu5ZCR44GNWO+8iC0xLjAgfiAxLjDvvIlcbiAgcHJpdmF0ZSBfZmFjZVk6IG51bWJlcjsgLy8g6aGU44Gu5ZCR44GNWe+8iC0xLjAgfiAxLjDvvIlcbiAgcHJpdmF0ZSBfZmFjZVZYOiBudW1iZXI7IC8vIOmhlOOBruWQkeOBjeOBruWkieWMlumAn+W6plhcbiAgcHJpdmF0ZSBfZmFjZVZZOiBudW1iZXI7IC8vIOmhlOOBruWQkeOBjeOBruWkieWMlumAn+W6pllcbiAgcHJpdmF0ZSBfbGFzdFRpbWVTZWNvbmRzOiBudW1iZXI7IC8vIOacgOW+jOOBruWun+ihjOaZgumWk1vnp5JdXG4gIHByaXZhdGUgX3VzZXJUaW1lU2Vjb25kczogbnVtYmVyOyAvLyDjg4fjg6vjgr/mmYLplpPjga7nqY3nrpflgKRb56eSXVxufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc210YXJnZXRwb2ludCc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtVGFyZ2V0UG9pbnQgPSAkLkN1YmlzbVRhcmdldFBvaW50O1xuICBleHBvcnQgdHlwZSBDdWJpc21UYXJnZXRQb2ludCA9ICQuQ3ViaXNtVGFyZ2V0UG9pbnQ7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG4vKipcbiAqIDLmrKHlhYPjg5njgq/jg4jjg6vlnotcbiAqXG4gKiAy5qyh5YWD44OZ44Kv44OI44Or5Z6L44Gu5qmf6IO944KS5o+Q5L6b44GZ44KL44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21WZWN0b3IyIHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHB1YmxpYyB4PzogbnVtYmVyLCBwdWJsaWMgeT86IG51bWJlcikge1xuICAgIHRoaXMueCA9IHggPT0gdW5kZWZpbmVkID8gMC4wIDogeDtcblxuICAgIHRoaXMueSA9IHkgPT0gdW5kZWZpbmVkID8gMC4wIDogeTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5njgq/jg4jjg6vjga7liqDnrpdcbiAgICpcbiAgICogQHBhcmFtIHZlY3RvcjIg5Yqg566X44GZ44KL44OZ44Kv44OI44Or5YCkXG4gICAqIEByZXR1cm4g5Yqg566X57WQ5p6cIOODmeOCr+ODiOODq+WApFxuICAgKi9cbiAgcHVibGljIGFkZCh2ZWN0b3IyOiBDdWJpc21WZWN0b3IyKTogQ3ViaXNtVmVjdG9yMiB7XG4gICAgY29uc3QgcmV0OiBDdWJpc21WZWN0b3IyID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xuICAgIHJldC54ID0gdGhpcy54ICsgdmVjdG9yMi54O1xuICAgIHJldC55ID0gdGhpcy55ICsgdmVjdG9yMi55O1xuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICog44OZ44Kv44OI44Or44Gu5rib566XXG4gICAqXG4gICAqIEBwYXJhbSB2ZWN0b3IyIOa4m+eul+OBmeOCi+ODmeOCr+ODiOODq+WApFxuICAgKiBAcmV0dXJuIOa4m+eul+e1kOaenCDjg5njgq/jg4jjg6vlgKRcbiAgICovXG4gIHB1YmxpYyBzdWJzdHJhY3QodmVjdG9yMjogQ3ViaXNtVmVjdG9yMik6IEN1YmlzbVZlY3RvcjIge1xuICAgIGNvbnN0IHJldDogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcbiAgICByZXQueCA9IHRoaXMueCAtIHZlY3RvcjIueDtcbiAgICByZXQueSA9IHRoaXMueSAtIHZlY3RvcjIueTtcbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLyoqXG4gICAqIOODmeOCr+ODiOODq+OBruS5l+eul1xuICAgKlxuICAgKiBAcGFyYW0gdmVjdG9yMiDkuZfnrpfjgZnjgovjg5njgq/jg4jjg6vlgKRcbiAgICogQHJldHVybiDkuZfnrpfntZDmnpwg44OZ44Kv44OI44Or5YCkXG4gICAqL1xuICBwdWJsaWMgbXVsdGlwbHkodmVjdG9yMjogQ3ViaXNtVmVjdG9yMik6IEN1YmlzbVZlY3RvcjIge1xuICAgIGNvbnN0IHJldDogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcbiAgICByZXQueCA9IHRoaXMueCAqIHZlY3RvcjIueDtcbiAgICByZXQueSA9IHRoaXMueSAqIHZlY3RvcjIueTtcbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLyoqXG4gICAqIOODmeOCr+ODiOODq+OBruS5l+eulyjjgrnjgqvjg6njg7wpXG4gICAqXG4gICAqIEBwYXJhbSBzY2FsYXIg5LmX566X44GZ44KL44K544Kr44Op44O85YCkXG4gICAqIEByZXR1cm4g5LmX566X57WQ5p6cIOODmeOCr+ODiOODq+WApFxuICAgKi9cbiAgcHVibGljIG11bHRpcGx5QnlTY2FsZXIoc2NhbGFyOiBudW1iZXIpOiBDdWJpc21WZWN0b3IyIHtcbiAgICByZXR1cm4gdGhpcy5tdWx0aXBseShuZXcgQ3ViaXNtVmVjdG9yMihzY2FsYXIsIHNjYWxhcikpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODmeOCr+ODiOODq+OBrumZpOeul1xuICAgKlxuICAgKiBAcGFyYW0gdmVjdG9yMiDpmaTnrpfjgZnjgovjg5njgq/jg4jjg6vlgKRcbiAgICogQHJldHVybiDpmaTnrpfntZDmnpwg44OZ44Kv44OI44Or5YCkXG4gICAqL1xuICBwdWJsaWMgZGl2aXNpb24odmVjdG9yMjogQ3ViaXNtVmVjdG9yMik6IEN1YmlzbVZlY3RvcjIge1xuICAgIGNvbnN0IHJldDogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcbiAgICByZXQueCA9IHRoaXMueCAvIHZlY3RvcjIueDtcbiAgICByZXQueSA9IHRoaXMueSAvIHZlY3RvcjIueTtcbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLyoqXG4gICAqIOODmeOCr+ODiOODq+OBrumZpOeulyjjgrnjgqvjg6njg7wpXG4gICAqXG4gICAqIEBwYXJhbSBzY2FsYXIg6Zmk566X44GZ44KL44K544Kr44Op44O85YCkXG4gICAqIEByZXR1cm4g6Zmk566X57WQ5p6cIOODmeOCr+ODiOODq+WApFxuICAgKi9cbiAgcHVibGljIGRpdmlzaW9uQnlTY2FsYXIoc2NhbGFyOiBudW1iZXIpOiBDdWJpc21WZWN0b3IyIHtcbiAgICByZXR1cm4gdGhpcy5kaXZpc2lvbihuZXcgQ3ViaXNtVmVjdG9yMihzY2FsYXIsIHNjYWxhcikpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODmeOCr+ODiOODq+OBrumVt+OBleOCkuWPluW+l+OBmeOCi1xuICAgKlxuICAgKiBAcmV0dXJuIOODmeOCr+ODiOODq+OBrumVt+OBlVxuICAgKi9cbiAgcHVibGljIGdldExlbmd0aCgpOiBudW1iZXIge1xuICAgIHJldHVybiBNYXRoLnNxcnQodGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5njgq/jg4jjg6vjga7ot53pm6Ljga7lj5blvpdcbiAgICpcbiAgICogQHBhcmFtIGEg54K5XG4gICAqIEByZXR1cm4g44OZ44Kv44OI44Or44Gu6Led6ZuiXG4gICAqL1xuICBwdWJsaWMgZ2V0RGlzdGFuY2VXaXRoKGE6IEN1YmlzbVZlY3RvcjIpOiBudW1iZXIge1xuICAgIHJldHVybiBNYXRoLnNxcnQoXG4gICAgICAodGhpcy54IC0gYS54KSAqICh0aGlzLnggLSBhLngpICsgKHRoaXMueSAtIGEueSkgKiAodGhpcy55IC0gYS55KVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog44OJ44OD44OI56mN44Gu6KiI566XXG4gICAqXG4gICAqIEBwYXJhbSBhIOWApFxuICAgKiBAcmV0dXJuIOe1kOaenFxuICAgKi9cbiAgcHVibGljIGRvdChhOiBDdWJpc21WZWN0b3IyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy54ICogYS54ICsgdGhpcy55ICogYS55O1xuICB9XG5cbiAgLyoqXG4gICAqIOato+imj+WMluOBrumBqeeUqFxuICAgKi9cbiAgcHVibGljIG5vcm1hbGl6ZSgpOiB2b2lkIHtcbiAgICBjb25zdCBsZW5ndGg6IG51bWJlciA9IE1hdGgucG93KHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSwgMC41KTtcblxuICAgIHRoaXMueCA9IHRoaXMueCAvIGxlbmd0aDtcbiAgICB0aGlzLnkgPSB0aGlzLnkgLyBsZW5ndGg7XG4gIH1cblxuICAvKipcbiAgICog562J44GX44GV44Gu56K66KqN77yI562J44GX44GE44GL77yf77yJXG4gICAqXG4gICAqIOWApOOBjOetieOBl+OBhOOBi++8n1xuICAgKlxuICAgKiBAcGFyYW0gcmhzIOeiuuiqjeOBmeOCi+WApFxuICAgKiBAcmV0dXJuIHRydWUg5YCk44Gv562J44GX44GEXG4gICAqIEByZXR1cm4gZmFsc2Ug5YCk44Gv562J44GX44GP44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNFcXVhbChyaHM6IEN1YmlzbVZlY3RvcjIpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy54ID09IHJocy54ICYmIHRoaXMueSA9PSByaHMueTtcbiAgfVxuXG4gIC8qKlxuICAgKiDnrYnjgZfjgZXjga7norroqo3vvIjnrYnjgZfjgY/jgarjgYTjgYvvvJ/vvIlcbiAgICpcbiAgICog5YCk44GM562J44GX44GP44Gq44GE44GL77yfXG4gICAqXG4gICAqIEBwYXJhbSByaHMg56K66KqN44GZ44KL5YCkXG4gICAqIEByZXR1cm4gdHJ1ZSDlgKTjga/nrYnjgZfjgY/jgarjgYRcbiAgICogQHJldHVybiBmYWxzZSDlgKTjga/nrYnjgZfjgYRcbiAgICovXG4gIHB1YmxpYyBpc05vdEVxdWFsKHJoczogQ3ViaXNtVmVjdG9yMik6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhdGhpcy5pc0VxdWFsKHJocyk7XG4gIH1cbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtdmVjdG9yMic7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtVmVjdG9yMiA9ICQuQ3ViaXNtVmVjdG9yMjtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtVmVjdG9yMiA9ICQuQ3ViaXNtVmVjdG9yMjtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IEN1YmlzbU1hdHJpeDQ0IH0gZnJvbSAnLi9jdWJpc21tYXRyaXg0NCc7XG5cbi8qKlxuICog44Kr44Oh44Op44Gu5L2N572u5aSJ5pu044Gr5L2/44GG44Go5L6/5Yip44GqNHg06KGM5YiXXG4gKlxuICog44Kr44Oh44Op44Gu5L2N572u5aSJ5pu044Gr5L2/44GG44Go5L6/5Yip44GqNHg06KGM5YiX44Gu44Kv44Op44K544CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21WaWV3TWF0cml4IGV4dGVuZHMgQ3ViaXNtTWF0cml4NDQge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zY3JlZW5MZWZ0ID0gMC4wO1xuICAgIHRoaXMuX3NjcmVlblJpZ2h0ID0gMC4wO1xuICAgIHRoaXMuX3NjcmVlblRvcCA9IDAuMDtcbiAgICB0aGlzLl9zY3JlZW5Cb3R0b20gPSAwLjA7XG4gICAgdGhpcy5fbWF4TGVmdCA9IDAuMDtcbiAgICB0aGlzLl9tYXhSaWdodCA9IDAuMDtcbiAgICB0aGlzLl9tYXhUb3AgPSAwLjA7XG4gICAgdGhpcy5fbWF4Qm90dG9tID0gMC4wO1xuICAgIHRoaXMuX21heFNjYWxlID0gMC4wO1xuICAgIHRoaXMuX21pblNjYWxlID0gMC4wO1xuICB9XG5cbiAgLyoqXG4gICAqIOenu+WLleOCkuiqv+aVtFxuICAgKlxuICAgKiBAcGFyYW0geCBY6Lu444Gu56e75YuV6YePXG4gICAqIEBwYXJhbSB5IFnou7jjga7np7vli5Xph49cbiAgICovXG4gIHB1YmxpYyBhZGp1c3RUcmFuc2xhdGUoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fdHJbMF0gKiB0aGlzLl9tYXhMZWZ0ICsgKHRoaXMuX3RyWzEyXSArIHgpID4gdGhpcy5fc2NyZWVuTGVmdCkge1xuICAgICAgeCA9IHRoaXMuX3NjcmVlbkxlZnQgLSB0aGlzLl90clswXSAqIHRoaXMuX21heExlZnQgLSB0aGlzLl90clsxMl07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3RyWzBdICogdGhpcy5fbWF4UmlnaHQgKyAodGhpcy5fdHJbMTJdICsgeCkgPCB0aGlzLl9zY3JlZW5SaWdodCkge1xuICAgICAgeCA9IHRoaXMuX3NjcmVlblJpZ2h0IC0gdGhpcy5fdHJbMF0gKiB0aGlzLl9tYXhSaWdodCAtIHRoaXMuX3RyWzEyXTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fdHJbNV0gKiB0aGlzLl9tYXhUb3AgKyAodGhpcy5fdHJbMTNdICsgeSkgPCB0aGlzLl9zY3JlZW5Ub3ApIHtcbiAgICAgIHkgPSB0aGlzLl9zY3JlZW5Ub3AgLSB0aGlzLl90cls1XSAqIHRoaXMuX21heFRvcCAtIHRoaXMuX3RyWzEzXTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICB0aGlzLl90cls1XSAqIHRoaXMuX21heEJvdHRvbSArICh0aGlzLl90clsxM10gKyB5KSA+XG4gICAgICB0aGlzLl9zY3JlZW5Cb3R0b21cbiAgICApIHtcbiAgICAgIHkgPSB0aGlzLl9zY3JlZW5Cb3R0b20gLSB0aGlzLl90cls1XSAqIHRoaXMuX21heEJvdHRvbSAtIHRoaXMuX3RyWzEzXTtcbiAgICB9XG5cbiAgICBjb25zdCB0cjE6IEZsb2F0MzJBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoW1xuICAgICAgMS4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMS4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMS4wLFxuICAgICAgMC4wLFxuICAgICAgeCxcbiAgICAgIHksXG4gICAgICAwLjAsXG4gICAgICAxLjAsXG4gICAgXSk7XG5cbiAgICBDdWJpc21NYXRyaXg0NC5tdWx0aXBseSh0cjEsIHRoaXMuX3RyLCB0aGlzLl90cik7XG4gIH1cblxuICAvKipcbiAgICog5ouh5aSn546H44KS6Kq/5pW0XG4gICAqXG4gICAqIEBwYXJhbSBjeCDmi6HlpKfjgpLooYzjgYZY6Lu444Gu5Lit5b+D5L2N572uXG4gICAqIEBwYXJhbSBjeSDmi6HlpKfjgpLooYzjgYZZ6Lu444Gu5Lit5b+D5L2N572uXG4gICAqIEBwYXJhbSBzY2FsZSDmi6HlpKfnjodcbiAgICovXG4gIHB1YmxpYyBhZGp1c3RTY2FsZShjeDogbnVtYmVyLCBjeTogbnVtYmVyLCBzY2FsZTogbnVtYmVyKTogdm9pZCB7XG4gICAgY29uc3QgbWF4U2NhbGU6IG51bWJlciA9IHRoaXMuZ2V0TWF4U2NhbGUoKTtcbiAgICBjb25zdCBtaW5TY2FsZTogbnVtYmVyID0gdGhpcy5nZXRNaW5TY2FsZSgpO1xuXG4gICAgY29uc3QgdGFyZ2V0U2NhbGUgPSBzY2FsZSAqIHRoaXMuX3RyWzBdO1xuXG4gICAgaWYgKHRhcmdldFNjYWxlIDwgbWluU2NhbGUpIHtcbiAgICAgIGlmICh0aGlzLl90clswXSA+IDAuMCkge1xuICAgICAgICBzY2FsZSA9IG1pblNjYWxlIC8gdGhpcy5fdHJbMF07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0YXJnZXRTY2FsZSA+IG1heFNjYWxlKSB7XG4gICAgICBpZiAodGhpcy5fdHJbMF0gPiAwLjApIHtcbiAgICAgICAgc2NhbGUgPSBtYXhTY2FsZSAvIHRoaXMuX3RyWzBdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHRyMTogRmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShbXG4gICAgICAxLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAxLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAxLjAsXG4gICAgICAwLjAsXG4gICAgICBjeCxcbiAgICAgIGN5LFxuICAgICAgMC4wLFxuICAgICAgMS4wLFxuICAgIF0pO1xuXG4gICAgY29uc3QgdHIyOiBGbG9hdDMyQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KFtcbiAgICAgIHNjYWxlLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgc2NhbGUsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAxLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAxLjAsXG4gICAgXSk7XG5cbiAgICBjb25zdCB0cjM6IEZsb2F0MzJBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoW1xuICAgICAgMS4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMS4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMS4wLFxuICAgICAgMC4wLFxuICAgICAgLWN4LFxuICAgICAgLWN5LFxuICAgICAgMC4wLFxuICAgICAgMS4wLFxuICAgIF0pO1xuXG4gICAgQ3ViaXNtTWF0cml4NDQubXVsdGlwbHkodHIzLCB0aGlzLl90ciwgdGhpcy5fdHIpO1xuICAgIEN1YmlzbU1hdHJpeDQ0Lm11bHRpcGx5KHRyMiwgdGhpcy5fdHIsIHRoaXMuX3RyKTtcbiAgICBDdWJpc21NYXRyaXg0NC5tdWx0aXBseSh0cjEsIHRoaXMuX3RyLCB0aGlzLl90cik7XG4gIH1cblxuICAvKipcbiAgICog44OH44OQ44Kk44K544Gr5a++5b+c44GZ44KL6KuW55CG5bqn6aSK55Sf44Gu56+E5Zuy44Gu6Kit5a6aXG4gICAqXG4gICAqIEBwYXJhbSBsZWZ0ICAgICAg5bem6L6644GuWOi7uOOBruS9jee9rlxuICAgKiBAcGFyYW0gcmlnaHQgICAgIOWPs+i+uuOBrljou7jjga7kvY3nva5cbiAgICogQHBhcmFtIGJvdHRvbSAgICDkuIvovrrjga5Z6Lu444Gu5L2N572uXG4gICAqIEBwYXJhbSB0b3AgICAgICAg5LiK6L6644GuWei7uOOBruS9jee9rlxuICAgKi9cbiAgcHVibGljIHNldFNjcmVlblJlY3QoXG4gICAgbGVmdDogbnVtYmVyLFxuICAgIHJpZ2h0OiBudW1iZXIsXG4gICAgYm90dG9tOiBudW1iZXIsXG4gICAgdG9wOiBudW1iZXJcbiAgKTogdm9pZCB7XG4gICAgdGhpcy5fc2NyZWVuTGVmdCA9IGxlZnQ7XG4gICAgdGhpcy5fc2NyZWVuUmlnaHQgPSByaWdodDtcbiAgICB0aGlzLl9zY3JlZW5Cb3R0b20gPSBib3R0b207XG4gICAgdGhpcy5fc2NyZWVuVG9wID0gdG9wO1xuICB9XG5cbiAgLyoqXG4gICAqIOODh+ODkOOCpOOCueOBq+WvvuW/nOOBmeOCi+irlueQhuW6p+aomeS4iuOBruenu+WLleWPr+iDveevhOWbsuOBruioreWumlxuICAgKiBAcGFyYW0gbGVmdCAgICAgIOW3pui+uuOBrljou7jjga7kvY3nva5cbiAgICogQHBhcmFtIHJpZ2h0ICAgICDlj7Povrrjga5Y6Lu444Gu5L2N572uXG4gICAqIEBwYXJhbSBib3R0b20gICAg5LiL6L6644GuWei7uOOBruS9jee9rlxuICAgKiBAcGFyYW0gdG9wICAgICAgIOS4iui+uuOBrlnou7jjga7kvY3nva5cbiAgICovXG4gIHB1YmxpYyBzZXRNYXhTY3JlZW5SZWN0KFxuICAgIGxlZnQ6IG51bWJlcixcbiAgICByaWdodDogbnVtYmVyLFxuICAgIGJvdHRvbTogbnVtYmVyLFxuICAgIHRvcDogbnVtYmVyXG4gICk6IHZvaWQge1xuICAgIHRoaXMuX21heExlZnQgPSBsZWZ0O1xuICAgIHRoaXMuX21heFJpZ2h0ID0gcmlnaHQ7XG4gICAgdGhpcy5fbWF4VG9wID0gdG9wO1xuICAgIHRoaXMuX21heEJvdHRvbSA9IGJvdHRvbTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmnIDlpKfmi6HlpKfnjofjga7oqK3lrppcbiAgICogQHBhcmFtIG1heFNjYWxlIOacgOWkp+aLoeWkp+eOh1xuICAgKi9cbiAgcHVibGljIHNldE1heFNjYWxlKG1heFNjYWxlOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9tYXhTY2FsZSA9IG1heFNjYWxlO1xuICB9XG5cbiAgLyoqXG4gICAqIOacgOWwj+aLoeWkp+eOh+OBruioreWumlxuICAgKiBAcGFyYW0gbWluU2NhbGUg5pyA5bCP5ouh5aSn546HXG4gICAqL1xuICBwdWJsaWMgc2V0TWluU2NhbGUobWluU2NhbGU6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX21pblNjYWxlID0gbWluU2NhbGU7XG4gIH1cblxuICAvKipcbiAgICog5pyA5aSn5ouh5aSn546H44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g5pyA5aSn5ouh5aSn546HXG4gICAqL1xuICBwdWJsaWMgZ2V0TWF4U2NhbGUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbWF4U2NhbGU7XG4gIH1cblxuICAvKipcbiAgICog5pyA5bCP5ouh5aSn546H44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g5pyA5bCP5ouh5aSn546HXG4gICAqL1xuICBwdWJsaWMgZ2V0TWluU2NhbGUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbWluU2NhbGU7XG4gIH1cblxuICAvKipcbiAgICog5ouh5aSn546H44GM5pyA5aSn44Gr44Gq44Gj44Gm44GE44KL44GL44KS56K66KqN44GZ44KLXG4gICAqXG4gICAqIEByZXR1cm4gdHJ1ZSDmi6HlpKfnjofjga/mnIDlpKdcbiAgICogQHJldHVybiBmYWxzZSDmi6HlpKfnjofjga/mnIDlpKfjgafjga/jgarjgYRcbiAgICovXG4gIHB1YmxpYyBpc01heFNjYWxlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmdldFNjYWxlWCgpID49IHRoaXMuX21heFNjYWxlO1xuICB9XG5cbiAgLyoqXG4gICAqIOaLoeWkp+eOh+OBjOacgOWwj+OBq+OBquOBo+OBpuOBhOOCi+OBi+OCkueiuuiqjeOBmeOCi1xuICAgKlxuICAgKiBAcmV0dXJuIHRydWUg5ouh5aSn546H44Gv5pyA5bCPXG4gICAqIEByZXR1cm4gZmFsc2Ug5ouh5aSn546H44Gv5pyA5bCP44Gn44Gv44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNNaW5TY2FsZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTY2FsZVgoKSA8PSB0aGlzLl9taW5TY2FsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjg5DjgqTjgrnjgavlr77lv5zjgZnjgovoq5bnkIbluqfmqJnjga7lt6bovrrjga7vvLjou7jkvY3nva7jgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDjg4fjg5DjgqTjgrnjgavlr77lv5zjgZnjgovoq5bnkIbluqfmqJnjga7lt6bovrrjga5Y6Lu45L2N572uXG4gICAqL1xuICBwdWJsaWMgZ2V0U2NyZWVuTGVmdCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9zY3JlZW5MZWZ0O1xuICB9XG5cbiAgLyoqXG4gICAqIOODh+ODkOOCpOOCueOBq+WvvuW/nOOBmeOCi+irlueQhuW6p+aomeOBruWPs+i+uuOBru+8uOi7uOS9jee9ruOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOODh+ODkOOCpOOCueOBq+WvvuW/nOOBmeOCi+irlueQhuW6p+aomeOBruWPs+i+uuOBrljou7jkvY3nva5cbiAgICovXG4gIHB1YmxpYyBnZXRTY3JlZW5SaWdodCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9zY3JlZW5SaWdodDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjg5DjgqTjgrnjgavlr77lv5zjgZnjgovoq5bnkIbluqfmqJnjga7kuIvovrrjga5Z6Lu45L2N572u44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g44OH44OQ44Kk44K544Gr5a++5b+c44GZ44KL6KuW55CG5bqn5qiZ44Gu5LiL6L6644GuWei7uOS9jee9rlxuICAgKi9cbiAgcHVibGljIGdldFNjcmVlbkJvdHRvbSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9zY3JlZW5Cb3R0b207XG4gIH1cblxuICAvKipcbiAgICog44OH44OQ44Kk44K544Gr5a++5b+c44GZ44KL6KuW55CG5bqn5qiZ44Gu5LiK6L6644GuWei7uOS9jee9ruOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOODh+ODkOOCpOOCueOBq+WvvuW/nOOBmeOCi+irlueQhuW6p+aomeOBruS4iui+uuOBrlnou7jkvY3nva5cbiAgICovXG4gIHB1YmxpYyBnZXRTY3JlZW5Ub3AoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fc2NyZWVuVG9wO1xuICB9XG5cbiAgLyoqXG4gICAqIOW3pui+uuOBrljou7jkvY3nva7jga7mnIDlpKflgKTjga7lj5blvpdcbiAgICogQHJldHVybiDlt6bovrrjga5Y6Lu45L2N572u44Gu5pyA5aSn5YCkXG4gICAqL1xuICBwdWJsaWMgZ2V0TWF4TGVmdCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9tYXhMZWZ0O1xuICB9XG5cbiAgLyoqXG4gICAqIOWPs+i+uuOBrljou7jkvY3nva7jga7mnIDlpKflgKTjga7lj5blvpdcbiAgICogQHJldHVybiDlj7Povrrjga5Y6Lu45L2N572u44Gu5pyA5aSn5YCkXG4gICAqL1xuICBwdWJsaWMgZ2V0TWF4UmlnaHQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbWF4UmlnaHQ7XG4gIH1cblxuICAvKipcbiAgICog5LiL6L6644GuWei7uOS9jee9ruOBruacgOWkp+WApOOBruWPluW+l1xuICAgKiBAcmV0dXJuIOS4i+i+uuOBrlnou7jkvY3nva7jga7mnIDlpKflgKRcbiAgICovXG4gIHB1YmxpYyBnZXRNYXhCb3R0b20oKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbWF4Qm90dG9tO1xuICB9XG5cbiAgLyoqXG4gICAqIOS4iui+uuOBrlnou7jkvY3nva7jga7mnIDlpKflgKTjga7lj5blvpdcbiAgICogQHJldHVybiDkuIrovrrjga5Z6Lu45L2N572u44Gu5pyA5aSn5YCkXG4gICAqL1xuICBwdWJsaWMgZ2V0TWF4VG9wKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX21heFRvcDtcbiAgfVxuXG4gIHByaXZhdGUgX3NjcmVlbkxlZnQ6IG51bWJlcjsgLy8g44OH44OQ44Kk44K544Gr5a++5b+c44GZ44KL6KuW55CG5bqn5qiZ5LiK44Gu56+E5Zuy77yI5bem6L66WOi7uOS9jee9ru+8iVxuICBwcml2YXRlIF9zY3JlZW5SaWdodDogbnVtYmVyOyAvLyDjg4fjg5DjgqTjgrnjgavlr77lv5zjgZnjgovoq5bnkIbluqfmqJnkuIrjga7nr4Tlm7LvvIjlj7PovrpY6Lu45L2N572u77yJXG4gIHByaXZhdGUgX3NjcmVlblRvcDogbnVtYmVyOyAvLyDjg4fjg5DjgqTjgrnjgavlr77lv5zjgZnjgovoq5bnkIbluqfmqJnkuIrjga7nr4Tlm7LvvIjkuIrovrpZ6Lu45L2N572u77yJXG4gIHByaXZhdGUgX3NjcmVlbkJvdHRvbTogbnVtYmVyOyAvLyDjg4fjg5DjgqTjgrnjgavlr77lv5zjgZnjgovoq5bnkIbluqfmqJnkuIrjga7nr4Tlm7LvvIjkuIvovrpZ6Lu45L2N572u77yJXG4gIHByaXZhdGUgX21heExlZnQ6IG51bWJlcjsgLy8g6KuW55CG5bqn5qiZ5LiK44Gu56e75YuV5Y+v6IO956+E5Zuy77yI5bem6L66WOi7uOS9jee9ru+8iVxuICBwcml2YXRlIF9tYXhSaWdodDogbnVtYmVyOyAvLyDoq5bnkIbluqfmqJnkuIrjga7np7vli5Xlj6/og73nr4Tlm7LvvIjlj7PovrpY6Lu45L2N572u77yJXG4gIHByaXZhdGUgX21heFRvcDogbnVtYmVyOyAvLyDoq5bnkIbluqfmqJnkuIrjga7np7vli5Xlj6/og73nr4Tlm7LvvIjkuIrovrpZ6Lu45L2N572u77yJXG4gIHByaXZhdGUgX21heEJvdHRvbTogbnVtYmVyOyAvLyDoq5bnkIbluqfmqJnkuIrjga7np7vli5Xlj6/og73nr4Tlm7LvvIjkuIvovrpZ6Lu45L2N572u77yJXG4gIHByaXZhdGUgX21heFNjYWxlOiBudW1iZXI7IC8vIOaLoeWkp+eOh+OBruacgOWkp+WApFxuICBwcml2YXRlIF9taW5TY2FsZTogbnVtYmVyOyAvLyDmi6HlpKfnjofjga7mnIDlsI/lgKRcbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtdmlld21hdHJpeCc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtVmlld01hdHJpeCA9ICQuQ3ViaXNtVmlld01hdHJpeDtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtVmlld01hdHJpeCA9ICQuQ3ViaXNtVmlld01hdHJpeDtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IENTTV9BU1NFUlQgfSBmcm9tICcuLi91dGlscy9jdWJpc21kZWJ1Zyc7XG5pbXBvcnQgeyBDdWJpc21Nb2RlbCB9IGZyb20gJy4vY3ViaXNtbW9kZWwnO1xuXG4vKipcbiAqIE1vY+ODh+ODvOOCv+OBrueuoeeQhlxuICpcbiAqIE1vY+ODh+ODvOOCv+OBrueuoeeQhuOCkuihjOOBhuOCr+ODqeOCueOAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtTW9jIHtcbiAgLyoqXG4gICAqIE1vY+ODh+ODvOOCv+OBruS9nOaIkFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBjcmVhdGUobW9jQnl0ZXM6IEFycmF5QnVmZmVyKTogQ3ViaXNtTW9jIHtcbiAgICBsZXQgY3ViaXNtTW9jOiBDdWJpc21Nb2MgPSBudWxsO1xuICAgIGNvbnN0IG1vYzogTGl2ZTJEQ3ViaXNtQ29yZS5Nb2MgPVxuICAgICAgTGl2ZTJEQ3ViaXNtQ29yZS5Nb2MuZnJvbUFycmF5QnVmZmVyKG1vY0J5dGVzKTtcblxuICAgIGlmIChtb2MpIHtcbiAgICAgIGN1YmlzbU1vYyA9IG5ldyBDdWJpc21Nb2MobW9jKTtcbiAgICAgIGN1YmlzbU1vYy5fbW9jVmVyc2lvbiA9IExpdmUyREN1YmlzbUNvcmUuVmVyc2lvbi5jc21HZXRNb2NWZXJzaW9uKFxuICAgICAgICBtb2MsXG4gICAgICAgIG1vY0J5dGVzXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBjdWJpc21Nb2M7XG4gIH1cblxuICAvKipcbiAgICogTW9j44OH44O844K/44KS5YmK6ZmkXG4gICAqXG4gICAqIE1vY+ODh+ODvOOCv+OCkuWJiumZpOOBmeOCi1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBkZWxldGUobW9jOiBDdWJpc21Nb2MpOiB2b2lkIHtcbiAgICBtb2MuX21vYy5fcmVsZWFzZSgpO1xuICAgIG1vYy5fbW9jID0gbnVsbDtcbiAgICBtb2MgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OCkuS9nOaIkOOBmeOCi1xuICAgKlxuICAgKiBAcmV0dXJuIE1vY+ODh+ODvOOCv+OBi+OCieS9nOaIkOOBleOCjOOBn+ODouODh+ODq1xuICAgKi9cbiAgY3JlYXRlTW9kZWwoKTogQ3ViaXNtTW9kZWwge1xuICAgIGxldCBjdWJpc21Nb2RlbDogQ3ViaXNtTW9kZWwgPSBudWxsO1xuXG4gICAgY29uc3QgbW9kZWw6IExpdmUyREN1YmlzbUNvcmUuTW9kZWwgPSBMaXZlMkRDdWJpc21Db3JlLk1vZGVsLmZyb21Nb2MoXG4gICAgICB0aGlzLl9tb2NcbiAgICApO1xuXG4gICAgaWYgKG1vZGVsKSB7XG4gICAgICBjdWJpc21Nb2RlbCA9IG5ldyBDdWJpc21Nb2RlbChtb2RlbCk7XG4gICAgICBjdWJpc21Nb2RlbC5pbml0aWFsaXplKCk7XG5cbiAgICAgICsrdGhpcy5fbW9kZWxDb3VudDtcbiAgICB9XG5cbiAgICByZXR1cm4gY3ViaXNtTW9kZWw7XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44KS5YmK6Zmk44GZ44KLXG4gICAqL1xuICBkZWxldGVNb2RlbChtb2RlbDogQ3ViaXNtTW9kZWwpOiB2b2lkIHtcbiAgICBpZiAobW9kZWwgIT0gbnVsbCkge1xuICAgICAgbW9kZWwucmVsZWFzZSgpO1xuICAgICAgbW9kZWwgPSBudWxsO1xuICAgICAgLS10aGlzLl9tb2RlbENvdW50O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHByaXZhdGUgY29uc3RydWN0b3IobW9jOiBMaXZlMkRDdWJpc21Db3JlLk1vYykge1xuICAgIHRoaXMuX21vYyA9IG1vYztcbiAgICB0aGlzLl9tb2RlbENvdW50ID0gMDtcbiAgICB0aGlzLl9tb2NWZXJzaW9uID0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIENTTV9BU1NFUlQodGhpcy5fbW9kZWxDb3VudCA9PSAwKTtcblxuICAgIHRoaXMuX21vYy5fcmVsZWFzZSgpO1xuICAgIHRoaXMuX21vYyA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICog5pyA5paw44GuLm1vYzMgVmVyc2lvbuOCkuWPluW+l1xuICAgKi9cbiAgcHVibGljIGdldExhdGVzdE1vY1ZlcnNpb24oKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTGl2ZTJEQ3ViaXNtQ29yZS5WZXJzaW9uLmNzbUdldExhdGVzdE1vY1ZlcnNpb24oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDoqq3jgb/ovrzjgpPjgaDjg6Ljg4fjg6vjga4ubW9jMyBWZXJzaW9u44KS5Y+W5b6XXG4gICAqL1xuICBwdWJsaWMgZ2V0TW9jVmVyc2lvbigpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9tb2NWZXJzaW9uO1xuICB9XG5cbiAgX21vYzogTGl2ZTJEQ3ViaXNtQ29yZS5Nb2M7IC8vIE1vY+ODh+ODvOOCv1xuICBfbW9kZWxDb3VudDogbnVtYmVyOyAvLyBNb2Pjg4fjg7zjgr/jgYvjgonkvZzjgonjgozjgZ/jg6Ljg4fjg6vjga7lgIvmlbBcbiAgX21vY1ZlcnNpb246IG51bWJlcjsgLy8g6Kqt44G/6L6844KT44Gg44Oi44OH44Or44GuLm1vYzMgVmVyc2lvblxufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21tb2MnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vYyA9ICQuQ3ViaXNtTW9jO1xuICBleHBvcnQgdHlwZSBDdWJpc21Nb2MgPSAkLkN1YmlzbU1vYztcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IEN1YmlzbUlkSGFuZGxlIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xuaW1wb3J0IHsgQ3ViaXNtRnJhbWV3b3JrIH0gZnJvbSAnLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcbmltcG9ydCB7XG4gIEN1YmlzbUJsZW5kTW9kZSxcbiAgQ3ViaXNtVGV4dHVyZUNvbG9yLFxufSBmcm9tICcuLi9yZW5kZXJpbmcvY3ViaXNtcmVuZGVyZXInO1xuaW1wb3J0IHsgY3NtTWFwIH0gZnJvbSAnLi4vdHlwZS9jc21tYXAnO1xuaW1wb3J0IHsgY3NtVmVjdG9yIH0gZnJvbSAnLi4vdHlwZS9jc212ZWN0b3InO1xuaW1wb3J0IHsgQ1NNX0FTU0VSVCB9IGZyb20gJy4uL3V0aWxzL2N1YmlzbWRlYnVnJztcblxuLyoqXG4gKiBTREvlgbTjgYvjgonkuI7jgYjjgonjgozjgZ9EcmF3YWJsZeOBruS5l+eul+iJsuODu+OCueOCr+ODquODvOODs+iJsuS4iuabuOOBjeODleODqeOCsOOBqFxuICog44Gd44Gu6Imy44KS5L+d5oyB44GZ44KL5qeL6YCg5L2TXG4gKi9cbmV4cG9ydCBjbGFzcyBEcmF3YWJsZUNvbG9yRGF0YSB7XG4gIGlzT3ZlcndyaXR0ZW4gPSBmYWxzZTtcbiAgQ29sb3I6IEN1YmlzbVRleHR1cmVDb2xvciA9IG5ldyBDdWJpc21UZXh0dXJlQ29sb3IoKTtcbn1cblxuLyoqXG4gKiDjg6Ljg4fjg6tcbiAqXG4gKiBNb2Pjg4fjg7zjgr/jgYvjgonnlJ/miJDjgZXjgozjgovjg6Ljg4fjg6vjga7jgq/jg6njgrnjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbU1vZGVsIHtcbiAgLyoqXG4gICAqIOODouODh+ODq+OBruODkeODqeODoeODvOOCv+OBruabtOaWsFxuICAgKi9cbiAgcHVibGljIHVwZGF0ZSgpOiB2b2lkIHtcbiAgICAvLyBVcGRhdGUgbW9kZWxcbiAgICB0aGlzLl9tb2RlbC51cGRhdGUoKTtcblxuICAgIHRoaXMuX21vZGVsLmRyYXdhYmxlcy5yZXNldER5bmFtaWNGbGFncygpO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCreODo+ODs+ODkOOCueOBruW5heOCkuWPluW+l+OBmeOCi1xuICAgKi9cbiAgcHVibGljIGdldENhbnZhc1dpZHRoKCk6IG51bWJlciB7XG4gICAgaWYgKHRoaXMuX21vZGVsID09IG51bGwpIHtcbiAgICAgIHJldHVybiAwLjA7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuX21vZGVsLmNhbnZhc2luZm8uQ2FudmFzV2lkdGggLyB0aGlzLl9tb2RlbC5jYW52YXNpbmZvLlBpeGVsc1BlclVuaXRcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCreODo+ODs+ODkOOCueOBrumrmOOBleOCkuWPluW+l+OBmeOCi1xuICAgKi9cbiAgcHVibGljIGdldENhbnZhc0hlaWdodCgpOiBudW1iZXIge1xuICAgIGlmICh0aGlzLl9tb2RlbCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gMC4wO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICB0aGlzLl9tb2RlbC5jYW52YXNpbmZvLkNhbnZhc0hlaWdodCAvIHRoaXMuX21vZGVsLmNhbnZhc2luZm8uUGl4ZWxzUGVyVW5pdFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog44OR44Op44Oh44O844K/44KS5L+d5a2Y44GZ44KLXG4gICAqL1xuICBwdWJsaWMgc2F2ZVBhcmFtZXRlcnMoKTogdm9pZCB7XG4gICAgY29uc3QgcGFyYW1ldGVyQ291bnQ6IG51bWJlciA9IHRoaXMuX21vZGVsLnBhcmFtZXRlcnMuY291bnQ7XG4gICAgY29uc3Qgc2F2ZWRQYXJhbWV0ZXJDb3VudDogbnVtYmVyID0gdGhpcy5fc2F2ZWRQYXJhbWV0ZXJzLmdldFNpemUoKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyYW1ldGVyQ291bnQ7ICsraSkge1xuICAgICAgaWYgKGkgPCBzYXZlZFBhcmFtZXRlckNvdW50KSB7XG4gICAgICAgIHRoaXMuX3NhdmVkUGFyYW1ldGVycy5zZXQoaSwgdGhpcy5fcGFyYW1ldGVyVmFsdWVzW2ldKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3NhdmVkUGFyYW1ldGVycy5wdXNoQmFjayh0aGlzLl9wYXJhbWV0ZXJWYWx1ZXNbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDkuZfnrpfoibLjgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGluZGV4IERyYXdhYmxlc+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJucyDmjIflrprjgZfjgZ9kcmF3YWJsZeOBruS5l+eul+iJsihSR0JBKVxuICAgKi9cbiAgcHVibGljIGdldE11bHRpcGx5Q29sb3IoaW5kZXg6IG51bWJlcik6IEN1YmlzbVRleHR1cmVDb2xvciB7XG4gICAgLy8gRHJhd2FibGXjgajjg6Ljg4fjg6vlhajkvZPjga7kuZfnrpfoibLkuIrmm7jjgY3jg5Xjg6njgrDjgYzjganjgaHjgonjgoJ0cnVl44Gq5aC05ZCI44CB44Oi44OH44Or5YWo5L2T44Gu5LiK5pu444GN44OV44Op44Kw44GM5YSq5YWI44GV44KM44KLXG4gICAgaWYgKFxuICAgICAgdGhpcy5nZXRPdmVyd3JpdGVGbGFnRm9yTW9kZWxNdWx0aXBseUNvbG9ycygpIHx8XG4gICAgICB0aGlzLmdldE92ZXJ3cml0ZUZsYWdGb3JEcmF3YWJsZU11bHRpcGx5Q29sb3JzKGluZGV4KVxuICAgICkge1xuICAgICAgcmV0dXJuIHRoaXMuX3VzZXJNdWx0aXBseUNvbG9ycy5hdChpbmRleCkuQ29sb3I7XG4gICAgfVxuXG4gICAgY29uc3QgY29sb3IgPSB0aGlzLmdldERyYXdhYmxlTXVsdGlwbHlDb2xvcihpbmRleCk7XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCueOCr+ODquODvOODs+iJsuOCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gaW5kZXggRHJhd2FibGVz44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm5zIOaMh+WumuOBl+OBn2RyYXdhYmxl44Gu44K544Kv44Oq44O844Oz6ImyKFJHQkEpXG4gICAqL1xuICBwdWJsaWMgZ2V0U2NyZWVuQ29sb3IoaW5kZXg6IG51bWJlcik6IEN1YmlzbVRleHR1cmVDb2xvciB7XG4gICAgLy8gRHJhd2FibGXjgajjg6Ljg4fjg6vlhajkvZPjga7jgrnjgq/jg6rjg7zjg7PoibLkuIrmm7jjgY3jg5Xjg6njgrDjgYzjganjgaHjgonjgoJ0cnVl44Gq5aC05ZCI44CB44Oi44OH44Or5YWo5L2T44Gu5LiK5pu444GN44OV44Op44Kw44GM5YSq5YWI44GV44KM44KLXG4gICAgaWYgKFxuICAgICAgdGhpcy5nZXRPdmVyd3JpdGVGbGFnRm9yTW9kZWxTY3JlZW5Db2xvcnMoKSB8fFxuICAgICAgdGhpcy5nZXRPdmVyd3JpdGVGbGFnRm9yRHJhd2FibGVTY3JlZW5Db2xvcnMoaW5kZXgpXG4gICAgKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdXNlclNjcmVlbkNvbG9ycy5hdChpbmRleCkuQ29sb3I7XG4gICAgfVxuXG4gICAgY29uc3QgY29sb3IgPSB0aGlzLmdldERyYXdhYmxlU2NyZWVuQ29sb3IoaW5kZXgpO1xuICAgIHJldHVybiBjb2xvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiDkuZfnrpfoibLjgpLjgrvjg4Pjg4jjgZnjgotcbiAgICogQHBhcmFtIGluZGV4IERyYXdhYmxlc+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcGFyYW0gY29sb3Ig6Kit5a6a44GZ44KL5LmX566X6ImyKEN1YmlzbVRleHR1cmVDb2xvcilcbiAgICovXG4gIHB1YmxpYyBzZXRNdWx0aXBseUNvbG9yQnlUZXh0dXJlQ29sb3IoXG4gICAgaW5kZXg6IG51bWJlcixcbiAgICBjb2xvcjogQ3ViaXNtVGV4dHVyZUNvbG9yXG4gICkge1xuICAgIHRoaXMuc2V0TXVsdGlwbHlDb2xvckJ5UkdCQShpbmRleCwgY29sb3IuUiwgY29sb3IuRywgY29sb3IuQiwgY29sb3IuQSk7XG4gIH1cblxuICAvKipcbiAgICog5LmX566X6Imy44KS44K744OD44OI44GZ44KLXG4gICAqIEBwYXJhbSBpbmRleCBEcmF3YWJsZXPjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIHIg6Kit5a6a44GZ44KL5LmX566X6Imy44GuUuWApFxuICAgKiBAcGFyYW0gZyDoqK3lrprjgZnjgovkuZfnrpfoibLjga5H5YCkXG4gICAqIEBwYXJhbSBiIOioreWumuOBmeOCi+S5l+eul+iJsuOBrkLlgKRcbiAgICogQHBhcmFtIGEg6Kit5a6a44GZ44KL5LmX566X6Imy44GuQeWApFxuICAgKi9cbiAgcHVibGljIHNldE11bHRpcGx5Q29sb3JCeVJHQkEoXG4gICAgaW5kZXg6IG51bWJlcixcbiAgICByOiBudW1iZXIsXG4gICAgZzogbnVtYmVyLFxuICAgIGI6IG51bWJlcixcbiAgICBhID0gMS4wXG4gICkge1xuICAgIHRoaXMuX3VzZXJNdWx0aXBseUNvbG9ycy5hdChpbmRleCkuQ29sb3IuUiA9IHI7XG4gICAgdGhpcy5fdXNlck11bHRpcGx5Q29sb3JzLmF0KGluZGV4KS5Db2xvci5HID0gZztcbiAgICB0aGlzLl91c2VyTXVsdGlwbHlDb2xvcnMuYXQoaW5kZXgpLkNvbG9yLkIgPSBiO1xuICAgIHRoaXMuX3VzZXJNdWx0aXBseUNvbG9ycy5hdChpbmRleCkuQ29sb3IuQSA9IGE7XG4gIH1cblxuICAvKipcbiAgICog44K544Kv44Oq44O844Oz6Imy44KS44K744OD44OI44GZ44KLXG4gICAqIEBwYXJhbSBpbmRleCBEcmF3YWJsZXPjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIGNvbG9yIOioreWumuOBmeOCi+OCueOCr+ODquODvOODs+iJsihDdWJpc21UZXh0dXJlQ29sb3IpXG4gICAqL1xuICBwdWJsaWMgc2V0U2NyZWVuQ29sb3JCeVRleHR1cmVDb2xvcihcbiAgICBpbmRleDogbnVtYmVyLFxuICAgIGNvbG9yOiBDdWJpc21UZXh0dXJlQ29sb3JcbiAgKSB7XG4gICAgdGhpcy5zZXRTY3JlZW5Db2xvckJ5UkdCQShpbmRleCwgY29sb3IuUiwgY29sb3IuRywgY29sb3IuQiwgY29sb3IuQSk7XG4gIH1cblxuICAvKipcbiAgICog44K544Kv44Oq44O844Oz6Imy44KS44K744OD44OI44GZ44KLXG4gICAqIEBwYXJhbSBpbmRleCBEcmF3YWJsZXPjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIHIg6Kit5a6a44GZ44KL44K544Kv44Oq44O844Oz6Imy44GuUuWApFxuICAgKiBAcGFyYW0gZyDoqK3lrprjgZnjgovjgrnjgq/jg6rjg7zjg7PoibLjga5H5YCkXG4gICAqIEBwYXJhbSBiIOioreWumuOBmeOCi+OCueOCr+ODquODvOODs+iJsuOBrkLlgKRcbiAgICogQHBhcmFtIGEg6Kit5a6a44GZ44KL44K544Kv44Oq44O844Oz6Imy44GuQeWApFxuICAgKi9cbiAgcHVibGljIHNldFNjcmVlbkNvbG9yQnlSR0JBKFxuICAgIGluZGV4OiBudW1iZXIsXG4gICAgcjogbnVtYmVyLFxuICAgIGc6IG51bWJlcixcbiAgICBiOiBudW1iZXIsXG4gICAgYSA9IDEuMFxuICApIHtcbiAgICB0aGlzLl91c2VyU2NyZWVuQ29sb3JzLmF0KGluZGV4KS5Db2xvci5SID0gcjtcbiAgICB0aGlzLl91c2VyU2NyZWVuQ29sb3JzLmF0KGluZGV4KS5Db2xvci5HID0gZztcbiAgICB0aGlzLl91c2VyU2NyZWVuQ29sb3JzLmF0KGluZGV4KS5Db2xvci5CID0gYjtcbiAgICB0aGlzLl91c2VyU2NyZWVuQ29sb3JzLmF0KGluZGV4KS5Db2xvci5BID0gYTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTREvjgYvjgonmjIflrprjgZfjgZ/jg6Ljg4fjg6vjga7kuZfnrpfoibLjgpLkuIrmm7jjgY3jgZnjgovjgYtcbiAgICogQHJldHVybnMgdHJ1ZSAtPiBTREvjgYvjgonjga7mg4XloLHjgpLlhKrlhYjjgZnjgotcbiAgICogICAgICAgICAgZmFsc2UgLT4g44Oi44OH44Or44Gr6Kit5a6a44GV44KM44Gm44GE44KL6Imy5oOF5aCx44KS5L2/55SoXG4gICAqL1xuICBwdWJsaWMgZ2V0T3ZlcndyaXRlRmxhZ0Zvck1vZGVsTXVsdGlwbHlDb2xvcnMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2lzT3ZlcndyaXR0ZW5Nb2RlbE11bHRpcGx5Q29sb3JzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNES+OBi+OCieaMh+WumuOBl+OBn+ODouODh+ODq+OBruOCueOCr+ODquODvOODs+iJsuOCkuS4iuabuOOBjeOBmeOCi+OBi1xuICAgKiBAcmV0dXJucyB0cnVlIC0+IFNES+OBi+OCieOBruaDheWgseOCkuWEquWFiOOBmeOCi1xuICAgKiAgICAgICAgICBmYWxzZSAtPiDjg6Ljg4fjg6vjgavoqK3lrprjgZXjgozjgabjgYTjgovoibLmg4XloLHjgpLkvb/nlKhcbiAgICovXG4gIHB1YmxpYyBnZXRPdmVyd3JpdGVGbGFnRm9yTW9kZWxTY3JlZW5Db2xvcnMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2lzT3ZlcndyaXR0ZW5Nb2RlbFNjcmVlbkNvbG9ycztcbiAgfVxuXG4gIC8qKlxuICAgKiBTREvjgYvjgonmjIflrprjgZfjgZ/jg6Ljg4fjg6vjga7kuZfnrpfoibLjgpLkuIrmm7jjgY3jgZnjgovjgYvjgrvjg4Pjg4jjgZnjgotcbiAgICogQHBhcmFtIHZhbHVlIHRydWUgLT4gU0RL44GL44KJ44Gu5oOF5aCx44KS5YSq5YWI44GZ44KLXG4gICAqICAgICAgICAgICAgICBmYWxzZSAtPiDjg6Ljg4fjg6vjgavoqK3lrprjgZXjgozjgabjgYTjgovoibLmg4XloLHjgpLkvb/nlKhcbiAgICovXG4gIHB1YmxpYyBzZXRPdmVyd3JpdGVGbGFnRm9yTW9kZWxNdWx0aXBseUNvbG9ycyh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2lzT3ZlcndyaXR0ZW5Nb2RlbE11bHRpcGx5Q29sb3JzID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogU0RL44GL44KJ5oyH5a6a44GX44Gf44Oi44OH44Or44Gu44K544Kv44Oq44O844Oz6Imy44KS5LiK5pu444GN44GZ44KL44GL44K744OD44OI44GZ44KLXG4gICAqIEBwYXJhbSB2YWx1ZSB0cnVlIC0+IFNES+OBi+OCieOBruaDheWgseOCkuWEquWFiOOBmeOCi1xuICAgKiAgICAgICAgICAgICAgZmFsc2UgLT4g44Oi44OH44Or44Gr6Kit5a6a44GV44KM44Gm44GE44KL6Imy5oOF5aCx44KS5L2/55SoXG4gICAqL1xuICBwdWJsaWMgc2V0T3ZlcndyaXRlRmxhZ0Zvck1vZGVsU2NyZWVuQ29sb3JzKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5faXNPdmVyd3JpdHRlbk1vZGVsU2NyZWVuQ29sb3JzID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogU0RL44GL44KJ5oyH5a6a44GX44GfRHJhd2FibGVJbmRleOOBruS5l+eul+iJsuOCkuS4iuabuOOBjeOBmeOCi+OBi1xuICAgKiBAcmV0dXJucyB0cnVlIC0+IFNES+OBi+OCieOBruaDheWgseOCkuWEquWFiOOBmeOCi1xuICAgKiAgICAgICAgICBmYWxzZSAtPiDjg6Ljg4fjg6vjgavoqK3lrprjgZXjgozjgabjgYTjgovoibLmg4XloLHjgpLkvb/nlKhcbiAgICovXG4gIHB1YmxpYyBnZXRPdmVyd3JpdGVGbGFnRm9yRHJhd2FibGVNdWx0aXBseUNvbG9ycyhcbiAgICBkcmF3YWJsZWluZGV4OiBudW1iZXJcbiAgKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3VzZXJNdWx0aXBseUNvbG9ycy5hdChkcmF3YWJsZWluZGV4KS5pc092ZXJ3cml0dGVuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNES+OBi+OCieaMh+WumuOBl+OBn0RyYXdhYmxlSW5kZXjjga7jgrnjgq/jg6rjg7zjg7PoibLjgpLkuIrmm7jjgY3jgZnjgovjgYtcbiAgICogQHJldHVybnMgdHJ1ZSAtPiBTREvjgYvjgonjga7mg4XloLHjgpLlhKrlhYjjgZnjgotcbiAgICogICAgICAgICAgZmFsc2UgLT4g44Oi44OH44Or44Gr6Kit5a6a44GV44KM44Gm44GE44KL6Imy5oOF5aCx44KS5L2/55SoXG4gICAqL1xuICBwdWJsaWMgZ2V0T3ZlcndyaXRlRmxhZ0ZvckRyYXdhYmxlU2NyZWVuQ29sb3JzKFxuICAgIGRyYXdhYmxlaW5kZXg6IG51bWJlclxuICApOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fdXNlck11bHRpcGx5Q29sb3JzLmF0KGRyYXdhYmxlaW5kZXgpLmlzT3ZlcndyaXR0ZW47XG4gIH1cblxuICAvKipcbiAgICogU0RL44GL44KJ5oyH5a6a44GX44GfRHJhd2FibGVJbmRleOOBruS5l+eul+iJsuOCkuS4iuabuOOBjeOBmeOCi+OBi+OCu+ODg+ODiOOBmeOCi1xuICAgKiBAcGFyYW0gdmFsdWUgdHJ1ZSAtPiBTREvjgYvjgonjga7mg4XloLHjgpLlhKrlhYjjgZnjgotcbiAgICogICAgICAgICAgICAgIGZhbHNlIC0+IOODouODh+ODq+OBq+ioreWumuOBleOCjOOBpuOBhOOCi+iJsuaDheWgseOCkuS9v+eUqFxuICAgKi9cbiAgcHVibGljIHNldE92ZXJ3cml0ZUZsYWdGb3JEcmF3YWJsZU11bHRpcGx5Q29sb3JzKFxuICAgIGRyYXdhYmxlaW5kZXg6IG51bWJlcixcbiAgICB2YWx1ZTogYm9vbGVhblxuICApIHtcbiAgICB0aGlzLl91c2VyTXVsdGlwbHlDb2xvcnMuYXQoZHJhd2FibGVpbmRleCkuaXNPdmVyd3JpdHRlbiA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFNES+OBi+OCieaMh+WumuOBl+OBn0RyYXdhYmxlSW5kZXjjga7jgrnjgq/jg6rjg7zjg7PoibLjgpLkuIrmm7jjgY3jgZnjgovjgYvjgrvjg4Pjg4jjgZnjgotcbiAgICogQHBhcmFtIHZhbHVlIHRydWUgLT4gU0RL44GL44KJ44Gu5oOF5aCx44KS5YSq5YWI44GZ44KLXG4gICAqICAgICAgICAgICAgICBmYWxzZSAtPiDjg6Ljg4fjg6vjgavoqK3lrprjgZXjgozjgabjgYTjgovoibLmg4XloLHjgpLkvb/nlKhcbiAgICovXG4gIHB1YmxpYyBzZXRPdmVyd3JpdGVGbGFnRm9yRHJhd2FibGVTY3JlZW5Db2xvcnMoXG4gICAgZHJhd2FibGVpbmRleDogbnVtYmVyLFxuICAgIHZhbHVlOiBib29sZWFuXG4gICkge1xuICAgIHRoaXMuX3VzZXJTY3JlZW5Db2xvcnMuYXQoZHJhd2FibGVpbmRleCkuaXNPdmVyd3JpdHRlbiA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OCkuWPluW+l1xuICAgKi9cbiAgcHVibGljIGdldE1vZGVsKCk6IExpdmUyREN1YmlzbUNvcmUuTW9kZWwge1xuICAgIHJldHVybiB0aGlzLl9tb2RlbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg7zjg4Tjga7jgqTjg7Pjg4fjg4Pjgq/jgrnjgpLlj5blvpdcbiAgICogQHBhcmFtIHBhcnRJZCDjg5Hjg7zjg4Tjga5JRFxuICAgKiBAcmV0dXJuIOODkeODvOODhOOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKi9cbiAgcHVibGljIGdldFBhcnRJbmRleChwYXJ0SWQ6IEN1YmlzbUlkSGFuZGxlKTogbnVtYmVyIHtcbiAgICBsZXQgcGFydEluZGV4OiBudW1iZXI7XG4gICAgY29uc3QgcGFydENvdW50OiBudW1iZXIgPSB0aGlzLl9tb2RlbC5wYXJ0cy5jb3VudDtcblxuICAgIGZvciAocGFydEluZGV4ID0gMDsgcGFydEluZGV4IDwgcGFydENvdW50OyArK3BhcnRJbmRleCkge1xuICAgICAgaWYgKHBhcnRJZCA9PSB0aGlzLl9wYXJ0SWRzLmF0KHBhcnRJbmRleCkpIHtcbiAgICAgICAgcmV0dXJuIHBhcnRJbmRleDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyDjg6Ljg4fjg6vjgavlrZjlnKjjgZfjgabjgYTjgarjgYTloLTlkIjjgIHpnZ7lrZjlnKjjg5Hjg7zjg4RJROODquOCueODiOWGheOBq+OBguOCi+OBi+OCkuaknOe0ouOBl+OAgeOBneOBruOCpOODs+ODh+ODg+OCr+OCueOCkui/lOOBmVxuICAgIGlmICh0aGlzLl9ub3RFeGlzdFBhcnRJZC5pc0V4aXN0KHBhcnRJZCkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9ub3RFeGlzdFBhcnRJZC5nZXRWYWx1ZShwYXJ0SWQpO1xuICAgIH1cblxuICAgIC8vIOmdnuWtmOWcqOODkeODvOODhElE44Oq44K544OI44Gr44Gq44GE5aC05ZCI44CB5paw44GX44GP6KaB57Sg44KS6L+95Yqg44GZ44KLXG4gICAgcGFydEluZGV4ID0gcGFydENvdW50ICsgdGhpcy5fbm90RXhpc3RQYXJ0SWQuZ2V0U2l6ZSgpO1xuICAgIHRoaXMuX25vdEV4aXN0UGFydElkLnNldFZhbHVlKHBhcnRJZCwgcGFydEluZGV4KTtcbiAgICB0aGlzLl9ub3RFeGlzdFBhcnRPcGFjaXRpZXMuYXBwZW5kS2V5KHBhcnRJbmRleCk7XG5cbiAgICByZXR1cm4gcGFydEluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIOODkeODvOODhOOBruWAi+aVsOOBruWPluW+l1xuICAgKiBAcmV0dXJuIOODkeODvOODhOOBruWAi+aVsFxuICAgKi9cbiAgcHVibGljIGdldFBhcnRDb3VudCgpOiBudW1iZXIge1xuICAgIGNvbnN0IHBhcnRDb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWwucGFydHMuY291bnQ7XG4gICAgcmV0dXJuIHBhcnRDb3VudDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqbjga7oqK3lrpooSW5kZXgpXG4gICAqIEBwYXJhbSBwYXJ0SW5kZXgg44OR44O844OE44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEBwYXJhbSBvcGFjaXR5IOS4jemAj+aYjuW6plxuICAgKi9cbiAgcHVibGljIHNldFBhcnRPcGFjaXR5QnlJbmRleChwYXJ0SW5kZXg6IG51bWJlciwgb3BhY2l0eTogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX25vdEV4aXN0UGFydE9wYWNpdGllcy5pc0V4aXN0KHBhcnRJbmRleCkpIHtcbiAgICAgIHRoaXMuX25vdEV4aXN0UGFydE9wYWNpdGllcy5zZXRWYWx1ZShwYXJ0SW5kZXgsIG9wYWNpdHkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIOOCpOODs+ODh+ODg+OCr+OCueOBruevhOWbsuWGheaknOefpVxuICAgIENTTV9BU1NFUlQoMCA8PSBwYXJ0SW5kZXggJiYgcGFydEluZGV4IDwgdGhpcy5nZXRQYXJ0Q291bnQoKSk7XG5cbiAgICB0aGlzLl9wYXJ0T3BhY2l0aWVzW3BhcnRJbmRleF0gPSBvcGFjaXR5O1xuICB9XG5cbiAgLyoqXG4gICAqIOODkeODvOODhOOBruS4jemAj+aYjuW6puOBruioreWumihJZClcbiAgICogQHBhcmFtIHBhcnRJZCDjg5Hjg7zjg4Tjga5JRFxuICAgKiBAcGFyYW0gb3BhY2l0eSDjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqZcbiAgICovXG4gIHB1YmxpYyBzZXRQYXJ0T3BhY2l0eUJ5SWQocGFydElkOiBDdWJpc21JZEhhbmRsZSwgb3BhY2l0eTogbnVtYmVyKTogdm9pZCB7XG4gICAgLy8g6auY6YCf5YyW44Gu44Gf44KB44GrUGFydEluZGV444KS5Y+W5b6X44Gn44GN44KL5qmf5qeL44Gr44Gq44Gj44Gm44GE44KL44GM44CB5aSW6YOo44GL44KJ44Gu6Kit5a6a44Gu5pmC44Gv5ZG844Gz5Ye644GX6aC75bqm44GM5L2O44GE44Gf44KB5LiN6KaBXG4gICAgY29uc3QgaW5kZXg6IG51bWJlciA9IHRoaXMuZ2V0UGFydEluZGV4KHBhcnRJZCk7XG5cbiAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICByZXR1cm47IC8vIOODkeODvOODhOOBjOOBquOBhOOBruOBp+OCueOCreODg+ODl1xuICAgIH1cblxuICAgIHRoaXMuc2V0UGFydE9wYWNpdHlCeUluZGV4KGluZGV4LCBvcGFjaXR5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqbjga7lj5blvpcoaW5kZXgpXG4gICAqIEBwYXJhbSBwYXJ0SW5kZXgg44OR44O844OE44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g44OR44O844OE44Gu5LiN6YCP5piO5bqmXG4gICAqL1xuICBwdWJsaWMgZ2V0UGFydE9wYWNpdHlCeUluZGV4KHBhcnRJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBpZiAodGhpcy5fbm90RXhpc3RQYXJ0T3BhY2l0aWVzLmlzRXhpc3QocGFydEluZGV4KSkge1xuICAgICAgLy8g44Oi44OH44Or44Gr5a2Y5Zyo44GX44Gq44GE44OR44O844OESUTjga7loLTlkIjjgIHpnZ7lrZjlnKjjg5Hjg7zjg4Tjg6rjgrnjg4jjgYvjgonkuI3pgI/mmI7luqbjgpLov5TjgZnjgIJcbiAgICAgIHJldHVybiB0aGlzLl9ub3RFeGlzdFBhcnRPcGFjaXRpZXMuZ2V0VmFsdWUocGFydEluZGV4KTtcbiAgICB9XG5cbiAgICAvLyDjgqTjg7Pjg4fjg4Pjgq/jgrnjga7nr4Tlm7LlhoXmpJznn6VcbiAgICBDU01fQVNTRVJUKDAgPD0gcGFydEluZGV4ICYmIHBhcnRJbmRleCA8IHRoaXMuZ2V0UGFydENvdW50KCkpO1xuXG4gICAgcmV0dXJuIHRoaXMuX3BhcnRPcGFjaXRpZXNbcGFydEluZGV4XTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqbjga7lj5blvpcoaWQpXG4gICAqIEBwYXJhbSBwYXJ0SWQg44OR44O844OE44Gu77yp772EXG4gICAqIEByZXR1cm4g44OR44O844OE44Gu5LiN6YCP5piO5bqmXG4gICAqL1xuICBwdWJsaWMgZ2V0UGFydE9wYWNpdHlCeUlkKHBhcnRJZDogQ3ViaXNtSWRIYW5kbGUpOiBudW1iZXIge1xuICAgIC8vIOmrmOmAn+WMluOBruOBn+OCgeOBq1BhcnRJbmRleOOCkuWPluW+l+OBp+OBjeOCi+apn+ani+OBq+OBquOBo+OBpuOBhOOCi+OBjOOAgeWklumDqOOBi+OCieOBruioreWumuOBruaZguOBr+WRvOOBs+WHuuOBl+mgu+W6puOBjOS9juOBhOOBn+OCgeS4jeimgVxuICAgIGNvbnN0IGluZGV4OiBudW1iZXIgPSB0aGlzLmdldFBhcnRJbmRleChwYXJ0SWQpO1xuXG4gICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgcmV0dXJuIDA7IC8vIOODkeODvOODhOOBjOeEoeOBhOOBruOBp+OCueOCreODg+ODl1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmdldFBhcnRPcGFjaXR5QnlJbmRleChpbmRleCk7XG4gIH1cblxuICAvKipcbiAgICog44OR44Op44Oh44O844K/44Gu44Kk44Oz44OH44OD44Kv44K544Gu5Y+W5b6XXG4gICAqIEBwYXJhbSDjg5Hjg6njg6Hjg7zjgr9JRFxuICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKi9cbiAgcHVibGljIGdldFBhcmFtZXRlckluZGV4KHBhcmFtZXRlcklkOiBDdWJpc21JZEhhbmRsZSk6IG51bWJlciB7XG4gICAgbGV0IHBhcmFtZXRlckluZGV4OiBudW1iZXI7XG4gICAgY29uc3QgaWRDb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWwucGFyYW1ldGVycy5jb3VudDtcblxuICAgIGZvciAocGFyYW1ldGVySW5kZXggPSAwOyBwYXJhbWV0ZXJJbmRleCA8IGlkQ291bnQ7ICsrcGFyYW1ldGVySW5kZXgpIHtcbiAgICAgIGlmIChwYXJhbWV0ZXJJZCAhPSB0aGlzLl9wYXJhbWV0ZXJJZHMuYXQocGFyYW1ldGVySW5kZXgpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGFyYW1ldGVySW5kZXg7XG4gICAgfVxuXG4gICAgLy8g44Oi44OH44Or44Gr5a2Y5Zyo44GX44Gm44GE44Gq44GE5aC05ZCI44CB6Z2e5a2Y5Zyo44OR44Op44Oh44O844K/SUTjg6rjgrnjg4jlhoXjgpLmpJzntKLjgZfjgIHjgZ3jga7jgqTjg7Pjg4fjg4Pjgq/jgrnjgpLov5TjgZlcbiAgICBpZiAodGhpcy5fbm90RXhpc3RQYXJhbWV0ZXJJZC5pc0V4aXN0KHBhcmFtZXRlcklkKSkge1xuICAgICAgcmV0dXJuIHRoaXMuX25vdEV4aXN0UGFyYW1ldGVySWQuZ2V0VmFsdWUocGFyYW1ldGVySWQpO1xuICAgIH1cblxuICAgIC8vIOmdnuWtmOWcqOODkeODqeODoeODvOOCv0lE44Oq44K544OI44Gr44Gq44GE5aC05ZCI5paw44GX44GP6KaB57Sg44KS6L+95Yqg44GZ44KLXG4gICAgcGFyYW1ldGVySW5kZXggPVxuICAgICAgdGhpcy5fbW9kZWwucGFyYW1ldGVycy5jb3VudCArIHRoaXMuX25vdEV4aXN0UGFyYW1ldGVySWQuZ2V0U2l6ZSgpO1xuXG4gICAgdGhpcy5fbm90RXhpc3RQYXJhbWV0ZXJJZC5zZXRWYWx1ZShwYXJhbWV0ZXJJZCwgcGFyYW1ldGVySW5kZXgpO1xuICAgIHRoaXMuX25vdEV4aXN0UGFyYW1ldGVyVmFsdWVzLmFwcGVuZEtleShwYXJhbWV0ZXJJbmRleCk7XG5cbiAgICByZXR1cm4gcGFyYW1ldGVySW5kZXg7XG4gIH1cblxuICAvKipcbiAgICog44OR44Op44Oh44O844K/44Gu5YCL5pWw44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g44OR44Op44Oh44O844K/44Gu5YCL5pWwXG4gICAqL1xuICBwdWJsaWMgZ2V0UGFyYW1ldGVyQ291bnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbW9kZWwucGFyYW1ldGVycy5jb3VudDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7nqK7poZ7jga7lj5blvpdcbiAgICogQHBhcmFtIHBhcmFtZXRlckluZGV4IOODkeODqeODoeODvOOCv+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIGNzbVBhcmFtZXRlclR5cGVfTm9ybWFsIC0+IOmAmuW4uOOBruODkeODqeODoeODvOOCv1xuICAgKiAgICAgICAgICBjc21QYXJhbWV0ZXJUeXBlX0JsZW5kU2hhcGUgLT4g44OW44Os44Oz44OJ44K344Kn44Kk44OX44OR44Op44Oh44O844K/XG4gICAqL1xuICBwdWJsaWMgZ2V0UGFyYW1ldGVyVHlwZShcbiAgICBwYXJhbWV0ZXJJbmRleDogbnVtYmVyXG4gICk6IExpdmUyREN1YmlzbUNvcmUuY3NtUGFyYW1ldGVyVHlwZSB7XG4gICAgcmV0dXJuIHRoaXMuX21vZGVsLnBhcmFtZXRlcnMudHlwZXNbcGFyYW1ldGVySW5kZXhdO1xuICB9XG5cbiAgLyoqXG4gICAqIOODkeODqeODoeODvOOCv+OBruacgOWkp+WApOOBruWPluW+l1xuICAgKiBAcGFyYW0gcGFyYW1ldGVySW5kZXgg44OR44Op44Oh44O844K/44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g44OR44Op44Oh44O844K/44Gu5pyA5aSn5YCkXG4gICAqL1xuICBwdWJsaWMgZ2V0UGFyYW1ldGVyTWF4aW11bVZhbHVlKHBhcmFtZXRlckluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9tb2RlbC5wYXJhbWV0ZXJzLm1heGltdW1WYWx1ZXNbcGFyYW1ldGVySW5kZXhdO1xuICB9XG5cbiAgLyoqXG4gICAqIOODkeODqeODoeODvOOCv+OBruacgOWwj+WApOOBruWPluW+l1xuICAgKiBAcGFyYW0gcGFyYW1ldGVySW5kZXgg44OR44Op44Oh44O844K/44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g44OR44Op44Oh44O844K/44Gu5pyA5bCP5YCkXG4gICAqL1xuICBwdWJsaWMgZ2V0UGFyYW1ldGVyTWluaW11bVZhbHVlKHBhcmFtZXRlckluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9tb2RlbC5wYXJhbWV0ZXJzLm1pbmltdW1WYWx1ZXNbcGFyYW1ldGVySW5kZXhdO1xuICB9XG5cbiAgLyoqXG4gICAqIOODkeODqeODoeODvOOCv+OBruODh+ODleOCqeODq+ODiOWApOOBruWPluW+l1xuICAgKiBAcGFyYW0gcGFyYW1ldGVySW5kZXgg44OR44Op44Oh44O844K/44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g44OR44Op44Oh44O844K/44Gu44OH44OV44Kp44Or44OI5YCkXG4gICAqL1xuICBwdWJsaWMgZ2V0UGFyYW1ldGVyRGVmYXVsdFZhbHVlKHBhcmFtZXRlckluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9tb2RlbC5wYXJhbWV0ZXJzLmRlZmF1bHRWYWx1ZXNbcGFyYW1ldGVySW5kZXhdO1xuICB9XG5cbiAgLyoqXG4gICAqIOODkeODqeODoeODvOOCv+OBruWApOOBruWPluW+l1xuICAgKiBAcGFyYW0gcGFyYW1ldGVySW5kZXggICAg44OR44Op44Oh44O844K/44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g44OR44Op44Oh44O844K/44Gu5YCkXG4gICAqL1xuICBwdWJsaWMgZ2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4KHBhcmFtZXRlckluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIGlmICh0aGlzLl9ub3RFeGlzdFBhcmFtZXRlclZhbHVlcy5pc0V4aXN0KHBhcmFtZXRlckluZGV4KSkge1xuICAgICAgcmV0dXJuIHRoaXMuX25vdEV4aXN0UGFyYW1ldGVyVmFsdWVzLmdldFZhbHVlKHBhcmFtZXRlckluZGV4KTtcbiAgICB9XG5cbiAgICAvLyDjgqTjg7Pjg4fjg4Pjgq/jgrnjga7nr4Tlm7LlhoXmpJznn6VcbiAgICBDU01fQVNTRVJUKFxuICAgICAgMCA8PSBwYXJhbWV0ZXJJbmRleCAmJiBwYXJhbWV0ZXJJbmRleCA8IHRoaXMuZ2V0UGFyYW1ldGVyQ291bnQoKVxuICAgICk7XG5cbiAgICByZXR1cm4gdGhpcy5fcGFyYW1ldGVyVmFsdWVzW3BhcmFtZXRlckluZGV4XTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7lgKTjga7lj5blvpdcbiAgICogQHBhcmFtIHBhcmFtZXRlcklkICAgIOODkeODqeODoeODvOOCv+OBrklEXG4gICAqIEByZXR1cm4g44OR44Op44Oh44O844K/44Gu5YCkXG4gICAqL1xuICBwdWJsaWMgZ2V0UGFyYW1ldGVyVmFsdWVCeUlkKHBhcmFtZXRlcklkOiBDdWJpc21JZEhhbmRsZSk6IG51bWJlciB7XG4gICAgLy8g6auY6YCf5YyW44Gu44Gf44KB44GrcGFyYW1ldGVySW5kZXjjgpLlj5blvpfjgafjgY3jgovmqZ/mp4vjgavjgarjgaPjgabjgYTjgovjgYzjgIHlpJbpg6jjgYvjgonjga7oqK3lrprjga7mmYLjga/lkbzjgbPlh7rjgZfpoLvluqbjgYzkvY7jgYTjgZ/jgoHkuI3opoFcbiAgICBjb25zdCBwYXJhbWV0ZXJJbmRleDogbnVtYmVyID0gdGhpcy5nZXRQYXJhbWV0ZXJJbmRleChwYXJhbWV0ZXJJZCk7XG4gICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4KHBhcmFtZXRlckluZGV4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7lgKTjga7oqK3lrppcbiAgICogQHBhcmFtIHBhcmFtZXRlckluZGV4IOODkeODqeODoeODvOOCv+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcGFyYW0gdmFsdWUg44OR44Op44Oh44O844K/44Gu5YCkXG4gICAqIEBwYXJhbSB3ZWlnaHQg6YeN44G/XG4gICAqL1xuICBwdWJsaWMgc2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4KFxuICAgIHBhcmFtZXRlckluZGV4OiBudW1iZXIsXG4gICAgdmFsdWU6IG51bWJlcixcbiAgICB3ZWlnaHQgPSAxLjBcbiAgKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX25vdEV4aXN0UGFyYW1ldGVyVmFsdWVzLmlzRXhpc3QocGFyYW1ldGVySW5kZXgpKSB7XG4gICAgICB0aGlzLl9ub3RFeGlzdFBhcmFtZXRlclZhbHVlcy5zZXRWYWx1ZShcbiAgICAgICAgcGFyYW1ldGVySW5kZXgsXG4gICAgICAgIHdlaWdodCA9PSAxXG4gICAgICAgICAgPyB2YWx1ZVxuICAgICAgICAgIDogdGhpcy5fbm90RXhpc3RQYXJhbWV0ZXJWYWx1ZXMuZ2V0VmFsdWUocGFyYW1ldGVySW5kZXgpICpcbiAgICAgICAgICAgICAgKDEgLSB3ZWlnaHQpICtcbiAgICAgICAgICAgICAgdmFsdWUgKiB3ZWlnaHRcbiAgICAgICk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyDjgqTjg7Pjg4fjg4Pjgq/jgrnjga7nr4Tlm7LlhoXmpJznn6VcbiAgICBDU01fQVNTRVJUKFxuICAgICAgMCA8PSBwYXJhbWV0ZXJJbmRleCAmJiBwYXJhbWV0ZXJJbmRleCA8IHRoaXMuZ2V0UGFyYW1ldGVyQ291bnQoKVxuICAgICk7XG5cbiAgICBpZiAodGhpcy5fbW9kZWwucGFyYW1ldGVycy5tYXhpbXVtVmFsdWVzW3BhcmFtZXRlckluZGV4XSA8IHZhbHVlKSB7XG4gICAgICB2YWx1ZSA9IHRoaXMuX21vZGVsLnBhcmFtZXRlcnMubWF4aW11bVZhbHVlc1twYXJhbWV0ZXJJbmRleF07XG4gICAgfVxuICAgIGlmICh0aGlzLl9tb2RlbC5wYXJhbWV0ZXJzLm1pbmltdW1WYWx1ZXNbcGFyYW1ldGVySW5kZXhdID4gdmFsdWUpIHtcbiAgICAgIHZhbHVlID0gdGhpcy5fbW9kZWwucGFyYW1ldGVycy5taW5pbXVtVmFsdWVzW3BhcmFtZXRlckluZGV4XTtcbiAgICB9XG5cbiAgICB0aGlzLl9wYXJhbWV0ZXJWYWx1ZXNbcGFyYW1ldGVySW5kZXhdID1cbiAgICAgIHdlaWdodCA9PSAxXG4gICAgICAgID8gdmFsdWVcbiAgICAgICAgOiAodGhpcy5fcGFyYW1ldGVyVmFsdWVzW3BhcmFtZXRlckluZGV4XSA9XG4gICAgICAgICAgICB0aGlzLl9wYXJhbWV0ZXJWYWx1ZXNbcGFyYW1ldGVySW5kZXhdICogKDEgLSB3ZWlnaHQpICtcbiAgICAgICAgICAgIHZhbHVlICogd2VpZ2h0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7lgKTjga7oqK3lrppcbiAgICogQHBhcmFtIHBhcmFtZXRlcklkIOODkeODqeODoeODvOOCv+OBrklEXG4gICAqIEBwYXJhbSB2YWx1ZSDjg5Hjg6njg6Hjg7zjgr/jga7lgKRcbiAgICogQHBhcmFtIHdlaWdodCDph43jgb9cbiAgICovXG4gIHB1YmxpYyBzZXRQYXJhbWV0ZXJWYWx1ZUJ5SWQoXG4gICAgcGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlLFxuICAgIHZhbHVlOiBudW1iZXIsXG4gICAgd2VpZ2h0ID0gMS4wXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IGluZGV4OiBudW1iZXIgPSB0aGlzLmdldFBhcmFtZXRlckluZGV4KHBhcmFtZXRlcklkKTtcbiAgICB0aGlzLnNldFBhcmFtZXRlclZhbHVlQnlJbmRleChpbmRleCwgdmFsdWUsIHdlaWdodCk7XG4gIH1cblxuICAvKipcbiAgICog44OR44Op44Oh44O844K/44Gu5YCk44Gu5Yqg566XKGluZGV4KVxuICAgKiBAcGFyYW0gcGFyYW1ldGVySW5kZXgg44OR44Op44Oh44O844K/44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEBwYXJhbSB2YWx1ZSDliqDnrpfjgZnjgovlgKRcbiAgICogQHBhcmFtIHdlaWdodCDph43jgb9cbiAgICovXG4gIHB1YmxpYyBhZGRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgoXG4gICAgcGFyYW1ldGVySW5kZXg6IG51bWJlcixcbiAgICB2YWx1ZTogbnVtYmVyLFxuICAgIHdlaWdodCA9IDEuMFxuICApOiB2b2lkIHtcbiAgICB0aGlzLnNldFBhcmFtZXRlclZhbHVlQnlJbmRleChcbiAgICAgIHBhcmFtZXRlckluZGV4LFxuICAgICAgdGhpcy5nZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgocGFyYW1ldGVySW5kZXgpICsgdmFsdWUgKiB3ZWlnaHRcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOODkeODqeODoeODvOOCv+OBruWApOOBruWKoOeulyhpZClcbiAgICogQHBhcmFtIHBhcmFtZXRlcklkIOODkeODqeODoeODvOOCv++8qe+8pFxuICAgKiBAcGFyYW0gdmFsdWUg5Yqg566X44GZ44KL5YCkXG4gICAqIEBwYXJhbSB3ZWlnaHQg6YeN44G/XG4gICAqL1xuICBwdWJsaWMgYWRkUGFyYW1ldGVyVmFsdWVCeUlkKFxuICAgIHBhcmFtZXRlcklkOiBhbnksXG4gICAgdmFsdWU6IG51bWJlcixcbiAgICB3ZWlnaHQgPSAxLjBcbiAgKTogdm9pZCB7XG4gICAgY29uc3QgaW5kZXg6IG51bWJlciA9IHRoaXMuZ2V0UGFyYW1ldGVySW5kZXgocGFyYW1ldGVySWQpO1xuICAgIHRoaXMuYWRkUGFyYW1ldGVyVmFsdWVCeUluZGV4KGluZGV4LCB2YWx1ZSwgd2VpZ2h0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7lgKTjga7kuZfnrpdcbiAgICogQHBhcmFtIHBhcmFtZXRlcklkIOODkeODqeODoeODvOOCv+OBrklEXG4gICAqIEBwYXJhbSB2YWx1ZSDkuZfnrpfjgZnjgovlgKRcbiAgICogQHBhcmFtIHdlaWdodCDph43jgb9cbiAgICovXG4gIHB1YmxpYyBtdWx0aXBseVBhcmFtZXRlclZhbHVlQnlJZChcbiAgICBwYXJhbWV0ZXJJZDogQ3ViaXNtSWRIYW5kbGUsXG4gICAgdmFsdWU6IG51bWJlcixcbiAgICB3ZWlnaHQgPSAxLjBcbiAgKTogdm9pZCB7XG4gICAgY29uc3QgaW5kZXg6IG51bWJlciA9IHRoaXMuZ2V0UGFyYW1ldGVySW5kZXgocGFyYW1ldGVySWQpO1xuICAgIHRoaXMubXVsdGlwbHlQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgoaW5kZXgsIHZhbHVlLCB3ZWlnaHQpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODkeODqeODoeODvOOCv+OBruWApOOBruS5l+eul1xuICAgKiBAcGFyYW0gcGFyYW1ldGVySW5kZXgg44OR44Op44Oh44O844K/44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEBwYXJhbSB2YWx1ZSDkuZfnrpfjgZnjgovlgKRcbiAgICogQHBhcmFtIHdlaWdodCDph43jgb9cbiAgICovXG4gIHB1YmxpYyBtdWx0aXBseVBhcmFtZXRlclZhbHVlQnlJbmRleChcbiAgICBwYXJhbWV0ZXJJbmRleDogbnVtYmVyLFxuICAgIHZhbHVlOiBudW1iZXIsXG4gICAgd2VpZ2h0ID0gMS4wXG4gICk6IHZvaWQge1xuICAgIHRoaXMuc2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4KFxuICAgICAgcGFyYW1ldGVySW5kZXgsXG4gICAgICB0aGlzLmdldFBhcmFtZXRlclZhbHVlQnlJbmRleChwYXJhbWV0ZXJJbmRleCkgKlxuICAgICAgICAoMS4wICsgKHZhbHVlIC0gMS4wKSAqIHdlaWdodClcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K544Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBkcmF3YWJsZUlkIERyYXdhYmxl44GuSURcbiAgICogQHJldHVybiBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKi9cbiAgcHVibGljIGdldERyYXdhYmxlSW5kZXgoZHJhd2FibGVJZDogQ3ViaXNtSWRIYW5kbGUpOiBudW1iZXIge1xuICAgIGNvbnN0IGRyYXdhYmxlQ291bnQgPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMuY291bnQ7XG5cbiAgICBmb3IgKFxuICAgICAgbGV0IGRyYXdhYmxlSW5kZXggPSAwO1xuICAgICAgZHJhd2FibGVJbmRleCA8IGRyYXdhYmxlQ291bnQ7XG4gICAgICArK2RyYXdhYmxlSW5kZXhcbiAgICApIHtcbiAgICAgIGlmICh0aGlzLl9kcmF3YWJsZUlkcy5hdChkcmF3YWJsZUluZGV4KSA9PSBkcmF3YWJsZUlkKSB7XG4gICAgICAgIHJldHVybiBkcmF3YWJsZUluZGV4O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3YWJsZeOBruWAi+aVsOOBruWPluW+l1xuICAgKiBAcmV0dXJuIGRyYXdhYmxl44Gu5YCL5pWwXG4gICAqL1xuICBwdWJsaWMgZ2V0RHJhd2FibGVDb3VudCgpOiBudW1iZXIge1xuICAgIGNvbnN0IGRyYXdhYmxlQ291bnQgPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMuY291bnQ7XG4gICAgcmV0dXJuIGRyYXdhYmxlQ291bnQ7XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga5JROOCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIGRyYXdhYmxl44GuSURcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZUlkKGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IEN1YmlzbUlkSGFuZGxlIHtcbiAgICBjb25zdCBwYXJhbWV0ZXJJZHM6IHN0cmluZ1tdID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmlkcztcbiAgICByZXR1cm4gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKHBhcmFtZXRlcklkc1tkcmF3YWJsZUluZGV4XSk7XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga7mj4/nlLvpoIbjg6rjgrnjg4jjga7lj5blvpdcbiAgICogQHJldHVybiBEcmF3YWJsZeOBruaPj+eUu+mghuODquOCueODiFxuICAgKi9cbiAgcHVibGljIGdldERyYXdhYmxlUmVuZGVyT3JkZXJzKCk6IEludDMyQXJyYXkge1xuICAgIGNvbnN0IHJlbmRlck9yZGVyczogSW50MzJBcnJheSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5yZW5kZXJPcmRlcnM7XG4gICAgcmV0dXJuIHJlbmRlck9yZGVycztcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiDplqLmlbDlkI3jgYzoqqTjgaPjgabjgYTjgZ/jgZ/jgoHjgIHku6Pmm7/jgajjgarjgosgZ2V0RHJhd2FibGVUZXh0dXJlSW5kZXgg44KS6L+95Yqg44GX44CB44GT44Gu6Zai5pWw44Gv6Z2e5o6o5aWo44Go44Gq44KK44G+44GX44Gf44CCXG4gICAqXG4gICAqIERyYXdhYmxl44Gu44OG44Kv44K544OB44Oj44Kk44Oz44OH44OD44Kv44K544Oq44K544OI44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4gZHJhd2FibGXjga7jg4bjgq/jgrnjg4Hjg6PjgqTjg7Pjg4fjg4Pjgq/jgrnjg6rjgrnjg4hcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZVRleHR1cmVJbmRpY2VzKGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RHJhd2FibGVUZXh0dXJlSW5kZXgoZHJhd2FibGVJbmRleCk7XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga7jg4bjgq/jgrnjg4Hjg6PjgqTjg7Pjg4fjg4Pjgq/jgrnjga7lj5blvpdcbiAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiBkcmF3YWJsZeOBruODhuOCr+OCueODgeODo+OCpOODs+ODh+ODg+OCr+OCuVxuICAgKi9cbiAgcHVibGljIGdldERyYXdhYmxlVGV4dHVyZUluZGV4KGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgY29uc3QgdGV4dHVyZUluZGljZXM6IEludDMyQXJyYXkgPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMudGV4dHVyZUluZGljZXM7XG4gICAgcmV0dXJuIHRleHR1cmVJbmRpY2VzW2RyYXdhYmxlSW5kZXhdO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdhYmxl44GuVmVydGV4UG9zaXRpb25z44Gu5aSJ5YyW5oOF5aCx44Gu5Y+W5b6XXG4gICAqXG4gICAqIOebtOi/keOBrkN1YmlzbU1vZGVsLnVwZGF0ZemWouaVsOOBp0RyYXdhYmxl44Gu6aCC54K55oOF5aCx44GM5aSJ5YyW44GX44Gf44GL44KS5Y+W5b6X44GZ44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSAgIGRyYXdhYmxlSW5kZXggICBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dmFsICB0cnVlICAgIERyYXdhYmxl44Gu6aCC54K55oOF5aCx44GM55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44Gn5aSJ5YyW44GX44GfXG4gICAqIEByZXR2YWwgIGZhbHNlICAgRHJhd2FibGXjga7poILngrnmg4XloLHjgYznm7Tov5Hjga5DdWJpc21Nb2RlbC51cGRhdGXplqLmlbDjgaflpInljJbjgZfjgabjgYTjgarjgYRcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZUR5bmFtaWNGbGFnVmVydGV4UG9zaXRpb25zRGlkQ2hhbmdlKFxuICAgIGRyYXdhYmxlSW5kZXg6IG51bWJlclxuICApOiBib29sZWFuIHtcbiAgICBjb25zdCBkeW5hbWljRmxhZ3M6IFVpbnQ4QXJyYXkgPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMuZHluYW1pY0ZsYWdzO1xuICAgIHJldHVybiBMaXZlMkRDdWJpc21Db3JlLlV0aWxzLmhhc1ZlcnRleFBvc2l0aW9uc0RpZENoYW5nZUJpdChcbiAgICAgIGR5bmFtaWNGbGFnc1tkcmF3YWJsZUluZGV4XVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga7poILngrnjgqTjg7Pjg4fjg4Pjgq/jgrnjga7lgIvmlbDjga7lj5blvpdcbiAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiBkcmF3YWJsZeOBrumggueCueOCpOODs+ODh+ODg+OCr+OCueOBruWAi+aVsFxuICAgKi9cbiAgcHVibGljIGdldERyYXdhYmxlVmVydGV4SW5kZXhDb3VudChkcmF3YWJsZUluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIGNvbnN0IGluZGV4Q291bnRzOiBJbnQzMkFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmluZGV4Q291bnRzO1xuICAgIHJldHVybiBpbmRleENvdW50c1tkcmF3YWJsZUluZGV4XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3YWJsZeOBrumggueCueOBruWAi+aVsOOBruWPluW+l1xuICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIGRyYXdhYmxl44Gu6aCC54K544Gu5YCL5pWwXG4gICAqL1xuICBwdWJsaWMgZ2V0RHJhd2FibGVWZXJ0ZXhDb3VudChkcmF3YWJsZUluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIGNvbnN0IHZlcnRleENvdW50cyA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy52ZXJ0ZXhDb3VudHM7XG4gICAgcmV0dXJuIHZlcnRleENvdW50c1tkcmF3YWJsZUluZGV4XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3YWJsZeOBrumggueCueODquOCueODiOOBruWPluW+l1xuICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBkcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIGRyYXdhYmxl44Gu6aCC54K544Oq44K544OIXG4gICAqL1xuICBwdWJsaWMgZ2V0RHJhd2FibGVWZXJ0aWNlcyhkcmF3YWJsZUluZGV4OiBudW1iZXIpOiBGbG9hdDMyQXJyYXkge1xuICAgIHJldHVybiB0aGlzLmdldERyYXdhYmxlVmVydGV4UG9zaXRpb25zKGRyYXdhYmxlSW5kZXgpO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdhYmxl44Gu6aCC54K544Kk44Oz44OH44OD44Kv44K544Oq44K544OI44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBkcmFyYWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4gZHJhd2FibGXjga7poILngrnjgqTjg7Pjg4fjg4Pjgq/jgrnjg6rjgrnjg4hcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZVZlcnRleEluZGljZXMoZHJhd2FibGVJbmRleDogbnVtYmVyKTogVWludDE2QXJyYXkge1xuICAgIGNvbnN0IGluZGljZXNBcnJheTogVWludDE2QXJyYXlbXSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5pbmRpY2VzO1xuICAgIHJldHVybiBpbmRpY2VzQXJyYXlbZHJhd2FibGVJbmRleF07XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga7poILngrnjg6rjgrnjg4jjga7lj5blvpdcbiAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiBkcmF3YWJsZeOBrumggueCueODquOCueODiFxuICAgKi9cbiAgcHVibGljIGdldERyYXdhYmxlVmVydGV4UG9zaXRpb25zKGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IEZsb2F0MzJBcnJheSB7XG4gICAgY29uc3QgdmVydGljZXNBcnJheTogRmxvYXQzMkFycmF5W10gPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMudmVydGV4UG9zaXRpb25zO1xuICAgIHJldHVybiB2ZXJ0aWNlc0FycmF5W2RyYXdhYmxlSW5kZXhdO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdhYmxl44Gu6aCC54K544GuVVbjg6rjgrnjg4jjga7lj5blvpdcbiAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiBkcmF3YWJsZeOBrumggueCuVVW44Oq44K544OIXG4gICAqL1xuICBwdWJsaWMgZ2V0RHJhd2FibGVWZXJ0ZXhVdnMoZHJhd2FibGVJbmRleDogbnVtYmVyKTogRmxvYXQzMkFycmF5IHtcbiAgICBjb25zdCB1dnNBcnJheTogRmxvYXQzMkFycmF5W10gPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMudmVydGV4VXZzO1xuICAgIHJldHVybiB1dnNBcnJheVtkcmF3YWJsZUluZGV4XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3YWJsZeOBruS4jemAj+aYjuW6puOBruWPluW+l1xuICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIGRyYXdhYmxl44Gu5LiN6YCP5piO5bqmXG4gICAqL1xuICBwdWJsaWMgZ2V0RHJhd2FibGVPcGFjaXR5KGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgY29uc3Qgb3BhY2l0aWVzOiBGbG9hdDMyQXJyYXkgPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMub3BhY2l0aWVzO1xuICAgIHJldHVybiBvcGFjaXRpZXNbZHJhd2FibGVJbmRleF07XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga7kuZfnrpfoibLjga7lj5blvpdcbiAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiBkcmF3YWJsZeOBruS5l+eul+iJsihSR0JBKVxuICAgKiDjgrnjgq/jg6rjg7zjg7PoibLjga9SR0JB44Gn5Y+W5b6X44GV44KM44KL44GM44CBQeOBr+W/heOBmjBcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZU11bHRpcGx5Q29sb3IoZHJhd2FibGVJbmRleDogbnVtYmVyKTogQ3ViaXNtVGV4dHVyZUNvbG9yIHtcbiAgICBjb25zdCBtdWx0aXBseUNvbG9yczogRmxvYXQzMkFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLm11bHRpcGx5Q29sb3JzO1xuICAgIGNvbnN0IGluZGV4ID0gZHJhd2FibGVJbmRleCAqIDQ7XG4gICAgY29uc3QgbXVsdGlwbHlDb2xvcjogQ3ViaXNtVGV4dHVyZUNvbG9yID0gbmV3IEN1YmlzbVRleHR1cmVDb2xvcigpO1xuICAgIG11bHRpcGx5Q29sb3IuUiA9IG11bHRpcGx5Q29sb3JzW2luZGV4XTtcbiAgICBtdWx0aXBseUNvbG9yLkcgPSBtdWx0aXBseUNvbG9yc1tpbmRleCArIDFdO1xuICAgIG11bHRpcGx5Q29sb3IuQiA9IG11bHRpcGx5Q29sb3JzW2luZGV4ICsgMl07XG4gICAgbXVsdGlwbHlDb2xvci5BID0gbXVsdGlwbHlDb2xvcnNbaW5kZXggKyAzXTtcbiAgICByZXR1cm4gbXVsdGlwbHlDb2xvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3YWJsZeOBruOCueOCr+ODquODvOODs+iJsuOBruWPluW+l1xuICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIGRyYXdhYmxl44Gu44K544Kv44Oq44O844Oz6ImyKFJHQkEpXG4gICAqIOOCueOCr+ODquODvOODs+iJsuOBr1JHQkHjgaflj5blvpfjgZXjgozjgovjgYzjgIFB44Gv5b+F44GaMFxuICAgKi9cbiAgcHVibGljIGdldERyYXdhYmxlU2NyZWVuQ29sb3IoZHJhd2FibGVJbmRleDogbnVtYmVyKTogQ3ViaXNtVGV4dHVyZUNvbG9yIHtcbiAgICBjb25zdCBzY3JlZW5Db2xvcnM6IEZsb2F0MzJBcnJheSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5zY3JlZW5Db2xvcnM7XG4gICAgY29uc3QgaW5kZXggPSBkcmF3YWJsZUluZGV4ICogNDtcbiAgICBjb25zdCBzY3JlZW5Db2xvcjogQ3ViaXNtVGV4dHVyZUNvbG9yID0gbmV3IEN1YmlzbVRleHR1cmVDb2xvcigpO1xuICAgIHNjcmVlbkNvbG9yLlIgPSBzY3JlZW5Db2xvcnNbaW5kZXhdO1xuICAgIHNjcmVlbkNvbG9yLkcgPSBzY3JlZW5Db2xvcnNbaW5kZXggKyAxXTtcbiAgICBzY3JlZW5Db2xvci5CID0gc2NyZWVuQ29sb3JzW2luZGV4ICsgMl07XG4gICAgc2NyZWVuQ29sb3IuQSA9IHNjcmVlbkNvbG9yc1tpbmRleCArIDNdO1xuICAgIHJldHVybiBzY3JlZW5Db2xvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3YWJsZeOBruimquODkeODvOODhOOBruOCpOODs+ODh+ODg+OCr+OCueOBruWPluW+l1xuICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIGRyYXdhYmxl44Gu6Kaq44OR44O844OE44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqL1xuICBwdWJsaWMgZ2V0RHJhd2FibGVQYXJlbnRQYXJ0SW5kZXgoZHJhd2FibGVJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbW9kZWwuZHJhd2FibGVzLnBhcmVudFBhcnRJbmRpY2VzW2RyYXdhYmxlSW5kZXhdO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdhYmxl44Gu44Kr44Oq44Oz44Kw5oOF5aCx44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4gZHJhd2FibGXjga7jgqvjg6rjg7PjgrDmg4XloLFcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZUN1bGxpbmcoZHJhd2FibGVJbmRleDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgY29uc3QgY29uc3RhbnRGbGFncyA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5jb25zdGFudEZsYWdzO1xuXG4gICAgcmV0dXJuICFMaXZlMkRDdWJpc21Db3JlLlV0aWxzLmhhc0lzRG91YmxlU2lkZWRCaXQoXG4gICAgICBjb25zdGFudEZsYWdzW2RyYXdhYmxlSW5kZXhdXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3YWJsZeOBruODluODrOODs+ODieODouODvOODieOCkuWPluW+l1xuICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIGRyYXdhYmxl44Gu44OW44Os44Oz44OJ44Oi44O844OJXG4gICAqL1xuICBwdWJsaWMgZ2V0RHJhd2FibGVCbGVuZE1vZGUoZHJhd2FibGVJbmRleDogbnVtYmVyKTogQ3ViaXNtQmxlbmRNb2RlIHtcbiAgICBjb25zdCBjb25zdGFudEZsYWdzID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmNvbnN0YW50RmxhZ3M7XG5cbiAgICByZXR1cm4gTGl2ZTJEQ3ViaXNtQ29yZS5VdGlscy5oYXNCbGVuZEFkZGl0aXZlQml0KFxuICAgICAgY29uc3RhbnRGbGFnc1tkcmF3YWJsZUluZGV4XVxuICAgIClcbiAgICAgID8gQ3ViaXNtQmxlbmRNb2RlLkN1YmlzbUJsZW5kTW9kZV9BZGRpdGl2ZVxuICAgICAgOiBMaXZlMkRDdWJpc21Db3JlLlV0aWxzLmhhc0JsZW5kTXVsdGlwbGljYXRpdmVCaXQoXG4gICAgICAgICAgY29uc3RhbnRGbGFnc1tkcmF3YWJsZUluZGV4XVxuICAgICAgICApXG4gICAgICA/IEN1YmlzbUJsZW5kTW9kZS5DdWJpc21CbGVuZE1vZGVfTXVsdGlwbGljYXRpdmVcbiAgICAgIDogQ3ViaXNtQmxlbmRNb2RlLkN1YmlzbUJsZW5kTW9kZV9Ob3JtYWw7XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga7jg57jgrnjgq/jga7lj43ou6Lkvb/nlKjjga7lj5blvpdcbiAgICpcbiAgICogRHJhd2FibGXjga7jg57jgrnjgq/kvb/nlKjmmYLjga7lj43ou6LoqK3lrprjgpLlj5blvpfjgZnjgovjgIJcbiAgICog44Oe44K544Kv44KS5L2/55So44GX44Gq44GE5aC05ZCI44Gv54Sh6KaW44GV44KM44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4gRHJhd2FibGXjga7lj43ou6LoqK3lrppcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZUludmVydGVkTWFza0JpdChkcmF3YWJsZUluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICBjb25zdCBjb25zdGFudEZsYWdzOiBVaW50OEFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmNvbnN0YW50RmxhZ3M7XG5cbiAgICByZXR1cm4gTGl2ZTJEQ3ViaXNtQ29yZS5VdGlscy5oYXNJc0ludmVydGVkTWFza0JpdChcbiAgICAgIGNvbnN0YW50RmxhZ3NbZHJhd2FibGVJbmRleF1cbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdhYmxl44Gu44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Oq44K544OI44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4gRHJhd2FibGXjga7jgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jg6rjgrnjg4hcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZU1hc2tzKCk6IEludDMyQXJyYXlbXSB7XG4gICAgY29uc3QgbWFza3M6IEludDMyQXJyYXlbXSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5tYXNrcztcbiAgICByZXR1cm4gbWFza3M7XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga7jgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jga7lgIvmlbDjg6rjgrnjg4jjga7lj5blvpdcbiAgICogQHJldHVybiBEcmF3YWJsZeOBruOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBruWAi+aVsOODquOCueODiFxuICAgKi9cbiAgcHVibGljIGdldERyYXdhYmxlTWFza0NvdW50cygpOiBJbnQzMkFycmF5IHtcbiAgICBjb25zdCBtYXNrQ291bnRzOiBJbnQzMkFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLm1hc2tDb3VudHM7XG4gICAgcmV0dXJuIG1hc2tDb3VudHM7XG4gIH1cblxuICAvKipcbiAgICog44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gu5L2/55So54q25oWLXG4gICAqXG4gICAqIEByZXR1cm4gdHJ1ZSDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jgpLkvb/nlKjjgZfjgabjgYTjgotcbiAgICogQHJldHVybiBmYWxzZSDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jgpLkvb/nlKjjgZfjgabjgYTjgarjgYRcbiAgICovXG4gIHB1YmxpYyBpc1VzaW5nTWFza2luZygpOiBib29sZWFuIHtcbiAgICBmb3IgKGxldCBkID0gMDsgZCA8IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5jb3VudDsgKytkKSB7XG4gICAgICBpZiAodGhpcy5fbW9kZWwuZHJhd2FibGVzLm1hc2tDb3VudHNbZF0gPD0gMCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga7ooajnpLrmg4XloLHjgpLlj5blvpfjgZnjgotcbiAgICpcbiAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiB0cnVlIERyYXdhYmxl44GM6KGo56S6XG4gICAqIEByZXR1cm4gZmFsc2UgRHJhd2FibGXjgYzpnZ7ooajnpLpcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZUR5bmFtaWNGbGFnSXNWaXNpYmxlKGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGR5bmFtaWNGbGFnczogVWludDhBcnJheSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5keW5hbWljRmxhZ3M7XG4gICAgcmV0dXJuIExpdmUyREN1YmlzbUNvcmUuVXRpbHMuaGFzSXNWaXNpYmxlQml0KGR5bmFtaWNGbGFnc1tkcmF3YWJsZUluZGV4XSk7XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga5EcmF3T3JkZXLjga7lpInljJbmg4XloLHjga7lj5blvpdcbiAgICpcbiAgICog55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44GnZHJhd2FibGXjga5kcmF3T3JkZXLjgYzlpInljJbjgZfjgZ/jgYvjgpLlj5blvpfjgZnjgovjgIJcbiAgICogZHJhd09yZGVy44GvYXJ0TWVzaOS4iuOBp+aMh+WumuOBmeOCizDjgYvjgokxMDAw44Gu5oOF5aCxXG4gICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IGRyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4gdHJ1ZSBkcmF3YWJsZeOBruS4jemAj+aYjuW6puOBjOebtOi/keOBrkN1YmlzbU1vZGVsLnVwZGF0ZemWouaVsOOBp+WkieWMluOBl+OBn1xuICAgKiBAcmV0dXJuIGZhbHNlIGRyYXdhYmxl44Gu5LiN6YCP5piO5bqm44GM55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44Gn5aSJ5YyW44GX44Gm44GE44KLXG4gICAqL1xuICBwdWJsaWMgZ2V0RHJhd2FibGVEeW5hbWljRmxhZ1Zpc2liaWxpdHlEaWRDaGFuZ2UoXG4gICAgZHJhd2FibGVJbmRleDogbnVtYmVyXG4gICk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGR5bmFtaWNGbGFnczogVWludDhBcnJheSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5keW5hbWljRmxhZ3M7XG4gICAgcmV0dXJuIExpdmUyREN1YmlzbUNvcmUuVXRpbHMuaGFzVmlzaWJpbGl0eURpZENoYW5nZUJpdChcbiAgICAgIGR5bmFtaWNGbGFnc1tkcmF3YWJsZUluZGV4XVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga7kuI3pgI/mmI7luqbjga7lpInljJbmg4XloLHjga7lj5blvpdcbiAgICpcbiAgICog55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44GnZHJhd2FibGXjga7kuI3pgI/mmI7luqbjgYzlpInljJbjgZfjgZ/jgYvjgpLlj5blvpfjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggZHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiB0cnVlIERyYXdhYmxl44Gu5LiN6YCP5piO5bqm44GM55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44Gn5aSJ5YyW44GX44GfXG4gICAqIEByZXR1cm4gZmFsc2UgRHJhd2FibGXjga7kuI3pgI/mmI7luqbjgYznm7Tov5Hjga5DdWJpc21Nb2RlbC51cGRhdGXplqLmlbDjgaflpInljJbjgZfjgabjgarjgYRcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZUR5bmFtaWNGbGFnT3BhY2l0eURpZENoYW5nZShcbiAgICBkcmF3YWJsZUluZGV4OiBudW1iZXJcbiAgKTogYm9vbGVhbiB7XG4gICAgY29uc3QgZHluYW1pY0ZsYWdzOiBVaW50OEFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmR5bmFtaWNGbGFncztcbiAgICByZXR1cm4gTGl2ZTJEQ3ViaXNtQ29yZS5VdGlscy5oYXNPcGFjaXR5RGlkQ2hhbmdlQml0KFxuICAgICAgZHluYW1pY0ZsYWdzW2RyYXdhYmxlSW5kZXhdXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3YWJsZeOBruaPj+eUu+mghuW6j+OBruWkieWMluaDheWgseOBruWPluW+l1xuICAgKlxuICAgKiDnm7Tov5Hjga5DdWJpc21Nb2RlbC51cGRhdGXplqLmlbDjgadEcmF3YWJsZeOBruaPj+eUu+OBrumghuW6j+OBjOWkieWMluOBl+OBn+OBi+OCkuWPluW+l+OBmeOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIHRydWUgRHJhd2FibGXjga7mj4/nlLvjga7poIbluo/jgYznm7Tov5Hjga5DdWJpc21Nb2RlbC51cGRhdGXplqLmlbDjgaflpInljJbjgZfjgZ9cbiAgICogQHJldHVybiBmYWxzZSBEcmF3YWJsZeOBruaPj+eUu+OBrumghuW6j+OBjOebtOi/keOBrkN1YmlzbU1vZGVsLnVwZGF0ZemWouaVsOOBp+WkieWMluOBl+OBpuOBquOBhFxuICAgKi9cbiAgcHVibGljIGdldERyYXdhYmxlRHluYW1pY0ZsYWdSZW5kZXJPcmRlckRpZENoYW5nZShcbiAgICBkcmF3YWJsZUluZGV4OiBudW1iZXJcbiAgKTogYm9vbGVhbiB7XG4gICAgY29uc3QgZHluYW1pY0ZsYWdzOiBVaW50OEFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmR5bmFtaWNGbGFncztcbiAgICByZXR1cm4gTGl2ZTJEQ3ViaXNtQ29yZS5VdGlscy5oYXNSZW5kZXJPcmRlckRpZENoYW5nZUJpdChcbiAgICAgIGR5bmFtaWNGbGFnc1tkcmF3YWJsZUluZGV4XVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga7kuZfnrpfoibLjg7vjgrnjgq/jg6rjg7zjg7PoibLjga7lpInljJbmg4XloLHjga7lj5blvpdcbiAgICpcbiAgICog55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44GnRHJhd2FibGXjga7kuZfnrpfoibLjg7vjgrnjgq/jg6rjg7zjg7PoibLjgYzlpInljJbjgZfjgZ/jgYvjgpLlj5blvpfjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiB0cnVlIERyYXdhYmxl44Gu5LmX566X6Imy44O744K544Kv44Oq44O844Oz6Imy44GM55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44Gn5aSJ5YyW44GX44GfXG4gICAqIEByZXR1cm4gZmFsc2UgRHJhd2FibGXjga7kuZfnrpfoibLjg7vjgrnjgq/jg6rjg7zjg7PoibLjgYznm7Tov5Hjga5DdWJpc21Nb2RlbC51cGRhdGXplqLmlbDjgaflpInljJbjgZfjgabjgarjgYRcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZUR5bmFtaWNGbGFnQmxlbmRDb2xvckRpZENoYW5nZShcbiAgICBkcmF3YWJsZUluZGV4OiBudW1iZXJcbiAgKTogYm9vbGVhbiB7XG4gICAgY29uc3QgZHluYW1pY0ZsYWdzOiBVaW50OEFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmR5bmFtaWNGbGFncztcbiAgICByZXR1cm4gTGl2ZTJEQ3ViaXNtQ29yZS5VdGlscy5oYXNCbGVuZENvbG9yRGlkQ2hhbmdlQml0KFxuICAgICAgZHluYW1pY0ZsYWdzW2RyYXdhYmxlSW5kZXhdXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDkv53lrZjjgZXjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga7oqq3jgb/ovrzjgb9cbiAgICovXG4gIHB1YmxpYyBsb2FkUGFyYW1ldGVycygpOiB2b2lkIHtcbiAgICBsZXQgcGFyYW1ldGVyQ291bnQ6IG51bWJlciA9IHRoaXMuX21vZGVsLnBhcmFtZXRlcnMuY291bnQ7XG4gICAgY29uc3Qgc2F2ZWRQYXJhbWV0ZXJDb3VudDogbnVtYmVyID0gdGhpcy5fc2F2ZWRQYXJhbWV0ZXJzLmdldFNpemUoKTtcblxuICAgIGlmIChwYXJhbWV0ZXJDb3VudCA+IHNhdmVkUGFyYW1ldGVyQ291bnQpIHtcbiAgICAgIHBhcmFtZXRlckNvdW50ID0gc2F2ZWRQYXJhbWV0ZXJDb3VudDtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcmFtZXRlckNvdW50OyArK2kpIHtcbiAgICAgIHRoaXMuX3BhcmFtZXRlclZhbHVlc1tpXSA9IHRoaXMuX3NhdmVkUGFyYW1ldGVycy5hdChpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog5Yid5pyf5YyW44GZ44KLXG4gICAqL1xuICBwdWJsaWMgaW5pdGlhbGl6ZSgpOiB2b2lkIHtcbiAgICBDU01fQVNTRVJUKHRoaXMuX21vZGVsKTtcblxuICAgIHRoaXMuX3BhcmFtZXRlclZhbHVlcyA9IHRoaXMuX21vZGVsLnBhcmFtZXRlcnMudmFsdWVzO1xuICAgIHRoaXMuX3BhcnRPcGFjaXRpZXMgPSB0aGlzLl9tb2RlbC5wYXJ0cy5vcGFjaXRpZXM7XG4gICAgdGhpcy5fcGFyYW1ldGVyTWF4aW11bVZhbHVlcyA9IHRoaXMuX21vZGVsLnBhcmFtZXRlcnMubWF4aW11bVZhbHVlcztcbiAgICB0aGlzLl9wYXJhbWV0ZXJNaW5pbXVtVmFsdWVzID0gdGhpcy5fbW9kZWwucGFyYW1ldGVycy5taW5pbXVtVmFsdWVzO1xuXG4gICAge1xuICAgICAgY29uc3QgcGFyYW1ldGVySWRzOiBzdHJpbmdbXSA9IHRoaXMuX21vZGVsLnBhcmFtZXRlcnMuaWRzO1xuICAgICAgY29uc3QgcGFyYW1ldGVyQ291bnQ6IG51bWJlciA9IHRoaXMuX21vZGVsLnBhcmFtZXRlcnMuY291bnQ7XG5cbiAgICAgIHRoaXMuX3BhcmFtZXRlcklkcy5wcmVwYXJlQ2FwYWNpdHkocGFyYW1ldGVyQ291bnQpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJhbWV0ZXJDb3VudDsgKytpKSB7XG4gICAgICAgIHRoaXMuX3BhcmFtZXRlcklkcy5wdXNoQmFjayhcbiAgICAgICAgICBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQocGFyYW1ldGVySWRzW2ldKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHtcbiAgICAgIGNvbnN0IHBhcnRJZHM6IHN0cmluZ1tdID0gdGhpcy5fbW9kZWwucGFydHMuaWRzO1xuICAgICAgY29uc3QgcGFydENvdW50OiBudW1iZXIgPSB0aGlzLl9tb2RlbC5wYXJ0cy5jb3VudDtcblxuICAgICAgdGhpcy5fcGFydElkcy5wcmVwYXJlQ2FwYWNpdHkocGFydENvdW50KTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFydENvdW50OyArK2kpIHtcbiAgICAgICAgdGhpcy5fcGFydElkcy5wdXNoQmFjayhcbiAgICAgICAgICBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQocGFydElkc1tpXSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB7XG4gICAgICBjb25zdCBkcmF3YWJsZUlkczogc3RyaW5nW10gPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMuaWRzO1xuICAgICAgY29uc3QgZHJhd2FibGVDb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmNvdW50O1xuXG4gICAgICB0aGlzLl91c2VyTXVsdGlwbHlDb2xvcnMgPSBuZXcgY3NtVmVjdG9yPERyYXdhYmxlQ29sb3JEYXRhPigpO1xuICAgICAgdGhpcy5fdXNlck11bHRpcGx5Q29sb3JzLnVwZGF0ZVNpemUoXG4gICAgICAgIGRyYXdhYmxlQ291bnQsXG4gICAgICAgIERyYXdhYmxlQ29sb3JEYXRhLFxuICAgICAgICB0cnVlXG4gICAgICApO1xuXG4gICAgICB0aGlzLl91c2VyU2NyZWVuQ29sb3JzID0gbmV3IGNzbVZlY3RvcjxEcmF3YWJsZUNvbG9yRGF0YT4oKTtcbiAgICAgIHRoaXMuX3VzZXJTY3JlZW5Db2xvcnMudXBkYXRlU2l6ZShkcmF3YWJsZUNvdW50LCBEcmF3YWJsZUNvbG9yRGF0YSwgdHJ1ZSk7XG5cbiAgICAgIHRoaXMuX2RyYXdhYmxlSWRzLnByZXBhcmVDYXBhY2l0eShkcmF3YWJsZUNvdW50KTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZHJhd2FibGVDb3VudDsgKytpKSB7XG4gICAgICAgIHRoaXMuX2RyYXdhYmxlSWRzLnB1c2hCYWNrKFxuICAgICAgICAgIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChkcmF3YWJsZUlkc1tpXSlcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBzaGFkZXLjgavlvbHpn7/jgZfjgarjgYToibLjgafliJ3mnJ/ljJZcbiAgICAgICAgdGhpcy5zZXRNdWx0aXBseUNvbG9yQnlSR0JBKGksIDEuMCwgMS4wLCAxLjAsIDEuMCk7XG4gICAgICAgIHRoaXMuc2V0U2NyZWVuQ29sb3JCeVJHQkEoaSwgMC4wLCAwLjAsIDAuMCwgMS4wKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqIEBwYXJhbSBtb2RlbCDjg6Ljg4fjg6tcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihtb2RlbDogTGl2ZTJEQ3ViaXNtQ29yZS5Nb2RlbCkge1xuICAgIHRoaXMuX21vZGVsID0gbW9kZWw7XG4gICAgdGhpcy5fcGFyYW1ldGVyVmFsdWVzID0gbnVsbDtcbiAgICB0aGlzLl9wYXJhbWV0ZXJNYXhpbXVtVmFsdWVzID0gbnVsbDtcbiAgICB0aGlzLl9wYXJhbWV0ZXJNaW5pbXVtVmFsdWVzID0gbnVsbDtcbiAgICB0aGlzLl9wYXJ0T3BhY2l0aWVzID0gbnVsbDtcbiAgICB0aGlzLl9zYXZlZFBhcmFtZXRlcnMgPSBuZXcgY3NtVmVjdG9yPG51bWJlcj4oKTtcbiAgICB0aGlzLl9wYXJhbWV0ZXJJZHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPigpO1xuICAgIHRoaXMuX2RyYXdhYmxlSWRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT4oKTtcbiAgICB0aGlzLl9wYXJ0SWRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT4oKTtcbiAgICB0aGlzLl9pc092ZXJ3cml0dGVuTW9kZWxNdWx0aXBseUNvbG9ycyA9IGZhbHNlO1xuICAgIHRoaXMuX2lzT3ZlcndyaXR0ZW5Nb2RlbFNjcmVlbkNvbG9ycyA9IGZhbHNlO1xuICAgIHRoaXMuX3VzZXJNdWx0aXBseUNvbG9ycyA9IG51bGw7XG4gICAgdGhpcy5fdXNlclNjcmVlbkNvbG9ycyA9IG51bGw7XG5cbiAgICB0aGlzLl9ub3RFeGlzdFBhcnRJZCA9IG5ldyBjc21NYXA8Q3ViaXNtSWRIYW5kbGUsIG51bWJlcj4oKTtcbiAgICB0aGlzLl9ub3RFeGlzdFBhcmFtZXRlcklkID0gbmV3IGNzbU1hcDxDdWJpc21JZEhhbmRsZSwgbnVtYmVyPigpO1xuICAgIHRoaXMuX25vdEV4aXN0UGFyYW1ldGVyVmFsdWVzID0gbmV3IGNzbU1hcDxudW1iZXIsIG51bWJlcj4oKTtcbiAgICB0aGlzLl9ub3RFeGlzdFBhcnRPcGFjaXRpZXMgPSBuZXcgY3NtTWFwPG51bWJlciwgbnVtYmVyPigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgdGhpcy5fbW9kZWwucmVsZWFzZSgpO1xuICAgIHRoaXMuX21vZGVsID0gbnVsbDtcbiAgfVxuXG4gIHByaXZhdGUgX25vdEV4aXN0UGFydE9wYWNpdGllczogY3NtTWFwPG51bWJlciwgbnVtYmVyPjsgLy8g5a2Y5Zyo44GX44Gm44GE44Gq44GE44OR44O844OE44Gu5LiN6YCP5piO5bqm44Gu44Oq44K544OIXG4gIHByaXZhdGUgX25vdEV4aXN0UGFydElkOiBjc21NYXA8Q3ViaXNtSWRIYW5kbGUsIG51bWJlcj47IC8vIOWtmOWcqOOBl+OBpuOBhOOBquOBhOODkeODvOODhElE44Gu44Oq44K544OIXG5cbiAgcHJpdmF0ZSBfbm90RXhpc3RQYXJhbWV0ZXJWYWx1ZXM6IGNzbU1hcDxudW1iZXIsIG51bWJlcj47IC8vIOWtmOWcqOOBl+OBpuOBhOOBquOBhOODkeODqeODoeODvOOCv+OBruWApOOBruODquOCueODiFxuICBwcml2YXRlIF9ub3RFeGlzdFBhcmFtZXRlcklkOiBjc21NYXA8Q3ViaXNtSWRIYW5kbGUsIG51bWJlcj47IC8vIOWtmOWcqOOBl+OBpuOBhOOBquOBhOODkeODqeODoeODvOOCv0lE44Gu44Oq44K544OIXG5cbiAgcHJpdmF0ZSBfc2F2ZWRQYXJhbWV0ZXJzOiBjc21WZWN0b3I8bnVtYmVyPjsgLy8g5L+d5a2Y44GV44KM44Gf44OR44Op44Oh44O844K/XG5cbiAgcHJpdmF0ZSBfaXNPdmVyd3JpdHRlbk1vZGVsTXVsdGlwbHlDb2xvcnM6IGJvb2xlYW47IC8vIFNES+S4iuOBp+ODouODh+ODq+WFqOS9k+OBruS5l+eul+iJsuOCkuS4iuabuOOBjeOBmeOCi+OBi+WIpOWumuOBmeOCi+ODleODqeOCsFxuICBwcml2YXRlIF9pc092ZXJ3cml0dGVuTW9kZWxTY3JlZW5Db2xvcnM6IGJvb2xlYW47IC8vIFNES+S4iuOBp+ODouODh+ODq+WFqOS9k+OBruOCueOCr+ODquODvOODs+iJsuOCkuS4iuabuOOBjeOBmeOCi+OBi+WIpOWumuOBmeOCi+ODleODqeOCsFxuICBwcml2YXRlIF91c2VyTXVsdGlwbHlDb2xvcnM6IGNzbVZlY3RvcjxEcmF3YWJsZUNvbG9yRGF0YT47IC8vIERyYXdhYmxl44GU44Go44Gr6Kit5a6a44GZ44KL5LmX566X6Imy44Go5LiK5pu444GN44OV44Op44Kw44KS566h55CG44GZ44KL44Oq44K544OIXG4gIHByaXZhdGUgX3VzZXJTY3JlZW5Db2xvcnM6IGNzbVZlY3RvcjxEcmF3YWJsZUNvbG9yRGF0YT47IC8vIERyYXdhYmxl44GU44Go44Gr6Kit5a6a44GZ44KL44K544Kv44Oq44O844Oz6Imy44Go5LiK5pu444GN44OV44Op44Kw44KS566h55CG44GZ44KL44Oq44K544OIXG5cbiAgcHJpdmF0ZSBfbW9kZWw6IExpdmUyREN1YmlzbUNvcmUuTW9kZWw7IC8vIOODouODh+ODq1xuXG4gIHByaXZhdGUgX3BhcmFtZXRlclZhbHVlczogRmxvYXQzMkFycmF5OyAvLyDjg5Hjg6njg6Hjg7zjgr/jga7lgKTjga7jg6rjgrnjg4hcbiAgcHJpdmF0ZSBfcGFyYW1ldGVyTWF4aW11bVZhbHVlczogRmxvYXQzMkFycmF5OyAvLyDjg5Hjg6njg6Hjg7zjgr/jga7mnIDlpKflgKTjga7jg6rjgrnjg4hcbiAgcHJpdmF0ZSBfcGFyYW1ldGVyTWluaW11bVZhbHVlczogRmxvYXQzMkFycmF5OyAvLyDjg5Hjg6njg6Hjg7zjgr/jga7mnIDlsI/lgKTjga7jg6rjgrnjg4hcblxuICBwcml2YXRlIF9wYXJ0T3BhY2l0aWVzOiBGbG9hdDMyQXJyYXk7IC8vIOODkeODvOODhOOBruS4jemAj+aYjuW6puOBruODquOCueODiFxuXG4gIHByaXZhdGUgX3BhcmFtZXRlcklkczogY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPjtcbiAgcHJpdmF0ZSBfcGFydElkczogY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPjtcbiAgcHJpdmF0ZSBfZHJhd2FibGVJZHM6IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT47XG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbW1vZGVsJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21Nb2RlbCA9ICQuQ3ViaXNtTW9kZWw7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbU1vZGVsID0gJC5DdWJpc21Nb2RlbDtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IEN1YmlzbUlkSGFuZGxlIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xuaW1wb3J0IHsgQ3ViaXNtRnJhbWV3b3JrIH0gZnJvbSAnLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcbmltcG9ydCB7IGNzbVN0cmluZyB9IGZyb20gJy4uL3R5cGUvY3Ntc3RyaW5nJztcbmltcG9ydCB7IGNzbVZlY3RvciB9IGZyb20gJy4uL3R5cGUvY3NtdmVjdG9yJztcbmltcG9ydCB7IEN1YmlzbU1vZGVsVXNlckRhdGFKc29uIH0gZnJvbSAnLi9jdWJpc21tb2RlbHVzZXJkYXRhanNvbic7XG5cbmNvbnN0IEFydE1lc2ggPSAnQXJ0TWVzaCc7XG5cbi8qKlxuICog44Om44O844K244O844OH44O844K/44Kk44Oz44K/44O844OV44Kn44O844K5XG4gKlxuICogSnNvbuOBi+OCieiqreOBv+i+vOOCk+OBoOODpuODvOOCtuODvOODh+ODvOOCv+OCkuiomOmMsuOBl+OBpuOBiuOBj+OBn+OCgeOBruani+mAoOS9k1xuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtTW9kZWxVc2VyRGF0YU5vZGUge1xuICB0YXJnZXRUeXBlOiBDdWJpc21JZEhhbmRsZTsgLy8g44Om44O844K244O844OH44O844K/44K/44O844Ky44OD44OI44K/44Kk44OXXG4gIHRhcmdldElkOiBDdWJpc21JZEhhbmRsZTsgLy8g44Om44O844K244O844OH44O844K/44K/44O844Ky44OD44OI44GuSURcbiAgdmFsdWU6IGNzbVN0cmluZzsgLy8g44Om44O844K244O844OH44O844K/XG59XG5cbi8qKlxuICog44Om44O844K244OH44O844K/44Gu566h55CG44Kv44Op44K5XG4gKlxuICog44Om44O844K244OH44O844K/44KS44Ot44O844OJ44CB566h55CG44CB5qSc57Si44Kk44Oz44K/44O844OV44Kn44Kk44K544CB6Kej5pS+44G+44Gn44KS6KGM44GG44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21Nb2RlbFVzZXJEYXRhIHtcbiAgLyoqXG4gICAqIOOCpOODs+OCueOCv+ODs+OCueOBruS9nOaIkFxuICAgKlxuICAgKiBAcGFyYW0gYnVmZmVyICAgIHVzZXJkYXRhMy5qc29u44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXG4gICAqIEBwYXJhbSBzaXplICAgICAg44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAqIEByZXR1cm4g5L2c5oiQ44GV44KM44Gf44Kk44Oz44K544K/44Oz44K5XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGNyZWF0ZShidWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpOiBDdWJpc21Nb2RlbFVzZXJEYXRhIHtcbiAgICBjb25zdCByZXQ6IEN1YmlzbU1vZGVsVXNlckRhdGEgPSBuZXcgQ3ViaXNtTW9kZWxVc2VyRGF0YSgpO1xuXG4gICAgcmV0LnBhcnNlVXNlckRhdGEoYnVmZmVyLCBzaXplKTtcblxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICog44Kk44Oz44K544K/44Oz44K544KS56C05qOE44GZ44KLXG4gICAqXG4gICAqIEBwYXJhbSBtb2RlbFVzZXJEYXRhIOegtOajhOOBmeOCi+OCpOODs+OCueOCv+ODs+OCuVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBkZWxldGUobW9kZWxVc2VyRGF0YTogQ3ViaXNtTW9kZWxVc2VyRGF0YSk6IHZvaWQge1xuICAgIGlmIChtb2RlbFVzZXJEYXRhICE9IG51bGwpIHtcbiAgICAgIG1vZGVsVXNlckRhdGEucmVsZWFzZSgpO1xuICAgICAgbW9kZWxVc2VyRGF0YSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFydE1lc2jjga7jg6bjg7zjgrbjg7zjg4fjg7zjgr/jga7jg6rjgrnjg4jjga7lj5blvpdcbiAgICpcbiAgICogQHJldHVybiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jg6rjgrnjg4hcbiAgICovXG4gIHB1YmxpYyBnZXRBcnRNZXNoVXNlckRhdGFzKCk6IGNzbVZlY3RvcjxDdWJpc21Nb2RlbFVzZXJEYXRhTm9kZT4ge1xuICAgIHJldHVybiB0aGlzLl9hcnRNZXNoVXNlckRhdGFOb2RlO1xuICB9XG5cbiAgLyoqXG4gICAqIHVzZXJkYXRhMy5qc29u44Gu44OR44O844K5XG4gICAqXG4gICAqIEBwYXJhbSBidWZmZXIgICAgdXNlcmRhdGEzLmpzb27jgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcbiAgICogQHBhcmFtIHNpemUgICAgICDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICovXG4gIHB1YmxpYyBwYXJzZVVzZXJEYXRhKGJ1ZmZlcjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlcik6IHZvaWQge1xuICAgIGxldCBqc29uOiBDdWJpc21Nb2RlbFVzZXJEYXRhSnNvbiA9IG5ldyBDdWJpc21Nb2RlbFVzZXJEYXRhSnNvbihcbiAgICAgIGJ1ZmZlcixcbiAgICAgIHNpemVcbiAgICApO1xuXG4gICAgY29uc3QgdHlwZU9mQXJ0TWVzaCA9IEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChBcnRNZXNoKTtcbiAgICBjb25zdCBub2RlQ291bnQ6IG51bWJlciA9IGpzb24uZ2V0VXNlckRhdGFDb3VudCgpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlQ291bnQ7IGkrKykge1xuICAgICAgY29uc3QgYWRkTm9kZTogQ3ViaXNtTW9kZWxVc2VyRGF0YU5vZGUgPSBuZXcgQ3ViaXNtTW9kZWxVc2VyRGF0YU5vZGUoKTtcblxuICAgICAgYWRkTm9kZS50YXJnZXRJZCA9IGpzb24uZ2V0VXNlckRhdGFJZChpKTtcbiAgICAgIGFkZE5vZGUudGFyZ2V0VHlwZSA9IEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgICAganNvbi5nZXRVc2VyRGF0YVRhcmdldFR5cGUoaSlcbiAgICAgICk7XG4gICAgICBhZGROb2RlLnZhbHVlID0gbmV3IGNzbVN0cmluZyhqc29uLmdldFVzZXJEYXRhVmFsdWUoaSkpO1xuICAgICAgdGhpcy5fdXNlckRhdGFOb2Rlcy5wdXNoQmFjayhhZGROb2RlKTtcblxuICAgICAgaWYgKGFkZE5vZGUudGFyZ2V0VHlwZSA9PSB0eXBlT2ZBcnRNZXNoKSB7XG4gICAgICAgIHRoaXMuX2FydE1lc2hVc2VyRGF0YU5vZGUucHVzaEJhY2soYWRkTm9kZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAganNvbi5yZWxlYXNlKCk7XG4gICAganNvbiA9IHZvaWQgMDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl91c2VyRGF0YU5vZGVzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21Nb2RlbFVzZXJEYXRhTm9kZT4oKTtcbiAgICB0aGlzLl9hcnRNZXNoVXNlckRhdGFOb2RlID0gbmV3IGNzbVZlY3RvcjxDdWJpc21Nb2RlbFVzZXJEYXRhTm9kZT4oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICpcbiAgICog44Om44O844K244O844OH44O844K/5qeL6YCg5L2T6YWN5YiX44KS6Kej5pS+44GZ44KLXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3VzZXJEYXRhTm9kZXMuZ2V0U2l6ZSgpOyArK2kpIHtcbiAgICAgIHRoaXMuX3VzZXJEYXRhTm9kZXMuc2V0KGksIG51bGwpO1xuICAgIH1cblxuICAgIHRoaXMuX3VzZXJEYXRhTm9kZXMgPSBudWxsO1xuICB9XG5cbiAgcHJpdmF0ZSBfdXNlckRhdGFOb2RlczogY3NtVmVjdG9yPEN1YmlzbU1vZGVsVXNlckRhdGFOb2RlPjsgLy8g44Om44O844K244O844OH44O844K/5qeL6YCg5L2T6YWN5YiXXG4gIHByaXZhdGUgX2FydE1lc2hVc2VyRGF0YU5vZGU6IGNzbVZlY3RvcjxDdWJpc21Nb2RlbFVzZXJEYXRhTm9kZT47IC8vIOmWsuimp+ODquOCueODiOOBruS/neaMgVxufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21tb2RlbHVzZXJkYXRhJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21Nb2RlbFVzZXJEYXRhID0gJC5DdWJpc21Nb2RlbFVzZXJEYXRhO1xuICBleHBvcnQgdHlwZSBDdWJpc21Nb2RlbFVzZXJEYXRhID0gJC5DdWJpc21Nb2RlbFVzZXJEYXRhO1xuICBleHBvcnQgY29uc3QgQ3ViaXNtTW9kZWxVc2VyRGF0YU5vZGUgPSAkLkN1YmlzbU1vZGVsVXNlckRhdGFOb2RlO1xuICBleHBvcnQgdHlwZSBDdWJpc21Nb2RlbFVzZXJEYXRhTm9kZSA9ICQuQ3ViaXNtTW9kZWxVc2VyRGF0YU5vZGU7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21JZEhhbmRsZSB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7IEN1YmlzbUZyYW1ld29yayB9IGZyb20gJy4uL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5pbXBvcnQgeyBDdWJpc21Kc29uIH0gZnJvbSAnLi4vdXRpbHMvY3ViaXNtanNvbic7XG5cbmNvbnN0IE1ldGEgPSAnTWV0YSc7XG5jb25zdCBVc2VyRGF0YUNvdW50ID0gJ1VzZXJEYXRhQ291bnQnO1xuY29uc3QgVG90YWxVc2VyRGF0YVNpemUgPSAnVG90YWxVc2VyRGF0YVNpemUnO1xuY29uc3QgVXNlckRhdGEgPSAnVXNlckRhdGEnO1xuY29uc3QgVGFyZ2V0ID0gJ1RhcmdldCc7XG5jb25zdCBJZCA9ICdJZCc7XG5jb25zdCBWYWx1ZSA9ICdWYWx1ZSc7XG5cbmV4cG9ydCBjbGFzcyBDdWJpc21Nb2RlbFVzZXJEYXRhSnNvbiB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICogQHBhcmFtIGJ1ZmZlciAgICB1c2VyZGF0YTMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxuICAgKiBAcGFyYW0gc2l6ZSAgICAgIOODkOODg+ODleOCoeOBruOCteOCpOOCulxuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKGJ1ZmZlcjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlcikge1xuICAgIHRoaXMuX2pzb24gPSBDdWJpc21Kc29uLmNyZWF0ZShidWZmZXIsIHNpemUpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgQ3ViaXNtSnNvbi5kZWxldGUodGhpcy5fanNvbik7XG4gIH1cblxuICAvKipcbiAgICog44Om44O844K244O844OH44O844K/5YCL5pWw44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g44Om44O844K244O844OH44O844K/44Gu5YCL5pWwXG4gICAqL1xuICBwdWJsaWMgZ2V0VXNlckRhdGFDb3VudCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVXNlckRhdGFDb3VudClcbiAgICAgIC50b0ludCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODpuODvOOCtuODvOODh+ODvOOCv+e3j+aWh+Wtl+WIl+aVsOOBruWPluW+l1xuICAgKlxuICAgKiBAcmV0dXJuIOODpuODvOOCtuODvOODh+ODvOOCv+e3j+aWh+Wtl+WIl+aVsFxuICAgKi9cbiAgcHVibGljIGdldFRvdGFsVXNlckRhdGFTaXplKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhUb3RhbFVzZXJEYXRhU2l6ZSlcbiAgICAgIC50b0ludCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODpuODvOOCtuODvOODh+ODvOOCv+OBruOCv+OCpOODl+OBruWPluW+l1xuICAgKlxuICAgKiBAcmV0dXJuIOODpuODvOOCtuODvOODh+ODvOOCv+OBruOCv+OCpOODl1xuICAgKi9cbiAgcHVibGljIGdldFVzZXJEYXRhVGFyZ2V0VHlwZShpOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhVc2VyRGF0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFRhcmdldClcbiAgICAgIC5nZXRSYXdTdHJpbmcoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jga7jgr/jg7zjgrLjg4Pjg4hJROOBruWPluW+l1xuICAgKlxuICAgKiBAcGFyYW0gaSDjgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jgr/jg7zjgrLjg4Pjg4hJRFxuICAgKi9cbiAgcHVibGljIGdldFVzZXJEYXRhSWQoaTogbnVtYmVyKTogQ3ViaXNtSWRIYW5kbGUge1xuICAgIHJldHVybiBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVXNlckRhdGEpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaSlcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoSWQpXG4gICAgICAgIC5nZXRSYXdTdHJpbmcoKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog44Om44O844K244O844OH44O844K/44Gu5paH5a2X5YiX44Gu5Y+W5b6XXG4gICAqXG4gICAqIEBwYXJhbSBpIOOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOODpuODvOOCtuODvOODh+ODvOOCv1xuICAgKi9cbiAgcHVibGljIGdldFVzZXJEYXRhVmFsdWUoaTogbnVtYmVyKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVXNlckRhdGEpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGkpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhWYWx1ZSlcbiAgICAgIC5nZXRSYXdTdHJpbmcoKTtcbiAgfVxuXG4gIHByaXZhdGUgX2pzb246IEN1YmlzbUpzb247XG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbW1vZGVsdXNlcmRhdGFqc29uJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21Nb2RlbFVzZXJEYXRhSnNvbiA9ICQuQ3ViaXNtTW9kZWxVc2VyRGF0YUpzb247XG4gIGV4cG9ydCB0eXBlIEN1YmlzbU1vZGVsVXNlckRhdGFKc29uID0gJC5DdWJpc21Nb2RlbFVzZXJEYXRhSnNvbjtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IEN1YmlzbUJyZWF0aCB9IGZyb20gJy4uL2VmZmVjdC9jdWJpc21icmVhdGgnO1xuaW1wb3J0IHsgQ3ViaXNtRXllQmxpbmsgfSBmcm9tICcuLi9lZmZlY3QvY3ViaXNtZXllYmxpbmsnO1xuaW1wb3J0IHsgQ3ViaXNtUG9zZSB9IGZyb20gJy4uL2VmZmVjdC9jdWJpc21wb3NlJztcbmltcG9ydCB7IEN1YmlzbUlkSGFuZGxlIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xuaW1wb3J0IHsgQ29uc3RhbnQgfSBmcm9tICcuLi9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xuaW1wb3J0IHsgQ3ViaXNtTW9kZWxNYXRyaXggfSBmcm9tICcuLi9tYXRoL2N1YmlzbW1vZGVsbWF0cml4JztcbmltcG9ydCB7IEN1YmlzbVRhcmdldFBvaW50IH0gZnJvbSAnLi4vbWF0aC9jdWJpc210YXJnZXRwb2ludCc7XG5pbXBvcnQgeyBBQ3ViaXNtTW90aW9uLCBGaW5pc2hlZE1vdGlvbkNhbGxiYWNrIH0gZnJvbSAnLi4vbW90aW9uL2FjdWJpc21tb3Rpb24nO1xuaW1wb3J0IHsgQ3ViaXNtRXhwcmVzc2lvbk1vdGlvbiB9IGZyb20gJy4uL21vdGlvbi9jdWJpc21leHByZXNzaW9ubW90aW9uJztcbmltcG9ydCB7IEN1YmlzbU1vdGlvbiB9IGZyb20gJy4uL21vdGlvbi9jdWJpc21tb3Rpb24nO1xuaW1wb3J0IHsgQ3ViaXNtTW90aW9uTWFuYWdlciB9IGZyb20gJy4uL21vdGlvbi9jdWJpc21tb3Rpb25tYW5hZ2VyJztcbmltcG9ydCB7IEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlciB9IGZyb20gJy4uL21vdGlvbi9jdWJpc21tb3Rpb25xdWV1ZW1hbmFnZXInO1xuaW1wb3J0IHsgQ3ViaXNtUGh5c2ljcyB9IGZyb20gJy4uL3BoeXNpY3MvY3ViaXNtcGh5c2ljcyc7XG5pbXBvcnQgeyBDdWJpc21SZW5kZXJlcl9XZWJHTCB9IGZyb20gJy4uL3JlbmRlcmluZy9jdWJpc21yZW5kZXJlcl93ZWJnbCc7XG5pbXBvcnQgeyBjc21TdHJpbmcgfSBmcm9tICcuLi90eXBlL2NzbXN0cmluZyc7XG5pbXBvcnQgeyBDdWJpc21Mb2dFcnJvciwgQ3ViaXNtTG9nSW5mbyB9IGZyb20gJy4uL3V0aWxzL2N1YmlzbWRlYnVnJztcbmltcG9ydCB7IEN1YmlzbU1vYyB9IGZyb20gJy4vY3ViaXNtbW9jJztcbmltcG9ydCB7IEN1YmlzbU1vZGVsIH0gZnJvbSAnLi9jdWJpc21tb2RlbCc7XG5pbXBvcnQgeyBDdWJpc21Nb2RlbFVzZXJEYXRhIH0gZnJvbSAnLi9jdWJpc21tb2RlbHVzZXJkYXRhJztcblxuLyoqXG4gKiDjg6bjg7zjgrbjg7zjgYzlrp/pmpvjgavkvb/nlKjjgZnjgovjg6Ljg4fjg6tcbiAqXG4gKiDjg6bjg7zjgrbjg7zjgYzlrp/pmpvjgavkvb/nlKjjgZnjgovjg6Ljg4fjg6vjga7ln7rlupXjgq/jg6njgrnjgILjgZPjgozjgpLntpnmib/jgZfjgabjg6bjg7zjgrbjg7zjgYzlrp/oo4XjgZnjgovjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbVVzZXJNb2RlbCB7XG4gIC8qKlxuICAgKiDliJ3mnJ/ljJbnirbmhYvjga7lj5blvpdcbiAgICpcbiAgICog5Yid5pyf5YyW44GV44KM44Gm44GE44KL54q25oWL44GL77yfXG4gICAqXG4gICAqIEByZXR1cm4gdHJ1ZSAgICAg5Yid5pyf5YyW44GV44KM44Gm44GE44KLXG4gICAqIEByZXR1cm4gZmFsc2UgICAg5Yid5pyf5YyW44GV44KM44Gm44GE44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNJbml0aWFsaXplZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5faW5pdGlhbGl6ZWQ7XG4gIH1cblxuICAvKipcbiAgICog5Yid5pyf5YyW54q25oWL44Gu6Kit5a6aXG4gICAqXG4gICAqIOWIneacn+WMlueKtuaFi+OCkuioreWumuOBmeOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gdiDliJ3mnJ/ljJbnirbmhYtcbiAgICovXG4gIHB1YmxpYyBzZXRJbml0aWFsaXplZCh2OiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5faW5pdGlhbGl6ZWQgPSB2O1xuICB9XG5cbiAgLyoqXG4gICAqIOabtOaWsOeKtuaFi+OBruWPluW+l1xuICAgKlxuICAgKiDmm7TmlrDjgZXjgozjgabjgYTjgovnirbmhYvjgYvvvJ9cbiAgICpcbiAgICogQHJldHVybiB0cnVlICAgICDmm7TmlrDjgZXjgozjgabjgYTjgotcbiAgICogQHJldHVybiBmYWxzZSAgICDmm7TmlrDjgZXjgozjgabjgYTjgarjgYRcbiAgICovXG4gIHB1YmxpYyBpc1VwZGF0aW5nKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl91cGRhdGluZztcbiAgfVxuXG4gIC8qKlxuICAgKiDmm7TmlrDnirbmhYvjga7oqK3lrppcbiAgICpcbiAgICog5pu05paw54q25oWL44KS6Kit5a6a44GZ44KLXG4gICAqXG4gICAqIEBwYXJhbSB2IOabtOaWsOeKtuaFi1xuICAgKi9cbiAgcHVibGljIHNldFVwZGF0aW5nKHY6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLl91cGRhdGluZyA9IHY7XG4gIH1cblxuICAvKipcbiAgICog44Oe44Km44K544OJ44Op44OD44Kw5oOF5aCx44Gu6Kit5a6aXG4gICAqIEBwYXJhbSDjg4njg6njg4PjgrDjgZfjgabjgYTjgovjgqvjg7zjgr3jg6vjga5Y5L2N572uXG4gICAqIEBwYXJhbSDjg4njg6njg4PjgrDjgZfjgabjgYTjgovjgqvjg7zjgr3jg6vjga5Z5L2N572uXG4gICAqL1xuICBwdWJsaWMgc2V0RHJhZ2dpbmcoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9kcmFnTWFuYWdlci5zZXQoeCwgeSk7XG4gIH1cblxuICAvKipcbiAgICog5Yqg6YCf5bqm44Gu5oOF5aCx44KS6Kit5a6a44GZ44KLXG4gICAqIEBwYXJhbSB4IFjou7jmlrnlkJHjga7liqDpgJ/luqZcbiAgICogQHBhcmFtIHkgWei7uOaWueWQkeOBruWKoOmAn+W6plxuICAgKiBAcGFyYW0geiBa6Lu45pa55ZCR44Gu5Yqg6YCf5bqmXG4gICAqL1xuICBwdWJsaWMgc2V0QWNjZWxlcmF0aW9uKHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9hY2NlbGVyYXRpb25YID0geDtcbiAgICB0aGlzLl9hY2NlbGVyYXRpb25ZID0geTtcbiAgICB0aGlzLl9hY2NlbGVyYXRpb25aID0gejtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vooYzliJfjgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDjg6Ljg4fjg6vooYzliJdcbiAgICovXG4gIHB1YmxpYyBnZXRNb2RlbE1hdHJpeCgpOiBDdWJpc21Nb2RlbE1hdHJpeCB7XG4gICAgcmV0dXJuIHRoaXMuX21vZGVsTWF0cml4O1xuICB9XG5cbiAgLyoqXG4gICAqIOS4jemAj+aYjuW6puOBruioreWumlxuICAgKiBAcGFyYW0gYSDkuI3pgI/mmI7luqZcbiAgICovXG4gIHB1YmxpYyBzZXRPcGFjaXR5KGE6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX29wYWNpdHkgPSBhO1xuICB9XG5cbiAgLyoqXG4gICAqIOS4jemAj+aYjuW6puOBruWPluW+l1xuICAgKiBAcmV0dXJuIOS4jemAj+aYjuW6plxuICAgKi9cbiAgcHVibGljIGdldE9wYWNpdHkoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fb3BhY2l0eTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vjg4fjg7zjgr/jgpLoqq3jgb/ovrzjgoBcbiAgICpcbiAgICogQHBhcmFtIGJ1ZmZlciAgICBtb2Mz44OV44Kh44Kk44Or44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXG4gICAqL1xuICBwdWJsaWMgbG9hZE1vZGVsKGJ1ZmZlcjogQXJyYXlCdWZmZXIpIHtcbiAgICB0aGlzLl9tb2MgPSBDdWJpc21Nb2MuY3JlYXRlKGJ1ZmZlcik7XG5cbiAgICBpZiAodGhpcy5fbW9jID09IG51bGwpIHtcbiAgICAgIEN1YmlzbUxvZ0Vycm9yKCdGYWlsZWQgdG8gQ3ViaXNtTW9jLmNyZWF0ZSgpLicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX21vZGVsID0gdGhpcy5fbW9jLmNyZWF0ZU1vZGVsKCk7XG5cbiAgICBpZiAodGhpcy5fbW9kZWwgPT0gbnVsbCkge1xuICAgICAgQ3ViaXNtTG9nRXJyb3IoJ0ZhaWxlZCB0byBDcmVhdGVNb2RlbCgpLicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX21vZGVsLnNhdmVQYXJhbWV0ZXJzKCk7XG4gICAgdGhpcy5fbW9kZWxNYXRyaXggPSBuZXcgQ3ViaXNtTW9kZWxNYXRyaXgoXG4gICAgICB0aGlzLl9tb2RlbC5nZXRDYW52YXNXaWR0aCgpLFxuICAgICAgdGhpcy5fbW9kZWwuZ2V0Q2FudmFzSGVpZ2h0KClcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+ODh+ODvOOCv+OCkuiqreOBv+i+vOOCgFxuICAgKiBAcGFyYW0gYnVmZmVyIG1vdGlvbjMuanNvbuODleOCoeOCpOODq+OBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxuICAgKiBAcGFyYW0gc2l6ZSDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICogQHBhcmFtIG5hbWUg44Oi44O844K344On44Oz44Gu5ZCN5YmNXG4gICAqIEBwYXJhbSBvbkZpbmlzaGVkTW90aW9uSGFuZGxlciDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/ntYLkuobmmYLjgavlkbzjgbPlh7rjgZXjgozjgovjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbBcbiAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjgq/jg6njgrlcbiAgICovXG4gIHB1YmxpYyBsb2FkTW90aW9uID0gKFxuICAgIGJ1ZmZlcjogQXJyYXlCdWZmZXIsXG4gICAgc2l6ZTogbnVtYmVyLFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBvbkZpbmlzaGVkTW90aW9uSGFuZGxlcj86IEZpbmlzaGVkTW90aW9uQ2FsbGJhY2tcbiAgKSA9PiBDdWJpc21Nb3Rpb24uY3JlYXRlKGJ1ZmZlciwgc2l6ZSwgb25GaW5pc2hlZE1vdGlvbkhhbmRsZXIpO1xuXG4gIC8qKlxuICAgKiDooajmg4Xjg4fjg7zjgr/jga7oqq3jgb/ovrzjgb9cbiAgICogQHBhcmFtIGJ1ZmZlciBleHDjg5XjgqHjgqTjg6vjgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcbiAgICogQHBhcmFtIHNpemUg44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAqIEBwYXJhbSBuYW1lIOihqOaDheOBruWQjeWJjVxuICAgKi9cbiAgcHVibGljIGxvYWRFeHByZXNzaW9uKFxuICAgIGJ1ZmZlcjogQXJyYXlCdWZmZXIsXG4gICAgc2l6ZTogbnVtYmVyLFxuICAgIG5hbWU6IHN0cmluZ1xuICApOiBBQ3ViaXNtTW90aW9uIHtcbiAgICByZXR1cm4gQ3ViaXNtRXhwcmVzc2lvbk1vdGlvbi5jcmVhdGUoYnVmZmVyLCBzaXplKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg53jg7zjgrrjg4fjg7zjgr/jga7oqq3jgb/ovrzjgb9cbiAgICogQHBhcmFtIGJ1ZmZlciBwb3NlMy5qc29u44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXG4gICAqIEBwYXJhbSBzaXplIOODkOODg+ODleOCoeOBruOCteOCpOOCulxuICAgKi9cbiAgcHVibGljIGxvYWRQb3NlKGJ1ZmZlcjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX3Bvc2UgPSBDdWJpc21Qb3NlLmNyZWF0ZShidWZmZXIsIHNpemUpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OBq+S7mOWxnuOBmeOCi+ODpuODvOOCtuODvOODh+ODvOOCv+OCkuiqreOBv+i+vOOCgFxuICAgKiBAcGFyYW0gYnVmZmVyIHVzZXJkYXRhMy5qc29u44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXG4gICAqIEBwYXJhbSBzaXplIOODkOODg+ODleOCoeOBruOCteOCpOOCulxuICAgKi9cbiAgcHVibGljIGxvYWRVc2VyRGF0YShidWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9tb2RlbFVzZXJEYXRhID0gQ3ViaXNtTW9kZWxVc2VyRGF0YS5jcmVhdGUoYnVmZmVyLCBzaXplKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDniannkIbmvJTnrpfjg4fjg7zjgr/jga7oqq3jgb/ovrzjgb9cbiAgICogQHBhcmFtIGJ1ZmZlciAgcGh5c2ljczMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxuICAgKiBAcGFyYW0gc2l6ZSAgICDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICovXG4gIHB1YmxpYyBsb2FkUGh5c2ljcyhidWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9waHlzaWNzID0gQ3ViaXNtUGh5c2ljcy5jcmVhdGUoYnVmZmVyLCBzaXplKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlvZPjgZ/jgorliKTlrprjga7lj5blvpdcbiAgICogQHBhcmFtIGRyYXdhYmxlSWQg5qSc6Ki844GX44Gf44GERHJhd2FibGXjga5JRFxuICAgKiBAcGFyYW0gcG9pbnRYIFjkvY3nva5cbiAgICogQHBhcmFtIHBvaW50WSBZ5L2N572uXG4gICAqIEByZXR1cm4gdHJ1ZSDjg5Ljg4Pjg4jjgZfjgabjgYTjgotcbiAgICogQHJldHVybiBmYWxzZSDjg5Ljg4Pjg4jjgZfjgabjgYTjgarjgYRcbiAgICovXG4gIHB1YmxpYyBpc0hpdChcbiAgICBkcmF3YWJsZUlkOiBDdWJpc21JZEhhbmRsZSxcbiAgICBwb2ludFg6IG51bWJlcixcbiAgICBwb2ludFk6IG51bWJlclxuICApOiBib29sZWFuIHtcbiAgICBjb25zdCBkcmF3SW5kZXg6IG51bWJlciA9IHRoaXMuX21vZGVsLmdldERyYXdhYmxlSW5kZXgoZHJhd2FibGVJZCk7XG5cbiAgICBpZiAoZHJhd0luZGV4IDwgMCkge1xuICAgICAgcmV0dXJuIGZhbHNlOyAvLyDlrZjlnKjjgZfjgarjgYTloLTlkIjjga9mYWxzZVxuICAgIH1cblxuICAgIGNvbnN0IGNvdW50OiBudW1iZXIgPSB0aGlzLl9tb2RlbC5nZXREcmF3YWJsZVZlcnRleENvdW50KGRyYXdJbmRleCk7XG4gICAgY29uc3QgdmVydGljZXM6IEZsb2F0MzJBcnJheSA9IHRoaXMuX21vZGVsLmdldERyYXdhYmxlVmVydGljZXMoZHJhd0luZGV4KTtcblxuICAgIGxldCBsZWZ0OiBudW1iZXIgPSB2ZXJ0aWNlc1swXTtcbiAgICBsZXQgcmlnaHQ6IG51bWJlciA9IHZlcnRpY2VzWzBdO1xuICAgIGxldCB0b3A6IG51bWJlciA9IHZlcnRpY2VzWzFdO1xuICAgIGxldCBib3R0b206IG51bWJlciA9IHZlcnRpY2VzWzFdO1xuXG4gICAgZm9yIChsZXQgaiA9IDE7IGogPCBjb3VudDsgKytqKSB7XG4gICAgICBjb25zdCB4ID0gdmVydGljZXNbQ29uc3RhbnQudmVydGV4T2Zmc2V0ICsgaiAqIENvbnN0YW50LnZlcnRleFN0ZXBdO1xuICAgICAgY29uc3QgeSA9IHZlcnRpY2VzW0NvbnN0YW50LnZlcnRleE9mZnNldCArIGogKiBDb25zdGFudC52ZXJ0ZXhTdGVwICsgMV07XG5cbiAgICAgIGlmICh4IDwgbGVmdCkge1xuICAgICAgICBsZWZ0ID0geDsgLy8gTWluIHhcbiAgICAgIH1cblxuICAgICAgaWYgKHggPiByaWdodCkge1xuICAgICAgICByaWdodCA9IHg7IC8vIE1heCB4XG4gICAgICB9XG5cbiAgICAgIGlmICh5IDwgdG9wKSB7XG4gICAgICAgIHRvcCA9IHk7IC8vIE1pbiB5XG4gICAgICB9XG5cbiAgICAgIGlmICh5ID4gYm90dG9tKSB7XG4gICAgICAgIGJvdHRvbSA9IHk7IC8vIE1heCB5XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgdHg6IG51bWJlciA9IHRoaXMuX21vZGVsTWF0cml4LmludmVydFRyYW5zZm9ybVgocG9pbnRYKTtcbiAgICBjb25zdCB0eTogbnVtYmVyID0gdGhpcy5fbW9kZWxNYXRyaXguaW52ZXJ0VHJhbnNmb3JtWShwb2ludFkpO1xuXG4gICAgcmV0dXJuIGxlZnQgPD0gdHggJiYgdHggPD0gcmlnaHQgJiYgdG9wIDw9IHR5ICYmIHR5IDw9IGJvdHRvbTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vjga7lj5blvpdcbiAgICogQHJldHVybiDjg6Ljg4fjg6tcbiAgICovXG4gIHB1YmxpYyBnZXRNb2RlbCgpOiBDdWJpc21Nb2RlbCB7XG4gICAgcmV0dXJuIHRoaXMuX21vZGVsO1xuICB9XG5cbiAgLyoqXG4gICAqIOODrOODs+ODgOODqeOBruWPluW+l1xuICAgKiBAcmV0dXJuIOODrOODs+ODgOODqVxuICAgKi9cbiAgcHVibGljIGdldFJlbmRlcmVyKCk6IEN1YmlzbVJlbmRlcmVyX1dlYkdMIHtcbiAgICByZXR1cm4gdGhpcy5fcmVuZGVyZXI7XG4gIH1cblxuICAvKipcbiAgICog44Os44Oz44OA44Op44KS5L2c5oiQ44GX44Gm5Yid5pyf5YyW44KS5a6f6KGM44GZ44KLXG4gICAqL1xuICBwdWJsaWMgY3JlYXRlUmVuZGVyZXIoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX3JlbmRlcmVyKSB7XG4gICAgICB0aGlzLmRlbGV0ZVJlbmRlcmVyKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fcmVuZGVyZXIgPSBuZXcgQ3ViaXNtUmVuZGVyZXJfV2ViR0woKTtcbiAgICB0aGlzLl9yZW5kZXJlci5pbml0aWFsaXplKHRoaXMuX21vZGVsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6zjg7Pjg4Djg6njga7op6PmlL5cbiAgICovXG4gIHB1YmxpYyBkZWxldGVSZW5kZXJlcigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fcmVuZGVyZXIgIT0gbnVsbCkge1xuICAgICAgdGhpcy5fcmVuZGVyZXIucmVsZWFzZSgpO1xuICAgICAgdGhpcy5fcmVuZGVyZXIgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjgqTjg5njg7Pjg4jnmbrngavmmYLjga7mqJnmupblh6bnkIZcbiAgICpcbiAgICogRXZlbnTjgYzlho3nlJ/lh6bnkIbmmYLjgavjgYLjgaPjgZ/loLTlkIjjga7lh6bnkIbjgpLjgZnjgovjgIJcbiAgICog57aZ5om/44Gn5LiK5pu444GN44GZ44KL44GT44Go44KS5oOz5a6a44GX44Gm44GE44KL44CCXG4gICAqIOS4iuabuOOBjeOBl+OBquOBhOWgtOWQiOOBr+ODreOCsOWHuuWKm+OCkuOBmeOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gZXZlbnRWYWx1ZSDnmbrngavjgZfjgZ/jgqTjg5njg7Pjg4jjga7mloflrZfliJfjg4fjg7zjgr9cbiAgICovXG4gIHB1YmxpYyBtb3Rpb25FdmVudEZpcmVkKGV2ZW50VmFsdWU6IGNzbVN0cmluZyk6IHZvaWQge1xuICAgIEN1YmlzbUxvZ0luZm8oJ3swfScsIGV2ZW50VmFsdWUucyk7XG4gIH1cblxuICAvKipcbiAgICog44Kk44OZ44Oz44OI55So44Gu44Kz44O844Or44OQ44OD44KvXG4gICAqXG4gICAqIEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlcuOBq+OCpOODmeODs+ODiOeUqOOBq+eZu+mMsuOBmeOCi+OBn+OCgeOBrkNhbGxiYWNr44CCXG4gICAqIEN1YmlzbVVzZXJNb2RlbOOBrue2meaJv+WFiOOBrkV2ZW50RmlyZWTjgpLlkbzjgbbjgIJcbiAgICpcbiAgICogQHBhcmFtIGNhbGxlciDnmbrngavjgZfjgZ/jgqTjg5njg7Pjg4jjgpLnrqHnkIbjgZfjgabjgYTjgZ/jg6Ljg7zjgrfjg6fjg7Pjg57jg43jg7zjgrjjg6Pjg7zjgIHmr5TovIPnlKhcbiAgICogQHBhcmFtIGV2ZW50VmFsdWUg55m654Gr44GX44Gf44Kk44OZ44Oz44OI44Gu5paH5a2X5YiX44OH44O844K/XG4gICAqIEBwYXJhbSBjdXN0b21EYXRhIEN1YmlzbVVzZXJNb2RlbOOCkue2meaJv+OBl+OBn+OCpOODs+OCueOCv+ODs+OCueOCkuaDs+WumlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBjdWJpc21EZWZhdWx0TW90aW9uRXZlbnRDYWxsYmFjayhcbiAgICBjYWxsZXI6IEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlcixcbiAgICBldmVudFZhbHVlOiBjc21TdHJpbmcsXG4gICAgY3VzdG9tRGF0YTogQ3ViaXNtVXNlck1vZGVsXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IG1vZGVsOiBDdWJpc21Vc2VyTW9kZWwgPSBjdXN0b21EYXRhO1xuXG4gICAgaWYgKG1vZGVsICE9IG51bGwpIHtcbiAgICAgIG1vZGVsLm1vdGlvbkV2ZW50RmlyZWQoZXZlbnRWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIC8vIOWQhOWkieaVsOWIneacn+WMllxuICAgIHRoaXMuX21vYyA9IG51bGw7XG4gICAgdGhpcy5fbW9kZWwgPSBudWxsO1xuICAgIHRoaXMuX21vdGlvbk1hbmFnZXIgPSBudWxsO1xuICAgIHRoaXMuX2V4cHJlc3Npb25NYW5hZ2VyID0gbnVsbDtcbiAgICB0aGlzLl9leWVCbGluayA9IG51bGw7XG4gICAgdGhpcy5fYnJlYXRoID0gbnVsbDtcbiAgICB0aGlzLl9tb2RlbE1hdHJpeCA9IG51bGw7XG4gICAgdGhpcy5fcG9zZSA9IG51bGw7XG4gICAgdGhpcy5fZHJhZ01hbmFnZXIgPSBudWxsO1xuICAgIHRoaXMuX3BoeXNpY3MgPSBudWxsO1xuICAgIHRoaXMuX21vZGVsVXNlckRhdGEgPSBudWxsO1xuICAgIHRoaXMuX2luaXRpYWxpemVkID0gZmFsc2U7XG4gICAgdGhpcy5fdXBkYXRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9vcGFjaXR5ID0gMS4wO1xuICAgIHRoaXMuX2xpcHN5bmMgPSB0cnVlO1xuICAgIHRoaXMuX2xhc3RMaXBTeW5jVmFsdWUgPSAwLjA7XG4gICAgdGhpcy5fZHJhZ1ggPSAwLjA7XG4gICAgdGhpcy5fZHJhZ1kgPSAwLjA7XG4gICAgdGhpcy5fYWNjZWxlcmF0aW9uWCA9IDAuMDtcbiAgICB0aGlzLl9hY2NlbGVyYXRpb25ZID0gMC4wO1xuICAgIHRoaXMuX2FjY2VsZXJhdGlvblogPSAwLjA7XG4gICAgdGhpcy5fZGVidWdNb2RlID0gZmFsc2U7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSBudWxsO1xuXG4gICAgLy8g44Oi44O844K344On44Oz44Oe44ON44O844K444Oj44O844KS5L2c5oiQXG4gICAgdGhpcy5fbW90aW9uTWFuYWdlciA9IG5ldyBDdWJpc21Nb3Rpb25NYW5hZ2VyKCk7XG4gICAgdGhpcy5fbW90aW9uTWFuYWdlci5zZXRFdmVudENhbGxiYWNrKFxuICAgICAgQ3ViaXNtVXNlck1vZGVsLmN1YmlzbURlZmF1bHRNb3Rpb25FdmVudENhbGxiYWNrLFxuICAgICAgdGhpc1xuICAgICk7XG5cbiAgICAvLyDooajmg4Xjg57jg43jg7zjgrjjg6Pjg7zjgpLkvZzmiJBcbiAgICB0aGlzLl9leHByZXNzaW9uTWFuYWdlciA9IG5ldyBDdWJpc21Nb3Rpb25NYW5hZ2VyKCk7XG5cbiAgICAvLyDjg4njg6njg4PjgrDjgavjgojjgovjgqLjg4vjg6Hjg7zjgrfjg6fjg7NcbiAgICB0aGlzLl9kcmFnTWFuYWdlciA9IG5ldyBDdWJpc21UYXJnZXRQb2ludCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODh+OCueODiOODqeOCr+OCv+OBq+ebuOW9k+OBmeOCi+WHpueQhlxuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKSB7XG4gICAgaWYgKHRoaXMuX21vdGlvbk1hbmFnZXIgIT0gbnVsbCkge1xuICAgICAgdGhpcy5fbW90aW9uTWFuYWdlci5yZWxlYXNlKCk7XG4gICAgICB0aGlzLl9tb3Rpb25NYW5hZ2VyID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fZXhwcmVzc2lvbk1hbmFnZXIgIT0gbnVsbCkge1xuICAgICAgdGhpcy5fZXhwcmVzc2lvbk1hbmFnZXIucmVsZWFzZSgpO1xuICAgICAgdGhpcy5fZXhwcmVzc2lvbk1hbmFnZXIgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9tb2MgIT0gbnVsbCkge1xuICAgICAgdGhpcy5fbW9jLmRlbGV0ZU1vZGVsKHRoaXMuX21vZGVsKTtcbiAgICAgIHRoaXMuX21vYy5yZWxlYXNlKCk7XG4gICAgICB0aGlzLl9tb2MgPSBudWxsO1xuICAgIH1cblxuICAgIHRoaXMuX21vZGVsTWF0cml4ID0gbnVsbDtcblxuICAgIEN1YmlzbVBvc2UuZGVsZXRlKHRoaXMuX3Bvc2UpO1xuICAgIEN1YmlzbUV5ZUJsaW5rLmRlbGV0ZSh0aGlzLl9leWVCbGluayk7XG4gICAgQ3ViaXNtQnJlYXRoLmRlbGV0ZSh0aGlzLl9icmVhdGgpO1xuXG4gICAgdGhpcy5fZHJhZ01hbmFnZXIgPSBudWxsO1xuXG4gICAgQ3ViaXNtUGh5c2ljcy5kZWxldGUodGhpcy5fcGh5c2ljcyk7XG4gICAgQ3ViaXNtTW9kZWxVc2VyRGF0YS5kZWxldGUodGhpcy5fbW9kZWxVc2VyRGF0YSk7XG5cbiAgICB0aGlzLmRlbGV0ZVJlbmRlcmVyKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgX21vYzogQ3ViaXNtTW9jOyAvLyBNb2Pjg4fjg7zjgr9cbiAgcHJvdGVjdGVkIF9tb2RlbDogQ3ViaXNtTW9kZWw7IC8vIE1vZGVs44Kk44Oz44K544K/44Oz44K5XG5cbiAgcHJvdGVjdGVkIF9tb3Rpb25NYW5hZ2VyOiBDdWJpc21Nb3Rpb25NYW5hZ2VyOyAvLyDjg6Ljg7zjgrfjg6fjg7PnrqHnkIZcbiAgcHJvdGVjdGVkIF9leHByZXNzaW9uTWFuYWdlcjogQ3ViaXNtTW90aW9uTWFuYWdlcjsgLy8g6KGo5oOF566h55CGXG4gIHByb3RlY3RlZCBfZXllQmxpbms6IEN1YmlzbUV5ZUJsaW5rOyAvLyDoh6rli5Xjgb7jgbDjgZ/jgY1cbiAgcHJvdGVjdGVkIF9icmVhdGg6IEN1YmlzbUJyZWF0aDsgLy8g5ZG85ZC4XG4gIHByb3RlY3RlZCBfbW9kZWxNYXRyaXg6IEN1YmlzbU1vZGVsTWF0cml4OyAvLyDjg6Ljg4fjg6vooYzliJdcbiAgcHJvdGVjdGVkIF9wb3NlOiBDdWJpc21Qb3NlOyAvLyDjg53jg7zjgrrnrqHnkIZcbiAgcHJvdGVjdGVkIF9kcmFnTWFuYWdlcjogQ3ViaXNtVGFyZ2V0UG9pbnQ7IC8vIOODnuOCpuOCueODieODqeODg+OCsFxuICBwcm90ZWN0ZWQgX3BoeXNpY3M6IEN1YmlzbVBoeXNpY3M7IC8vIOeJqeeQhua8lOeul1xuICBwcm90ZWN0ZWQgX21vZGVsVXNlckRhdGE6IEN1YmlzbU1vZGVsVXNlckRhdGE7IC8vIOODpuODvOOCtuODvOODh+ODvOOCv1xuXG4gIHByb3RlY3RlZCBfaW5pdGlhbGl6ZWQ6IGJvb2xlYW47IC8vIOWIneacn+WMluOBleOCjOOBn+OBi+OBqeOBhuOBi1xuICBwcm90ZWN0ZWQgX3VwZGF0aW5nOiBib29sZWFuOyAvLyDmm7TmlrDjgZXjgozjgZ/jgYvjganjgYbjgYtcbiAgcHJvdGVjdGVkIF9vcGFjaXR5OiBudW1iZXI7IC8vIOS4jemAj+aYjuW6plxuICBwcm90ZWN0ZWQgX2xpcHN5bmM6IGJvb2xlYW47IC8vIOODquODg+ODl+OCt+ODs+OCr+OBmeOCi+OBi+OBqeOBhuOBi1xuICBwcm90ZWN0ZWQgX2xhc3RMaXBTeW5jVmFsdWU6IG51bWJlcjsgLy8g5pyA5b6M44Gu44Oq44OD44OX44K344Oz44Kv44Gu5Yi25b6h5ZywXG4gIHByb3RlY3RlZCBfZHJhZ1g6IG51bWJlcjsgLy8g44Oe44Km44K544OJ44Op44OD44Kw44GuWOS9jee9rlxuICBwcm90ZWN0ZWQgX2RyYWdZOiBudW1iZXI7IC8vIOODnuOCpuOCueODieODqeODg+OCsOOBrlnkvY3nva5cbiAgcHJvdGVjdGVkIF9hY2NlbGVyYXRpb25YOiBudW1iZXI7IC8vIFjou7jmlrnlkJHjga7liqDpgJ/luqZcbiAgcHJvdGVjdGVkIF9hY2NlbGVyYXRpb25ZOiBudW1iZXI7IC8vIFnou7jmlrnlkJHjga7liqDpgJ/luqZcbiAgcHJvdGVjdGVkIF9hY2NlbGVyYXRpb25aOiBudW1iZXI7IC8vIFrou7jmlrnlkJHjga7liqDpgJ/luqZcbiAgcHJvdGVjdGVkIF9kZWJ1Z01vZGU6IGJvb2xlYW47IC8vIOODh+ODkOODg+OCsOODouODvOODieOBi+OBqeOBhuOBi1xuXG4gIHByaXZhdGUgX3JlbmRlcmVyOiBDdWJpc21SZW5kZXJlcl9XZWJHTDsgLy8g44Os44Oz44OA44OpXG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbXVzZXJtb2RlbCc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtVXNlck1vZGVsID0gJC5DdWJpc21Vc2VyTW9kZWw7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbVVzZXJNb2RlbCA9ICQuQ3ViaXNtVXNlck1vZGVsO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQ3ViaXNtTWF0aCB9IGZyb20gJy4uL21hdGgvY3ViaXNtbWF0aCc7XG5pbXBvcnQgeyBDdWJpc21Nb2RlbCB9IGZyb20gJy4uL21vZGVsL2N1YmlzbW1vZGVsJztcbmltcG9ydCB7IGNzbVN0cmluZyB9IGZyb20gJy4uL3R5cGUvY3Ntc3RyaW5nJztcbmltcG9ydCB7IGNzbVZlY3RvciB9IGZyb20gJy4uL3R5cGUvY3NtdmVjdG9yJztcbmltcG9ydCB7IENTTV9BU1NFUlQgfSBmcm9tICcuLi91dGlscy9jdWJpc21kZWJ1Zyc7XG5pbXBvcnQgeyBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5IH0gZnJvbSAnLi9jdWJpc21tb3Rpb25xdWV1ZWVudHJ5JztcblxuLyoqIOODouODvOOCt+ODp+ODs+WGjeeUn+e1guS6huOCs+ODvOODq+ODkOODg+OCr+mWouaVsOWumue+qSAqL1xuZXhwb3J0IHR5cGUgRmluaXNoZWRNb3Rpb25DYWxsYmFjayA9IChzZWxmOiBBQ3ViaXNtTW90aW9uKSA9PiB2b2lkO1xuXG4vKipcbiAqIOODouODvOOCt+ODp+ODs+OBruaKveixoeWfuuW6leOCr+ODqeOCuVxuICpcbiAqIOODouODvOOCt+ODp+ODs+OBruaKveixoeWfuuW6leOCr+ODqeOCueOAgk1vdGlvblF1ZXVlTWFuYWdlcuOBq+OCiOOBo+OBpuODouODvOOCt+ODp+ODs+OBruWGjeeUn+OCkueuoeeQhuOBmeOCi+OAglxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQUN1YmlzbU1vdGlvbiB7XG4gIC8qKlxuICAgKiDjgqTjg7Pjgrnjgr/jg7Pjgrnjga7noLTmo4RcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZGVsZXRlKG1vdGlvbjogQUN1YmlzbU1vdGlvbik6IHZvaWQge1xuICAgIG1vdGlvbi5yZWxlYXNlKCk7XG4gICAgbW90aW9uID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9mYWRlSW5TZWNvbmRzID0gLTEuMDtcbiAgICB0aGlzLl9mYWRlT3V0U2Vjb25kcyA9IC0xLjA7XG4gICAgdGhpcy5fd2VpZ2h0ID0gMS4wO1xuICAgIHRoaXMuX29mZnNldFNlY29uZHMgPSAwLjA7IC8vIOWGjeeUn+OBrumWi+Wni+aZguWIu1xuICAgIHRoaXMuX2ZpcmVkRXZlbnRWYWx1ZXMgPSBuZXcgY3NtVmVjdG9yPGNzbVN0cmluZz4oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIHRoaXMuX3dlaWdodCA9IDAuMDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vjga7jg5Hjg6njg6Hjg7zjgr9cbiAgICogQHBhcmFtIG1vZGVsIOWvvuixoeOBruODouODh+ODq1xuICAgKiBAcGFyYW0gbW90aW9uUXVldWVFbnRyeSBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXLjgafnrqHnkIbjgZXjgozjgabjgYTjgovjg6Ljg7zjgrfjg6fjg7NcbiAgICogQHBhcmFtIHVzZXJUaW1lU2Vjb25kcyDjg4fjg6vjgr/mmYLplpPjga7nqY3nrpflgKRb56eSXVxuICAgKi9cbiAgcHVibGljIHVwZGF0ZVBhcmFtZXRlcnMoXG4gICAgbW9kZWw6IEN1YmlzbU1vZGVsLFxuICAgIG1vdGlvblF1ZXVlRW50cnk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnksXG4gICAgdXNlclRpbWVTZWNvbmRzOiBudW1iZXJcbiAgKTogdm9pZCB7XG4gICAgaWYgKCFtb3Rpb25RdWV1ZUVudHJ5LmlzQXZhaWxhYmxlKCkgfHwgbW90aW9uUXVldWVFbnRyeS5pc0ZpbmlzaGVkKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIW1vdGlvblF1ZXVlRW50cnkuaXNTdGFydGVkKCkpIHtcbiAgICAgIG1vdGlvblF1ZXVlRW50cnkuc2V0SXNTdGFydGVkKHRydWUpO1xuICAgICAgbW90aW9uUXVldWVFbnRyeS5zZXRTdGFydFRpbWUodXNlclRpbWVTZWNvbmRzIC0gdGhpcy5fb2Zmc2V0U2Vjb25kcyk7IC8vIOODouODvOOCt+ODp+ODs+OBrumWi+Wni+aZguWIu+OCkuiomOmMslxuICAgICAgbW90aW9uUXVldWVFbnRyeS5zZXRGYWRlSW5TdGFydFRpbWUodXNlclRpbWVTZWNvbmRzKTsgLy8g44OV44Kn44O844OJ44Kk44Oz44Gu6ZaL5aeL5pmC5Yi7XG5cbiAgICAgIGNvbnN0IGR1cmF0aW9uOiBudW1iZXIgPSB0aGlzLmdldER1cmF0aW9uKCk7XG5cbiAgICAgIGlmIChtb3Rpb25RdWV1ZUVudHJ5LmdldEVuZFRpbWUoKSA8IDApIHtcbiAgICAgICAgLy8g6ZaL5aeL44GX44Gm44GE44Gq44GE44GG44Gh44Gr57WC5LqG6Kit5a6a44GX44Gm44GE44KL5aC05ZCI44GM44GC44KL44CCXG4gICAgICAgIG1vdGlvblF1ZXVlRW50cnkuc2V0RW5kVGltZShcbiAgICAgICAgICBkdXJhdGlvbiA8PSAwID8gLTEgOiBtb3Rpb25RdWV1ZUVudHJ5LmdldFN0YXJ0VGltZSgpICsgZHVyYXRpb25cbiAgICAgICAgKTtcbiAgICAgICAgLy8gZHVyYXRpb24gPT0gLTEg44Gu5aC05ZCI44Gv44Or44O844OX44GZ44KLXG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IGZhZGVXZWlnaHQ6IG51bWJlciA9IHRoaXMuX3dlaWdodDsgLy8g54++5Zyo44Gu5YCk44Go5o6b44GR5ZCI44KP44Gb44KL5Ymy5ZCIXG5cbiAgICAvLy0tLS0g44OV44Kn44O844OJ44Kk44Oz44O744Ki44Km44OI44Gu5Yem55CGIC0tLS1cbiAgICAvLyDljZjntJTjgarjgrXjgqTjg7PplqLmlbDjgafjgqTjg7zjgrjjg7PjgrDjgZnjgotcbiAgICBjb25zdCBmYWRlSW46IG51bWJlciA9XG4gICAgICB0aGlzLl9mYWRlSW5TZWNvbmRzID09IDAuMFxuICAgICAgICA/IDEuMFxuICAgICAgICA6IEN1YmlzbU1hdGguZ2V0RWFzaW5nU2luZShcbiAgICAgICAgICAgICh1c2VyVGltZVNlY29uZHMgLSBtb3Rpb25RdWV1ZUVudHJ5LmdldEZhZGVJblN0YXJ0VGltZSgpKSAvXG4gICAgICAgICAgICAgIHRoaXMuX2ZhZGVJblNlY29uZHNcbiAgICAgICAgICApO1xuXG4gICAgY29uc3QgZmFkZU91dDogbnVtYmVyID1cbiAgICAgIHRoaXMuX2ZhZGVPdXRTZWNvbmRzID09IDAuMCB8fCBtb3Rpb25RdWV1ZUVudHJ5LmdldEVuZFRpbWUoKSA8IDAuMFxuICAgICAgICA/IDEuMFxuICAgICAgICA6IEN1YmlzbU1hdGguZ2V0RWFzaW5nU2luZShcbiAgICAgICAgICAgIChtb3Rpb25RdWV1ZUVudHJ5LmdldEVuZFRpbWUoKSAtIHVzZXJUaW1lU2Vjb25kcykgL1xuICAgICAgICAgICAgICB0aGlzLl9mYWRlT3V0U2Vjb25kc1xuICAgICAgICAgICk7XG5cbiAgICBmYWRlV2VpZ2h0ID0gZmFkZVdlaWdodCAqIGZhZGVJbiAqIGZhZGVPdXQ7XG5cbiAgICBtb3Rpb25RdWV1ZUVudHJ5LnNldFN0YXRlKHVzZXJUaW1lU2Vjb25kcywgZmFkZVdlaWdodCk7XG5cbiAgICBDU01fQVNTRVJUKDAuMCA8PSBmYWRlV2VpZ2h0ICYmIGZhZGVXZWlnaHQgPD0gMS4wKTtcblxuICAgIC8vLS0tLSDlhajjgabjga7jg5Hjg6njg6Hjg7zjgr9JROOCkuODq+ODvOODl+OBmeOCiyAtLS0tXG4gICAgdGhpcy5kb1VwZGF0ZVBhcmFtZXRlcnMoXG4gICAgICBtb2RlbCxcbiAgICAgIHVzZXJUaW1lU2Vjb25kcyxcbiAgICAgIGZhZGVXZWlnaHQsXG4gICAgICBtb3Rpb25RdWV1ZUVudHJ5XG4gICAgKTtcblxuICAgIC8vIOW+jOWHpueQhlxuICAgIC8vIOe1guS6huaZguWIu+OCkumBjuOBjuOBn+OCiee1guS6huODleODqeOCsOOCkueri+OBpuOCiyhDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXIpXG4gICAgaWYgKFxuICAgICAgbW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgPiAwICYmXG4gICAgICBtb3Rpb25RdWV1ZUVudHJ5LmdldEVuZFRpbWUoKSA8IHVzZXJUaW1lU2Vjb25kc1xuICAgICkge1xuICAgICAgbW90aW9uUXVldWVFbnRyeS5zZXRJc0ZpbmlzaGVkKHRydWUpOyAvLyDntYLkuoZcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44OV44Kn44O844OJ44Kk44Oz44Gu5pmC6ZaT44KS6Kit5a6a44GZ44KLXG4gICAqIEBwYXJhbSBmYWRlSW5TZWNvbmRzIOODleOCp+ODvOODieOCpOODs+OBq+OBi+OBi+OCi+aZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgc2V0RmFkZUluVGltZShmYWRlSW5TZWNvbmRzOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9mYWRlSW5TZWNvbmRzID0gZmFkZUluU2Vjb25kcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Xjgqfjg7zjg4njgqLjgqbjg4jjga7mmYLplpPjgpLoqK3lrprjgZnjgotcbiAgICogQHBhcmFtIGZhZGVPdXRTZWNvbmRzIOODleOCp+ODvOODieOCouOCpuODiOOBq+OBi+OBi+OCi+aZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgc2V0RmFkZU91dFRpbWUoZmFkZU91dFNlY29uZHM6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX2ZhZGVPdXRTZWNvbmRzID0gZmFkZU91dFNlY29uZHM7XG4gIH1cblxuICAvKipcbiAgICog44OV44Kn44O844OJ44Ki44Km44OI44Gr44GL44GL44KL5pmC6ZaT44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g44OV44Kn44O844OJ44Ki44Km44OI44Gr44GL44GL44KL5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyBnZXRGYWRlT3V0VGltZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9mYWRlT3V0U2Vjb25kcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Xjgqfjg7zjg4njgqTjg7PjgavjgYvjgYvjgovmmYLplpPjga7lj5blvpdcbiAgICogQHJldHVybiDjg5Xjgqfjg7zjg4njgqTjg7PjgavjgYvjgYvjgovmmYLplpNb56eSXVxuICAgKi9cbiAgcHVibGljIGdldEZhZGVJblRpbWUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fZmFkZUluU2Vjb25kcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7PpgannlKjjga7ph43jgb/jga7oqK3lrppcbiAgICogQHBhcmFtIHdlaWdodCDph43jgb/vvIgwLjAgLSAxLjDvvIlcbiAgICovXG4gIHB1YmxpYyBzZXRXZWlnaHQod2VpZ2h0OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl93ZWlnaHQgPSB3ZWlnaHQ7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz6YGp55So44Gu6YeN44G/44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g6YeN44G/77yIMC4wIC0gMS4w77yJXG4gICAqL1xuICBwdWJsaWMgZ2V0V2VpZ2h0KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3dlaWdodDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7plbfjgZXjga7lj5blvpdcbiAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjga7plbfjgZVb56eSXVxuICAgKlxuICAgKiBAbm90ZSDjg6vjg7zjg5fjga7mmYLjga/jgIwtMeOAjeOAglxuICAgKiAgICAgICDjg6vjg7zjg5fjgafjgarjgYTloLTlkIjjga/jgIHjgqrjg7zjg5Djg7zjg6njgqTjg4njgZnjgovjgIJcbiAgICogICAgICAg5q2j44Gu5YCk44Gu5pmC44Gv5Y+W5b6X44GV44KM44KL5pmC6ZaT44Gn57WC5LqG44GZ44KL44CCXG4gICAqICAgICAgIOOAjC0x44CN44Gu5pmC44Gv5aSW6YOo44GL44KJ5YGc5q2i5ZG95Luk44GM44Gq44GE6ZmQ44KK57WC44KP44KJ44Gq44GE5Yem55CG44Go44Gq44KL44CCXG4gICAqL1xuICBwdWJsaWMgZ2V0RHVyYXRpb24oKTogbnVtYmVyIHtcbiAgICByZXR1cm4gLTEuMDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jg6vjg7zjg5cx5Zue5YiG44Gu6ZW344GV44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Gu44Or44O844OX5LiA5Zue5YiG44Gu6ZW344GVW+enkl1cbiAgICpcbiAgICogQG5vdGUg44Or44O844OX44GX44Gq44GE5aC05ZCI44Gv44CBZ2V0RHVyYXRpb24oKeOBqOWQjOOBmOWApOOCkui/lOOBmVxuICAgKiAgICAgICDjg6vjg7zjg5fkuIDlm57liIbjga7plbfjgZXjgYzlrprnvqnjgafjgY3jgarjgYTloLTlkIgo44OX44Ot44Kw44Op44Og55qE44Gr5YuV44GN57aa44GR44KL44K144OW44Kv44Op44K544Gq44GpKeOBruWgtOWQiOOBr+OAjC0x44CN44KS6L+U44GZXG4gICAqL1xuICBwdWJsaWMgZ2V0TG9vcER1cmF0aW9uKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIC0xLjA7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz5YaN55Sf44Gu6ZaL5aeL5pmC5Yi744Gu6Kit5a6aXG4gICAqIEBwYXJhbSBvZmZzZXRTZWNvbmRzIOODouODvOOCt+ODp+ODs+WGjeeUn+OBrumWi+Wni+aZguWIu1vnp5JdXG4gICAqL1xuICBwdWJsaWMgc2V0T2Zmc2V0VGltZShvZmZzZXRTZWNvbmRzOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9vZmZzZXRTZWNvbmRzID0gb2Zmc2V0U2Vjb25kcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vjga7jg5Hjg6njg6Hjg7zjgr/mm7TmlrBcbiAgICpcbiAgICog44Kk44OZ44Oz44OI55m654Gr44Gu44OB44Kn44OD44Kv44CCXG4gICAqIOWFpeWKm+OBmeOCi+aZgumWk+OBr+WRvOOBsOOCjOOCi+ODouODvOOCt+ODp+ODs+OCv+OCpOODn+ODs+OCsOOCku+8kOOBqOOBl+OBn+enkuaVsOOBp+ihjOOBhuOAglxuICAgKlxuICAgKiBAcGFyYW0gYmVmb3JlQ2hlY2tUaW1lU2Vjb25kcyDliY3lm57jga7jgqTjg5njg7Pjg4jjg4Hjgqfjg4Pjgq/mmYLplpNb56eSXVxuICAgKiBAcGFyYW0gbW90aW9uVGltZVNlY29uZHMg5LuK5Zue44Gu5YaN55Sf5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyBnZXRGaXJlZEV2ZW50KFxuICAgIGJlZm9yZUNoZWNrVGltZVNlY29uZHM6IG51bWJlcixcbiAgICBtb3Rpb25UaW1lU2Vjb25kczogbnVtYmVyXG4gICk6IGNzbVZlY3Rvcjxjc21TdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy5fZmlyZWRFdmVudFZhbHVlcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7PjgpLmm7TmlrDjgZfjgabjgIHjg6Ljg4fjg6vjgavjg5Hjg6njg6Hjg7zjgr/lgKTjgpLlj43mmKDjgZnjgotcbiAgICogQHBhcmFtIG1vZGVsIOWvvuixoeOBruODouODh+ODq1xuICAgKiBAcGFyYW0gdXNlclRpbWVTZWNvbmRzIOODh+ODq+OCv+aZgumWk+OBruepjeeul+WApFvnp5JdXG4gICAqIEBwYXJhbSB3ZWlnaHQg44Oi44O844K344On44Oz44Gu6YeN44G/XG4gICAqIEBwYXJhbSBtb3Rpb25RdWV1ZUVudHJ5IEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlcuOBp+euoeeQhuOBleOCjOOBpuOBhOOCi+ODouODvOOCt+ODp+ODs1xuICAgKiBAcmV0dXJuIHRydWUg44Oi44OH44Or44G444OR44Op44Oh44O844K/5YCk44Gu5Y+N5pig44GC44KKXG4gICAqIEByZXR1cm4gZmFsc2Ug44Oi44OH44Or44G444Gu44OR44Op44Oh44O844K/5YCk44Gu5Y+N5pig44Gq44GX77yI44Oi44O844K344On44Oz44Gu5aSJ5YyW44Gq44GX77yJXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZG9VcGRhdGVQYXJhbWV0ZXJzKFxuICAgIG1vZGVsOiBDdWJpc21Nb2RlbCxcbiAgICB1c2VyVGltZVNlY29uZHM6IG51bWJlcixcbiAgICB3ZWlnaHQ6IG51bWJlcixcbiAgICBtb3Rpb25RdWV1ZUVudHJ5OiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5XG4gICk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+WGjeeUn+e1guS6huOCs+ODvOODq+ODkOODg+OCr+OBrueZu+mMslxuICAgKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/ntYLkuobjgrPjg7zjg6vjg5Djg4Pjgq/jgpLnmbvpjLLjgZnjgovjgIJcbiAgICogaXNGaW5pc2hlZOODleODqeOCsOOCkuioreWumuOBmeOCi+OCv+OCpOODn+ODs+OCsOOBp+WRvOOBs+WHuuOBleOCjOOCi+OAglxuICAgKiDku6XkuIvjga7nirbmhYvjga7pmpvjgavjga/lkbzjgbPlh7rjgZXjgozjgarjgYQ6XG4gICAqICAgMS4g5YaN55Sf5Lit44Gu44Oi44O844K344On44Oz44GM44CM44Or44O844OX44CN44Go44GX44Gm6Kit5a6a44GV44KM44Gm44GE44KL44Go44GNXG4gICAqICAgMi4g44Kz44O844Or44OQ44OD44Kv44GM55m76Yyy44GV44KM44Gm44GE44Gq44GE5pmCXG4gICAqXG4gICAqIEBwYXJhbSBvbkZpbmlzaGVkTW90aW9uSGFuZGxlciDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/ntYLkuobjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbBcbiAgICovXG4gIHB1YmxpYyBzZXRGaW5pc2hlZE1vdGlvbkhhbmRsZXIgPSAoXG4gICAgb25GaW5pc2hlZE1vdGlvbkhhbmRsZXI6IEZpbmlzaGVkTW90aW9uQ2FsbGJhY2tcbiAgKSA9PiAodGhpcy5fb25GaW5pc2hlZE1vdGlvbiA9IG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyKTtcblxuICAvKipcbiAgICog44Oi44O844K344On44Oz5YaN55Sf57WC5LqG44Kz44O844Or44OQ44OD44Kv44Gu5Y+W5b6XXG4gICAqXG4gICAqIOODouODvOOCt+ODp+ODs+WGjeeUn+e1guS6huOCs+ODvOODq+ODkOODg+OCr+OCkuWPluW+l+OBmeOCi+OAglxuICAgKlxuICAgKiBAcmV0dXJuIOeZu+mMsuOBleOCjOOBpuOBhOOCi+ODouODvOOCt+ODp+ODs+WGjeeUn+e1guS6huOCs+ODvOODq+ODkOODg+OCr+mWouaVsFxuICAgKi9cbiAgcHVibGljIGdldEZpbmlzaGVkTW90aW9uSGFuZGxlciA9ICgpID0+IHRoaXMuX29uRmluaXNoZWRNb3Rpb247XG5cbiAgcHVibGljIF9mYWRlSW5TZWNvbmRzOiBudW1iZXI7IC8vIOODleOCp+ODvOODieOCpOODs+OBq+OBi+OBi+OCi+aZgumWk1vnp5JdXG4gIHB1YmxpYyBfZmFkZU91dFNlY29uZHM6IG51bWJlcjsgLy8g44OV44Kn44O844OJ44Ki44Km44OI44Gr44GL44GL44KL5pmC6ZaTW+enkl1cbiAgcHVibGljIF93ZWlnaHQ6IG51bWJlcjsgLy8g44Oi44O844K344On44Oz44Gu6YeN44G/XG4gIHB1YmxpYyBfb2Zmc2V0U2Vjb25kczogbnVtYmVyOyAvLyDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/jga7plovlp4vmmYLplpNb56eSXVxuXG4gIHB1YmxpYyBfZmlyZWRFdmVudFZhbHVlczogY3NtVmVjdG9yPGNzbVN0cmluZz47XG5cbiAgLy8g44Oi44O844K344On44Oz5YaN55Sf57WC5LqG44Kz44O844Or44OQ44OD44Kv6Zai5pWwXG4gIHB1YmxpYyBfb25GaW5pc2hlZE1vdGlvbj86IEZpbmlzaGVkTW90aW9uQ2FsbGJhY2s7XG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2FjdWJpc21tb3Rpb24nO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEFDdWJpc21Nb3Rpb24gPSAkLkFDdWJpc21Nb3Rpb247XG4gIGV4cG9ydCB0eXBlIEFDdWJpc21Nb3Rpb24gPSAkLkFDdWJpc21Nb3Rpb247XG4gIGV4cG9ydCB0eXBlIEZpbmlzaGVkTW90aW9uQ2FsbGJhY2sgPSAkLkZpbmlzaGVkTW90aW9uQ2FsbGJhY2s7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21JZEhhbmRsZSB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7IEN1YmlzbUZyYW1ld29yayB9IGZyb20gJy4uL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5pbXBvcnQgeyBDdWJpc21Nb2RlbCB9IGZyb20gJy4uL21vZGVsL2N1YmlzbW1vZGVsJztcbmltcG9ydCB7IGNzbVZlY3RvciB9IGZyb20gJy4uL3R5cGUvY3NtdmVjdG9yJztcbmltcG9ydCB7IEN1YmlzbUpzb24sIFZhbHVlIH0gZnJvbSAnLi4vdXRpbHMvY3ViaXNtanNvbic7XG5pbXBvcnQgeyBBQ3ViaXNtTW90aW9uIH0gZnJvbSAnLi9hY3ViaXNtbW90aW9uJztcbmltcG9ydCB7IEN1YmlzbU1vdGlvblF1ZXVlRW50cnkgfSBmcm9tICcuL2N1YmlzbW1vdGlvbnF1ZXVlZW50cnknO1xuXG4vLyBleHAzLmpzb27jga7jgq3jg7zjgajjg4fjg5Xjgqnjg6vjg4hcbmNvbnN0IEV4cHJlc3Npb25LZXlGYWRlSW4gPSAnRmFkZUluVGltZSc7XG5jb25zdCBFeHByZXNzaW9uS2V5RmFkZU91dCA9ICdGYWRlT3V0VGltZSc7XG5jb25zdCBFeHByZXNzaW9uS2V5UGFyYW1ldGVycyA9ICdQYXJhbWV0ZXJzJztcbmNvbnN0IEV4cHJlc3Npb25LZXlJZCA9ICdJZCc7XG5jb25zdCBFeHByZXNzaW9uS2V5VmFsdWUgPSAnVmFsdWUnO1xuY29uc3QgRXhwcmVzc2lvbktleUJsZW5kID0gJ0JsZW5kJztcbmNvbnN0IEJsZW5kVmFsdWVBZGQgPSAnQWRkJztcbmNvbnN0IEJsZW5kVmFsdWVNdWx0aXBseSA9ICdNdWx0aXBseSc7XG5jb25zdCBCbGVuZFZhbHVlT3ZlcndyaXRlID0gJ092ZXJ3cml0ZSc7XG5jb25zdCBEZWZhdWx0RmFkZVRpbWUgPSAxLjA7XG5cbi8qKlxuICog6KGo5oOF44Gu44Oi44O844K344On44OzXG4gKlxuICog6KGo5oOF44Gu44Oi44O844K344On44Oz44Kv44Op44K544CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21FeHByZXNzaW9uTW90aW9uIGV4dGVuZHMgQUN1YmlzbU1vdGlvbiB7XG4gIC8qKlxuICAgKiDjgqTjg7Pjgrnjgr/jg7PjgrnjgpLkvZzmiJDjgZnjgovjgIJcbiAgICogQHBhcmFtIGJ1ZmZlciBleHDjg5XjgqHjgqTjg6vjgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcbiAgICogQHBhcmFtIHNpemUg44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAqIEByZXR1cm4g5L2c5oiQ44GV44KM44Gf44Kk44Oz44K544K/44Oz44K5XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGNyZWF0ZShcbiAgICBidWZmZXI6IEFycmF5QnVmZmVyLFxuICAgIHNpemU6IG51bWJlclxuICApOiBDdWJpc21FeHByZXNzaW9uTW90aW9uIHtcbiAgICBjb25zdCBleHByZXNzaW9uOiBDdWJpc21FeHByZXNzaW9uTW90aW9uID0gbmV3IEN1YmlzbUV4cHJlc3Npb25Nb3Rpb24oKTtcblxuICAgIGNvbnN0IGpzb246IEN1YmlzbUpzb24gPSBDdWJpc21Kc29uLmNyZWF0ZShidWZmZXIsIHNpemUpO1xuICAgIGNvbnN0IHJvb3Q6IFZhbHVlID0ganNvbi5nZXRSb290KCk7XG5cbiAgICBleHByZXNzaW9uLnNldEZhZGVJblRpbWUoXG4gICAgICByb290LmdldFZhbHVlQnlTdHJpbmcoRXhwcmVzc2lvbktleUZhZGVJbikudG9GbG9hdChEZWZhdWx0RmFkZVRpbWUpXG4gICAgKTsgLy8g44OV44Kn44O844OJ44Kk44OzXG4gICAgZXhwcmVzc2lvbi5zZXRGYWRlT3V0VGltZShcbiAgICAgIHJvb3QuZ2V0VmFsdWVCeVN0cmluZyhFeHByZXNzaW9uS2V5RmFkZU91dCkudG9GbG9hdChEZWZhdWx0RmFkZVRpbWUpXG4gICAgKTsgLy8g44OV44Kn44O844OJ44Ki44Km44OIXG5cbiAgICAvLyDlkITjg5Hjg6njg6Hjg7zjgr/jgavjgaTjgYTjgaZcbiAgICBjb25zdCBwYXJhbWV0ZXJDb3VudCA9IHJvb3RcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEV4cHJlc3Npb25LZXlQYXJhbWV0ZXJzKVxuICAgICAgLmdldFNpemUoKTtcbiAgICBleHByZXNzaW9uLl9wYXJhbWV0ZXJzLnByZXBhcmVDYXBhY2l0eShwYXJhbWV0ZXJDb3VudCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcmFtZXRlckNvdW50OyArK2kpIHtcbiAgICAgIGNvbnN0IHBhcmFtOiBWYWx1ZSA9IHJvb3RcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRXhwcmVzc2lvbktleVBhcmFtZXRlcnMpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaSk7XG4gICAgICBjb25zdCBwYXJhbWV0ZXJJZDogQ3ViaXNtSWRIYW5kbGUgPSBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICAgIHBhcmFtLmdldFZhbHVlQnlTdHJpbmcoRXhwcmVzc2lvbktleUlkKS5nZXRSYXdTdHJpbmcoKVxuICAgICAgKTsgLy8g44OR44Op44Oh44O844K/SURcblxuICAgICAgY29uc3QgdmFsdWU6IG51bWJlciA9IHBhcmFtXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEV4cHJlc3Npb25LZXlWYWx1ZSlcbiAgICAgICAgLnRvRmxvYXQoKTsgLy8g5YCkXG5cbiAgICAgIC8vIOioiOeul+aWueazleOBruioreWumlxuICAgICAgbGV0IGJsZW5kVHlwZTogRXhwcmVzc2lvbkJsZW5kVHlwZTtcblxuICAgICAgaWYgKFxuICAgICAgICBwYXJhbS5nZXRWYWx1ZUJ5U3RyaW5nKEV4cHJlc3Npb25LZXlCbGVuZCkuaXNOdWxsKCkgfHxcbiAgICAgICAgcGFyYW0uZ2V0VmFsdWVCeVN0cmluZyhFeHByZXNzaW9uS2V5QmxlbmQpLmdldFN0cmluZygpID09IEJsZW5kVmFsdWVBZGRcbiAgICAgICkge1xuICAgICAgICBibGVuZFR5cGUgPSBFeHByZXNzaW9uQmxlbmRUeXBlLkV4cHJlc3Npb25CbGVuZFR5cGVfQWRkO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgcGFyYW0uZ2V0VmFsdWVCeVN0cmluZyhFeHByZXNzaW9uS2V5QmxlbmQpLmdldFN0cmluZygpID09XG4gICAgICAgIEJsZW5kVmFsdWVNdWx0aXBseVxuICAgICAgKSB7XG4gICAgICAgIGJsZW5kVHlwZSA9IEV4cHJlc3Npb25CbGVuZFR5cGUuRXhwcmVzc2lvbkJsZW5kVHlwZV9NdWx0aXBseTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIHBhcmFtLmdldFZhbHVlQnlTdHJpbmcoRXhwcmVzc2lvbktleUJsZW5kKS5nZXRTdHJpbmcoKSA9PVxuICAgICAgICBCbGVuZFZhbHVlT3ZlcndyaXRlXG4gICAgICApIHtcbiAgICAgICAgYmxlbmRUeXBlID0gRXhwcmVzc2lvbkJsZW5kVHlwZS5FeHByZXNzaW9uQmxlbmRUeXBlX092ZXJ3cml0ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIOOBneOBruS7liDku5Xmp5jjgavjgarjgYTlgKTjgpLoqK3lrprjgZfjgZ/mmYLjga/liqDnrpfjg6Ljg7zjg4njgavjgZnjgovjgZPjgajjgaflvqnml6dcbiAgICAgICAgYmxlbmRUeXBlID0gRXhwcmVzc2lvbkJsZW5kVHlwZS5FeHByZXNzaW9uQmxlbmRUeXBlX0FkZDtcbiAgICAgIH1cblxuICAgICAgLy8g6Kit5a6a44Kq44OW44K444Kn44Kv44OI44KS5L2c5oiQ44GX44Gm44Oq44K544OI44Gr6L+95Yqg44GZ44KLXG4gICAgICBjb25zdCBpdGVtOiBFeHByZXNzaW9uUGFyYW1ldGVyID0gbmV3IEV4cHJlc3Npb25QYXJhbWV0ZXIoKTtcblxuICAgICAgaXRlbS5wYXJhbWV0ZXJJZCA9IHBhcmFtZXRlcklkO1xuICAgICAgaXRlbS5ibGVuZFR5cGUgPSBibGVuZFR5cGU7XG4gICAgICBpdGVtLnZhbHVlID0gdmFsdWU7XG5cbiAgICAgIGV4cHJlc3Npb24uX3BhcmFtZXRlcnMucHVzaEJhY2soaXRlbSk7XG4gICAgfVxuXG4gICAgQ3ViaXNtSnNvbi5kZWxldGUoanNvbik7IC8vIEpTT07jg4fjg7zjgr/jga/kuI3opoHjgavjgarjgaPjgZ/jgonliYrpmaTjgZnjgotcbiAgICByZXR1cm4gZXhwcmVzc2lvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vjga7jg5Hjg6njg6Hjg7zjgr/jga7mm7TmlrDjga7lrp/ooYxcbiAgICogQHBhcmFtIG1vZGVsIOWvvuixoeOBruODouODh+ODq1xuICAgKiBAcGFyYW0gdXNlclRpbWVTZWNvbmRzIOODh+ODq+OCv+aZgumWk+OBruepjeeul+WApFvnp5JdXG4gICAqIEBwYXJhbSB3ZWlnaHQg44Oi44O844K344On44Oz44Gu6YeN44G/XG4gICAqIEBwYXJhbSBtb3Rpb25RdWV1ZUVudHJ5IEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlcuOBp+euoeeQhuOBleOCjOOBpuOBhOOCi+ODouODvOOCt+ODp+ODs1xuICAgKi9cbiAgcHVibGljIGRvVXBkYXRlUGFyYW1ldGVycyhcbiAgICBtb2RlbDogQ3ViaXNtTW9kZWwsXG4gICAgdXNlclRpbWVTZWNvbmRzOiBudW1iZXIsXG4gICAgd2VpZ2h0OiBudW1iZXIsXG4gICAgbW90aW9uUXVldWVFbnRyeTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeVxuICApOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3BhcmFtZXRlcnMuZ2V0U2l6ZSgpOyArK2kpIHtcbiAgICAgIGNvbnN0IHBhcmFtZXRlcjogRXhwcmVzc2lvblBhcmFtZXRlciA9IHRoaXMuX3BhcmFtZXRlcnMuYXQoaSk7XG5cbiAgICAgIHN3aXRjaCAocGFyYW1ldGVyLmJsZW5kVHlwZSkge1xuICAgICAgICBjYXNlIEV4cHJlc3Npb25CbGVuZFR5cGUuRXhwcmVzc2lvbkJsZW5kVHlwZV9BZGQ6IHtcbiAgICAgICAgICBtb2RlbC5hZGRQYXJhbWV0ZXJWYWx1ZUJ5SWQoXG4gICAgICAgICAgICBwYXJhbWV0ZXIucGFyYW1ldGVySWQsXG4gICAgICAgICAgICBwYXJhbWV0ZXIudmFsdWUsXG4gICAgICAgICAgICB3ZWlnaHRcbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgRXhwcmVzc2lvbkJsZW5kVHlwZS5FeHByZXNzaW9uQmxlbmRUeXBlX011bHRpcGx5OiB7XG4gICAgICAgICAgbW9kZWwubXVsdGlwbHlQYXJhbWV0ZXJWYWx1ZUJ5SWQoXG4gICAgICAgICAgICBwYXJhbWV0ZXIucGFyYW1ldGVySWQsXG4gICAgICAgICAgICBwYXJhbWV0ZXIudmFsdWUsXG4gICAgICAgICAgICB3ZWlnaHRcbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgRXhwcmVzc2lvbkJsZW5kVHlwZS5FeHByZXNzaW9uQmxlbmRUeXBlX092ZXJ3cml0ZToge1xuICAgICAgICAgIG1vZGVsLnNldFBhcmFtZXRlclZhbHVlQnlJZChcbiAgICAgICAgICAgIHBhcmFtZXRlci5wYXJhbWV0ZXJJZCxcbiAgICAgICAgICAgIHBhcmFtZXRlci52YWx1ZSxcbiAgICAgICAgICAgIHdlaWdodFxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAvLyDku5Xmp5jjgavjgarjgYTlgKTjgpLoqK3lrprjgZfjgZ/mmYLjga/jgZnjgafjgavliqDnrpfjg6Ljg7zjg4njgavjgarjgaPjgabjgYTjgotcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5fcGFyYW1ldGVycyA9IG5ldyBjc21WZWN0b3I8RXhwcmVzc2lvblBhcmFtZXRlcj4oKTtcbiAgfVxuXG4gIF9wYXJhbWV0ZXJzOiBjc21WZWN0b3I8RXhwcmVzc2lvblBhcmFtZXRlcj47IC8vIOihqOaDheOBruODkeODqeODoeODvOOCv+aDheWgseODquOCueODiFxufVxuXG4vKipcbiAqIOihqOaDheODkeODqeODoeODvOOCv+WApOOBruioiOeul+aWueW8j1xuICovXG5leHBvcnQgZW51bSBFeHByZXNzaW9uQmxlbmRUeXBlIHtcbiAgRXhwcmVzc2lvbkJsZW5kVHlwZV9BZGQgPSAwLCAvLyDliqDnrpdcbiAgRXhwcmVzc2lvbkJsZW5kVHlwZV9NdWx0aXBseSA9IDEsIC8vIOS5l+eul1xuICBFeHByZXNzaW9uQmxlbmRUeXBlX092ZXJ3cml0ZSA9IDIsIC8vIOS4iuabuOOBjVxufVxuXG4vKipcbiAqIOihqOaDheOBruODkeODqeODoeODvOOCv+aDheWgsVxuICovXG5leHBvcnQgY2xhc3MgRXhwcmVzc2lvblBhcmFtZXRlciB7XG4gIHBhcmFtZXRlcklkOiBDdWJpc21JZEhhbmRsZTsgLy8g44OR44Op44Oh44O844K/SURcbiAgYmxlbmRUeXBlOiBFeHByZXNzaW9uQmxlbmRUeXBlOyAvLyDjg5Hjg6njg6Hjg7zjgr/jga7mvJTnrpfnqK7poZ5cbiAgdmFsdWU6IG51bWJlcjsgLy8g5YCkXG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbWV4cHJlc3Npb25tb3Rpb24nO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbUV4cHJlc3Npb25Nb3Rpb24gPSAkLkN1YmlzbUV4cHJlc3Npb25Nb3Rpb247XG4gIGV4cG9ydCB0eXBlIEN1YmlzbUV4cHJlc3Npb25Nb3Rpb24gPSAkLkN1YmlzbUV4cHJlc3Npb25Nb3Rpb247XG4gIGV4cG9ydCBjb25zdCBFeHByZXNzaW9uQmxlbmRUeXBlID0gJC5FeHByZXNzaW9uQmxlbmRUeXBlO1xuICBleHBvcnQgdHlwZSBFeHByZXNzaW9uQmxlbmRUeXBlID0gJC5FeHByZXNzaW9uQmxlbmRUeXBlO1xuICBleHBvcnQgY29uc3QgRXhwcmVzc2lvblBhcmFtZXRlciA9ICQuRXhwcmVzc2lvblBhcmFtZXRlcjtcbiAgZXhwb3J0IHR5cGUgRXhwcmVzc2lvblBhcmFtZXRlciA9ICQuRXhwcmVzc2lvblBhcmFtZXRlcjtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IEN1YmlzbUlkSGFuZGxlIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xuaW1wb3J0IHsgQ3ViaXNtRnJhbWV3b3JrIH0gZnJvbSAnLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcbmltcG9ydCB7IEN1YmlzbU1hdGggfSBmcm9tICcuLi9tYXRoL2N1YmlzbW1hdGgnO1xuaW1wb3J0IHsgQ3ViaXNtTW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XG5pbXBvcnQgeyBjc21TdHJpbmcgfSBmcm9tICcuLi90eXBlL2NzbXN0cmluZyc7XG5pbXBvcnQgeyBjc21WZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5pbXBvcnQge1xuICBDU01fQVNTRVJULFxuICBDdWJpc21Mb2dEZWJ1ZyxcbiAgQ3ViaXNtTG9nV2FybmluZyxcbn0gZnJvbSAnLi4vdXRpbHMvY3ViaXNtZGVidWcnO1xuaW1wb3J0IHsgQUN1YmlzbU1vdGlvbiwgRmluaXNoZWRNb3Rpb25DYWxsYmFjayB9IGZyb20gJy4vYWN1YmlzbW1vdGlvbic7XG5pbXBvcnQge1xuICBDdWJpc21Nb3Rpb25DdXJ2ZSxcbiAgQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQsXG4gIEN1YmlzbU1vdGlvbkRhdGEsXG4gIEN1YmlzbU1vdGlvbkV2ZW50LFxuICBDdWJpc21Nb3Rpb25Qb2ludCxcbiAgQ3ViaXNtTW90aW9uU2VnbWVudCxcbiAgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUsXG59IGZyb20gJy4vY3ViaXNtbW90aW9uaW50ZXJuYWwnO1xuaW1wb3J0IHsgQ3ViaXNtTW90aW9uSnNvbiwgRXZhbHVhdGlvbk9wdGlvbkZsYWcgfSBmcm9tICcuL2N1YmlzbW1vdGlvbmpzb24nO1xuaW1wb3J0IHsgQ3ViaXNtTW90aW9uUXVldWVFbnRyeSB9IGZyb20gJy4vY3ViaXNtbW90aW9ucXVldWVlbnRyeSc7XG5cbmNvbnN0IEVmZmVjdE5hbWVFeWVCbGluayA9ICdFeWVCbGluayc7XG5jb25zdCBFZmZlY3ROYW1lTGlwU3luYyA9ICdMaXBTeW5jJztcbmNvbnN0IFRhcmdldE5hbWVNb2RlbCA9ICdNb2RlbCc7XG5jb25zdCBUYXJnZXROYW1lUGFyYW1ldGVyID0gJ1BhcmFtZXRlcic7XG5jb25zdCBUYXJnZXROYW1lUGFydE9wYWNpdHkgPSAnUGFydE9wYWNpdHknO1xuXG4vKipcbiAqIEN1YmlzbSBTREsgUjIg5Lul5YmN44Gu44Oi44O844K344On44Oz44KS5YaN54++44GV44Gb44KL44Gq44KJIHRydWUg44CB44Ki44OL44Oh44O844K/44Gu44Oi44O844K344On44Oz44KS5q2j44GX44GP5YaN54++44GZ44KL44Gq44KJIGZhbHNlIOOAglxuICovXG5jb25zdCBVc2VPbGRCZXppZXJzQ3VydmVNb3Rpb24gPSBmYWxzZTtcblxuZnVuY3Rpb24gbGVycFBvaW50cyhcbiAgYTogQ3ViaXNtTW90aW9uUG9pbnQsXG4gIGI6IEN1YmlzbU1vdGlvblBvaW50LFxuICB0OiBudW1iZXJcbik6IEN1YmlzbU1vdGlvblBvaW50IHtcbiAgY29uc3QgcmVzdWx0OiBDdWJpc21Nb3Rpb25Qb2ludCA9IG5ldyBDdWJpc21Nb3Rpb25Qb2ludCgpO1xuXG4gIHJlc3VsdC50aW1lID0gYS50aW1lICsgKGIudGltZSAtIGEudGltZSkgKiB0O1xuICByZXN1bHQudmFsdWUgPSBhLnZhbHVlICsgKGIudmFsdWUgLSBhLnZhbHVlKSAqIHQ7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbGluZWFyRXZhbHVhdGUocG9pbnRzOiBDdWJpc21Nb3Rpb25Qb2ludFtdLCB0aW1lOiBudW1iZXIpOiBudW1iZXIge1xuICBsZXQgdDogbnVtYmVyID0gKHRpbWUgLSBwb2ludHNbMF0udGltZSkgLyAocG9pbnRzWzFdLnRpbWUgLSBwb2ludHNbMF0udGltZSk7XG5cbiAgaWYgKHQgPCAwLjApIHtcbiAgICB0ID0gMC4wO1xuICB9XG5cbiAgcmV0dXJuIHBvaW50c1swXS52YWx1ZSArIChwb2ludHNbMV0udmFsdWUgLSBwb2ludHNbMF0udmFsdWUpICogdDtcbn1cblxuZnVuY3Rpb24gYmV6aWVyRXZhbHVhdGUocG9pbnRzOiBDdWJpc21Nb3Rpb25Qb2ludFtdLCB0aW1lOiBudW1iZXIpOiBudW1iZXIge1xuICBsZXQgdDogbnVtYmVyID0gKHRpbWUgLSBwb2ludHNbMF0udGltZSkgLyAocG9pbnRzWzNdLnRpbWUgLSBwb2ludHNbMF0udGltZSk7XG5cbiAgaWYgKHQgPCAwLjApIHtcbiAgICB0ID0gMC4wO1xuICB9XG5cbiAgY29uc3QgcDAxOiBDdWJpc21Nb3Rpb25Qb2ludCA9IGxlcnBQb2ludHMocG9pbnRzWzBdLCBwb2ludHNbMV0sIHQpO1xuICBjb25zdCBwMTI6IEN1YmlzbU1vdGlvblBvaW50ID0gbGVycFBvaW50cyhwb2ludHNbMV0sIHBvaW50c1syXSwgdCk7XG4gIGNvbnN0IHAyMzogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHBvaW50c1syXSwgcG9pbnRzWzNdLCB0KTtcblxuICBjb25zdCBwMDEyOiBDdWJpc21Nb3Rpb25Qb2ludCA9IGxlcnBQb2ludHMocDAxLCBwMTIsIHQpO1xuICBjb25zdCBwMTIzOiBDdWJpc21Nb3Rpb25Qb2ludCA9IGxlcnBQb2ludHMocDEyLCBwMjMsIHQpO1xuXG4gIHJldHVybiBsZXJwUG9pbnRzKHAwMTIsIHAxMjMsIHQpLnZhbHVlO1xufVxuXG5mdW5jdGlvbiBiZXppZXJFdmFsdWF0ZUJpbmFyeVNlYXJjaChcbiAgcG9pbnRzOiBDdWJpc21Nb3Rpb25Qb2ludFtdLFxuICB0aW1lOiBudW1iZXJcbik6IG51bWJlciB7XG4gIGNvbnN0IHhfZXJyb3IgPSAwLjAxO1xuXG4gIGNvbnN0IHg6IG51bWJlciA9IHRpbWU7XG4gIGxldCB4MTogbnVtYmVyID0gcG9pbnRzWzBdLnRpbWU7XG4gIGxldCB4MjogbnVtYmVyID0gcG9pbnRzWzNdLnRpbWU7XG4gIGxldCBjeDE6IG51bWJlciA9IHBvaW50c1sxXS50aW1lO1xuICBsZXQgY3gyOiBudW1iZXIgPSBwb2ludHNbMl0udGltZTtcblxuICBsZXQgdGEgPSAwLjA7XG4gIGxldCB0YiA9IDEuMDtcbiAgbGV0IHQgPSAwLjA7XG4gIGxldCBpID0gMDtcblxuICBmb3IgKGxldCB2YXIzMyA9IHRydWU7IGkgPCAyMDsgKytpKSB7XG4gICAgaWYgKHggPCB4MSArIHhfZXJyb3IpIHtcbiAgICAgIHQgPSB0YTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmICh4MiAtIHhfZXJyb3IgPCB4KSB7XG4gICAgICB0ID0gdGI7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBsZXQgY2VudGVyeDogbnVtYmVyID0gKGN4MSArIGN4MikgKiAwLjU7XG4gICAgY3gxID0gKHgxICsgY3gxKSAqIDAuNTtcbiAgICBjeDIgPSAoeDIgKyBjeDIpICogMC41O1xuICAgIGNvbnN0IGN0cmx4MTI6IG51bWJlciA9IChjeDEgKyBjZW50ZXJ4KSAqIDAuNTtcbiAgICBjb25zdCBjdHJseDIxOiBudW1iZXIgPSAoY3gyICsgY2VudGVyeCkgKiAwLjU7XG4gICAgY2VudGVyeCA9IChjdHJseDEyICsgY3RybHgyMSkgKiAwLjU7XG4gICAgaWYgKHggPCBjZW50ZXJ4KSB7XG4gICAgICB0YiA9ICh0YSArIHRiKSAqIDAuNTtcbiAgICAgIGlmIChjZW50ZXJ4IC0geF9lcnJvciA8IHgpIHtcbiAgICAgICAgdCA9IHRiO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgeDIgPSBjZW50ZXJ4O1xuICAgICAgY3gyID0gY3RybHgxMjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGEgPSAodGEgKyB0YikgKiAwLjU7XG4gICAgICBpZiAoeCA8IGNlbnRlcnggKyB4X2Vycm9yKSB7XG4gICAgICAgIHQgPSB0YTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHgxID0gY2VudGVyeDtcbiAgICAgIGN4MSA9IGN0cmx4MjE7XG4gICAgfVxuICB9XG5cbiAgaWYgKGkgPT0gMjApIHtcbiAgICB0ID0gKHRhICsgdGIpICogMC41O1xuICB9XG5cbiAgaWYgKHQgPCAwLjApIHtcbiAgICB0ID0gMC4wO1xuICB9XG4gIGlmICh0ID4gMS4wKSB7XG4gICAgdCA9IDEuMDtcbiAgfVxuXG4gIGNvbnN0IHAwMTogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHBvaW50c1swXSwgcG9pbnRzWzFdLCB0KTtcbiAgY29uc3QgcDEyOiBDdWJpc21Nb3Rpb25Qb2ludCA9IGxlcnBQb2ludHMocG9pbnRzWzFdLCBwb2ludHNbMl0sIHQpO1xuICBjb25zdCBwMjM6IEN1YmlzbU1vdGlvblBvaW50ID0gbGVycFBvaW50cyhwb2ludHNbMl0sIHBvaW50c1szXSwgdCk7XG5cbiAgY29uc3QgcDAxMjogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHAwMSwgcDEyLCB0KTtcbiAgY29uc3QgcDEyMzogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHAxMiwgcDIzLCB0KTtcblxuICByZXR1cm4gbGVycFBvaW50cyhwMDEyLCBwMTIzLCB0KS52YWx1ZTtcbn1cblxuZnVuY3Rpb24gYmV6aWVyRXZhbHVhdGVDYXJkYW5vSW50ZXJwcmV0YXRpb24oXG4gIHBvaW50czogQ3ViaXNtTW90aW9uUG9pbnRbXSxcbiAgdGltZTogbnVtYmVyXG4pOiBudW1iZXIge1xuICBjb25zdCB4OiBudW1iZXIgPSB0aW1lO1xuICBjb25zdCB4MTogbnVtYmVyID0gcG9pbnRzWzBdLnRpbWU7XG4gIGNvbnN0IHgyOiBudW1iZXIgPSBwb2ludHNbM10udGltZTtcbiAgY29uc3QgY3gxOiBudW1iZXIgPSBwb2ludHNbMV0udGltZTtcbiAgY29uc3QgY3gyOiBudW1iZXIgPSBwb2ludHNbMl0udGltZTtcblxuICBjb25zdCBhOiBudW1iZXIgPSB4MiAtIDMuMCAqIGN4MiArIDMuMCAqIGN4MSAtIHgxO1xuICBjb25zdCBiOiBudW1iZXIgPSAzLjAgKiBjeDIgLSA2LjAgKiBjeDEgKyAzLjAgKiB4MTtcbiAgY29uc3QgYzogbnVtYmVyID0gMy4wICogY3gxIC0gMy4wICogeDE7XG4gIGNvbnN0IGQ6IG51bWJlciA9IHgxIC0geDtcblxuICBjb25zdCB0OiBudW1iZXIgPSBDdWJpc21NYXRoLmNhcmRhbm9BbGdvcml0aG1Gb3JCZXppZXIoYSwgYiwgYywgZCk7XG5cbiAgY29uc3QgcDAxOiBDdWJpc21Nb3Rpb25Qb2ludCA9IGxlcnBQb2ludHMocG9pbnRzWzBdLCBwb2ludHNbMV0sIHQpO1xuICBjb25zdCBwMTI6IEN1YmlzbU1vdGlvblBvaW50ID0gbGVycFBvaW50cyhwb2ludHNbMV0sIHBvaW50c1syXSwgdCk7XG4gIGNvbnN0IHAyMzogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHBvaW50c1syXSwgcG9pbnRzWzNdLCB0KTtcblxuICBjb25zdCBwMDEyOiBDdWJpc21Nb3Rpb25Qb2ludCA9IGxlcnBQb2ludHMocDAxLCBwMTIsIHQpO1xuICBjb25zdCBwMTIzOiBDdWJpc21Nb3Rpb25Qb2ludCA9IGxlcnBQb2ludHMocDEyLCBwMjMsIHQpO1xuXG4gIHJldHVybiBsZXJwUG9pbnRzKHAwMTIsIHAxMjMsIHQpLnZhbHVlO1xufVxuXG5mdW5jdGlvbiBzdGVwcGVkRXZhbHVhdGUocG9pbnRzOiBDdWJpc21Nb3Rpb25Qb2ludFtdLCB0aW1lOiBudW1iZXIpOiBudW1iZXIge1xuICByZXR1cm4gcG9pbnRzWzBdLnZhbHVlO1xufVxuXG5mdW5jdGlvbiBpbnZlcnNlU3RlcHBlZEV2YWx1YXRlKFxuICBwb2ludHM6IEN1YmlzbU1vdGlvblBvaW50W10sXG4gIHRpbWU6IG51bWJlclxuKTogbnVtYmVyIHtcbiAgcmV0dXJuIHBvaW50c1sxXS52YWx1ZTtcbn1cblxuZnVuY3Rpb24gZXZhbHVhdGVDdXJ2ZShcbiAgbW90aW9uRGF0YTogQ3ViaXNtTW90aW9uRGF0YSxcbiAgaW5kZXg6IG51bWJlcixcbiAgdGltZTogbnVtYmVyXG4pOiBudW1iZXIge1xuICAvLyBGaW5kIHNlZ21lbnQgdG8gZXZhbHVhdGUuXG4gIGNvbnN0IGN1cnZlOiBDdWJpc21Nb3Rpb25DdXJ2ZSA9IG1vdGlvbkRhdGEuY3VydmVzLmF0KGluZGV4KTtcblxuICBsZXQgdGFyZ2V0ID0gLTE7XG4gIGNvbnN0IHRvdGFsU2VnbWVudENvdW50OiBudW1iZXIgPSBjdXJ2ZS5iYXNlU2VnbWVudEluZGV4ICsgY3VydmUuc2VnbWVudENvdW50O1xuICBsZXQgcG9pbnRQb3NpdGlvbiA9IDA7XG4gIGZvciAobGV0IGk6IG51bWJlciA9IGN1cnZlLmJhc2VTZWdtZW50SW5kZXg7IGkgPCB0b3RhbFNlZ21lbnRDb3VudDsgKytpKSB7XG4gICAgLy8gR2V0IGZpcnN0IHBvaW50IG9mIG5leHQgc2VnbWVudC5cbiAgICBwb2ludFBvc2l0aW9uID1cbiAgICAgIG1vdGlvbkRhdGEuc2VnbWVudHMuYXQoaSkuYmFzZVBvaW50SW5kZXggK1xuICAgICAgKG1vdGlvbkRhdGEuc2VnbWVudHMuYXQoaSkuc2VnbWVudFR5cGUgPT1cbiAgICAgIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlLkN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0JlemllclxuICAgICAgICA/IDNcbiAgICAgICAgOiAxKTtcblxuICAgIC8vIEJyZWFrIGlmIHRpbWUgbGllcyB3aXRoaW4gY3VycmVudCBzZWdtZW50LlxuICAgIGlmIChtb3Rpb25EYXRhLnBvaW50cy5hdChwb2ludFBvc2l0aW9uKS50aW1lID4gdGltZSkge1xuICAgICAgdGFyZ2V0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0YXJnZXQgPT0gLTEpIHtcbiAgICByZXR1cm4gbW90aW9uRGF0YS5wb2ludHMuYXQocG9pbnRQb3NpdGlvbikudmFsdWU7XG4gIH1cblxuICBjb25zdCBzZWdtZW50OiBDdWJpc21Nb3Rpb25TZWdtZW50ID0gbW90aW9uRGF0YS5zZWdtZW50cy5hdCh0YXJnZXQpO1xuXG4gIHJldHVybiBzZWdtZW50LmV2YWx1YXRlKG1vdGlvbkRhdGEucG9pbnRzLmdldChzZWdtZW50LmJhc2VQb2ludEluZGV4KSwgdGltZSk7XG59XG5cbi8qKlxuICog44Oi44O844K344On44Oz44Kv44Op44K5XG4gKlxuICog44Oi44O844K344On44Oz44Gu44Kv44Op44K544CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21Nb3Rpb24gZXh0ZW5kcyBBQ3ViaXNtTW90aW9uIHtcbiAgLyoqXG4gICAqIOOCpOODs+OCueOCv+ODs+OCueOCkuS9nOaIkOOBmeOCi1xuICAgKlxuICAgKiBAcGFyYW0gYnVmZmVyIG1vdGlvbjMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxuICAgKiBAcGFyYW0gc2l6ZSDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICogQHBhcmFtIG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyIOODouODvOOCt+ODp+ODs+WGjeeUn+e1guS6huaZguOBq+WRvOOBs+WHuuOBleOCjOOCi+OCs+ODvOODq+ODkOODg+OCr+mWouaVsFxuICAgKiBAcmV0dXJuIOS9nOaIkOOBleOCjOOBn+OCpOODs+OCueOCv+ODs+OCuVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBjcmVhdGUoXG4gICAgYnVmZmVyOiBBcnJheUJ1ZmZlcixcbiAgICBzaXplOiBudW1iZXIsXG4gICAgb25GaW5pc2hlZE1vdGlvbkhhbmRsZXI/OiBGaW5pc2hlZE1vdGlvbkNhbGxiYWNrXG4gICk6IEN1YmlzbU1vdGlvbiB7XG4gICAgY29uc3QgcmV0ID0gbmV3IEN1YmlzbU1vdGlvbigpO1xuXG4gICAgcmV0LnBhcnNlKGJ1ZmZlciwgc2l6ZSk7XG4gICAgcmV0Ll9zb3VyY2VGcmFtZVJhdGUgPSByZXQuX21vdGlvbkRhdGEuZnBzO1xuICAgIHJldC5fbG9vcER1cmF0aW9uU2Vjb25kcyA9IHJldC5fbW90aW9uRGF0YS5kdXJhdGlvbjtcbiAgICByZXQuX29uRmluaXNoZWRNb3Rpb24gPSBvbkZpbmlzaGVkTW90aW9uSGFuZGxlcjtcblxuICAgIC8vIE5PVEU6IEVkaXRvcuOBp+OBr+ODq+ODvOODl+OBguOCiuOBruODouODvOOCt+ODp+ODs+abuOOBjeWHuuOBl+OBr+mdnuWvvuW/nFxuICAgIC8vIHJldC0+X2xvb3AgPSAocmV0LT5fbW90aW9uRGF0YS0+TG9vcCA+IDApO1xuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44Gu44OR44Op44Oh44O844K/44Gu5pu05paw44Gu5a6f6KGMXG4gICAqIEBwYXJhbSBtb2RlbCAgICAgICAgICAgICDlr77osaHjga7jg6Ljg4fjg6tcbiAgICogQHBhcmFtIHVzZXJUaW1lU2Vjb25kcyAgIOePvuWcqOOBruaZguWIu1vnp5JdXG4gICAqIEBwYXJhbSBmYWRlV2VpZ2h0ICAgICAgICDjg6Ljg7zjgrfjg6fjg7Pjga7ph43jgb9cbiAgICogQHBhcmFtIG1vdGlvblF1ZXVlRW50cnkgIEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlcuOBp+euoeeQhuOBleOCjOOBpuOBhOOCi+ODouODvOOCt+ODp+ODs1xuICAgKi9cbiAgcHVibGljIGRvVXBkYXRlUGFyYW1ldGVycyhcbiAgICBtb2RlbDogQ3ViaXNtTW9kZWwsXG4gICAgdXNlclRpbWVTZWNvbmRzOiBudW1iZXIsXG4gICAgZmFkZVdlaWdodDogbnVtYmVyLFxuICAgIG1vdGlvblF1ZXVlRW50cnk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnlcbiAgKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX21vZGVsQ3VydmVJZEV5ZUJsaW5rID09IG51bGwpIHtcbiAgICAgIHRoaXMuX21vZGVsQ3VydmVJZEV5ZUJsaW5rID1cbiAgICAgICAgQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKEVmZmVjdE5hbWVFeWVCbGluayk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX21vZGVsQ3VydmVJZExpcFN5bmMgPT0gbnVsbCkge1xuICAgICAgdGhpcy5fbW9kZWxDdXJ2ZUlkTGlwU3luYyA9XG4gICAgICAgIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChFZmZlY3ROYW1lTGlwU3luYyk7XG4gICAgfVxuXG4gICAgbGV0IHRpbWVPZmZzZXRTZWNvbmRzOiBudW1iZXIgPVxuICAgICAgdXNlclRpbWVTZWNvbmRzIC0gbW90aW9uUXVldWVFbnRyeS5nZXRTdGFydFRpbWUoKTtcblxuICAgIGlmICh0aW1lT2Zmc2V0U2Vjb25kcyA8IDAuMCkge1xuICAgICAgdGltZU9mZnNldFNlY29uZHMgPSAwLjA7IC8vIOOCqOODqeODvOWbnumBv1xuICAgIH1cblxuICAgIGxldCBsaXBTeW5jVmFsdWU6IG51bWJlciA9IE51bWJlci5NQVhfVkFMVUU7XG4gICAgbGV0IGV5ZUJsaW5rVmFsdWU6IG51bWJlciA9IE51bWJlci5NQVhfVkFMVUU7XG5cbiAgICAvL+OBvuOBsOOBn+OBjeOAgeODquODg+ODl+OCt+ODs+OCr+OBruOBhuOBoeODouODvOOCt+ODp+ODs+OBrumBqeeUqOOCkuaknOWHuuOBmeOCi+OBn+OCgeOBruODk+ODg+ODiO+8iG1heEZsYWdDb3VudOWAi+OBvuOBp1xuICAgIGNvbnN0IE1heFRhcmdldFNpemUgPSA2NDtcbiAgICBsZXQgbGlwU3luY0ZsYWdzID0gMDtcbiAgICBsZXQgZXllQmxpbmtGbGFncyA9IDA7XG5cbiAgICAvL+eerOOBjeOAgeODquODg+ODl+OCt+ODs+OCr+OBruOCv+ODvOOCsuODg+ODiOaVsOOBjOS4iumZkOOCkui2heOBiOOBpuOBhOOCi+WgtOWQiFxuICAgIGlmICh0aGlzLl9leWVCbGlua1BhcmFtZXRlcklkcy5nZXRTaXplKCkgPiBNYXhUYXJnZXRTaXplKSB7XG4gICAgICBDdWJpc21Mb2dEZWJ1ZyhcbiAgICAgICAgJ3RvbyBtYW55IGV5ZSBibGluayB0YXJnZXRzIDogezB9JyxcbiAgICAgICAgdGhpcy5fZXllQmxpbmtQYXJhbWV0ZXJJZHMuZ2V0U2l6ZSgpXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAodGhpcy5fbGlwU3luY1BhcmFtZXRlcklkcy5nZXRTaXplKCkgPiBNYXhUYXJnZXRTaXplKSB7XG4gICAgICBDdWJpc21Mb2dEZWJ1ZyhcbiAgICAgICAgJ3RvbyBtYW55IGxpcCBzeW5jIHRhcmdldHMgOiB7MH0nLFxuICAgICAgICB0aGlzLl9saXBTeW5jUGFyYW1ldGVySWRzLmdldFNpemUoKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCB0bXBGYWRlSW46IG51bWJlciA9XG4gICAgICB0aGlzLl9mYWRlSW5TZWNvbmRzIDw9IDAuMFxuICAgICAgICA/IDEuMFxuICAgICAgICA6IEN1YmlzbU1hdGguZ2V0RWFzaW5nU2luZShcbiAgICAgICAgICAgICh1c2VyVGltZVNlY29uZHMgLSBtb3Rpb25RdWV1ZUVudHJ5LmdldEZhZGVJblN0YXJ0VGltZSgpKSAvXG4gICAgICAgICAgICAgIHRoaXMuX2ZhZGVJblNlY29uZHNcbiAgICAgICAgICApO1xuXG4gICAgY29uc3QgdG1wRmFkZU91dDogbnVtYmVyID1cbiAgICAgIHRoaXMuX2ZhZGVPdXRTZWNvbmRzIDw9IDAuMCB8fCBtb3Rpb25RdWV1ZUVudHJ5LmdldEVuZFRpbWUoKSA8IDAuMFxuICAgICAgICA/IDEuMFxuICAgICAgICA6IEN1YmlzbU1hdGguZ2V0RWFzaW5nU2luZShcbiAgICAgICAgICAgIChtb3Rpb25RdWV1ZUVudHJ5LmdldEVuZFRpbWUoKSAtIHVzZXJUaW1lU2Vjb25kcykgL1xuICAgICAgICAgICAgICB0aGlzLl9mYWRlT3V0U2Vjb25kc1xuICAgICAgICAgICk7XG4gICAgbGV0IHZhbHVlOiBudW1iZXI7XG4gICAgbGV0IGM6IG51bWJlciwgcGFyYW1ldGVySW5kZXg6IG51bWJlcjtcblxuICAgIC8vICdSZXBlYXQnIHRpbWUgYXMgbmVjZXNzYXJ5LlxuICAgIGxldCB0aW1lOiBudW1iZXIgPSB0aW1lT2Zmc2V0U2Vjb25kcztcblxuICAgIGlmICh0aGlzLl9pc0xvb3ApIHtcbiAgICAgIHdoaWxlICh0aW1lID4gdGhpcy5fbW90aW9uRGF0YS5kdXJhdGlvbikge1xuICAgICAgICB0aW1lIC09IHRoaXMuX21vdGlvbkRhdGEuZHVyYXRpb247XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgY3VydmVzOiBjc21WZWN0b3I8Q3ViaXNtTW90aW9uQ3VydmU+ID0gdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXM7XG5cbiAgICAvLyBFdmFsdWF0ZSBtb2RlbCBjdXJ2ZXMuXG4gICAgZm9yIChcbiAgICAgIGMgPSAwO1xuICAgICAgYyA8IHRoaXMuX21vdGlvbkRhdGEuY3VydmVDb3VudCAmJlxuICAgICAgY3VydmVzLmF0KGMpLnR5cGUgPT1cbiAgICAgICAgQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQuQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXRfTW9kZWw7XG4gICAgICArK2NcbiAgICApIHtcbiAgICAgIC8vIEV2YWx1YXRlIGN1cnZlIGFuZCBjYWxsIGhhbmRsZXIuXG4gICAgICB2YWx1ZSA9IGV2YWx1YXRlQ3VydmUodGhpcy5fbW90aW9uRGF0YSwgYywgdGltZSk7XG5cbiAgICAgIGlmIChjdXJ2ZXMuYXQoYykuaWQgPT0gdGhpcy5fbW9kZWxDdXJ2ZUlkRXllQmxpbmspIHtcbiAgICAgICAgZXllQmxpbmtWYWx1ZSA9IHZhbHVlO1xuICAgICAgfSBlbHNlIGlmIChjdXJ2ZXMuYXQoYykuaWQgPT0gdGhpcy5fbW9kZWxDdXJ2ZUlkTGlwU3luYykge1xuICAgICAgICBsaXBTeW5jVmFsdWUgPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgcGFyYW1ldGVyTW90aW9uQ3VydmVDb3VudCA9IDA7XG5cbiAgICBmb3IgKFxuICAgICAgO1xuICAgICAgYyA8IHRoaXMuX21vdGlvbkRhdGEuY3VydmVDb3VudCAmJlxuICAgICAgY3VydmVzLmF0KGMpLnR5cGUgPT1cbiAgICAgICAgQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQuQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXRfUGFyYW1ldGVyO1xuICAgICAgKytjXG4gICAgKSB7XG4gICAgICBwYXJhbWV0ZXJNb3Rpb25DdXJ2ZUNvdW50Kys7XG5cbiAgICAgIC8vIEZpbmQgcGFyYW1ldGVyIGluZGV4LlxuICAgICAgcGFyYW1ldGVySW5kZXggPSBtb2RlbC5nZXRQYXJhbWV0ZXJJbmRleChjdXJ2ZXMuYXQoYykuaWQpO1xuXG4gICAgICAvLyBTa2lwIGN1cnZlIGV2YWx1YXRpb24gaWYgbm8gdmFsdWUgaW4gc2luay5cbiAgICAgIGlmIChwYXJhbWV0ZXJJbmRleCA9PSAtMSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgc291cmNlVmFsdWU6IG51bWJlciA9XG4gICAgICAgIG1vZGVsLmdldFBhcmFtZXRlclZhbHVlQnlJbmRleChwYXJhbWV0ZXJJbmRleCk7XG5cbiAgICAgIC8vIEV2YWx1YXRlIGN1cnZlIGFuZCBhcHBseSB2YWx1ZS5cbiAgICAgIHZhbHVlID0gZXZhbHVhdGVDdXJ2ZSh0aGlzLl9tb3Rpb25EYXRhLCBjLCB0aW1lKTtcblxuICAgICAgaWYgKGV5ZUJsaW5rVmFsdWUgIT0gTnVtYmVyLk1BWF9WQUxVRSkge1xuICAgICAgICBmb3IgKFxuICAgICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgICBpIDwgdGhpcy5fZXllQmxpbmtQYXJhbWV0ZXJJZHMuZ2V0U2l6ZSgpICYmIGkgPCBNYXhUYXJnZXRTaXplO1xuICAgICAgICAgICsraVxuICAgICAgICApIHtcbiAgICAgICAgICBpZiAodGhpcy5fZXllQmxpbmtQYXJhbWV0ZXJJZHMuYXQoaSkgPT0gY3VydmVzLmF0KGMpLmlkKSB7XG4gICAgICAgICAgICB2YWx1ZSAqPSBleWVCbGlua1ZhbHVlO1xuICAgICAgICAgICAgZXllQmxpbmtGbGFncyB8PSAxIDw8IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGxpcFN5bmNWYWx1ZSAhPSBOdW1iZXIuTUFYX1ZBTFVFKSB7XG4gICAgICAgIGZvciAoXG4gICAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICAgIGkgPCB0aGlzLl9saXBTeW5jUGFyYW1ldGVySWRzLmdldFNpemUoKSAmJiBpIDwgTWF4VGFyZ2V0U2l6ZTtcbiAgICAgICAgICArK2lcbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX2xpcFN5bmNQYXJhbWV0ZXJJZHMuYXQoaSkgPT0gY3VydmVzLmF0KGMpLmlkKSB7XG4gICAgICAgICAgICB2YWx1ZSArPSBsaXBTeW5jVmFsdWU7XG4gICAgICAgICAgICBsaXBTeW5jRmxhZ3MgfD0gMSA8PCBpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxldCB2OiBudW1iZXI7XG5cbiAgICAgIC8vIOODkeODqeODoeODvOOCv+OBlOOBqOOBruODleOCp+ODvOODiVxuICAgICAgaWYgKGN1cnZlcy5hdChjKS5mYWRlSW5UaW1lIDwgMC4wICYmIGN1cnZlcy5hdChjKS5mYWRlT3V0VGltZSA8IDAuMCkge1xuICAgICAgICAvLyDjg6Ljg7zjgrfjg6fjg7Pjga7jg5Xjgqfjg7zjg4njgpLpgannlKhcbiAgICAgICAgdiA9IHNvdXJjZVZhbHVlICsgKHZhbHVlIC0gc291cmNlVmFsdWUpICogZmFkZVdlaWdodDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIOODkeODqeODoeODvOOCv+OBq+WvvuOBl+OBpuODleOCp+ODvOODieOCpOODs+OBi+ODleOCp+ODvOODieOCouOCpuODiOOBjOioreWumuOBl+OBpuOBguOCi+WgtOWQiOOBr+OBneOBoeOCieOCkumBqeeUqFxuICAgICAgICBsZXQgZmluOiBudW1iZXI7XG4gICAgICAgIGxldCBmb3V0OiBudW1iZXI7XG5cbiAgICAgICAgaWYgKGN1cnZlcy5hdChjKS5mYWRlSW5UaW1lIDwgMC4wKSB7XG4gICAgICAgICAgZmluID0gdG1wRmFkZUluO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZpbiA9XG4gICAgICAgICAgICBjdXJ2ZXMuYXQoYykuZmFkZUluVGltZSA9PSAwLjBcbiAgICAgICAgICAgICAgPyAxLjBcbiAgICAgICAgICAgICAgOiBDdWJpc21NYXRoLmdldEVhc2luZ1NpbmUoXG4gICAgICAgICAgICAgICAgICAodXNlclRpbWVTZWNvbmRzIC0gbW90aW9uUXVldWVFbnRyeS5nZXRGYWRlSW5TdGFydFRpbWUoKSkgL1xuICAgICAgICAgICAgICAgICAgICBjdXJ2ZXMuYXQoYykuZmFkZUluVGltZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3VydmVzLmF0KGMpLmZhZGVPdXRUaW1lIDwgMC4wKSB7XG4gICAgICAgICAgZm91dCA9IHRtcEZhZGVPdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm91dCA9XG4gICAgICAgICAgICBjdXJ2ZXMuYXQoYykuZmFkZU91dFRpbWUgPT0gMC4wIHx8XG4gICAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LmdldEVuZFRpbWUoKSA8IDAuMFxuICAgICAgICAgICAgICA/IDEuMFxuICAgICAgICAgICAgICA6IEN1YmlzbU1hdGguZ2V0RWFzaW5nU2luZShcbiAgICAgICAgICAgICAgICAgIChtb3Rpb25RdWV1ZUVudHJ5LmdldEVuZFRpbWUoKSAtIHVzZXJUaW1lU2Vjb25kcykgL1xuICAgICAgICAgICAgICAgICAgICBjdXJ2ZXMuYXQoYykuZmFkZU91dFRpbWVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcGFyYW1XZWlnaHQ6IG51bWJlciA9IHRoaXMuX3dlaWdodCAqIGZpbiAqIGZvdXQ7XG5cbiAgICAgICAgLy8g44OR44Op44Oh44O844K/44GU44Go44Gu44OV44Kn44O844OJ44KS6YGp55SoXG4gICAgICAgIHYgPSBzb3VyY2VWYWx1ZSArICh2YWx1ZSAtIHNvdXJjZVZhbHVlKSAqIHBhcmFtV2VpZ2h0O1xuICAgICAgfVxuXG4gICAgICBtb2RlbC5zZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgocGFyYW1ldGVySW5kZXgsIHYsIDEuMCk7XG4gICAgfVxuXG4gICAge1xuICAgICAgaWYgKGV5ZUJsaW5rVmFsdWUgIT0gTnVtYmVyLk1BWF9WQUxVRSkge1xuICAgICAgICBmb3IgKFxuICAgICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgICBpIDwgdGhpcy5fZXllQmxpbmtQYXJhbWV0ZXJJZHMuZ2V0U2l6ZSgpICYmIGkgPCBNYXhUYXJnZXRTaXplO1xuICAgICAgICAgICsraVxuICAgICAgICApIHtcbiAgICAgICAgICBjb25zdCBzb3VyY2VWYWx1ZTogbnVtYmVyID0gbW9kZWwuZ2V0UGFyYW1ldGVyVmFsdWVCeUlkKFxuICAgICAgICAgICAgdGhpcy5fZXllQmxpbmtQYXJhbWV0ZXJJZHMuYXQoaSlcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgLy8g44Oi44O844K344On44Oz44Gn44Gu5LiK5pu444GN44GM44GC44Gj44Gf5pmC44Gr44Gv44G+44Gw44Gf44GN44Gv6YGp55So44GX44Gq44GEXG4gICAgICAgICAgaWYgKChleWVCbGlua0ZsYWdzID4+IGkpICYgMHgwMSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgdjogbnVtYmVyID1cbiAgICAgICAgICAgIHNvdXJjZVZhbHVlICsgKGV5ZUJsaW5rVmFsdWUgLSBzb3VyY2VWYWx1ZSkgKiBmYWRlV2VpZ2h0O1xuXG4gICAgICAgICAgbW9kZWwuc2V0UGFyYW1ldGVyVmFsdWVCeUlkKHRoaXMuX2V5ZUJsaW5rUGFyYW1ldGVySWRzLmF0KGkpLCB2KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobGlwU3luY1ZhbHVlICE9IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgZm9yIChcbiAgICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgICAgaSA8IHRoaXMuX2xpcFN5bmNQYXJhbWV0ZXJJZHMuZ2V0U2l6ZSgpICYmIGkgPCBNYXhUYXJnZXRTaXplO1xuICAgICAgICAgICsraVxuICAgICAgICApIHtcbiAgICAgICAgICBjb25zdCBzb3VyY2VWYWx1ZTogbnVtYmVyID0gbW9kZWwuZ2V0UGFyYW1ldGVyVmFsdWVCeUlkKFxuICAgICAgICAgICAgdGhpcy5fbGlwU3luY1BhcmFtZXRlcklkcy5hdChpKVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICAvLyDjg6Ljg7zjgrfjg6fjg7Pjgafjga7kuIrmm7jjgY3jgYzjgYLjgaPjgZ/mmYLjgavjga/jg6rjg4Pjg5fjgrfjg7Pjgq/jga/pgannlKjjgZfjgarjgYRcbiAgICAgICAgICBpZiAoKGxpcFN5bmNGbGFncyA+PiBpKSAmIDB4MDEpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IHY6IG51bWJlciA9XG4gICAgICAgICAgICBzb3VyY2VWYWx1ZSArIChsaXBTeW5jVmFsdWUgLSBzb3VyY2VWYWx1ZSkgKiBmYWRlV2VpZ2h0O1xuXG4gICAgICAgICAgbW9kZWwuc2V0UGFyYW1ldGVyVmFsdWVCeUlkKHRoaXMuX2xpcFN5bmNQYXJhbWV0ZXJJZHMuYXQoaSksIHYpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChcbiAgICAgIDtcbiAgICAgIGMgPCB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlQ291bnQgJiZcbiAgICAgIGN1cnZlcy5hdChjKS50eXBlID09XG4gICAgICAgIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0LkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X1BhcnRPcGFjaXR5O1xuICAgICAgKytjXG4gICAgKSB7XG4gICAgICAvLyBGaW5kIHBhcmFtZXRlciBpbmRleC5cbiAgICAgIHBhcmFtZXRlckluZGV4ID0gbW9kZWwuZ2V0UGFyYW1ldGVySW5kZXgoY3VydmVzLmF0KGMpLmlkKTtcblxuICAgICAgLy8gU2tpcCBjdXJ2ZSBldmFsdWF0aW9uIGlmIG5vIHZhbHVlIGluIHNpbmsuXG4gICAgICBpZiAocGFyYW1ldGVySW5kZXggPT0gLTEpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIEV2YWx1YXRlIGN1cnZlIGFuZCBhcHBseSB2YWx1ZS5cbiAgICAgIHZhbHVlID0gZXZhbHVhdGVDdXJ2ZSh0aGlzLl9tb3Rpb25EYXRhLCBjLCB0aW1lKTtcblxuICAgICAgbW9kZWwuc2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4KHBhcmFtZXRlckluZGV4LCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKHRpbWVPZmZzZXRTZWNvbmRzID49IHRoaXMuX21vdGlvbkRhdGEuZHVyYXRpb24pIHtcbiAgICAgIGlmICh0aGlzLl9pc0xvb3ApIHtcbiAgICAgICAgbW90aW9uUXVldWVFbnRyeS5zZXRTdGFydFRpbWUodXNlclRpbWVTZWNvbmRzKTsgLy8g5pyA5Yid44Gu54q25oWL44G4XG4gICAgICAgIGlmICh0aGlzLl9pc0xvb3BGYWRlSW4pIHtcbiAgICAgICAgICAvLyDjg6vjg7zjg5flhoXjgafjg6vjg7zjg5fnlKjjg5Xjgqfjg7zjg4njgqTjg7PjgYzmnInlirnjga7mmYLjga/jgIHjg5Xjgqfjg7zjg4njgqTjg7PoqK3lrprjgZfnm7TjgZdcbiAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnNldEZhZGVJblN0YXJ0VGltZSh1c2VyVGltZVNlY29uZHMpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5fb25GaW5pc2hlZE1vdGlvbikge1xuICAgICAgICAgIHRoaXMuX29uRmluaXNoZWRNb3Rpb24odGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnNldElzRmluaXNoZWQodHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX2xhc3RXZWlnaHQgPSBmYWRlV2VpZ2h0O1xuICB9XG5cbiAgLyoqXG4gICAqIOODq+ODvOODl+aDheWgseOBruioreWumlxuICAgKiBAcGFyYW0gbG9vcCDjg6vjg7zjg5fmg4XloLFcbiAgICovXG4gIHB1YmxpYyBzZXRJc0xvb3AobG9vcDogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuX2lzTG9vcCA9IGxvb3A7XG4gIH1cblxuICAvKipcbiAgICog44Or44O844OX5oOF5aCx44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4gdHJ1ZSDjg6vjg7zjg5fjgZnjgotcbiAgICogQHJldHVybiBmYWxzZSDjg6vjg7zjg5fjgZfjgarjgYRcbiAgICovXG4gIHB1YmxpYyBpc0xvb3AoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2lzTG9vcDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6vjg7zjg5fmmYLjga7jg5Xjgqfjg7zjg4njgqTjg7Pmg4XloLHjga7oqK3lrppcbiAgICogQHBhcmFtIGxvb3BGYWRlSW4gIOODq+ODvOODl+aZguOBruODleOCp+ODvOODieOCpOODs+aDheWgsVxuICAgKi9cbiAgcHVibGljIHNldElzTG9vcEZhZGVJbihsb29wRmFkZUluOiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5faXNMb29wRmFkZUluID0gbG9vcEZhZGVJbjtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6vjg7zjg5fmmYLjga7jg5Xjgqfjg7zjg4njgqTjg7Pmg4XloLHjga7lj5blvpdcbiAgICpcbiAgICogQHJldHVybiAgdHJ1ZSAgICDjgZnjgotcbiAgICogQHJldHVybiAgZmFsc2UgICDjgZfjgarjgYRcbiAgICovXG4gIHB1YmxpYyBpc0xvb3BGYWRlSW4oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2lzTG9vcEZhZGVJbjtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7plbfjgZXjgpLlj5blvpfjgZnjgovjgIJcbiAgICpcbiAgICogQHJldHVybiAg44Oi44O844K344On44Oz44Gu6ZW344GVW+enkl1cbiAgICovXG4gIHB1YmxpYyBnZXREdXJhdGlvbigpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9pc0xvb3AgPyAtMS4wIDogdGhpcy5fbG9vcER1cmF0aW9uU2Vjb25kcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jg6vjg7zjg5fmmYLjga7plbfjgZXjgpLlj5blvpfjgZnjgovjgIJcbiAgICpcbiAgICogQHJldHVybiAg44Oi44O844K344On44Oz44Gu44Or44O844OX5pmC44Gu6ZW344GVW+enkl1cbiAgICovXG4gIHB1YmxpYyBnZXRMb29wRHVyYXRpb24oKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbG9vcER1cmF0aW9uU2Vjb25kcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jgavlr77jgZnjgovjg5Xjgqfjg7zjg4njgqTjg7Pjga7mmYLplpPjgpLoqK3lrprjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtIHBhcmFtZXRlcklkICAgICDjg5Hjg6njg6Hjg7zjgr9JRFxuICAgKiBAcGFyYW0gdmFsdWUgICAgICAgICAgIOODleOCp+ODvOODieOCpOODs+OBq+OBi+OBi+OCi+aZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgc2V0UGFyYW1ldGVyRmFkZUluVGltZShcbiAgICBwYXJhbWV0ZXJJZDogQ3ViaXNtSWRIYW5kbGUsXG4gICAgdmFsdWU6IG51bWJlclxuICApOiB2b2lkIHtcbiAgICBjb25zdCBjdXJ2ZXM6IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25DdXJ2ZT4gPSB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlcztcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZUNvdW50OyArK2kpIHtcbiAgICAgIGlmIChwYXJhbWV0ZXJJZCA9PSBjdXJ2ZXMuYXQoaSkuaWQpIHtcbiAgICAgICAgY3VydmVzLmF0KGkpLmZhZGVJblRpbWUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jgavlr77jgZnjgovjg5Xjgqfjg7zjg4njgqLjgqbjg4jjga7mmYLplpPjga7oqK3lrppcbiAgICogQHBhcmFtIHBhcmFtZXRlcklkICAgICDjg5Hjg6njg6Hjg7zjgr9JRFxuICAgKiBAcGFyYW0gdmFsdWUgICAgICAgICAgIOODleOCp+ODvOODieOCouOCpuODiOOBq+OBi+OBi+OCi+aZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgc2V0UGFyYW1ldGVyRmFkZU91dFRpbWUoXG4gICAgcGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlLFxuICAgIHZhbHVlOiBudW1iZXJcbiAgKTogdm9pZCB7XG4gICAgY29uc3QgY3VydmVzOiBjc21WZWN0b3I8Q3ViaXNtTW90aW9uQ3VydmU+ID0gdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXM7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX21vdGlvbkRhdGEuY3VydmVDb3VudDsgKytpKSB7XG4gICAgICBpZiAocGFyYW1ldGVySWQgPT0gY3VydmVzLmF0KGkpLmlkKSB7XG4gICAgICAgIGN1cnZlcy5hdChpKS5mYWRlT3V0VGltZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOODkeODqeODoeODvOOCv+OBq+WvvuOBmeOCi+ODleOCp+ODvOODieOCpOODs+OBruaZgumWk+OBruWPluW+l1xuICAgKiBAcGFyYW0gICAgcGFyYW1ldGVySWQgICAgIOODkeODqeODoeODvOOCv0lEXG4gICAqIEByZXR1cm4gICDjg5Xjgqfjg7zjg4njgqTjg7PjgavjgYvjgYvjgovmmYLplpNb56eSXVxuICAgKi9cbiAgcHVibGljIGdldFBhcmFtZXRlckZhZGVJblRpbWUocGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlKTogbnVtYmVyIHtcbiAgICBjb25zdCBjdXJ2ZXM6IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25DdXJ2ZT4gPSB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlcztcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZUNvdW50OyArK2kpIHtcbiAgICAgIGlmIChwYXJhbWV0ZXJJZCA9PSBjdXJ2ZXMuYXQoaSkuaWQpIHtcbiAgICAgICAgcmV0dXJuIGN1cnZlcy5hdChpKS5mYWRlSW5UaW1lO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jgavlr77jgZnjgovjg5Xjgqfjg7zjg4njgqLjgqbjg4jjga7mmYLplpPjgpLlj5blvpdcbiAgICpcbiAgICogQHBhcmFtICAgcGFyYW1ldGVySWQgICAgIOODkeODqeODoeODvOOCv0lEXG4gICAqIEByZXR1cm4gICDjg5Xjgqfjg7zjg4njgqLjgqbjg4jjgavjgYvjgYvjgovmmYLplpNb56eSXVxuICAgKi9cbiAgcHVibGljIGdldFBhcmFtZXRlckZhZGVPdXRUaW1lKHBhcmFtZXRlcklkOiBDdWJpc21JZEhhbmRsZSk6IG51bWJlciB7XG4gICAgY29uc3QgY3VydmVzOiBjc21WZWN0b3I8Q3ViaXNtTW90aW9uQ3VydmU+ID0gdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXM7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX21vdGlvbkRhdGEuY3VydmVDb3VudDsgKytpKSB7XG4gICAgICBpZiAocGFyYW1ldGVySWQgPT0gY3VydmVzLmF0KGkpLmlkKSB7XG4gICAgICAgIHJldHVybiBjdXJ2ZXMuYXQoaSkuZmFkZU91dFRpbWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIOiHquWLleOCqOODleOCp+OCr+ODiOOBjOOBi+OBi+OBo+OBpuOBhOOCi+ODkeODqeODoeODvOOCv0lE44Oq44K544OI44Gu6Kit5a6aXG4gICAqIEBwYXJhbSBleWVCbGlua1BhcmFtZXRlcklkcyAgICDoh6rli5Xjgb7jgbDjgZ/jgY3jgYzjgYvjgYvjgaPjgabjgYTjgovjg5Hjg6njg6Hjg7zjgr9JROOBruODquOCueODiFxuICAgKiBAcGFyYW0gbGlwU3luY1BhcmFtZXRlcklkcyAgICAg44Oq44OD44OX44K344Oz44Kv44GM44GL44GL44Gj44Gm44GE44KL44OR44Op44Oh44O844K/SUTjga7jg6rjgrnjg4hcbiAgICovXG4gIHB1YmxpYyBzZXRFZmZlY3RJZHMoXG4gICAgZXllQmxpbmtQYXJhbWV0ZXJJZHM6IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT4sXG4gICAgbGlwU3luY1BhcmFtZXRlcklkczogY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPlxuICApOiB2b2lkIHtcbiAgICB0aGlzLl9leWVCbGlua1BhcmFtZXRlcklkcyA9IGV5ZUJsaW5rUGFyYW1ldGVySWRzO1xuICAgIHRoaXMuX2xpcFN5bmNQYXJhbWV0ZXJJZHMgPSBsaXBTeW5jUGFyYW1ldGVySWRzO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlRnJhbWVSYXRlID0gMzAuMDtcbiAgICB0aGlzLl9sb29wRHVyYXRpb25TZWNvbmRzID0gLTEuMDtcbiAgICB0aGlzLl9pc0xvb3AgPSBmYWxzZTsgLy8gdHJ1ZeOBi+OCiSBmYWxzZSDjgbjjg4fjg5Xjgqnjg6vjg4jjgpLlpInmm7RcbiAgICB0aGlzLl9pc0xvb3BGYWRlSW4gPSB0cnVlOyAvLyDjg6vjg7zjg5fmmYLjgavjg5Xjgqfjg7zjg4njgqTjg7PjgYzmnInlirnjgYvjganjgYbjgYvjga7jg5Xjg6njgrBcbiAgICB0aGlzLl9sYXN0V2VpZ2h0ID0gMC4wO1xuICAgIHRoaXMuX21vdGlvbkRhdGEgPSBudWxsO1xuICAgIHRoaXMuX21vZGVsQ3VydmVJZEV5ZUJsaW5rID0gbnVsbDtcbiAgICB0aGlzLl9tb2RlbEN1cnZlSWRMaXBTeW5jID0gbnVsbDtcbiAgICB0aGlzLl9leWVCbGlua1BhcmFtZXRlcklkcyA9IG51bGw7XG4gICAgdGhpcy5fbGlwU3luY1BhcmFtZXRlcklkcyA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICB0aGlzLl9tb3Rpb25EYXRhID0gdm9pZCAwO1xuICAgIHRoaXMuX21vdGlvbkRhdGEgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIG1vdGlvbjMuanNvbuOCkuODkeODvOOCueOBmeOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gbW90aW9uSnNvbiAgbW90aW9uMy5qc29u44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXG4gICAqIEBwYXJhbSBzaXplICAgICAgICDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICovXG4gIHB1YmxpYyBwYXJzZShtb3Rpb25Kc29uOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fbW90aW9uRGF0YSA9IG5ldyBDdWJpc21Nb3Rpb25EYXRhKCk7XG5cbiAgICBsZXQganNvbjogQ3ViaXNtTW90aW9uSnNvbiA9IG5ldyBDdWJpc21Nb3Rpb25Kc29uKG1vdGlvbkpzb24sIHNpemUpO1xuXG4gICAgdGhpcy5fbW90aW9uRGF0YS5kdXJhdGlvbiA9IGpzb24uZ2V0TW90aW9uRHVyYXRpb24oKTtcbiAgICB0aGlzLl9tb3Rpb25EYXRhLmxvb3AgPSBqc29uLmlzTW90aW9uTG9vcCgpO1xuICAgIHRoaXMuX21vdGlvbkRhdGEuY3VydmVDb3VudCA9IGpzb24uZ2V0TW90aW9uQ3VydmVDb3VudCgpO1xuICAgIHRoaXMuX21vdGlvbkRhdGEuZnBzID0ganNvbi5nZXRNb3Rpb25GcHMoKTtcbiAgICB0aGlzLl9tb3Rpb25EYXRhLmV2ZW50Q291bnQgPSBqc29uLmdldEV2ZW50Q291bnQoKTtcblxuICAgIGNvbnN0IGFyZUJlemllcnNSZXN0cnVjdGVkOiBib29sZWFuID0ganNvbi5nZXRFdmFsdWF0aW9uT3B0aW9uRmxhZyhcbiAgICAgIEV2YWx1YXRpb25PcHRpb25GbGFnLkV2YWx1YXRpb25PcHRpb25GbGFnX0FyZUJlemllcnNSaXN0cmljdGVkXG4gICAgKTtcblxuICAgIGlmIChqc29uLmlzRXhpc3RNb3Rpb25GYWRlSW5UaW1lKCkpIHtcbiAgICAgIHRoaXMuX2ZhZGVJblNlY29uZHMgPVxuICAgICAgICBqc29uLmdldE1vdGlvbkZhZGVJblRpbWUoKSA8IDAuMCA/IDEuMCA6IGpzb24uZ2V0TW90aW9uRmFkZUluVGltZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9mYWRlSW5TZWNvbmRzID0gMS4wO1xuICAgIH1cblxuICAgIGlmIChqc29uLmlzRXhpc3RNb3Rpb25GYWRlT3V0VGltZSgpKSB7XG4gICAgICB0aGlzLl9mYWRlT3V0U2Vjb25kcyA9XG4gICAgICAgIGpzb24uZ2V0TW90aW9uRmFkZU91dFRpbWUoKSA8IDAuMCA/IDEuMCA6IGpzb24uZ2V0TW90aW9uRmFkZU91dFRpbWUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fZmFkZU91dFNlY29uZHMgPSAxLjA7XG4gICAgfVxuXG4gICAgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXMudXBkYXRlU2l6ZShcbiAgICAgIHRoaXMuX21vdGlvbkRhdGEuY3VydmVDb3VudCxcbiAgICAgIEN1YmlzbU1vdGlvbkN1cnZlLFxuICAgICAgdHJ1ZVxuICAgICk7XG4gICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy51cGRhdGVTaXplKFxuICAgICAganNvbi5nZXRNb3Rpb25Ub3RhbFNlZ21lbnRDb3VudCgpLFxuICAgICAgQ3ViaXNtTW90aW9uU2VnbWVudCxcbiAgICAgIHRydWVcbiAgICApO1xuICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLnVwZGF0ZVNpemUoXG4gICAgICBqc29uLmdldE1vdGlvblRvdGFsUG9pbnRDb3VudCgpLFxuICAgICAgQ3ViaXNtTW90aW9uUG9pbnQsXG4gICAgICB0cnVlXG4gICAgKTtcbiAgICB0aGlzLl9tb3Rpb25EYXRhLmV2ZW50cy51cGRhdGVTaXplKFxuICAgICAgdGhpcy5fbW90aW9uRGF0YS5ldmVudENvdW50LFxuICAgICAgQ3ViaXNtTW90aW9uRXZlbnQsXG4gICAgICB0cnVlXG4gICAgKTtcblxuICAgIGxldCB0b3RhbFBvaW50Q291bnQgPSAwO1xuICAgIGxldCB0b3RhbFNlZ21lbnRDb3VudCA9IDA7XG5cbiAgICAvLyBDdXJ2ZXNcbiAgICBmb3IgKFxuICAgICAgbGV0IGN1cnZlQ291bnQgPSAwO1xuICAgICAgY3VydmVDb3VudCA8IHRoaXMuX21vdGlvbkRhdGEuY3VydmVDb3VudDtcbiAgICAgICsrY3VydmVDb3VudFxuICAgICkge1xuICAgICAgaWYgKGpzb24uZ2V0TW90aW9uQ3VydmVUYXJnZXQoY3VydmVDb3VudCkgPT0gVGFyZ2V0TmFtZU1vZGVsKSB7XG4gICAgICAgIHRoaXMuX21vdGlvbkRhdGEuY3VydmVzLmF0KGN1cnZlQ291bnQpLnR5cGUgPVxuICAgICAgICAgIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0LkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X01vZGVsO1xuICAgICAgfSBlbHNlIGlmIChqc29uLmdldE1vdGlvbkN1cnZlVGFyZ2V0KGN1cnZlQ291bnQpID09IFRhcmdldE5hbWVQYXJhbWV0ZXIpIHtcbiAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXMuYXQoY3VydmVDb3VudCkudHlwZSA9XG4gICAgICAgICAgQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQuQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXRfUGFyYW1ldGVyO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAganNvbi5nZXRNb3Rpb25DdXJ2ZVRhcmdldChjdXJ2ZUNvdW50KSA9PSBUYXJnZXROYW1lUGFydE9wYWNpdHlcbiAgICAgICkge1xuICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlcy5hdChjdXJ2ZUNvdW50KS50eXBlID1cbiAgICAgICAgICBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldC5DdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldF9QYXJ0T3BhY2l0eTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIEN1YmlzbUxvZ1dhcm5pbmcoXG4gICAgICAgICAgJ1dhcm5pbmcgOiBVbmFibGUgdG8gZ2V0IHNlZ21lbnQgdHlwZSBmcm9tIEN1cnZlISBUaGUgbnVtYmVyIG9mIFwiQ3VydmVDb3VudFwiIG1heSBiZSBpbmNvcnJlY3QhJ1xuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlcy5hdChjdXJ2ZUNvdW50KS5pZCA9XG4gICAgICAgIGpzb24uZ2V0TW90aW9uQ3VydmVJZChjdXJ2ZUNvdW50KTtcblxuICAgICAgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXMuYXQoY3VydmVDb3VudCkuYmFzZVNlZ21lbnRJbmRleCA9XG4gICAgICAgIHRvdGFsU2VnbWVudENvdW50O1xuXG4gICAgICB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlcy5hdChjdXJ2ZUNvdW50KS5mYWRlSW5UaW1lID1cbiAgICAgICAganNvbi5pc0V4aXN0TW90aW9uQ3VydmVGYWRlSW5UaW1lKGN1cnZlQ291bnQpXG4gICAgICAgICAgPyBqc29uLmdldE1vdGlvbkN1cnZlRmFkZUluVGltZShjdXJ2ZUNvdW50KVxuICAgICAgICAgIDogLTEuMDtcbiAgICAgIHRoaXMuX21vdGlvbkRhdGEuY3VydmVzLmF0KGN1cnZlQ291bnQpLmZhZGVPdXRUaW1lID1cbiAgICAgICAganNvbi5pc0V4aXN0TW90aW9uQ3VydmVGYWRlT3V0VGltZShjdXJ2ZUNvdW50KVxuICAgICAgICAgID8ganNvbi5nZXRNb3Rpb25DdXJ2ZUZhZGVPdXRUaW1lKGN1cnZlQ291bnQpXG4gICAgICAgICAgOiAtMS4wO1xuXG4gICAgICAvLyBTZWdtZW50c1xuICAgICAgZm9yIChcbiAgICAgICAgbGV0IHNlZ21lbnRQb3NpdGlvbiA9IDA7XG4gICAgICAgIHNlZ21lbnRQb3NpdGlvbiA8IGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50Q291bnQoY3VydmVDb3VudCk7XG5cbiAgICAgICkge1xuICAgICAgICBpZiAoc2VnbWVudFBvc2l0aW9uID09IDApIHtcbiAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnNlZ21lbnRzLmF0KHRvdGFsU2VnbWVudENvdW50KS5iYXNlUG9pbnRJbmRleCA9XG4gICAgICAgICAgICB0b3RhbFBvaW50Q291bnQ7XG5cbiAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdCh0b3RhbFBvaW50Q291bnQpLnRpbWUgPVxuICAgICAgICAgICAganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoY3VydmVDb3VudCwgc2VnbWVudFBvc2l0aW9uKTtcbiAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdCh0b3RhbFBvaW50Q291bnQpLnZhbHVlID1cbiAgICAgICAgICAgIGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KGN1cnZlQ291bnQsIHNlZ21lbnRQb3NpdGlvbiArIDEpO1xuXG4gICAgICAgICAgdG90YWxQb2ludENvdW50ICs9IDE7XG4gICAgICAgICAgc2VnbWVudFBvc2l0aW9uICs9IDI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy5hdCh0b3RhbFNlZ21lbnRDb3VudCkuYmFzZVBvaW50SW5kZXggPVxuICAgICAgICAgICAgdG90YWxQb2ludENvdW50IC0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHNlZ21lbnQ6IG51bWJlciA9IGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KFxuICAgICAgICAgIGN1cnZlQ291bnQsXG4gICAgICAgICAgc2VnbWVudFBvc2l0aW9uXG4gICAgICAgICk7XG4gICAgICAgIHN3aXRjaCAoc2VnbWVudCkge1xuICAgICAgICAgIGNhc2UgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUuQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfTGluZWFyOiB7XG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnNlZ21lbnRzLmF0KHRvdGFsU2VnbWVudENvdW50KS5zZWdtZW50VHlwZSA9XG4gICAgICAgICAgICAgIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlLkN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0xpbmVhcjtcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuc2VnbWVudHMuYXQodG90YWxTZWdtZW50Q291bnQpLmV2YWx1YXRlID1cbiAgICAgICAgICAgICAgbGluZWFyRXZhbHVhdGU7XG5cbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KHRvdGFsUG9pbnRDb3VudCkudGltZSA9XG4gICAgICAgICAgICAgIGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KGN1cnZlQ291bnQsIHNlZ21lbnRQb3NpdGlvbiArIDEpO1xuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuYXQodG90YWxQb2ludENvdW50KS52YWx1ZSA9XG4gICAgICAgICAgICAgIGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KGN1cnZlQ291bnQsIHNlZ21lbnRQb3NpdGlvbiArIDIpO1xuXG4gICAgICAgICAgICB0b3RhbFBvaW50Q291bnQgKz0gMTtcbiAgICAgICAgICAgIHNlZ21lbnRQb3NpdGlvbiArPSAzO1xuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZS5DdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9CZXppZXI6IHtcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuc2VnbWVudHMuYXQodG90YWxTZWdtZW50Q291bnQpLnNlZ21lbnRUeXBlID1cbiAgICAgICAgICAgICAgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUuQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfQmV6aWVyO1xuXG4gICAgICAgICAgICBpZiAoYXJlQmV6aWVyc1Jlc3RydWN0ZWQgfHwgVXNlT2xkQmV6aWVyc0N1cnZlTW90aW9uKSB7XG4gICAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuc2VnbWVudHMuYXQodG90YWxTZWdtZW50Q291bnQpLmV2YWx1YXRlID1cbiAgICAgICAgICAgICAgICBiZXppZXJFdmFsdWF0ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuc2VnbWVudHMuYXQodG90YWxTZWdtZW50Q291bnQpLmV2YWx1YXRlID1cbiAgICAgICAgICAgICAgICBiZXppZXJFdmFsdWF0ZUNhcmRhbm9JbnRlcnByZXRhdGlvbjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuYXQodG90YWxQb2ludENvdW50KS50aW1lID1cbiAgICAgICAgICAgICAganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoY3VydmVDb3VudCwgc2VnbWVudFBvc2l0aW9uICsgMSk7XG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdCh0b3RhbFBvaW50Q291bnQpLnZhbHVlID1cbiAgICAgICAgICAgICAganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoY3VydmVDb3VudCwgc2VnbWVudFBvc2l0aW9uICsgMik7XG5cbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KHRvdGFsUG9pbnRDb3VudCArIDEpLnRpbWUgPVxuICAgICAgICAgICAgICBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChjdXJ2ZUNvdW50LCBzZWdtZW50UG9zaXRpb24gKyAzKTtcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KHRvdGFsUG9pbnRDb3VudCArIDEpLnZhbHVlID1cbiAgICAgICAgICAgICAganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoY3VydmVDb3VudCwgc2VnbWVudFBvc2l0aW9uICsgNCk7XG5cbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KHRvdGFsUG9pbnRDb3VudCArIDIpLnRpbWUgPVxuICAgICAgICAgICAgICBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChjdXJ2ZUNvdW50LCBzZWdtZW50UG9zaXRpb24gKyA1KTtcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KHRvdGFsUG9pbnRDb3VudCArIDIpLnZhbHVlID1cbiAgICAgICAgICAgICAganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoY3VydmVDb3VudCwgc2VnbWVudFBvc2l0aW9uICsgNik7XG5cbiAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudCArPSAzO1xuICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICs9IDc7XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNhc2UgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUuQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfU3RlcHBlZDoge1xuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy5hdCh0b3RhbFNlZ21lbnRDb3VudCkuc2VnbWVudFR5cGUgPVxuICAgICAgICAgICAgICBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZS5DdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9TdGVwcGVkO1xuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy5hdCh0b3RhbFNlZ21lbnRDb3VudCkuZXZhbHVhdGUgPVxuICAgICAgICAgICAgICBzdGVwcGVkRXZhbHVhdGU7XG5cbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KHRvdGFsUG9pbnRDb3VudCkudGltZSA9XG4gICAgICAgICAgICAgIGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KGN1cnZlQ291bnQsIHNlZ21lbnRQb3NpdGlvbiArIDEpO1xuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuYXQodG90YWxQb2ludENvdW50KS52YWx1ZSA9XG4gICAgICAgICAgICAgIGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KGN1cnZlQ291bnQsIHNlZ21lbnRQb3NpdGlvbiArIDIpO1xuXG4gICAgICAgICAgICB0b3RhbFBvaW50Q291bnQgKz0gMTtcbiAgICAgICAgICAgIHNlZ21lbnRQb3NpdGlvbiArPSAzO1xuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjYXNlIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlLkN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0ludmVyc2VTdGVwcGVkOiB7XG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnNlZ21lbnRzLmF0KHRvdGFsU2VnbWVudENvdW50KS5zZWdtZW50VHlwZSA9XG4gICAgICAgICAgICAgIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlLkN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0ludmVyc2VTdGVwcGVkO1xuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy5hdCh0b3RhbFNlZ21lbnRDb3VudCkuZXZhbHVhdGUgPVxuICAgICAgICAgICAgICBpbnZlcnNlU3RlcHBlZEV2YWx1YXRlO1xuXG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdCh0b3RhbFBvaW50Q291bnQpLnRpbWUgPVxuICAgICAgICAgICAgICBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChjdXJ2ZUNvdW50LCBzZWdtZW50UG9zaXRpb24gKyAxKTtcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KHRvdGFsUG9pbnRDb3VudCkudmFsdWUgPVxuICAgICAgICAgICAgICBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChjdXJ2ZUNvdW50LCBzZWdtZW50UG9zaXRpb24gKyAyKTtcblxuICAgICAgICAgICAgdG90YWxQb2ludENvdW50ICs9IDE7XG4gICAgICAgICAgICBzZWdtZW50UG9zaXRpb24gKz0gMztcblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIENTTV9BU1NFUlQoMCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICArK3RoaXMuX21vdGlvbkRhdGEuY3VydmVzLmF0KGN1cnZlQ291bnQpLnNlZ21lbnRDb3VudDtcbiAgICAgICAgKyt0b3RhbFNlZ21lbnRDb3VudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKFxuICAgICAgbGV0IHVzZXJkYXRhY291bnQgPSAwO1xuICAgICAgdXNlcmRhdGFjb3VudCA8IGpzb24uZ2V0RXZlbnRDb3VudCgpO1xuICAgICAgKyt1c2VyZGF0YWNvdW50XG4gICAgKSB7XG4gICAgICB0aGlzLl9tb3Rpb25EYXRhLmV2ZW50cy5hdCh1c2VyZGF0YWNvdW50KS5maXJlVGltZSA9XG4gICAgICAgIGpzb24uZ2V0RXZlbnRUaW1lKHVzZXJkYXRhY291bnQpO1xuICAgICAgdGhpcy5fbW90aW9uRGF0YS5ldmVudHMuYXQodXNlcmRhdGFjb3VudCkudmFsdWUgPVxuICAgICAgICBqc29uLmdldEV2ZW50VmFsdWUodXNlcmRhdGFjb3VudCk7XG4gICAgfVxuXG4gICAganNvbi5yZWxlYXNlKCk7XG4gICAganNvbiA9IHZvaWQgMDtcbiAgICBqc29uID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vjga7jg5Hjg6njg6Hjg7zjgr/mm7TmlrBcbiAgICpcbiAgICog44Kk44OZ44Oz44OI55m654Gr44Gu44OB44Kn44OD44Kv44CCXG4gICAqIOWFpeWKm+OBmeOCi+aZgumWk+OBr+WRvOOBsOOCjOOCi+ODouODvOOCt+ODp+ODs+OCv+OCpOODn+ODs+OCsOOCku+8kOOBqOOBl+OBn+enkuaVsOOBp+ihjOOBhuOAglxuICAgKlxuICAgKiBAcGFyYW0gYmVmb3JlQ2hlY2tUaW1lU2Vjb25kcyAgIOWJjeWbnuOBruOCpOODmeODs+ODiOODgeOCp+ODg+OCr+aZgumWk1vnp5JdXG4gICAqIEBwYXJhbSBtb3Rpb25UaW1lU2Vjb25kcyAgICAgICAg5LuK5Zue44Gu5YaN55Sf5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyBnZXRGaXJlZEV2ZW50KFxuICAgIGJlZm9yZUNoZWNrVGltZVNlY29uZHM6IG51bWJlcixcbiAgICBtb3Rpb25UaW1lU2Vjb25kczogbnVtYmVyXG4gICk6IGNzbVZlY3Rvcjxjc21TdHJpbmc+IHtcbiAgICB0aGlzLl9maXJlZEV2ZW50VmFsdWVzLnVwZGF0ZVNpemUoMCk7XG5cbiAgICAvLyDjgqTjg5njg7Pjg4jjga7nmbrngavjg4Hjgqfjg4Pjgq9cbiAgICBmb3IgKGxldCB1ID0gMDsgdSA8IHRoaXMuX21vdGlvbkRhdGEuZXZlbnRDb3VudDsgKyt1KSB7XG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuX21vdGlvbkRhdGEuZXZlbnRzLmF0KHUpLmZpcmVUaW1lID4gYmVmb3JlQ2hlY2tUaW1lU2Vjb25kcyAmJlxuICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLmV2ZW50cy5hdCh1KS5maXJlVGltZSA8PSBtb3Rpb25UaW1lU2Vjb25kc1xuICAgICAgKSB7XG4gICAgICAgIHRoaXMuX2ZpcmVkRXZlbnRWYWx1ZXMucHVzaEJhY2soXG4gICAgICAgICAgbmV3IGNzbVN0cmluZyh0aGlzLl9tb3Rpb25EYXRhLmV2ZW50cy5hdCh1KS52YWx1ZS5zKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9maXJlZEV2ZW50VmFsdWVzO1xuICB9XG5cbiAgcHVibGljIF9zb3VyY2VGcmFtZVJhdGU6IG51bWJlcjsgLy8g44Ot44O844OJ44GX44Gf44OV44Kh44Kk44Or44GuRlBT44CC6KiY6L+w44GM54Sh44GR44KM44Gw44OH44OV44Kp44Or44OI5YCkMTVmcHPjgajjgarjgotcbiAgcHVibGljIF9sb29wRHVyYXRpb25TZWNvbmRzOiBudW1iZXI7IC8vIG10buODleOCoeOCpOODq+OBp+Wumue+qeOBleOCjOOCi+S4gOmAo+OBruODouODvOOCt+ODp+ODs+OBrumVt+OBlVxuICBwdWJsaWMgX2lzTG9vcDogYm9vbGVhbjsgLy8g44Or44O844OX44GZ44KL44GLP1xuICBwdWJsaWMgX2lzTG9vcEZhZGVJbjogYm9vbGVhbjsgLy8g44Or44O844OX5pmC44Gr44OV44Kn44O844OJ44Kk44Oz44GM5pyJ5Yq544GL44Gp44GG44GL44Gu44OV44Op44Kw44CC5Yid5pyf5YCk44Gn44Gv5pyJ5Yq544CCXG4gIHB1YmxpYyBfbGFzdFdlaWdodDogbnVtYmVyOyAvLyDmnIDlvozjgavoqK3lrprjgZXjgozjgZ/ph43jgb9cblxuICBwdWJsaWMgX21vdGlvbkRhdGE6IEN1YmlzbU1vdGlvbkRhdGE7IC8vIOWun+mam+OBruODouODvOOCt+ODp+ODs+ODh+ODvOOCv+acrOS9k1xuXG4gIHB1YmxpYyBfZXllQmxpbmtQYXJhbWV0ZXJJZHM6IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT47IC8vIOiHquWLleOBvuOBsOOBn+OBjeOCkumBqeeUqOOBmeOCi+ODkeODqeODoeODvOOCv0lE44OP44Oz44OJ44Or44Gu44Oq44K544OI44CCICDjg6Ljg4fjg6vvvIjjg6Ljg4fjg6vjgrvjg4Pjg4bjgqPjg7PjgrDvvInjgajjg5Hjg6njg6Hjg7zjgr/jgpLlr77lv5zku5jjgZHjgovjgIJcbiAgcHVibGljIF9saXBTeW5jUGFyYW1ldGVySWRzOiBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+OyAvLyDjg6rjg4Pjg5fjgrfjg7Pjgq/jgpLpgannlKjjgZnjgovjg5Hjg6njg6Hjg7zjgr9JROODj+ODs+ODieODq+OBruODquOCueODiOOAgiAg44Oi44OH44Or77yI44Oi44OH44Or44K744OD44OG44Kj44Oz44Kw77yJ44Go44OR44Op44Oh44O844K/44KS5a++5b+c5LuY44GR44KL44CCXG5cbiAgcHVibGljIF9tb2RlbEN1cnZlSWRFeWVCbGluazogQ3ViaXNtSWRIYW5kbGU7IC8vIOODouODh+ODq+OBjOaMgeOBpOiHquWLleOBvuOBsOOBn+OBjeeUqOODkeODqeODoeODvOOCv0lE44Gu44OP44Oz44OJ44Or44CCICDjg6Ljg4fjg6vjgajjg6Ljg7zjgrfjg6fjg7PjgpLlr77lv5zku5jjgZHjgovjgIJcbiAgcHVibGljIF9tb2RlbEN1cnZlSWRMaXBTeW5jOiBDdWJpc21JZEhhbmRsZTsgLy8g44Oi44OH44Or44GM5oyB44Gk44Oq44OD44OX44K344Oz44Kv55So44OR44Op44Oh44O844K/SUTjga7jg4/jg7Pjg4njg6vjgIIgIOODouODh+ODq+OBqOODouODvOOCt+ODp+ODs+OCkuWvvuW/nOS7mOOBkeOCi+OAglxufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21tb3Rpb24nO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vdGlvbiA9ICQuQ3ViaXNtTW90aW9uO1xuICBleHBvcnQgdHlwZSBDdWJpc21Nb3Rpb24gPSAkLkN1YmlzbU1vdGlvbjtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IEN1YmlzbUlkSGFuZGxlIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xuaW1wb3J0IHsgY3NtU3RyaW5nIH0gZnJvbSAnLi4vdHlwZS9jc21zdHJpbmcnO1xuaW1wb3J0IHsgY3NtVmVjdG9yIH0gZnJvbSAnLi4vdHlwZS9jc212ZWN0b3InO1xuXG4vKipcbiAqIEBicmllZiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7nqK7poZ5cbiAqXG4gKiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7nqK7poZ7jgIJcbiAqL1xuZXhwb3J0IGVudW0gQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQge1xuICBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldF9Nb2RlbCwgLy8g44Oi44OH44Or44Gr5a++44GX44GmXG4gIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X1BhcmFtZXRlciwgLy8g44OR44Op44Oh44O844K/44Gr5a++44GX44GmXG4gIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X1BhcnRPcGFjaXR5LCAvLyDjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqbjgavlr77jgZfjgaZcbn1cblxuLyoqXG4gKiBAYnJpZWYg44Oi44O844K344On44Oz44Kr44O844OW44Gu44K744Kw44Oh44Oz44OI44Gu56iu6aGeXG4gKlxuICog44Oi44O844K344On44Oz44Kr44O844OW44Gu44K744Kw44Oh44Oz44OI44Gu56iu6aGe44CCXG4gKi9cbmV4cG9ydCBlbnVtIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlIHtcbiAgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfTGluZWFyID0gMCwgLy8g44Oq44OL44KiXG4gIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0JlemllciA9IDEsIC8vIOODmeOCuOOCp+absue3mlxuICBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9TdGVwcGVkID0gMiwgLy8g44K544OG44OD44OXXG4gIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0ludmVyc2VTdGVwcGVkID0gMywgLy8g44Kk44Oz44OQ44O844K544K544OG44OD44OXXG59XG5cbi8qKlxuICogQGJyaWVmIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruWItuW+oeeCuVxuICpcbiAqIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruWItuW+oeeCueOAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtTW90aW9uUG9pbnQge1xuICB0aW1lID0gMC4wOyAvLyDmmYLplpNb56eSXVxuICB2YWx1ZSA9IDAuMDsgLy8g5YCkXG59XG5cbi8qKlxuICog44Oi44O844K344On44Oz44Kr44O844OW44Gu44K744Kw44Oh44Oz44OI44Gu6KmV5L6h6Zai5pWwXG4gKlxuICogQHBhcmFtICAgcG9pbnRzICAgICAg44Oi44O844K344On44Oz44Kr44O844OW44Gu5Yi25b6h54K544Oq44K544OIXG4gKiBAcGFyYW0gICB0aW1lICAgICAgICDoqZXkvqHjgZnjgovmmYLplpNb56eSXVxuICovXG5leHBvcnQgaW50ZXJmYWNlIGNzbU1vdGlvblNlZ21lbnRFdmFsdWF0aW9uRnVuY3Rpb24ge1xuICAocG9pbnRzOiBDdWJpc21Nb3Rpb25Qb2ludFtdLCB0aW1lOiBudW1iZXIpOiBudW1iZXI7XG59XG5cbi8qKlxuICogQGJyaWVmIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruOCu+OCsOODoeODs+ODiFxuICpcbiAqIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruOCu+OCsOODoeODs+ODiOOAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtTW90aW9uU2VnbWVudCB7XG4gIC8qKlxuICAgKiBAYnJpZWYg44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv+OAglxuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuZXZhbHVhdGUgPSBudWxsO1xuICAgIHRoaXMuYmFzZVBvaW50SW5kZXggPSAwO1xuICAgIHRoaXMuc2VnbWVudFR5cGUgPSAwO1xuICB9XG5cbiAgZXZhbHVhdGU6IGNzbU1vdGlvblNlZ21lbnRFdmFsdWF0aW9uRnVuY3Rpb247IC8vIOS9v+eUqOOBmeOCi+ipleS+oemWouaVsFxuICBiYXNlUG9pbnRJbmRleDogbnVtYmVyOyAvLyDmnIDliJ3jga7jgrvjgrDjg6Hjg7Pjg4jjgbjjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgc2VnbWVudFR5cGU6IG51bWJlcjsgLy8g44K744Kw44Oh44Oz44OI44Gu56iu6aGeXG59XG5cbi8qKlxuICogQGJyaWVmIOODouODvOOCt+ODp+ODs+OCq+ODvOODllxuICpcbiAqIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtTW90aW9uQ3VydmUge1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy50eXBlID0gQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQuQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXRfTW9kZWw7XG4gICAgdGhpcy5zZWdtZW50Q291bnQgPSAwO1xuICAgIHRoaXMuYmFzZVNlZ21lbnRJbmRleCA9IDA7XG4gICAgdGhpcy5mYWRlSW5UaW1lID0gMC4wO1xuICAgIHRoaXMuZmFkZU91dFRpbWUgPSAwLjA7XG4gIH1cblxuICB0eXBlOiBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldDsgLy8g44Kr44O844OW44Gu56iu6aGeXG4gIGlkOiBDdWJpc21JZEhhbmRsZTsgLy8g44Kr44O844OW44GuSURcbiAgc2VnbWVudENvdW50OiBudW1iZXI7IC8vIOOCu+OCsOODoeODs+ODiOOBruWAi+aVsFxuICBiYXNlU2VnbWVudEluZGV4OiBudW1iZXI7IC8vIOacgOWIneOBruOCu+OCsOODoeODs+ODiOOBruOCpOODs+ODh+ODg+OCr+OCuVxuICBmYWRlSW5UaW1lOiBudW1iZXI7IC8vIOODleOCp+ODvOODieOCpOODs+OBq+OBi+OBi+OCi+aZgumWk1vnp5JdXG4gIGZhZGVPdXRUaW1lOiBudW1iZXI7IC8vIOODleOCp+ODvOODieOCouOCpuODiOOBq+OBi+OBi+OCi+aZgumWk1vnp5JdXG59XG5cbi8qKlxuICog44Kk44OZ44Oz44OI44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21Nb3Rpb25FdmVudCB7XG4gIGZpcmVUaW1lID0gMC4wO1xuICB2YWx1ZTogY3NtU3RyaW5nO1xufVxuXG4vKipcbiAqIEBicmllZiDjg6Ljg7zjgrfjg6fjg7Pjg4fjg7zjgr9cbiAqXG4gKiDjg6Ljg7zjgrfjg6fjg7Pjg4fjg7zjgr/jgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbU1vdGlvbkRhdGEge1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5kdXJhdGlvbiA9IDAuMDtcbiAgICB0aGlzLmxvb3AgPSBmYWxzZTtcbiAgICB0aGlzLmN1cnZlQ291bnQgPSAwO1xuICAgIHRoaXMuZXZlbnRDb3VudCA9IDA7XG4gICAgdGhpcy5mcHMgPSAwLjA7XG5cbiAgICB0aGlzLmN1cnZlcyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtTW90aW9uQ3VydmU+KCk7XG4gICAgdGhpcy5zZWdtZW50cyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtTW90aW9uU2VnbWVudD4oKTtcbiAgICB0aGlzLnBvaW50cyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtTW90aW9uUG9pbnQ+KCk7XG4gICAgdGhpcy5ldmVudHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbU1vdGlvbkV2ZW50PigpO1xuICB9XG5cbiAgZHVyYXRpb246IG51bWJlcjsgLy8g44Oi44O844K344On44Oz44Gu6ZW344GVW+enkl1cbiAgbG9vcDogYm9vbGVhbjsgLy8g44Or44O844OX44GZ44KL44GL44Gp44GG44GLXG4gIGN1cnZlQ291bnQ6IG51bWJlcjsgLy8g44Kr44O844OW44Gu5YCL5pWwXG4gIGV2ZW50Q291bnQ6IG51bWJlcjsgLy8gVXNlckRhdGHjga7lgIvmlbBcbiAgZnBzOiBudW1iZXI7IC8vIOODleODrOODvOODoOODrOODvOODiFxuICBjdXJ2ZXM6IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25DdXJ2ZT47IC8vIOOCq+ODvOODluOBruODquOCueODiFxuICBzZWdtZW50czogY3NtVmVjdG9yPEN1YmlzbU1vdGlvblNlZ21lbnQ+OyAvLyDjgrvjgrDjg6Hjg7Pjg4jjga7jg6rjgrnjg4hcbiAgcG9pbnRzOiBjc21WZWN0b3I8Q3ViaXNtTW90aW9uUG9pbnQ+OyAvLyDjg53jgqTjg7Pjg4jjga7jg6rjgrnjg4hcbiAgZXZlbnRzOiBjc21WZWN0b3I8Q3ViaXNtTW90aW9uRXZlbnQ+OyAvLyDjgqTjg5njg7Pjg4jjga7jg6rjgrnjg4hcbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtbW90aW9uaW50ZXJuYWwnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vdGlvbkN1cnZlID0gJC5DdWJpc21Nb3Rpb25DdXJ2ZTtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW90aW9uQ3VydmUgPSAkLkN1YmlzbU1vdGlvbkN1cnZlO1xuICBleHBvcnQgY29uc3QgQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQgPSAkLkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0O1xuICBleHBvcnQgdHlwZSBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldCA9ICQuQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQ7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21Nb3Rpb25EYXRhID0gJC5DdWJpc21Nb3Rpb25EYXRhO1xuICBleHBvcnQgdHlwZSBDdWJpc21Nb3Rpb25EYXRhID0gJC5DdWJpc21Nb3Rpb25EYXRhO1xuICBleHBvcnQgY29uc3QgQ3ViaXNtTW90aW9uRXZlbnQgPSAkLkN1YmlzbU1vdGlvbkV2ZW50O1xuICBleHBvcnQgdHlwZSBDdWJpc21Nb3Rpb25FdmVudCA9ICQuQ3ViaXNtTW90aW9uRXZlbnQ7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21Nb3Rpb25Qb2ludCA9ICQuQ3ViaXNtTW90aW9uUG9pbnQ7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbU1vdGlvblBvaW50ID0gJC5DdWJpc21Nb3Rpb25Qb2ludDtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vdGlvblNlZ21lbnQgPSAkLkN1YmlzbU1vdGlvblNlZ21lbnQ7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbU1vdGlvblNlZ21lbnQgPSAkLkN1YmlzbU1vdGlvblNlZ21lbnQ7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZSA9ICQuQ3ViaXNtTW90aW9uU2VnbWVudFR5cGU7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlID0gJC5DdWJpc21Nb3Rpb25TZWdtZW50VHlwZTtcbiAgZXhwb3J0IHR5cGUgY3NtTW90aW9uU2VnbWVudEV2YWx1YXRpb25GdW5jdGlvbiA9XG4gICAgJC5jc21Nb3Rpb25TZWdtZW50RXZhbHVhdGlvbkZ1bmN0aW9uO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQ3ViaXNtSWRIYW5kbGUgfSBmcm9tICcuLi9pZC9jdWJpc21pZCc7XG5pbXBvcnQgeyBDdWJpc21GcmFtZXdvcmsgfSBmcm9tICcuLi9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xuaW1wb3J0IHsgY3NtU3RyaW5nIH0gZnJvbSAnLi4vdHlwZS9jc21zdHJpbmcnO1xuaW1wb3J0IHsgQ3ViaXNtSnNvbiwgSnNvbk1hcCB9IGZyb20gJy4uL3V0aWxzL2N1YmlzbWpzb24nO1xuXG4vLyBKU09OIGtleXNcbmNvbnN0IE1ldGEgPSAnTWV0YSc7XG5jb25zdCBEdXJhdGlvbiA9ICdEdXJhdGlvbic7XG5jb25zdCBMb29wID0gJ0xvb3AnO1xuY29uc3QgQXJlQmV6aWVyc1Jlc3RyaWN0ZWQgPSAnQXJlQmV6aWVyc1Jlc3RyaWN0ZWQnO1xuY29uc3QgQ3VydmVDb3VudCA9ICdDdXJ2ZUNvdW50JztcbmNvbnN0IEZwcyA9ICdGcHMnO1xuY29uc3QgVG90YWxTZWdtZW50Q291bnQgPSAnVG90YWxTZWdtZW50Q291bnQnO1xuY29uc3QgVG90YWxQb2ludENvdW50ID0gJ1RvdGFsUG9pbnRDb3VudCc7XG5jb25zdCBDdXJ2ZXMgPSAnQ3VydmVzJztcbmNvbnN0IFRhcmdldCA9ICdUYXJnZXQnO1xuY29uc3QgSWQgPSAnSWQnO1xuY29uc3QgRmFkZUluVGltZSA9ICdGYWRlSW5UaW1lJztcbmNvbnN0IEZhZGVPdXRUaW1lID0gJ0ZhZGVPdXRUaW1lJztcbmNvbnN0IFNlZ21lbnRzID0gJ1NlZ21lbnRzJztcbmNvbnN0IFVzZXJEYXRhID0gJ1VzZXJEYXRhJztcbmNvbnN0IFVzZXJEYXRhQ291bnQgPSAnVXNlckRhdGFDb3VudCc7XG5jb25zdCBUb3RhbFVzZXJEYXRhU2l6ZSA9ICdUb3RhbFVzZXJEYXRhU2l6ZSc7XG5jb25zdCBUaW1lID0gJ1RpbWUnO1xuY29uc3QgVmFsdWUgPSAnVmFsdWUnO1xuXG4vKipcbiAqIG1vdGlvbjMuanNvbuOBruOCs+ODs+ODhuODiuOAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtTW90aW9uSnNvbiB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICogQHBhcmFtIGJ1ZmZlciBtb3Rpb24zLmpzb27jgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcbiAgICogQHBhcmFtIHNpemUg44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fanNvbiA9IEN1YmlzbUpzb24uY3JlYXRlKGJ1ZmZlciwgc2l6ZSk7XG4gIH1cblxuICAvKipcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICBDdWJpc21Kc29uLmRlbGV0ZSh0aGlzLl9qc29uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7plbfjgZXjgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjga7plbfjgZVb56eSXVxuICAgKi9cbiAgcHVibGljIGdldE1vdGlvbkR1cmF0aW9uKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhEdXJhdGlvbilcbiAgICAgIC50b0Zsb2F0KCk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu44Or44O844OX5oOF5aCx44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4gdHJ1ZSDjg6vjg7zjg5fjgZnjgotcbiAgICogQHJldHVybiBmYWxzZSDjg6vjg7zjg5fjgZfjgarjgYRcbiAgICovXG4gIHB1YmxpYyBpc01vdGlvbkxvb3AoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhMb29wKVxuICAgICAgLnRvQm9vbGVhbigpO1xuICB9XG5cbiAgcHVibGljIGdldEV2YWx1YXRpb25PcHRpb25GbGFnKGZsYWdUeXBlOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICBpZiAoXG4gICAgICBFdmFsdWF0aW9uT3B0aW9uRmxhZy5FdmFsdWF0aW9uT3B0aW9uRmxhZ19BcmVCZXppZXJzUmlzdHJpY3RlZCA9PSBmbGFnVHlwZVxuICAgICkge1xuICAgICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhBcmVCZXppZXJzUmVzdHJpY3RlZClcbiAgICAgICAgLnRvQm9vbGVhbigpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7lgIvmlbDjga7lj5blvpdcbiAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7lgIvmlbBcbiAgICovXG4gIHB1YmxpYyBnZXRNb3Rpb25DdXJ2ZUNvdW50KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhDdXJ2ZUNvdW50KVxuICAgICAgLnRvSW50KCk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu44OV44Os44O844Og44Os44O844OI44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g44OV44Os44O844Og44Os44O844OIW0ZQU11cbiAgICovXG4gIHB1YmxpYyBnZXRNb3Rpb25GcHMoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZwcylcbiAgICAgIC50b0Zsb2F0KCk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu44K744Kw44Oh44Oz44OI44Gu57eP5ZCI6KiI44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Gu44K744Kw44Oh44Oz44OI44Gu5Y+W5b6XXG4gICAqL1xuICBwdWJsaWMgZ2V0TW90aW9uVG90YWxTZWdtZW50Q291bnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFRvdGFsU2VnbWVudENvdW50KVxuICAgICAgLnRvSW50KCk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu44Kr44O844OW44Gu5Yi25b6h5bqX44Gu57eP5ZCI6KiI44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Gu44Kr44O844OW44Gu5Yi25b6h54K544Gu57eP5ZCI6KiIXG4gICAqL1xuICBwdWJsaWMgZ2V0TW90aW9uVG90YWxQb2ludENvdW50KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhUb3RhbFBvaW50Q291bnQpXG4gICAgICAudG9JbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jg5Xjgqfjg7zjg4njgqTjg7PmmYLplpPjga7lrZjlnKhcbiAgICogQHJldHVybiB0cnVlIOWtmOWcqOOBmeOCi1xuICAgKiBAcmV0dXJuIGZhbHNlIOWtmOWcqOOBl+OBquOBhFxuICAgKi9cbiAgcHVibGljIGlzRXhpc3RNb3Rpb25GYWRlSW5UaW1lKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZhZGVJblRpbWUpXG4gICAgICAuaXNOdWxsKCk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu44OV44Kn44O844OJ44Ki44Km44OI5pmC6ZaT44Gu5a2Y5ZyoXG4gICAqIEByZXR1cm4gdHJ1ZSDlrZjlnKjjgZnjgotcbiAgICogQHJldHVybiBmYWxzZSDlrZjlnKjjgZfjgarjgYRcbiAgICovXG4gIHB1YmxpYyBpc0V4aXN0TW90aW9uRmFkZU91dFRpbWUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICF0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmFkZU91dFRpbWUpXG4gICAgICAuaXNOdWxsKCk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu44OV44Kn44O844OJ44Kk44Oz5pmC6ZaT44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g44OV44Kn44O844OJ44Kk44Oz5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyBnZXRNb3Rpb25GYWRlSW5UaW1lKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGYWRlSW5UaW1lKVxuICAgICAgLnRvRmxvYXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jg5Xjgqfjg7zjg4njgqLjgqbjg4jmmYLplpPjga7lj5blvpdcbiAgICogQHJldHVybiDjg5Xjgqfjg7zjg4njgqLjgqbjg4jmmYLplpNb56eSXVxuICAgKi9cbiAgcHVibGljIGdldE1vdGlvbkZhZGVPdXRUaW1lKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGYWRlT3V0VGltZSlcbiAgICAgIC50b0Zsb2F0KCk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu44Kr44O844OW44Gu56iu6aGe44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBjdXJ2ZUluZGV4IOOCq+ODvOODluOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOOCq+ODvOODluOBrueorumhnlxuICAgKi9cbiAgcHVibGljIGdldE1vdGlvbkN1cnZlVGFyZ2V0KGN1cnZlSW5kZXg6IG51bWJlcik6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEN1cnZlcylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoY3VydmVJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFRhcmdldClcbiAgICAgIC5nZXRSYXdTdHJpbmcoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jgqvjg7zjg5bjga5JROOBruWPluW+l1xuICAgKiBAcGFyYW0gY3VydmVJbmRleCDjgqvjg7zjg5bjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiDjgqvjg7zjg5bjga5JRFxuICAgKi9cbiAgcHVibGljIGdldE1vdGlvbkN1cnZlSWQoY3VydmVJbmRleDogbnVtYmVyKTogQ3ViaXNtSWRIYW5kbGUge1xuICAgIHJldHVybiBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoQ3VydmVzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGN1cnZlSW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKElkKVxuICAgICAgICAuZ2V0UmF3U3RyaW5nKClcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBruOCq+ODvOODluOBruODleOCp+ODvOODieOCpOODs+aZgumWk+OBruWtmOWcqFxuICAgKiBAcGFyYW0gY3VydmVJbmRleCDjgqvjg7zjg5bjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiB0cnVlIOWtmOWcqOOBmeOCi1xuICAgKiBAcmV0dXJuIGZhbHNlIOWtmOWcqOOBl+OBquOBhFxuICAgKi9cbiAgcHVibGljIGlzRXhpc3RNb3Rpb25DdXJ2ZUZhZGVJblRpbWUoY3VydmVJbmRleDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICF0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhDdXJ2ZXMpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGN1cnZlSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGYWRlSW5UaW1lKVxuICAgICAgLmlzTnVsbCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBruOCq+ODvOODluOBruODleOCp+ODvOODieOCouOCpuODiOaZgumWk+OBruWtmOWcqFxuICAgKiBAcGFyYW0gY3VydmVJbmRleCDjgqvjg7zjg5bjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiB0cnVlIOWtmOWcqOOBmeOCi1xuICAgKiBAcmV0dXJuIGZhbHNlIOWtmOWcqOOBl+OBquOBhFxuICAgKi9cbiAgcHVibGljIGlzRXhpc3RNb3Rpb25DdXJ2ZUZhZGVPdXRUaW1lKGN1cnZlSW5kZXg6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoQ3VydmVzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChjdXJ2ZUluZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmFkZU91dFRpbWUpXG4gICAgICAuaXNOdWxsKCk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu44Kr44O844OW44Gu44OV44Kn44O844OJ44Kk44Oz5pmC6ZaT44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBjdXJ2ZUluZGV4IOOCq+ODvOODluOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOODleOCp+ODvOODieOCpOODs+aZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgZ2V0TW90aW9uQ3VydmVGYWRlSW5UaW1lKGN1cnZlSW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEN1cnZlcylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoY3VydmVJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZhZGVJblRpbWUpXG4gICAgICAudG9GbG9hdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBruOCq+ODvOODluOBruODleOCp+ODvOODieOCouOCpuODiOaZgumWk+OBruWPluW+l1xuICAgKiBAcGFyYW0gY3VydmVJbmRleCDjgqvjg7zjg5bjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiDjg5Xjgqfjg7zjg4njgqLjgqbjg4jmmYLplpNb56eSXVxuICAgKi9cbiAgcHVibGljIGdldE1vdGlvbkN1cnZlRmFkZU91dFRpbWUoY3VydmVJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoQ3VydmVzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChjdXJ2ZUluZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmFkZU91dFRpbWUpXG4gICAgICAudG9GbG9hdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBruOCq+ODvOODluOBruOCu+OCsOODoeODs+ODiOOBruWAi+aVsOOCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gY3VydmVJbmRleCDjgqvjg7zjg5bjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjga7jgqvjg7zjg5bjga7jgrvjgrDjg6Hjg7Pjg4jjga7lgIvmlbBcbiAgICovXG4gIHB1YmxpYyBnZXRNb3Rpb25DdXJ2ZVNlZ21lbnRDb3VudChjdXJ2ZUluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhDdXJ2ZXMpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGN1cnZlSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhTZWdtZW50cylcbiAgICAgIC5nZXRWZWN0b3IoKVxuICAgICAgLmdldFNpemUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jgqvjg7zjg5bjga7jgrvjgrDjg6Hjg7Pjg4jjga7lgKTjga7lj5blvpdcbiAgICogQHBhcmFtIGN1cnZlSW5kZXgg44Kr44O844OW44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEBwYXJhbSBzZWdtZW50SW5kZXgg44K744Kw44Oh44Oz44OI44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g44K744Kw44Oh44Oz44OI44Gu5YCkXG4gICAqL1xuICBwdWJsaWMgZ2V0TW90aW9uQ3VydmVTZWdtZW50KFxuICAgIGN1cnZlSW5kZXg6IG51bWJlcixcbiAgICBzZWdtZW50SW5kZXg6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhDdXJ2ZXMpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGN1cnZlSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhTZWdtZW50cylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoc2VnbWVudEluZGV4KVxuICAgICAgLnRvRmxvYXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqTjg5njg7Pjg4jjga7lgIvmlbDjga7lj5blvpdcbiAgICogQHJldHVybiDjgqTjg5njg7Pjg4jjga7lgIvmlbBcbiAgICovXG4gIHB1YmxpYyBnZXRFdmVudENvdW50KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhVc2VyRGF0YUNvdW50KVxuICAgICAgLnRvSW50KCk7XG4gIH1cblxuICAvKipcbiAgICogIOOCpOODmeODs+ODiOOBrue3j+aWh+Wtl+aVsOOBruWPluW+l1xuICAgKiBAcmV0dXJuIOOCpOODmeODs+ODiOOBrue3j+aWh+Wtl+aVsFxuICAgKi9cbiAgcHVibGljIGdldFRvdGFsRXZlbnRWYWx1ZVNpemUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFRvdGFsVXNlckRhdGFTaXplKVxuICAgICAgLnRvSW50KCk7XG4gIH1cblxuICAvKipcbiAgICog44Kk44OZ44Oz44OI44Gu5pmC6ZaT44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSB1c2VyRGF0YUluZGV4IOOCpOODmeODs+ODiOOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOOCpOODmeODs+ODiOOBruaZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgZ2V0RXZlbnRUaW1lKHVzZXJEYXRhSW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFVzZXJEYXRhKVxuICAgICAgLmdldFZhbHVlQnlJbmRleCh1c2VyRGF0YUluZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVGltZSlcbiAgICAgIC50b0Zsb2F0KCk7XG4gIH1cblxuICAvKipcbiAgICog44Kk44OZ44Oz44OI44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSB1c2VyRGF0YUluZGV4IOOCpOODmeODs+ODiOOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOOCpOODmeODs+ODiOOBruaWh+Wtl+WIl1xuICAgKi9cbiAgcHVibGljIGdldEV2ZW50VmFsdWUodXNlckRhdGFJbmRleDogbnVtYmVyKTogY3NtU3RyaW5nIHtcbiAgICByZXR1cm4gbmV3IGNzbVN0cmluZyhcbiAgICAgIHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhVc2VyRGF0YSlcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleCh1c2VyRGF0YUluZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhWYWx1ZSlcbiAgICAgICAgLmdldFJhd1N0cmluZygpXG4gICAgKTtcbiAgfVxuXG4gIF9qc29uOiBDdWJpc21Kc29uOyAvLyBtb3Rpb24zLmpzb27jga7jg4fjg7zjgr9cbn1cblxuLyoqXG4gKiBAYnJpZWYg44OZ44K444Kn44Kr44O844OW44Gu6Kej6YeI5pa55rOV44Gu44OV44Op44Kw44K/44Kk44OXXG4gKi9cbmV4cG9ydCBlbnVtIEV2YWx1YXRpb25PcHRpb25GbGFnIHtcbiAgRXZhbHVhdGlvbk9wdGlvbkZsYWdfQXJlQmV6aWVyc1Jpc3RyaWN0ZWQgPSAwLCAvLy88IOODmeOCuOOCp+ODj+ODs+ODieODq+OBruimj+WItueKtuaFi1xufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21tb3Rpb25qc29uJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21Nb3Rpb25Kc29uID0gJC5DdWJpc21Nb3Rpb25Kc29uO1xuICBleHBvcnQgdHlwZSBDdWJpc21Nb3Rpb25Kc29uID0gJC5DdWJpc21Nb3Rpb25Kc29uO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQ3ViaXNtTW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XG5pbXBvcnQgeyBBQ3ViaXNtTW90aW9uIH0gZnJvbSAnLi9hY3ViaXNtbW90aW9uJztcbmltcG9ydCB7XG4gIEN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGUsXG4gIEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlcixcbn0gZnJvbSAnLi9jdWJpc21tb3Rpb25xdWV1ZW1hbmFnZXInO1xuXG4vKipcbiAqIOODouODvOOCt+ODp+ODs+OBrueuoeeQhlxuICpcbiAqIOODouODvOOCt+ODp+ODs+OBrueuoeeQhuOCkuihjOOBhuOCr+ODqeOCuVxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtTW90aW9uTWFuYWdlciBleHRlbmRzIEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlciB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2N1cnJlbnRQcmlvcml0eSA9IDA7XG4gICAgdGhpcy5fcmVzZXJ2ZVByaW9yaXR5ID0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiDlho3nlJ/kuK3jga7jg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqbjga7lj5blvpdcbiAgICogQHJldHVybiAg44Oi44O844K344On44Oz44Gu5YSq5YWI5bqmXG4gICAqL1xuICBwdWJsaWMgZ2V0Q3VycmVudFByaW9yaXR5KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2N1cnJlbnRQcmlvcml0eTtcbiAgfVxuXG4gIC8qKlxuICAgKiDkuojntITkuK3jga7jg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqbjgpLlj5blvpfjgZnjgovjgIJcbiAgICogQHJldHVybiAg44Oi44O844K344On44Oz44Gu5YSq5YWI5bqmXG4gICAqL1xuICBwdWJsaWMgZ2V0UmVzZXJ2ZVByaW9yaXR5KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3Jlc2VydmVQcmlvcml0eTtcbiAgfVxuXG4gIC8qKlxuICAgKiDkuojntITkuK3jga7jg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqbjgpLoqK3lrprjgZnjgovjgIJcbiAgICogQHBhcmFtICAgdmFsICAgICDlhKrlhYjluqZcbiAgICovXG4gIHB1YmxpYyBzZXRSZXNlcnZlUHJpb3JpdHkodmFsOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9yZXNlcnZlUHJpb3JpdHkgPSB2YWw7XG4gIH1cblxuICAvKipcbiAgICog5YSq5YWI5bqm44KS6Kit5a6a44GX44Gm44Oi44O844K344On44Oz44KS6ZaL5aeL44GZ44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSBtb3Rpb24gICAgICAgICAg44Oi44O844K344On44OzXG4gICAqIEBwYXJhbSBhdXRvRGVsZXRlICAgICAg5YaN55Sf44GM54up54yf44GX44Gf44Oi44O844K344On44Oz44Gu44Kk44Oz44K544K/44Oz44K544KS5YmK6Zmk44GZ44KL44Gq44KJdHJ1ZVxuICAgKiBAcGFyYW0gcHJpb3JpdHkgICAgICAgIOWEquWFiOW6plxuICAgKiBAcmV0dXJuICAgICAgICAgICAgICAgIOmWi+Wni+OBl+OBn+ODouODvOOCt+ODp+ODs+OBruitmOWIpeeVquWPt+OCkui/lOOBmeOAguWAi+WIpeOBruODouODvOOCt+ODp+ODs+OBjOe1guS6huOBl+OBn+OBi+WQpuOBi+OCkuWIpOWumuOBmeOCi0lzRmluaXNoZWQoKeOBruW8leaVsOOBp+S9v+eUqOOBmeOCi+OAgumWi+Wni+OBp+OBjeOBquOBhOaZguOBr+OAjC0x44CNXG4gICAqL1xuICBwdWJsaWMgc3RhcnRNb3Rpb25Qcmlvcml0eShcbiAgICBtb3Rpb246IEFDdWJpc21Nb3Rpb24sXG4gICAgYXV0b0RlbGV0ZTogYm9vbGVhbixcbiAgICBwcmlvcml0eTogbnVtYmVyXG4gICk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGUge1xuICAgIGlmIChwcmlvcml0eSA9PSB0aGlzLl9yZXNlcnZlUHJpb3JpdHkpIHtcbiAgICAgIHRoaXMuX3Jlc2VydmVQcmlvcml0eSA9IDA7IC8vIOS6iOe0hOOCkuino+mZpFxuICAgIH1cblxuICAgIHRoaXMuX2N1cnJlbnRQcmlvcml0eSA9IHByaW9yaXR5OyAvLyDlho3nlJ/kuK3jg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqbjgpLoqK3lrppcblxuICAgIHJldHVybiBzdXBlci5zdGFydE1vdGlvbihtb3Rpb24sIGF1dG9EZWxldGUsIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44KS5pu05paw44GX44Gm44CB44Oi44OH44Or44Gr44OR44Op44Oh44O844K/5YCk44KS5Y+N5pig44GZ44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSBtb2RlbCAgIOWvvuixoeOBruODouODh+ODq1xuICAgKiBAcGFyYW0gZGVsdGFUaW1lU2Vjb25kcyAgICDjg4fjg6vjgr/mmYLplpNb56eSXVxuICAgKiBAcmV0dXJuICB0cnVlICAgIOabtOaWsOOBleOCjOOBpuOBhOOCi1xuICAgKiBAcmV0dXJuICBmYWxzZSAgIOabtOaWsOOBleOCjOOBpuOBhOOBquOBhFxuICAgKi9cbiAgcHVibGljIHVwZGF0ZU1vdGlvbihtb2RlbDogQ3ViaXNtTW9kZWwsIGRlbHRhVGltZVNlY29uZHM6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyArPSBkZWx0YVRpbWVTZWNvbmRzO1xuXG4gICAgY29uc3QgdXBkYXRlZDogYm9vbGVhbiA9IHN1cGVyLmRvVXBkYXRlTW90aW9uKG1vZGVsLCB0aGlzLl91c2VyVGltZVNlY29uZHMpO1xuXG4gICAgaWYgKHRoaXMuaXNGaW5pc2hlZCgpKSB7XG4gICAgICB0aGlzLl9jdXJyZW50UHJpb3JpdHkgPSAwOyAvLyDlho3nlJ/kuK3jga7jg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqbjgpLop6PpmaRcbiAgICB9XG5cbiAgICByZXR1cm4gdXBkYXRlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7PjgpLkuojntITjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtICAgcHJpb3JpdHkgICAg5YSq5YWI5bqmXG4gICAqIEByZXR1cm4gIHRydWUgICAg5LqI57SE44Gn44GN44GfXG4gICAqIEByZXR1cm4gIGZhbHNlICAg5LqI57SE44Gn44GN44Gq44GL44Gj44GfXG4gICAqL1xuICBwdWJsaWMgcmVzZXJ2ZU1vdGlvbihwcmlvcml0eTogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgaWYgKFxuICAgICAgcHJpb3JpdHkgPD0gdGhpcy5fcmVzZXJ2ZVByaW9yaXR5IHx8XG4gICAgICBwcmlvcml0eSA8PSB0aGlzLl9jdXJyZW50UHJpb3JpdHlcbiAgICApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLl9yZXNlcnZlUHJpb3JpdHkgPSBwcmlvcml0eTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgX2N1cnJlbnRQcmlvcml0eTogbnVtYmVyOyAvLyDnj77lnKjlho3nlJ/kuK3jga7jg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqZcbiAgX3Jlc2VydmVQcmlvcml0eTogbnVtYmVyOyAvLyDlho3nlJ/kuojlrprjga7jg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqbjgILlho3nlJ/kuK3jga8w44Gr44Gq44KL44CC44Oi44O844K344On44Oz44OV44Kh44Kk44Or44KS5Yil44K544Os44OD44OJ44Gn6Kqt44G/6L6844KA44Go44GN44Gu5qmf6IO944CCXG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbW1vdGlvbm1hbmFnZXInO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vdGlvbk1hbmFnZXIgPSAkLkN1YmlzbU1vdGlvbk1hbmFnZXI7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbU1vdGlvbk1hbmFnZXIgPSAkLkN1YmlzbU1vdGlvbk1hbmFnZXI7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBBQ3ViaXNtTW90aW9uIH0gZnJvbSAnLi9hY3ViaXNtbW90aW9uJztcbmltcG9ydCB7IEN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGUgfSBmcm9tICcuL2N1YmlzbW1vdGlvbnF1ZXVlbWFuYWdlcic7XG5cbi8qKlxuICogQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2Vy44Gn5YaN55Sf44GX44Gm44GE44KL5ZCE44Oi44O844K344On44Oz44Gu566h55CG44Kv44Op44K544CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5IHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2F1dG9EZWxldGUgPSBmYWxzZTtcbiAgICB0aGlzLl9tb3Rpb24gPSBudWxsO1xuICAgIHRoaXMuX2F2YWlsYWJsZSA9IHRydWU7XG4gICAgdGhpcy5fZmluaXNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9zdGFydGVkID0gZmFsc2U7XG4gICAgdGhpcy5fc3RhcnRUaW1lU2Vjb25kcyA9IC0xLjA7XG4gICAgdGhpcy5fZmFkZUluU3RhcnRUaW1lU2Vjb25kcyA9IDAuMDtcbiAgICB0aGlzLl9lbmRUaW1lU2Vjb25kcyA9IC0xLjA7XG4gICAgdGhpcy5fc3RhdGVUaW1lU2Vjb25kcyA9IDAuMDtcbiAgICB0aGlzLl9zdGF0ZVdlaWdodCA9IDAuMDtcbiAgICB0aGlzLl9sYXN0RXZlbnRDaGVja1NlY29uZHMgPSAwLjA7XG4gICAgdGhpcy5fbW90aW9uUXVldWVFbnRyeUhhbmRsZSA9IHRoaXM7XG4gICAgdGhpcy5fZmFkZU91dFNlY29uZHMgPSAwLjA7XG4gICAgdGhpcy5faXNUcmlnZ2VyZWRGYWRlT3V0ID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fYXV0b0RlbGV0ZSAmJiB0aGlzLl9tb3Rpb24pIHtcbiAgICAgIEFDdWJpc21Nb3Rpb24uZGVsZXRlKHRoaXMuX21vdGlvbik7IC8vXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOODleOCp+ODvOODieOCouOCpuODiOaZgumWk+OBqOmWi+Wni+WIpOWumuOBruioreWumlxuICAgKiBAcGFyYW0gZmFkZU91dFNlY29uZHMg44OV44Kn44O844OJ44Ki44Km44OI44Gr44GL44GL44KL5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyBzZXRGYWRlT3V0KGZhZGVPdXRTZWNvbmRzOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9mYWRlT3V0U2Vjb25kcyA9IGZhZGVPdXRTZWNvbmRzO1xuICAgIHRoaXMuX2lzVHJpZ2dlcmVkRmFkZU91dCA9IHRydWU7XG4gIH1cblxuICAvKipcbiAgICog44OV44Kn44O844OJ44Ki44Km44OI44Gu6ZaL5aeLXG4gICAqIEBwYXJhbSBmYWRlT3V0U2Vjb25kcyDjg5Xjgqfjg7zjg4njgqLjgqbjg4jjgavjgYvjgYvjgovmmYLplpNb56eSXVxuICAgKiBAcGFyYW0gdXNlclRpbWVTZWNvbmRzIOODh+ODq+OCv+aZgumWk+OBruepjeeul+WApFvnp5JdXG4gICAqL1xuICBwdWJsaWMgc3RhcnRGYWRlT3V0KGZhZGVPdXRTZWNvbmRzOiBudW1iZXIsIHVzZXJUaW1lU2Vjb25kczogbnVtYmVyKTogdm9pZCB7XG4gICAgY29uc3QgbmV3RW5kVGltZVNlY29uZHM6IG51bWJlciA9IHVzZXJUaW1lU2Vjb25kcyArIGZhZGVPdXRTZWNvbmRzO1xuICAgIHRoaXMuX2lzVHJpZ2dlcmVkRmFkZU91dCA9IHRydWU7XG5cbiAgICBpZiAoXG4gICAgICB0aGlzLl9lbmRUaW1lU2Vjb25kcyA8IDAuMCB8fFxuICAgICAgbmV3RW5kVGltZVNlY29uZHMgPCB0aGlzLl9lbmRUaW1lU2Vjb25kc1xuICAgICkge1xuICAgICAgdGhpcy5fZW5kVGltZVNlY29uZHMgPSBuZXdFbmRUaW1lU2Vjb25kcztcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu57WC5LqG44Gu56K66KqNXG4gICAqXG4gICAqIEByZXR1cm4gdHJ1ZSDjg6Ljg7zjgrfjg6fjg7PjgYzntYLkuobjgZfjgZ9cbiAgICogQHJldHVybiBmYWxzZSDntYLkuobjgZfjgabjgYTjgarjgYRcbiAgICovXG4gIHB1YmxpYyBpc0ZpbmlzaGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9maW5pc2hlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7plovlp4vjga7norroqo1cbiAgICogQHJldHVybiB0cnVlIOODouODvOOCt+ODp+ODs+OBjOmWi+Wni+OBl+OBn1xuICAgKiBAcmV0dXJuIGZhbHNlIOmWi+Wni+OBl+OBpuOBhOOBquOBhFxuICAgKi9cbiAgcHVibGljIGlzU3RhcnRlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhcnRlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7plovlp4vmmYLliLvjga7lj5blvpdcbiAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjga7plovlp4vmmYLliLtb56eSXVxuICAgKi9cbiAgcHVibGljIGdldFN0YXJ0VGltZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9zdGFydFRpbWVTZWNvbmRzO1xuICB9XG5cbiAgLyoqXG4gICAqIOODleOCp+ODvOODieOCpOODs+OBrumWi+Wni+aZguWIu+OBruWPluW+l1xuICAgKiBAcmV0dXJuIOODleOCp+ODvOODieOCpOODs+OBrumWi+Wni+aZguWIu1vnp5JdXG4gICAqL1xuICBwdWJsaWMgZ2V0RmFkZUluU3RhcnRUaW1lKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2ZhZGVJblN0YXJ0VGltZVNlY29uZHM7XG4gIH1cblxuICAvKipcbiAgICog44OV44Kn44O844OJ44Kk44Oz44Gu57WC5LqG5pmC5Yi744Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g44OV44Kn44O844OJ44Kk44Oz44Gu57WC5LqG5pmC5Yi744Gu5Y+W5b6XXG4gICAqL1xuICBwdWJsaWMgZ2V0RW5kVGltZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9lbmRUaW1lU2Vjb25kcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7plovlp4vmmYLliLvjga7oqK3lrppcbiAgICogQHBhcmFtIHN0YXJ0VGltZSDjg6Ljg7zjgrfjg6fjg7Pjga7plovlp4vmmYLliLtcbiAgICovXG4gIHB1YmxpYyBzZXRTdGFydFRpbWUoc3RhcnRUaW1lOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9zdGFydFRpbWVTZWNvbmRzID0gc3RhcnRUaW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIOODleOCp+ODvOODieOCpOODs+OBrumWi+Wni+aZguWIu+OBruioreWumlxuICAgKiBAcGFyYW0gc3RhcnRUaW1lIOODleOCp+ODvOODieOCpOODs+OBrumWi+Wni+aZguWIu1vnp5JdXG4gICAqL1xuICBwdWJsaWMgc2V0RmFkZUluU3RhcnRUaW1lKHN0YXJ0VGltZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fZmFkZUluU3RhcnRUaW1lU2Vjb25kcyA9IHN0YXJ0VGltZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Xjgqfjg7zjg4njgqTjg7Pjga7ntYLkuobmmYLliLvjga7oqK3lrppcbiAgICogQHBhcmFtIGVuZFRpbWUg44OV44Kn44O844OJ44Kk44Oz44Gu57WC5LqG5pmC5Yi7W+enkl1cbiAgICovXG4gIHB1YmxpYyBzZXRFbmRUaW1lKGVuZFRpbWU6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX2VuZFRpbWVTZWNvbmRzID0gZW5kVGltZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7ntYLkuobjga7oqK3lrppcbiAgICogQHBhcmFtIGYgdHJ1ZeOBquOCieODouODvOOCt+ODp+ODs+OBrue1guS6hlxuICAgKi9cbiAgcHVibGljIHNldElzRmluaXNoZWQoZjogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuX2ZpbmlzaGVkID0gZjtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pplovlp4vjga7oqK3lrppcbiAgICogQHBhcmFtIGYgdHJ1ZeOBquOCieODouODvOOCt+ODp+ODs+OBrumWi+Wni1xuICAgKi9cbiAgcHVibGljIHNldElzU3RhcnRlZChmOiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5fc3RhcnRlZCA9IGY7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu5pyJ5Yq55oCn44Gu56K66KqNXG4gICAqIEByZXR1cm4gdHJ1ZSDjg6Ljg7zjgrfjg6fjg7Pjga/mnInlirlcbiAgICogQHJldHVybiBmYWxzZSDjg6Ljg7zjgrfjg6fjg7Pjga/nhKHlirlcbiAgICovXG4gIHB1YmxpYyBpc0F2YWlsYWJsZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fYXZhaWxhYmxlO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBruacieWKueaAp+OBruioreWumlxuICAgKiBAcGFyYW0gdiB0cnVl44Gq44KJ44Oi44O844K344On44Oz44Gv5pyJ5Yq5XG4gICAqL1xuICBwdWJsaWMgc2V0SXNBdmFpbGFibGUodjogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuX2F2YWlsYWJsZSA9IHY7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu54q25oWL44Gu6Kit5a6aXG4gICAqIEBwYXJhbSB0aW1lU2Vjb25kcyDnj77lnKjmmYLliLtb56eSXVxuICAgKiBAcGFyYW0gd2VpZ2h0IOODouODvOOCt+ODp+ODs+WwvumHjeOBv1xuICAgKi9cbiAgcHVibGljIHNldFN0YXRlKHRpbWVTZWNvbmRzOiBudW1iZXIsIHdlaWdodDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fc3RhdGVUaW1lU2Vjb25kcyA9IHRpbWVTZWNvbmRzO1xuICAgIHRoaXMuX3N0YXRlV2VpZ2h0ID0gd2VpZ2h0O1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBruePvuWcqOaZguWIu+OBruWPluW+l1xuICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OBruePvuWcqOaZguWIu1vnp5JdXG4gICAqL1xuICBwdWJsaWMgZ2V0U3RhdGVUaW1lKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXRlVGltZVNlY29uZHM7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu6YeN44G/44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Gu6YeN44G/XG4gICAqL1xuICBwdWJsaWMgZ2V0U3RhdGVXZWlnaHQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhdGVXZWlnaHQ7XG4gIH1cblxuICAvKipcbiAgICog5pyA5b6M44Gr44Kk44OZ44Oz44OI44Gu55m654Gr44KS44OB44Kn44OD44Kv44GX44Gf5pmC6ZaT44KS5Y+W5b6XXG4gICAqXG4gICAqIEByZXR1cm4g5pyA5b6M44Gr44Kk44OZ44Oz44OI44Gu55m654Gr44KS44OB44Kn44OD44Kv44GX44Gf5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyBnZXRMYXN0Q2hlY2tFdmVudFNlY29uZHMoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbGFzdEV2ZW50Q2hlY2tTZWNvbmRzO1xuICB9XG5cbiAgLyoqXG4gICAqIOacgOW+jOOBq+OCpOODmeODs+ODiOOCkuODgeOCp+ODg+OCr+OBl+OBn+aZgumWk+OCkuioreWumlxuICAgKiBAcGFyYW0gY2hlY2tTZWNvbmRzIOacgOW+jOOBq+OCpOODmeODs+ODiOOCkuODgeOCp+ODg+OCr+OBl+OBn+aZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgc2V0TGFzdENoZWNrRXZlbnRTZWNvbmRzKGNoZWNrU2Vjb25kczogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fbGFzdEV2ZW50Q2hlY2tTZWNvbmRzID0gY2hlY2tTZWNvbmRzO1xuICB9XG5cbiAgLyoqXG4gICAqIOODleOCp+ODvOODieOCouOCpuODiOmWi+Wni+WIpOWumuOBruWPluW+l1xuICAgKiBAcmV0dXJuIOODleOCp+ODvOODieOCouOCpuODiOmWi+Wni+OBmeOCi+OBi+OBqeOBhuOBi1xuICAgKi9cbiAgcHVibGljIGlzVHJpZ2dlcmVkRmFkZU91dCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5faXNUcmlnZ2VyZWRGYWRlT3V0O1xuICB9XG5cbiAgLyoqXG4gICAqIOODleOCp+ODvOODieOCouOCpuODiOaZgumWk+OBruWPluW+l1xuICAgKiBAcmV0dXJuIOODleOCp+ODvOODieOCouOCpuODiOaZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgZ2V0RmFkZU91dFNlY29uZHMoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fZmFkZU91dFNlY29uZHM7XG4gIH1cblxuICBfYXV0b0RlbGV0ZTogYm9vbGVhbjsgLy8g6Ieq5YuV5YmK6ZmkXG4gIF9tb3Rpb246IEFDdWJpc21Nb3Rpb247IC8vIOODouODvOOCt+ODp+ODs1xuXG4gIF9hdmFpbGFibGU6IGJvb2xlYW47IC8vIOacieWKueWMluODleODqeOCsFxuICBfZmluaXNoZWQ6IGJvb2xlYW47IC8vIOe1guS6huODleODqeOCsFxuICBfc3RhcnRlZDogYm9vbGVhbjsgLy8g6ZaL5aeL44OV44Op44KwXG4gIF9zdGFydFRpbWVTZWNvbmRzOiBudW1iZXI7IC8vIOODouODvOOCt+ODp+ODs+WGjeeUn+mWi+Wni+aZguWIu1vnp5JdXG4gIF9mYWRlSW5TdGFydFRpbWVTZWNvbmRzOiBudW1iZXI7IC8vIOODleOCp+ODvOODieOCpOODs+mWi+Wni+aZguWIu++8iOODq+ODvOODl+OBruaZguOBr+WIneWbnuOBruOBv++8iVvnp5JdXG4gIF9lbmRUaW1lU2Vjb25kczogbnVtYmVyOyAvLyDntYLkuobkuojlrprmmYLliLtb56eSXVxuICBfc3RhdGVUaW1lU2Vjb25kczogbnVtYmVyOyAvLyDmmYLliLvjga7nirbmhYtb56eSXVxuICBfc3RhdGVXZWlnaHQ6IG51bWJlcjsgLy8g6YeN44G/44Gu54q25oWLXG4gIF9sYXN0RXZlbnRDaGVja1NlY29uZHM6IG51bWJlcjsgLy8g5pyA57WC44GuTW90aW9u5YG044Gu44OB44Kn44OD44Kv44GX44Gf5pmC6ZaTXG4gIHByaXZhdGUgX2ZhZGVPdXRTZWNvbmRzOiBudW1iZXI7IC8vIOODleOCp+ODvOODieOCouOCpuODiOaZgumWk1vnp5JdXG4gIHByaXZhdGUgX2lzVHJpZ2dlcmVkRmFkZU91dDogYm9vbGVhbjsgLy8g44OV44Kn44O844OJ44Ki44Km44OI6ZaL5aeL44OV44Op44KwXG5cbiAgX21vdGlvblF1ZXVlRW50cnlIYW5kbGU6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGU7IC8vIOOCpOODs+OCueOCv+ODs+OCueOBlOOBqOOBq+S4gOaEj+OBruWApOOCkuaMgeOBpOitmOWIpeeVquWPt1xufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21tb3Rpb25xdWV1ZWVudHJ5Jztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5ID0gJC5DdWJpc21Nb3Rpb25RdWV1ZUVudHJ5O1xuICBleHBvcnQgdHlwZSBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5ID0gJC5DdWJpc21Nb3Rpb25RdWV1ZUVudHJ5O1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQUN1YmlzbU1vdGlvbiB9IGZyb20gJy4vYWN1YmlzbW1vdGlvbic7XG5pbXBvcnQgeyBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5IH0gZnJvbSAnLi9jdWJpc21tb3Rpb25xdWV1ZWVudHJ5JztcbmltcG9ydCB7IGNzbVZlY3RvciwgaXRlcmF0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5pbXBvcnQgeyBDdWJpc21Nb2RlbCB9IGZyb20gJy4uL21vZGVsL2N1YmlzbW1vZGVsJztcbmltcG9ydCB7IGNzbVN0cmluZyB9IGZyb20gJy4uL3R5cGUvY3Ntc3RyaW5nJztcblxuLyoqXG4gKiDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/jga7nrqHnkIZcbiAqXG4gKiDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/jga7nrqHnkIbnlKjjgq/jg6njgrnjgIJDdWJpc21Nb3Rpb27jg6Ljg7zjgrfjg6fjg7PjgarjgalBQ3ViaXNtTW90aW9u44Gu44K144OW44Kv44Op44K544KS5YaN55Sf44GZ44KL44Gf44KB44Gr5L2/55So44GZ44KL44CCXG4gKlxuICogQG5vdGUg5YaN55Sf5Lit44Gr5Yil44Gu44Oi44O844K344On44Oz44GMIFN0YXJ0TW90aW9uKCnjgZXjgozjgZ/loLTlkIjjga/jgIHmlrDjgZfjgYTjg6Ljg7zjgrfjg6fjg7Pjgavmu5HjgonjgYvjgavlpInljJbjgZfml6fjg6Ljg7zjgrfjg6fjg7Pjga/kuK3mlq3jgZnjgovjgIJcbiAqICAgICAgIOihqOaDheeUqOODouODvOOCt+ODp+ODs+OAgeS9k+eUqOODouODvOOCt+ODp+ODs+OBquOBqeOCkuWIhuOBkeOBpuODouODvOOCt+ODp+ODs+WMluOBl+OBn+WgtOWQiOOBquOBqeOAgVxuICogICAgICAg6KSH5pWw44Gu44Oi44O844K344On44Oz44KS5ZCM5pmC44Gr5YaN55Sf44GV44Gb44KL5aC05ZCI44Gv44CB6KSH5pWw44GuQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2Vy44Kk44Oz44K544K/44Oz44K544KS5L2/55So44GZ44KL44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXIge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fdXNlclRpbWVTZWNvbmRzID0gMC4wO1xuICAgIHRoaXMuX2V2ZW50Q2FsbEJhY2sgPSBudWxsO1xuICAgIHRoaXMuX2V2ZW50Q3VzdG9tRGF0YSA9IG51bGw7XG4gICAgdGhpcy5fbW90aW9ucyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtTW90aW9uUXVldWVFbnRyeT4oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fbW90aW9ucy5nZXRTaXplKCk7ICsraSkge1xuICAgICAgaWYgKHRoaXMuX21vdGlvbnMuYXQoaSkpIHtcbiAgICAgICAgdGhpcy5fbW90aW9ucy5hdChpKS5yZWxlYXNlKCk7XG4gICAgICAgIHRoaXMuX21vdGlvbnMuc2V0KGksIG51bGwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX21vdGlvbnMgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIOaMh+WumuOBl+OBn+ODouODvOOCt+ODp+ODs+OBrumWi+Wni1xuICAgKlxuICAgKiDmjIflrprjgZfjgZ/jg6Ljg7zjgrfjg6fjg7PjgpLplovlp4vjgZnjgovjgILlkIzjgZjjgr/jgqTjg5fjga7jg6Ljg7zjgrfjg6fjg7PjgYzml6LjgavjgYLjgovloLTlkIjjga/jgIHml6LlrZjjga7jg6Ljg7zjgrfjg6fjg7PjgavntYLkuobjg5Xjg6njgrDjgpLnq4vjgabjgIHjg5Xjgqfjg7zjg4njgqLjgqbjg4jjgpLplovlp4vjgZXjgZvjgovjgIJcbiAgICpcbiAgICogQHBhcmFtICAgbW90aW9uICAgICAgICAgIOmWi+Wni+OBmeOCi+ODouODvOOCt+ODp+ODs1xuICAgKiBAcGFyYW0gICBhdXRvRGVsZXRlICAgICAg5YaN55Sf44GM57WC5LqG44GX44Gf44Oi44O844K344On44Oz44Gu44Kk44Oz44K544K/44Oz44K544KS5YmK6Zmk44GZ44KL44Gq44KJIHRydWVcbiAgICogQHBhcmFtICAgdXNlclRpbWVTZWNvbmRzIOODh+ODq+OCv+aZgumWk+OBruepjeeul+WApFvnp5JdXG4gICAqIEByZXR1cm4gICAgICAgICAgICAgICAgICAgICAg6ZaL5aeL44GX44Gf44Oi44O844K344On44Oz44Gu6K2Y5Yil55Wq5Y+344KS6L+U44GZ44CC5YCL5Yil44Gu44Oi44O844K344On44Oz44GM57WC5LqG44GX44Gf44GL5ZCm44GL44KS5Yik5a6a44GZ44KLSXNGaW5pc2hlZCgp44Gu5byV5pWw44Gn5L2/55So44GZ44KL44CC6ZaL5aeL44Gn44GN44Gq44GE5pmC44Gv44CMLTHjgI1cbiAgICovXG4gIHB1YmxpYyBzdGFydE1vdGlvbihcbiAgICBtb3Rpb246IEFDdWJpc21Nb3Rpb24sXG4gICAgYXV0b0RlbGV0ZTogYm9vbGVhbixcbiAgICB1c2VyVGltZVNlY29uZHM6IG51bWJlclxuICApOiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5SGFuZGxlIHtcbiAgICBpZiAobW90aW9uID09IG51bGwpIHtcbiAgICAgIHJldHVybiBJbnZhbGlkTW90aW9uUXVldWVFbnRyeUhhbmRsZVZhbHVlO1xuICAgIH1cblxuICAgIGxldCBtb3Rpb25RdWV1ZUVudHJ5OiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5ID0gbnVsbDtcblxuICAgIC8vIOaXouOBq+ODouODvOOCt+ODp+ODs+OBjOOBguOCjOOBsOe1guS6huODleODqeOCsOOCkueri+OBpuOCi1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fbW90aW9ucy5nZXRTaXplKCk7ICsraSkge1xuICAgICAgbW90aW9uUXVldWVFbnRyeSA9IHRoaXMuX21vdGlvbnMuYXQoaSk7XG4gICAgICBpZiAobW90aW9uUXVldWVFbnRyeSA9PSBudWxsKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBtb3Rpb25RdWV1ZUVudHJ5LnNldEZhZGVPdXQobW90aW9uUXVldWVFbnRyeS5fbW90aW9uLmdldEZhZGVPdXRUaW1lKCkpOyAvLyDjg5Xjgqfjg7zjg4njgqLjgqbjg4joqK3lrppcbiAgICB9XG5cbiAgICBtb3Rpb25RdWV1ZUVudHJ5ID0gbmV3IEN1YmlzbU1vdGlvblF1ZXVlRW50cnkoKTsgLy8g57WC5LqG5pmC44Gr56C05qOE44GZ44KLXG4gICAgbW90aW9uUXVldWVFbnRyeS5fYXV0b0RlbGV0ZSA9IGF1dG9EZWxldGU7XG4gICAgbW90aW9uUXVldWVFbnRyeS5fbW90aW9uID0gbW90aW9uO1xuXG4gICAgdGhpcy5fbW90aW9ucy5wdXNoQmFjayhtb3Rpb25RdWV1ZUVudHJ5KTtcblxuICAgIHJldHVybiBtb3Rpb25RdWV1ZUVudHJ5Ll9tb3Rpb25RdWV1ZUVudHJ5SGFuZGxlO1xuICB9XG5cbiAgLyoqXG4gICAqIOWFqOOBpuOBruODouODvOOCt+ODp+ODs+OBrue1guS6huOBrueiuuiqjVxuICAgKiBAcmV0dXJuIHRydWUg5YWo44Gm57WC5LqG44GX44Gm44GE44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug57WC5LqG44GX44Gm44GE44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNGaW5pc2hlZCgpOiBib29sZWFuIHtcbiAgICAvLyAtLS0tLS0tIOWHpueQhuOCkuihjOOBhiAtLS0tLS0tXG4gICAgLy8g5pei44Gr44Oi44O844K344On44Oz44GM44GC44KM44Gw57WC5LqG44OV44Op44Kw44KS56uL44Gm44KLXG5cbiAgICBmb3IgKFxuICAgICAgbGV0IGl0ZTogaXRlcmF0b3I8Q3ViaXNtTW90aW9uUXVldWVFbnRyeT4gPSB0aGlzLl9tb3Rpb25zLmJlZ2luKCk7XG4gICAgICBpdGUubm90RXF1YWwodGhpcy5fbW90aW9ucy5lbmQoKSk7XG5cbiAgICApIHtcbiAgICAgIGxldCBtb3Rpb25RdWV1ZUVudHJ5OiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5ID0gaXRlLnB0cigpO1xuXG4gICAgICBpZiAobW90aW9uUXVldWVFbnRyeSA9PSBudWxsKSB7XG4gICAgICAgIGl0ZSA9IHRoaXMuX21vdGlvbnMuZXJhc2UoaXRlKTsgLy8g5YmK6ZmkXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBtb3Rpb246IEFDdWJpc21Nb3Rpb24gPSBtb3Rpb25RdWV1ZUVudHJ5Ll9tb3Rpb247XG5cbiAgICAgIGlmIChtb3Rpb24gPT0gbnVsbCkge1xuICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnJlbGVhc2UoKTtcbiAgICAgICAgbW90aW9uUXVldWVFbnRyeSA9IG51bGw7XG4gICAgICAgIGl0ZSA9IHRoaXMuX21vdGlvbnMuZXJhc2UoaXRlKTsgLy8g5YmK6ZmkXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyAtLS0tLSDntYLkuobmuIjjgb/jga7lh6bnkIbjgYzjgYLjgozjgbDliYrpmaTjgZnjgosgLS0tLS0tXG4gICAgICBpZiAoIW1vdGlvblF1ZXVlRW50cnkuaXNGaW5pc2hlZCgpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGl0ZS5wcmVJbmNyZW1lbnQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmjIflrprjgZfjgZ/jg6Ljg7zjgrfjg6fjg7Pjga7ntYLkuobjga7norroqo1cbiAgICogQHBhcmFtIG1vdGlvblF1ZXVlRW50cnlOdW1iZXIg44Oi44O844K344On44Oz44Gu6K2Y5Yil55Wq5Y+3XG4gICAqIEByZXR1cm4gdHJ1ZSDlhajjgabntYLkuobjgZfjgabjgYTjgotcbiAgICogQHJldHVybiBmYWxzZSDntYLkuobjgZfjgabjgYTjgarjgYRcbiAgICovXG4gIHB1YmxpYyBpc0ZpbmlzaGVkQnlIYW5kbGUoXG4gICAgbW90aW9uUXVldWVFbnRyeU51bWJlcjogQ3ViaXNtTW90aW9uUXVldWVFbnRyeUhhbmRsZVxuICApOiBib29sZWFuIHtcbiAgICBmb3IgKFxuICAgICAgbGV0IGl0ZTogaXRlcmF0b3I8Q3ViaXNtTW90aW9uUXVldWVFbnRyeT4gPSB0aGlzLl9tb3Rpb25zLmJlZ2luKCk7XG4gICAgICBpdGUubm90RXF1YWwodGhpcy5fbW90aW9ucy5lbmQoKSk7XG4gICAgICBpdGUuaW5jcmVtZW50KClcbiAgICApIHtcbiAgICAgIGNvbnN0IG1vdGlvblF1ZXVlRW50cnk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnkgPSBpdGUucHRyKCk7XG5cbiAgICAgIGlmIChtb3Rpb25RdWV1ZUVudHJ5ID09IG51bGwpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgbW90aW9uUXVldWVFbnRyeS5fbW90aW9uUXVldWVFbnRyeUhhbmRsZSA9PSBtb3Rpb25RdWV1ZUVudHJ5TnVtYmVyICYmXG4gICAgICAgICFtb3Rpb25RdWV1ZUVudHJ5LmlzRmluaXNoZWQoKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICog5YWo44Gm44Gu44Oi44O844K344On44Oz44KS5YGc5q2i44GZ44KLXG4gICAqL1xuICBwdWJsaWMgc3RvcEFsbE1vdGlvbnMoKTogdm9pZCB7XG4gICAgLy8gLS0tLS0tLSDlh6bnkIbjgpLooYzjgYYgLS0tLS0tLVxuICAgIC8vIOaXouOBq+ODouODvOOCt+ODp+ODs+OBjOOBguOCjOOBsOe1guS6huODleODqeOCsOOCkueri+OBpuOCi1xuXG4gICAgZm9yIChcbiAgICAgIGxldCBpdGU6IGl0ZXJhdG9yPEN1YmlzbU1vdGlvblF1ZXVlRW50cnk+ID0gdGhpcy5fbW90aW9ucy5iZWdpbigpO1xuICAgICAgaXRlLm5vdEVxdWFsKHRoaXMuX21vdGlvbnMuZW5kKCkpO1xuXG4gICAgKSB7XG4gICAgICBsZXQgbW90aW9uUXVldWVFbnRyeTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeSA9IGl0ZS5wdHIoKTtcblxuICAgICAgaWYgKG1vdGlvblF1ZXVlRW50cnkgPT0gbnVsbCkge1xuICAgICAgICBpdGUgPSB0aGlzLl9tb3Rpb25zLmVyYXNlKGl0ZSk7XG5cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIC0tLS0tIOe1guS6hua4iOOBv+OBruWHpueQhuOBjOOBguOCjOOBsOWJiumZpOOBmeOCiyAtLS0tLS1cbiAgICAgIG1vdGlvblF1ZXVlRW50cnkucmVsZWFzZSgpO1xuICAgICAgbW90aW9uUXVldWVFbnRyeSA9IG51bGw7XG4gICAgICBpdGUgPSB0aGlzLl9tb3Rpb25zLmVyYXNlKGl0ZSk7IC8vIOWJiumZpFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgICAgICog5oyH5a6a44GX44GfQ3ViaXNtTW90aW9uUXVldWVFbnRyeeOBruWPluW+l1xuXG4gICAgICAgICogQHBhcmFtICAgbW90aW9uUXVldWVFbnRyeU51bWJlciAg44Oi44O844K344On44Oz44Gu6K2Y5Yil55Wq5Y+3XG4gICAgICAgICogQHJldHVybiAg5oyH5a6a44GX44GfQ3ViaXNtTW90aW9uUXVldWVFbnRyeVxuICAgICAgICAqIEByZXR1cm4gIG51bGwgICDopovjgaTjgYvjgonjgarjgYvjgaPjgZ9cbiAgICAgICAgKi9cbiAgcHVibGljIGdldEN1YmlzbU1vdGlvblF1ZXVlRW50cnkoXG4gICAgbW90aW9uUXVldWVFbnRyeU51bWJlcjogYW55XG4gICk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnkge1xuICAgIC8vLS0tLS0tLSDlh6bnkIbjgpLooYzjgYYgLS0tLS0tLVxuICAgIGZvciAoXG4gICAgICBsZXQgaXRlOiBpdGVyYXRvcjxDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5PiA9IHRoaXMuX21vdGlvbnMuYmVnaW4oKTtcbiAgICAgIGl0ZS5ub3RFcXVhbCh0aGlzLl9tb3Rpb25zLmVuZCgpKTtcbiAgICAgIGl0ZS5wcmVJbmNyZW1lbnQoKVxuICAgICkge1xuICAgICAgY29uc3QgbW90aW9uUXVldWVFbnRyeTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeSA9IGl0ZS5wdHIoKTtcblxuICAgICAgaWYgKG1vdGlvblF1ZXVlRW50cnkgPT0gbnVsbCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vdGlvblF1ZXVlRW50cnkuX21vdGlvblF1ZXVlRW50cnlIYW5kbGUgPT0gbW90aW9uUXVldWVFbnRyeU51bWJlcikge1xuICAgICAgICByZXR1cm4gbW90aW9uUXVldWVFbnRyeTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqTjg5njg7Pjg4jjgpLlj5fjgZHlj5bjgotDYWxsYmFja+OBrueZu+mMslxuICAgKlxuICAgKiBAcGFyYW0gY2FsbGJhY2sg44Kz44O844Or44OQ44OD44Kv6Zai5pWwXG4gICAqIEBwYXJhbSBjdXN0b21EYXRhIOOCs+ODvOODq+ODkOODg+OCr+OBq+i/lOOBleOCjOOCi+ODh+ODvOOCv1xuICAgKi9cbiAgcHVibGljIHNldEV2ZW50Q2FsbGJhY2soXG4gICAgY2FsbGJhY2s6IEN1YmlzbU1vdGlvbkV2ZW50RnVuY3Rpb24sXG4gICAgY3VzdG9tRGF0YTogYW55ID0gbnVsbFxuICApOiB2b2lkIHtcbiAgICB0aGlzLl9ldmVudENhbGxCYWNrID0gY2FsbGJhY2s7XG4gICAgdGhpcy5fZXZlbnRDdXN0b21EYXRhID0gY3VzdG9tRGF0YTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7PjgpLmm7TmlrDjgZfjgabjgIHjg6Ljg4fjg6vjgavjg5Hjg6njg6Hjg7zjgr/lgKTjgpLlj43mmKDjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtICAgbW9kZWwgICDlr77osaHjga7jg6Ljg4fjg6tcbiAgICogQHBhcmFtICAgdXNlclRpbWVTZWNvbmRzICAg44OH44Or44K/5pmC6ZaT44Gu56mN566X5YCkW+enkl1cbiAgICogQHJldHVybiAgdHJ1ZSAgICDjg6Ljg4fjg6vjgbjjg5Hjg6njg6Hjg7zjgr/lgKTjga7lj43mmKDjgYLjgopcbiAgICogQHJldHVybiAgZmFsc2UgICDjg6Ljg4fjg6vjgbjjg5Hjg6njg6Hjg7zjgr/lgKTjga7lj43mmKDjgarjgZco44Oi44O844K344On44Oz44Gu5aSJ5YyW44Gq44GXKVxuICAgKi9cbiAgcHVibGljIGRvVXBkYXRlTW90aW9uKG1vZGVsOiBDdWJpc21Nb2RlbCwgdXNlclRpbWVTZWNvbmRzOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICBsZXQgdXBkYXRlZCA9IGZhbHNlO1xuXG4gICAgLy8gLS0tLS0tLSDlh6bnkIbjgpLooYzjgYYgLS0tLS0tLS1cbiAgICAvLyDml6Ljgavjg6Ljg7zjgrfjg6fjg7PjgYzjgYLjgozjgbDntYLkuobjg5Xjg6njgrDjgpLnq4vjgabjgotcblxuICAgIGZvciAoXG4gICAgICBsZXQgaXRlOiBpdGVyYXRvcjxDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5PiA9IHRoaXMuX21vdGlvbnMuYmVnaW4oKTtcbiAgICAgIGl0ZS5ub3RFcXVhbCh0aGlzLl9tb3Rpb25zLmVuZCgpKTtcblxuICAgICkge1xuICAgICAgbGV0IG1vdGlvblF1ZXVlRW50cnk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnkgPSBpdGUucHRyKCk7XG5cbiAgICAgIGlmIChtb3Rpb25RdWV1ZUVudHJ5ID09IG51bGwpIHtcbiAgICAgICAgaXRlID0gdGhpcy5fbW90aW9ucy5lcmFzZShpdGUpOyAvLyDliYrpmaRcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG1vdGlvbjogQUN1YmlzbU1vdGlvbiA9IG1vdGlvblF1ZXVlRW50cnkuX21vdGlvbjtcblxuICAgICAgaWYgKG1vdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIG1vdGlvblF1ZXVlRW50cnkucmVsZWFzZSgpO1xuICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5ID0gbnVsbDtcbiAgICAgICAgaXRlID0gdGhpcy5fbW90aW9ucy5lcmFzZShpdGUpOyAvLyDliYrpmaRcblxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gLS0tLS0tIOWApOOCkuWPjeaYoOOBmeOCiyAtLS0tLS1cbiAgICAgIG1vdGlvbi51cGRhdGVQYXJhbWV0ZXJzKG1vZGVsLCBtb3Rpb25RdWV1ZUVudHJ5LCB1c2VyVGltZVNlY29uZHMpO1xuICAgICAgdXBkYXRlZCA9IHRydWU7XG5cbiAgICAgIC8vIC0tLS0tLSDjg6bjg7zjgrbjg4jjg6rjgqzjg7zjgqTjg5njg7Pjg4jjgpLmpJzmn7vjgZnjgosgLS0tLVxuICAgICAgY29uc3QgZmlyZWRMaXN0OiBjc21WZWN0b3I8Y3NtU3RyaW5nPiA9IG1vdGlvbi5nZXRGaXJlZEV2ZW50KFxuICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LmdldExhc3RDaGVja0V2ZW50U2Vjb25kcygpIC1cbiAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LmdldFN0YXJ0VGltZSgpLFxuICAgICAgICB1c2VyVGltZVNlY29uZHMgLSBtb3Rpb25RdWV1ZUVudHJ5LmdldFN0YXJ0VGltZSgpXG4gICAgICApO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpcmVkTGlzdC5nZXRTaXplKCk7ICsraSkge1xuICAgICAgICB0aGlzLl9ldmVudENhbGxCYWNrKHRoaXMsIGZpcmVkTGlzdC5hdChpKSwgdGhpcy5fZXZlbnRDdXN0b21EYXRhKTtcbiAgICAgIH1cblxuICAgICAgbW90aW9uUXVldWVFbnRyeS5zZXRMYXN0Q2hlY2tFdmVudFNlY29uZHModXNlclRpbWVTZWNvbmRzKTtcblxuICAgICAgLy8gLS0tLS0tIOe1guS6hua4iOOBv+OBruWHpueQhuOBjOOBguOCjOOBsOWJiumZpOOBmeOCiyAtLS0tLS1cbiAgICAgIGlmIChtb3Rpb25RdWV1ZUVudHJ5LmlzRmluaXNoZWQoKSkge1xuICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnJlbGVhc2UoKTtcbiAgICAgICAgbW90aW9uUXVldWVFbnRyeSA9IG51bGw7XG4gICAgICAgIGl0ZSA9IHRoaXMuX21vdGlvbnMuZXJhc2UoaXRlKTsgLy8g5YmK6ZmkXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobW90aW9uUXVldWVFbnRyeS5pc1RyaWdnZXJlZEZhZGVPdXQoKSkge1xuICAgICAgICAgIG1vdGlvblF1ZXVlRW50cnkuc3RhcnRGYWRlT3V0KFxuICAgICAgICAgICAgbW90aW9uUXVldWVFbnRyeS5nZXRGYWRlT3V0U2Vjb25kcygpLFxuICAgICAgICAgICAgdXNlclRpbWVTZWNvbmRzXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpdGUucHJlSW5jcmVtZW50KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHVwZGF0ZWQ7XG4gIH1cbiAgX3VzZXJUaW1lU2Vjb25kczogbnVtYmVyOyAvLyDjg4fjg6vjgr/mmYLplpPjga7nqY3nrpflgKRb56eSXVxuXG4gIF9tb3Rpb25zOiBjc21WZWN0b3I8Q3ViaXNtTW90aW9uUXVldWVFbnRyeT47IC8vIOODouODvOOCt+ODp+ODs1xuICBfZXZlbnRDYWxsQmFjazogQ3ViaXNtTW90aW9uRXZlbnRGdW5jdGlvbjsgLy8g44Kz44O844Or44OQ44OD44Kv6Zai5pWwXG4gIF9ldmVudEN1c3RvbURhdGE6IGFueTsgLy8g44Kz44O844Or44OQ44OD44Kv44Gr5oi744GV44KM44KL44OH44O844K/XG59XG5cbi8qKlxuICog44Kk44OZ44Oz44OI44Gu44Kz44O844Or44OQ44OD44Kv6Zai5pWw44KS5a6a576pXG4gKlxuICog44Kk44OZ44Oz44OI44Gu44Kz44O844Or44OQ44OD44Kv44Gr55m76Yyy44Gn44GN44KL6Zai5pWw44Gu5Z6L5oOF5aCxXG4gKiBAcGFyYW0gY2FsbGVyICAgICAgICDnmbrngavjgZfjgZ/jgqTjg5njg7Pjg4jjgpLlho3nlJ/jgZXjgZvjgZ9DdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXJcbiAqIEBwYXJhbSBldmVudFZhbHVlICAgIOeZuueBq+OBl+OBn+OCpOODmeODs+ODiOOBruaWh+Wtl+WIl+ODh+ODvOOCv1xuICogQHBhcmFtIGN1c3RvbURhdGEgICDjgrPjg7zjg6vjg5Djg4Pjgq/jgavov5TjgZXjgozjgovnmbvpjLLmmYLjgavmjIflrprjgZXjgozjgZ/jg4fjg7zjgr9cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDdWJpc21Nb3Rpb25FdmVudEZ1bmN0aW9uIHtcbiAgKFxuICAgIGNhbGxlcjogQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2VyLFxuICAgIGV2ZW50VmFsdWU6IGNzbVN0cmluZyxcbiAgICBjdXN0b21EYXRhOiBhbnlcbiAgKTogdm9pZDtcbn1cblxuLyoqXG4gKiDjg6Ljg7zjgrfjg6fjg7Pjga7orZjliKXnlarlj7dcbiAqXG4gKiDjg6Ljg7zjgrfjg6fjg7Pjga7orZjliKXnlarlj7fjga7lrprnvqlcbiAqL1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5SGFuZGxlID0gYW55O1xuZXhwb3J0IGNvbnN0IEludmFsaWRNb3Rpb25RdWV1ZUVudHJ5SGFuZGxlVmFsdWU6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGUgPVxuICAtMTtcblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtbW90aW9ucXVldWVtYW5hZ2VyJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXIgPSAkLkN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlcjtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2VyID0gJC5DdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXI7XG4gIGV4cG9ydCBjb25zdCBJbnZhbGlkTW90aW9uUXVldWVFbnRyeUhhbmRsZVZhbHVlID1cbiAgICAkLkludmFsaWRNb3Rpb25RdWV1ZUVudHJ5SGFuZGxlVmFsdWU7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGUgPSAkLkN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGU7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbU1vdGlvbkV2ZW50RnVuY3Rpb24gPSAkLkN1YmlzbU1vdGlvbkV2ZW50RnVuY3Rpb247XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21NYXRoIH0gZnJvbSAnLi4vbWF0aC9jdWJpc21tYXRoJztcbmltcG9ydCB7IEN1YmlzbVZlY3RvcjIgfSBmcm9tICcuLi9tYXRoL2N1YmlzbXZlY3RvcjInO1xuaW1wb3J0IHsgY3NtVmVjdG9yIH0gZnJvbSAnLi4vdHlwZS9jc212ZWN0b3InO1xuaW1wb3J0IHsgQ3ViaXNtTW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XG5pbXBvcnQge1xuICBDdWJpc21QaHlzaWNzSW5wdXQsXG4gIEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uLFxuICBDdWJpc21QaHlzaWNzT3V0cHV0LFxuICBDdWJpc21QaHlzaWNzUGFydGljbGUsXG4gIEN1YmlzbVBoeXNpY3NSaWcsXG4gIEN1YmlzbVBoeXNpY3NTb3VyY2UsXG4gIEN1YmlzbVBoeXNpY3NTdWJSaWcsXG4gIEN1YmlzbVBoeXNpY3NUYXJnZXRUeXBlLFxufSBmcm9tICcuL2N1YmlzbXBoeXNpY3NpbnRlcm5hbCc7XG5pbXBvcnQgeyBDdWJpc21QaHlzaWNzSnNvbiB9IGZyb20gJy4vY3ViaXNtcGh5c2ljc2pzb24nO1xuXG4vLyBwaHlzaWNzIHR5cGVzIHRhZ3MuXG5jb25zdCBQaHlzaWNzVHlwZVRhZ1ggPSAnWCc7XG5jb25zdCBQaHlzaWNzVHlwZVRhZ1kgPSAnWSc7XG5jb25zdCBQaHlzaWNzVHlwZVRhZ0FuZ2xlID0gJ0FuZ2xlJztcblxuLy8gQ29uc3RhbnQgb2YgYWlyIHJlc2lzdGFuY2UuXG5jb25zdCBBaXJSZXNpc3RhbmNlID0gNS4wO1xuXG4vLyBDb25zdGFudCBvZiBtYXhpbXVtIHdlaWdodCBvZiBpbnB1dCBhbmQgb3V0cHV0IHJhdGlvLlxuY29uc3QgTWF4aW11bVdlaWdodCA9IDEwMC4wO1xuXG4vLyBDb25zdGFudCBvZiB0aHJlc2hvbGQgb2YgbW92ZW1lbnQuXG5jb25zdCBNb3ZlbWVudFRocmVzaG9sZCA9IDAuMDAxO1xuXG4vLyBDb25zdGFudCBvZiBtYXhpbXVtIGFsbG93ZWQgZGVsdGEgdGltZVxuY29uc3QgTWF4RGVsdGFUaW1lID0gNS4wO1xuXG4vKipcbiAqIOeJqeeQhua8lOeul+OCr+ODqeOCuVxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtUGh5c2ljcyB7XG4gIC8qKlxuICAgKiDjgqTjg7Pjgrnjgr/jg7Pjgrnjga7kvZzmiJBcbiAgICogQHBhcmFtIGJ1ZmZlciAgICBwaHlzaWNzMy5qc29u44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXG4gICAqIEBwYXJhbSBzaXplICAgICAg44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAqIEByZXR1cm4g5L2c5oiQ44GV44KM44Gf44Kk44Oz44K544K/44Oz44K5XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGNyZWF0ZShidWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpOiBDdWJpc21QaHlzaWNzIHtcbiAgICBjb25zdCByZXQ6IEN1YmlzbVBoeXNpY3MgPSBuZXcgQ3ViaXNtUGh5c2ljcygpO1xuXG4gICAgcmV0LnBhcnNlKGJ1ZmZlciwgc2l6ZSk7XG4gICAgcmV0Ll9waHlzaWNzUmlnLmdyYXZpdHkueSA9IDA7XG5cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLyoqXG4gICAqIOOCpOODs+OCueOCv+ODs+OCueOCkuegtOajhOOBmeOCi1xuICAgKiBAcGFyYW0gcGh5c2ljcyDnoLTmo4TjgZnjgovjgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZGVsZXRlKHBoeXNpY3M6IEN1YmlzbVBoeXNpY3MpOiB2b2lkIHtcbiAgICBpZiAocGh5c2ljcyAhPSBudWxsKSB7XG4gICAgICBwaHlzaWNzLnJlbGVhc2UoKTtcbiAgICAgIHBoeXNpY3MgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBwaHlzaWNzMy5qc29u44KS44OR44O844K544GZ44KL44CCXG4gICAqIEBwYXJhbSBwaHlzaWNzSnNvbiBwaHlzaWNzMy5qc29u44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXG4gICAqIEBwYXJhbSBzaXplIOODkOODg+ODleOCoeOBruOCteOCpOOCulxuICAgKi9cbiAgcHVibGljIHBhcnNlKHBoeXNpY3NKc29uOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fcGh5c2ljc1JpZyA9IG5ldyBDdWJpc21QaHlzaWNzUmlnKCk7XG5cbiAgICBsZXQganNvbjogQ3ViaXNtUGh5c2ljc0pzb24gPSBuZXcgQ3ViaXNtUGh5c2ljc0pzb24ocGh5c2ljc0pzb24sIHNpemUpO1xuXG4gICAgdGhpcy5fcGh5c2ljc1JpZy5ncmF2aXR5ID0ganNvbi5nZXRHcmF2aXR5KCk7XG4gICAgdGhpcy5fcGh5c2ljc1JpZy53aW5kID0ganNvbi5nZXRXaW5kKCk7XG4gICAgdGhpcy5fcGh5c2ljc1JpZy5zdWJSaWdDb3VudCA9IGpzb24uZ2V0U3ViUmlnQ291bnQoKTtcblxuICAgIHRoaXMuX3BoeXNpY3NSaWcuZnBzID0ganNvbi5nZXRGcHMoKTtcblxuICAgIHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MudXBkYXRlU2l6ZShcbiAgICAgIHRoaXMuX3BoeXNpY3NSaWcuc3ViUmlnQ291bnQsXG4gICAgICBDdWJpc21QaHlzaWNzU3ViUmlnLFxuICAgICAgdHJ1ZVxuICAgICk7XG4gICAgdGhpcy5fcGh5c2ljc1JpZy5pbnB1dHMudXBkYXRlU2l6ZShcbiAgICAgIGpzb24uZ2V0VG90YWxJbnB1dENvdW50KCksXG4gICAgICBDdWJpc21QaHlzaWNzSW5wdXQsXG4gICAgICB0cnVlXG4gICAgKTtcbiAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMudXBkYXRlU2l6ZShcbiAgICAgIGpzb24uZ2V0VG90YWxPdXRwdXRDb3VudCgpLFxuICAgICAgQ3ViaXNtUGh5c2ljc091dHB1dCxcbiAgICAgIHRydWVcbiAgICApO1xuICAgIHRoaXMuX3BoeXNpY3NSaWcucGFydGljbGVzLnVwZGF0ZVNpemUoXG4gICAgICBqc29uLmdldFZlcnRleENvdW50KCksXG4gICAgICBDdWJpc21QaHlzaWNzUGFydGljbGUsXG4gICAgICB0cnVlXG4gICAgKTtcblxuICAgIHRoaXMuX2N1cnJlbnRSaWdPdXRwdXRzLmNsZWFyKCk7XG4gICAgdGhpcy5fcHJldmlvdXNSaWdPdXRwdXRzLmNsZWFyKCk7XG5cbiAgICBsZXQgaW5wdXRJbmRleCA9IDAsXG4gICAgICBvdXRwdXRJbmRleCA9IDAsXG4gICAgICBwYXJ0aWNsZUluZGV4ID0gMDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5nZXRTaXplKCk7ICsraSkge1xuICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5ub3JtYWxpemF0aW9uUG9zaXRpb24ubWluaW11bSA9XG4gICAgICAgIGpzb24uZ2V0Tm9ybWFsaXphdGlvblBvc2l0aW9uTWluaW11bVZhbHVlKGkpO1xuICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5ub3JtYWxpemF0aW9uUG9zaXRpb24ubWF4aW11bSA9XG4gICAgICAgIGpzb24uZ2V0Tm9ybWFsaXphdGlvblBvc2l0aW9uTWF4aW11bVZhbHVlKGkpO1xuICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5ub3JtYWxpemF0aW9uUG9zaXRpb24uZGVmYWx1dCA9XG4gICAgICAgIGpzb24uZ2V0Tm9ybWFsaXphdGlvblBvc2l0aW9uRGVmYXVsdFZhbHVlKGkpO1xuXG4gICAgICB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KGkpLm5vcm1hbGl6YXRpb25BbmdsZS5taW5pbXVtID1cbiAgICAgICAganNvbi5nZXROb3JtYWxpemF0aW9uQW5nbGVNaW5pbXVtVmFsdWUoaSk7XG4gICAgICB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KGkpLm5vcm1hbGl6YXRpb25BbmdsZS5tYXhpbXVtID1cbiAgICAgICAganNvbi5nZXROb3JtYWxpemF0aW9uQW5nbGVNYXhpbXVtVmFsdWUoaSk7XG4gICAgICB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KGkpLm5vcm1hbGl6YXRpb25BbmdsZS5kZWZhbHV0ID1cbiAgICAgICAganNvbi5nZXROb3JtYWxpemF0aW9uQW5nbGVEZWZhdWx0VmFsdWUoaSk7XG5cbiAgICAgIC8vIElucHV0XG4gICAgICB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KGkpLmlucHV0Q291bnQgPSBqc29uLmdldElucHV0Q291bnQoaSk7XG4gICAgICB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KGkpLmJhc2VJbnB1dEluZGV4ID0gaW5wdXRJbmRleDtcblxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KGkpLmlucHV0Q291bnQ7ICsraikge1xuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLmlucHV0cy5hdChpbnB1dEluZGV4ICsgaikuc291cmNlUGFyYW1ldGVySW5kZXggPSAtMTtcbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5pbnB1dHMuYXQoaW5wdXRJbmRleCArIGopLndlaWdodCA9IGpzb24uZ2V0SW5wdXRXZWlnaHQoXG4gICAgICAgICAgaSxcbiAgICAgICAgICBqXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuaW5wdXRzLmF0KGlucHV0SW5kZXggKyBqKS5yZWZsZWN0ID1cbiAgICAgICAgICBqc29uLmdldElucHV0UmVmbGVjdChpLCBqKTtcblxuICAgICAgICBpZiAoanNvbi5nZXRJbnB1dFR5cGUoaSwgaikgPT0gUGh5c2ljc1R5cGVUYWdYKSB7XG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5pbnB1dHMuYXQoaW5wdXRJbmRleCArIGopLnR5cGUgPVxuICAgICAgICAgICAgQ3ViaXNtUGh5c2ljc1NvdXJjZS5DdWJpc21QaHlzaWNzU291cmNlX1g7XG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5pbnB1dHMuYXQoXG4gICAgICAgICAgICBpbnB1dEluZGV4ICsgalxuICAgICAgICAgICkuZ2V0Tm9ybWFsaXplZFBhcmFtZXRlclZhbHVlID0gZ2V0SW5wdXRUcmFuc2xhdGlvblhGcm9tTm9ybWFsaXplZFBhcmFtZXRlclZhbHVlO1xuICAgICAgICB9IGVsc2UgaWYgKGpzb24uZ2V0SW5wdXRUeXBlKGksIGopID09IFBoeXNpY3NUeXBlVGFnWSkge1xuICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuaW5wdXRzLmF0KGlucHV0SW5kZXggKyBqKS50eXBlID1cbiAgICAgICAgICAgIEN1YmlzbVBoeXNpY3NTb3VyY2UuQ3ViaXNtUGh5c2ljc1NvdXJjZV9ZO1xuICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuaW5wdXRzLmF0KFxuICAgICAgICAgICAgaW5wdXRJbmRleCArIGpcbiAgICAgICAgICApLmdldE5vcm1hbGl6ZWRQYXJhbWV0ZXJWYWx1ZSA9IGdldElucHV0VHJhbnNsYXRpb25ZRnJvbU5vcm1hbGl6ZWRQYXJhbXRlclZhbHVlO1xuICAgICAgICB9IGVsc2UgaWYgKGpzb24uZ2V0SW5wdXRUeXBlKGksIGopID09IFBoeXNpY3NUeXBlVGFnQW5nbGUpIHtcbiAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLmlucHV0cy5hdChpbnB1dEluZGV4ICsgaikudHlwZSA9XG4gICAgICAgICAgICBDdWJpc21QaHlzaWNzU291cmNlLkN1YmlzbVBoeXNpY3NTb3VyY2VfQW5nbGU7XG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5pbnB1dHMuYXQoXG4gICAgICAgICAgICBpbnB1dEluZGV4ICsgalxuICAgICAgICAgICkuZ2V0Tm9ybWFsaXplZFBhcmFtZXRlclZhbHVlID0gZ2V0SW5wdXRBbmdsZUZyb21Ob3JtYWxpemVkUGFyYW1ldGVyVmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLmlucHV0cy5hdChpbnB1dEluZGV4ICsgaikuc291cmNlLnRhcmdldFR5cGUgPVxuICAgICAgICAgIEN1YmlzbVBoeXNpY3NUYXJnZXRUeXBlLkN1YmlzbVBoeXNpY3NUYXJnZXRUeXBlX1BhcmFtZXRlcjtcbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5pbnB1dHMuYXQoaW5wdXRJbmRleCArIGopLnNvdXJjZS5pZCA9XG4gICAgICAgICAganNvbi5nZXRJbnB1dFNvdXJjZUlkKGksIGopO1xuICAgICAgfVxuICAgICAgaW5wdXRJbmRleCArPSB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KGkpLmlucHV0Q291bnQ7XG5cbiAgICAgIC8vIE91dHB1dFxuICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5vdXRwdXRDb3VudCA9IGpzb24uZ2V0T3V0cHV0Q291bnQoaSk7XG4gICAgICB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KGkpLmJhc2VPdXRwdXRJbmRleCA9IG91dHB1dEluZGV4O1xuXG4gICAgICBjb25zdCBjdXJyZW50UmlnT3V0cHV0ID0gbmV3IFBoeXNpY3NPdXRwdXQoKTtcbiAgICAgIGN1cnJlbnRSaWdPdXRwdXQub3V0cHV0cy5yZXNpemUoXG4gICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkub3V0cHV0Q291bnRcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHByZXZpb3VzUmlnT3V0cHV0ID0gbmV3IFBoeXNpY3NPdXRwdXQoKTtcbiAgICAgIHByZXZpb3VzUmlnT3V0cHV0Lm91dHB1dHMucmVzaXplKFxuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KGkpLm91dHB1dENvdW50XG4gICAgICApO1xuXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkub3V0cHV0Q291bnQ7ICsraikge1xuICAgICAgICAvLyBpbml0aWFsaXplXG4gICAgICAgIGN1cnJlbnRSaWdPdXRwdXQub3V0cHV0c1tqXSA9IDAuMDtcbiAgICAgICAgcHJldmlvdXNSaWdPdXRwdXQub3V0cHV0c1tqXSA9IDAuMDtcblxuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQob3V0cHV0SW5kZXggKyBqKS5kZXN0aW5hdGlvblBhcmFtZXRlckluZGV4ID1cbiAgICAgICAgICAtMTtcbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KG91dHB1dEluZGV4ICsgaikudmVydGV4SW5kZXggPVxuICAgICAgICAgIGpzb24uZ2V0T3V0cHV0VmVydGV4SW5kZXgoaSwgaik7XG4gICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChvdXRwdXRJbmRleCArIGopLmFuZ2xlU2NhbGUgPVxuICAgICAgICAgIGpzb24uZ2V0T3V0cHV0QW5nbGVTY2FsZShpLCBqKTtcbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KG91dHB1dEluZGV4ICsgaikud2VpZ2h0ID1cbiAgICAgICAgICBqc29uLmdldE91dHB1dFdlaWdodChpLCBqKTtcbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KG91dHB1dEluZGV4ICsgaikuZGVzdGluYXRpb24udGFyZ2V0VHlwZSA9XG4gICAgICAgICAgQ3ViaXNtUGh5c2ljc1RhcmdldFR5cGUuQ3ViaXNtUGh5c2ljc1RhcmdldFR5cGVfUGFyYW1ldGVyO1xuXG4gICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChvdXRwdXRJbmRleCArIGopLmRlc3RpbmF0aW9uLmlkID1cbiAgICAgICAgICBqc29uLmdldE91dHB1dERlc3RpbmF0aW9uSWQoaSwgaik7XG5cbiAgICAgICAgaWYgKGpzb24uZ2V0T3V0cHV0VHlwZShpLCBqKSA9PSBQaHlzaWNzVHlwZVRhZ1gpIHtcbiAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQob3V0cHV0SW5kZXggKyBqKS50eXBlID1cbiAgICAgICAgICAgIEN1YmlzbVBoeXNpY3NTb3VyY2UuQ3ViaXNtUGh5c2ljc1NvdXJjZV9YO1xuICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChvdXRwdXRJbmRleCArIGopLmdldFZhbHVlID1cbiAgICAgICAgICAgIGdldE91dHB1dFRyYW5zbGF0aW9uWDtcbiAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQob3V0cHV0SW5kZXggKyBqKS5nZXRTY2FsZSA9XG4gICAgICAgICAgICBnZXRPdXRwdXRTY2FsZVRyYW5zbGF0aW9uWDtcbiAgICAgICAgfSBlbHNlIGlmIChqc29uLmdldE91dHB1dFR5cGUoaSwgaikgPT0gUGh5c2ljc1R5cGVUYWdZKSB7XG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KG91dHB1dEluZGV4ICsgaikudHlwZSA9XG4gICAgICAgICAgICBDdWJpc21QaHlzaWNzU291cmNlLkN1YmlzbVBoeXNpY3NTb3VyY2VfWTtcbiAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQob3V0cHV0SW5kZXggKyBqKS5nZXRWYWx1ZSA9XG4gICAgICAgICAgICBnZXRPdXRwdXRUcmFuc2xhdGlvblk7XG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KG91dHB1dEluZGV4ICsgaikuZ2V0U2NhbGUgPVxuICAgICAgICAgICAgZ2V0T3V0cHV0U2NhbGVUcmFuc2xhdGlvblk7XG4gICAgICAgIH0gZWxzZSBpZiAoanNvbi5nZXRPdXRwdXRUeXBlKGksIGopID09IFBoeXNpY3NUeXBlVGFnQW5nbGUpIHtcbiAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQob3V0cHV0SW5kZXggKyBqKS50eXBlID1cbiAgICAgICAgICAgIEN1YmlzbVBoeXNpY3NTb3VyY2UuQ3ViaXNtUGh5c2ljc1NvdXJjZV9BbmdsZTtcbiAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQob3V0cHV0SW5kZXggKyBqKS5nZXRWYWx1ZSA9XG4gICAgICAgICAgICBnZXRPdXRwdXRBbmdsZTtcbiAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQob3V0cHV0SW5kZXggKyBqKS5nZXRTY2FsZSA9XG4gICAgICAgICAgICBnZXRPdXRwdXRTY2FsZUFuZ2xlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KG91dHB1dEluZGV4ICsgaikucmVmbGVjdCA9XG4gICAgICAgICAganNvbi5nZXRPdXRwdXRSZWZsZWN0KGksIGopO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9jdXJyZW50UmlnT3V0cHV0cy5wdXNoQmFjayhjdXJyZW50UmlnT3V0cHV0KTtcbiAgICAgIHRoaXMuX3ByZXZpb3VzUmlnT3V0cHV0cy5wdXNoQmFjayhwcmV2aW91c1JpZ091dHB1dCk7XG5cbiAgICAgIG91dHB1dEluZGV4ICs9IHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkub3V0cHV0Q291bnQ7XG5cbiAgICAgIC8vIFBhcnRpY2xlXG4gICAgICB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KGkpLnBhcnRpY2xlQ291bnQgPSBqc29uLmdldFBhcnRpY2xlQ291bnQoaSk7XG4gICAgICB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KGkpLmJhc2VQYXJ0aWNsZUluZGV4ID0gcGFydGljbGVJbmRleDtcblxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KGkpLnBhcnRpY2xlQ291bnQ7ICsraikge1xuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLnBhcnRpY2xlcy5hdChwYXJ0aWNsZUluZGV4ICsgaikubW9iaWxpdHkgPVxuICAgICAgICAgIGpzb24uZ2V0UGFydGljbGVNb2JpbGl0eShpLCBqKTtcbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5wYXJ0aWNsZXMuYXQocGFydGljbGVJbmRleCArIGopLmRlbGF5ID1cbiAgICAgICAgICBqc29uLmdldFBhcnRpY2xlRGVsYXkoaSwgaik7XG4gICAgICAgIHRoaXMuX3BoeXNpY3NSaWcucGFydGljbGVzLmF0KHBhcnRpY2xlSW5kZXggKyBqKS5hY2NlbGVyYXRpb24gPVxuICAgICAgICAgIGpzb24uZ2V0UGFydGljbGVBY2NlbGVyYXRpb24oaSwgaik7XG4gICAgICAgIHRoaXMuX3BoeXNpY3NSaWcucGFydGljbGVzLmF0KHBhcnRpY2xlSW5kZXggKyBqKS5yYWRpdXMgPVxuICAgICAgICAgIGpzb24uZ2V0UGFydGljbGVSYWRpdXMoaSwgaik7XG4gICAgICAgIHRoaXMuX3BoeXNpY3NSaWcucGFydGljbGVzLmF0KHBhcnRpY2xlSW5kZXggKyBqKS5wb3NpdGlvbiA9XG4gICAgICAgICAganNvbi5nZXRQYXJ0aWNsZVBvc2l0aW9uKGksIGopO1xuICAgICAgfVxuXG4gICAgICBwYXJ0aWNsZUluZGV4ICs9IHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkucGFydGljbGVDb3VudDtcbiAgICB9XG5cbiAgICB0aGlzLmluaXRpYWxpemUoKTtcblxuICAgIGpzb24ucmVsZWFzZSgpO1xuICAgIGpzb24gPSB2b2lkIDA7XG4gICAganNvbiA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICog54++5Zyo44Gu44OR44Op44Oh44O844K/5YCk44Gn54mp55CG5ryU566X44GM5a6J5a6a5YyW44GZ44KL54q25oWL44KS5ryU566X44GZ44KL44CCXG4gICAqIEBwYXJhbSBtb2RlbCDniannkIbmvJTnrpfjga7ntZDmnpzjgpLpgannlKjjgZnjgovjg6Ljg4fjg6tcbiAgICovXG4gIHB1YmxpYyBzdGFiaWxpemF0aW9uKG1vZGVsOiBDdWJpc21Nb2RlbCk6IHZvaWQge1xuICAgIGxldCB0b3RhbEFuZ2xlOiB7IGFuZ2xlOiBudW1iZXIgfTtcbiAgICBsZXQgd2VpZ2h0OiBudW1iZXI7XG4gICAgbGV0IHJhZEFuZ2xlOiBudW1iZXI7XG4gICAgbGV0IG91dHB1dFZhbHVlOiBudW1iZXI7XG4gICAgY29uc3QgdG90YWxUcmFuc2xhdGlvbjogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKCk7XG4gICAgbGV0IGN1cnJlbnRTZXR0aW5nOiBDdWJpc21QaHlzaWNzU3ViUmlnO1xuICAgIGxldCBjdXJyZW50SW5wdXRzOiBDdWJpc21QaHlzaWNzSW5wdXRbXTtcbiAgICBsZXQgY3VycmVudE91dHB1dHM6IEN1YmlzbVBoeXNpY3NPdXRwdXRbXTtcbiAgICBsZXQgY3VycmVudFBhcnRpY2xlczogQ3ViaXNtUGh5c2ljc1BhcnRpY2xlW107XG5cbiAgICBsZXQgcGFyYW1ldGVyVmFsdWVzOiBGbG9hdDMyQXJyYXk7XG4gICAgbGV0IHBhcmFtZXRlck1heGltdW1WYWx1ZXM6IEZsb2F0MzJBcnJheTtcbiAgICBsZXQgcGFyYW1ldGVyTWluaW11bVZhbHVlczogRmxvYXQzMkFycmF5O1xuICAgIGxldCBwYXJhbWV0ZXJEZWZhdWx0VmFsdWVzOiBGbG9hdDMyQXJyYXk7XG5cbiAgICBwYXJhbWV0ZXJWYWx1ZXMgPSBtb2RlbC5nZXRNb2RlbCgpLnBhcmFtZXRlcnMudmFsdWVzO1xuICAgIHBhcmFtZXRlck1heGltdW1WYWx1ZXMgPSBtb2RlbC5nZXRNb2RlbCgpLnBhcmFtZXRlcnMubWF4aW11bVZhbHVlcztcbiAgICBwYXJhbWV0ZXJNaW5pbXVtVmFsdWVzID0gbW9kZWwuZ2V0TW9kZWwoKS5wYXJhbWV0ZXJzLm1pbmltdW1WYWx1ZXM7XG4gICAgcGFyYW1ldGVyRGVmYXVsdFZhbHVlcyA9IG1vZGVsLmdldE1vZGVsKCkucGFyYW1ldGVycy5kZWZhdWx0VmFsdWVzO1xuXG4gICAgaWYgKCh0aGlzLl9wYXJhbWV0ZXJDYWNoZXM/Lmxlbmd0aCA/PyAwKSA8IG1vZGVsLmdldFBhcmFtZXRlckNvdW50KCkpIHtcbiAgICAgIHRoaXMuX3BhcmFtZXRlckNhY2hlcyA9IG5ldyBGbG9hdDMyQXJyYXkobW9kZWwuZ2V0UGFyYW1ldGVyQ291bnQoKSk7XG4gICAgfVxuXG4gICAgaWYgKCh0aGlzLl9wYXJhbWV0ZXJJbnB1dENhY2hlcz8ubGVuZ3RoID8/IDApIDwgbW9kZWwuZ2V0UGFyYW1ldGVyQ291bnQoKSkge1xuICAgICAgdGhpcy5fcGFyYW1ldGVySW5wdXRDYWNoZXMgPSBuZXcgRmxvYXQzMkFycmF5KG1vZGVsLmdldFBhcmFtZXRlckNvdW50KCkpO1xuICAgIH1cblxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgbW9kZWwuZ2V0UGFyYW1ldGVyQ291bnQoKTsgKytqKSB7XG4gICAgICB0aGlzLl9wYXJhbWV0ZXJDYWNoZXNbal0gPSBwYXJhbWV0ZXJWYWx1ZXNbal07XG4gICAgICB0aGlzLl9wYXJhbWV0ZXJJbnB1dENhY2hlc1tqXSA9IHBhcmFtZXRlclZhbHVlc1tqXTtcbiAgICB9XG5cbiAgICBmb3IgKFxuICAgICAgbGV0IHNldHRpbmdJbmRleCA9IDA7XG4gICAgICBzZXR0aW5nSW5kZXggPCB0aGlzLl9waHlzaWNzUmlnLnN1YlJpZ0NvdW50O1xuICAgICAgKytzZXR0aW5nSW5kZXhcbiAgICApIHtcbiAgICAgIHRvdGFsQW5nbGUgPSB7IGFuZ2xlOiAwLjAgfTtcbiAgICAgIHRvdGFsVHJhbnNsYXRpb24ueCA9IDAuMDtcbiAgICAgIHRvdGFsVHJhbnNsYXRpb24ueSA9IDAuMDtcbiAgICAgIGN1cnJlbnRTZXR0aW5nID0gdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChzZXR0aW5nSW5kZXgpO1xuICAgICAgY3VycmVudElucHV0cyA9IHRoaXMuX3BoeXNpY3NSaWcuaW5wdXRzLmdldChcbiAgICAgICAgY3VycmVudFNldHRpbmcuYmFzZUlucHV0SW5kZXhcbiAgICAgICk7XG4gICAgICBjdXJyZW50T3V0cHV0cyA9IHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5nZXQoXG4gICAgICAgIGN1cnJlbnRTZXR0aW5nLmJhc2VPdXRwdXRJbmRleFxuICAgICAgKTtcbiAgICAgIGN1cnJlbnRQYXJ0aWNsZXMgPSB0aGlzLl9waHlzaWNzUmlnLnBhcnRpY2xlcy5nZXQoXG4gICAgICAgIGN1cnJlbnRTZXR0aW5nLmJhc2VQYXJ0aWNsZUluZGV4XG4gICAgICApO1xuXG4gICAgICAvLyBMb2FkIGlucHV0IHBhcmFtZXRlcnNcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3VycmVudFNldHRpbmcuaW5wdXRDb3VudDsgKytpKSB7XG4gICAgICAgIHdlaWdodCA9IGN1cnJlbnRJbnB1dHNbaV0ud2VpZ2h0IC8gTWF4aW11bVdlaWdodDtcblxuICAgICAgICBpZiAoY3VycmVudElucHV0c1tpXS5zb3VyY2VQYXJhbWV0ZXJJbmRleCA9PSAtMSkge1xuICAgICAgICAgIGN1cnJlbnRJbnB1dHNbaV0uc291cmNlUGFyYW1ldGVySW5kZXggPSBtb2RlbC5nZXRQYXJhbWV0ZXJJbmRleChcbiAgICAgICAgICAgIGN1cnJlbnRJbnB1dHNbaV0uc291cmNlLmlkXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnRJbnB1dHNbaV0uZ2V0Tm9ybWFsaXplZFBhcmFtZXRlclZhbHVlKFxuICAgICAgICAgIHRvdGFsVHJhbnNsYXRpb24sXG4gICAgICAgICAgdG90YWxBbmdsZSxcbiAgICAgICAgICBwYXJhbWV0ZXJWYWx1ZXNbY3VycmVudElucHV0c1tpXS5zb3VyY2VQYXJhbWV0ZXJJbmRleF0sXG4gICAgICAgICAgcGFyYW1ldGVyTWluaW11bVZhbHVlc1tjdXJyZW50SW5wdXRzW2ldLnNvdXJjZVBhcmFtZXRlckluZGV4XSxcbiAgICAgICAgICBwYXJhbWV0ZXJNYXhpbXVtVmFsdWVzW2N1cnJlbnRJbnB1dHNbaV0uc291cmNlUGFyYW1ldGVySW5kZXhdLFxuICAgICAgICAgIHBhcmFtZXRlckRlZmF1bHRWYWx1ZXNbY3VycmVudElucHV0c1tpXS5zb3VyY2VQYXJhbWV0ZXJJbmRleF0sXG4gICAgICAgICAgY3VycmVudFNldHRpbmcubm9ybWFsaXphdGlvblBvc2l0aW9uLFxuICAgICAgICAgIGN1cnJlbnRTZXR0aW5nLm5vcm1hbGl6YXRpb25BbmdsZSxcbiAgICAgICAgICBjdXJyZW50SW5wdXRzW2ldLnJlZmxlY3QsXG4gICAgICAgICAgd2VpZ2h0XG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5fcGFyYW1ldGVyQ2FjaGVzW2N1cnJlbnRJbnB1dHNbaV0uc291cmNlUGFyYW1ldGVySW5kZXhdID1cbiAgICAgICAgICBwYXJhbWV0ZXJWYWx1ZXNbY3VycmVudElucHV0c1tpXS5zb3VyY2VQYXJhbWV0ZXJJbmRleF07XG4gICAgICB9XG5cbiAgICAgIHJhZEFuZ2xlID0gQ3ViaXNtTWF0aC5kZWdyZWVzVG9SYWRpYW4oLXRvdGFsQW5nbGUuYW5nbGUpO1xuXG4gICAgICB0b3RhbFRyYW5zbGF0aW9uLnggPVxuICAgICAgICB0b3RhbFRyYW5zbGF0aW9uLnggKiBDdWJpc21NYXRoLmNvcyhyYWRBbmdsZSkgLVxuICAgICAgICB0b3RhbFRyYW5zbGF0aW9uLnkgKiBDdWJpc21NYXRoLnNpbihyYWRBbmdsZSk7XG4gICAgICB0b3RhbFRyYW5zbGF0aW9uLnkgPVxuICAgICAgICB0b3RhbFRyYW5zbGF0aW9uLnggKiBDdWJpc21NYXRoLnNpbihyYWRBbmdsZSkgK1xuICAgICAgICB0b3RhbFRyYW5zbGF0aW9uLnkgKiBDdWJpc21NYXRoLmNvcyhyYWRBbmdsZSk7XG5cbiAgICAgIC8vIENhbGN1bGF0ZSBwYXJ0aWNsZXMgcG9zaXRpb24uXG4gICAgICB1cGRhdGVQYXJ0aWNsZXNGb3JTdGFiaWxpemF0aW9uKFxuICAgICAgICBjdXJyZW50UGFydGljbGVzLFxuICAgICAgICBjdXJyZW50U2V0dGluZy5wYXJ0aWNsZUNvdW50LFxuICAgICAgICB0b3RhbFRyYW5zbGF0aW9uLFxuICAgICAgICB0b3RhbEFuZ2xlLmFuZ2xlLFxuICAgICAgICB0aGlzLl9vcHRpb25zLndpbmQsXG4gICAgICAgIE1vdmVtZW50VGhyZXNob2xkICogY3VycmVudFNldHRpbmcubm9ybWFsaXphdGlvblBvc2l0aW9uLm1heGltdW1cbiAgICAgICk7XG5cbiAgICAgIC8vIFVwZGF0ZSBvdXRwdXQgcGFyYW1ldGVycy5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3VycmVudFNldHRpbmcub3V0cHV0Q291bnQ7ICsraSkge1xuICAgICAgICBjb25zdCBwYXJ0aWNsZUluZGV4ID0gY3VycmVudE91dHB1dHNbaV0udmVydGV4SW5kZXg7XG5cbiAgICAgICAgaWYgKGN1cnJlbnRPdXRwdXRzW2ldLmRlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXggPT0gLTEpIHtcbiAgICAgICAgICBjdXJyZW50T3V0cHV0c1tpXS5kZXN0aW5hdGlvblBhcmFtZXRlckluZGV4ID0gbW9kZWwuZ2V0UGFyYW1ldGVySW5kZXgoXG4gICAgICAgICAgICBjdXJyZW50T3V0cHV0c1tpXS5kZXN0aW5hdGlvbi5pZFxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgcGFydGljbGVJbmRleCA8IDEgfHxcbiAgICAgICAgICBwYXJ0aWNsZUluZGV4ID49IGN1cnJlbnRTZXR0aW5nLnBhcnRpY2xlQ291bnRcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdHJhbnNsYXRpb246IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigpO1xuICAgICAgICB0cmFuc2xhdGlvbiA9IGN1cnJlbnRQYXJ0aWNsZXNbcGFydGljbGVJbmRleF0ucG9zaXRpb24uc3Vic3RyYWN0KFxuICAgICAgICAgIGN1cnJlbnRQYXJ0aWNsZXNbcGFydGljbGVJbmRleCAtIDFdLnBvc2l0aW9uXG4gICAgICAgICk7XG5cbiAgICAgICAgb3V0cHV0VmFsdWUgPSBjdXJyZW50T3V0cHV0c1tpXS5nZXRWYWx1ZShcbiAgICAgICAgICB0cmFuc2xhdGlvbixcbiAgICAgICAgICBjdXJyZW50UGFydGljbGVzLFxuICAgICAgICAgIHBhcnRpY2xlSW5kZXgsXG4gICAgICAgICAgY3VycmVudE91dHB1dHNbaV0ucmVmbGVjdCxcbiAgICAgICAgICB0aGlzLl9vcHRpb25zLmdyYXZpdHlcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLl9jdXJyZW50UmlnT3V0cHV0cy5hdChzZXR0aW5nSW5kZXgpLm91dHB1dHNbaV0gPSBvdXRwdXRWYWx1ZTtcbiAgICAgICAgdGhpcy5fcHJldmlvdXNSaWdPdXRwdXRzLmF0KHNldHRpbmdJbmRleCkub3V0cHV0c1tpXSA9IG91dHB1dFZhbHVlO1xuXG4gICAgICAgIGNvbnN0IGRlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXg6IG51bWJlciA9XG4gICAgICAgICAgY3VycmVudE91dHB1dHNbaV0uZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleDtcblxuICAgICAgICBjb25zdCBvdXRQYXJhbWV0ZXJDYWNoZXM6IEZsb2F0MzJBcnJheSA9XG4gICAgICAgICAgIUZsb2F0MzJBcnJheS5wcm90b3R5cGUuc2xpY2UgJiYgJ3N1YmFycmF5JyBpbiBGbG9hdDMyQXJyYXkucHJvdG90eXBlXG4gICAgICAgICAgICA/IEpTT04ucGFyc2UoXG4gICAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJWYWx1ZXMuc3ViYXJyYXkoZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICkgLy8g5YCk5rih44GX44GZ44KL44Gf44KB44CBSlNPTi5wYXJzZSwgSlNPTi5zdHJpbmdpZnlcbiAgICAgICAgICAgIDogcGFyYW1ldGVyVmFsdWVzLnNsaWNlKGRlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXgpO1xuXG4gICAgICAgIHVwZGF0ZU91dHB1dFBhcmFtZXRlclZhbHVlKFxuICAgICAgICAgIG91dFBhcmFtZXRlckNhY2hlcyxcbiAgICAgICAgICBwYXJhbWV0ZXJNaW5pbXVtVmFsdWVzW2Rlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXhdLFxuICAgICAgICAgIHBhcmFtZXRlck1heGltdW1WYWx1ZXNbZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleF0sXG4gICAgICAgICAgb3V0cHV0VmFsdWUsXG4gICAgICAgICAgY3VycmVudE91dHB1dHNbaV1cbiAgICAgICAgKTtcblxuICAgICAgICAvLyDlgKTjgpLlj43mmKBcbiAgICAgICAgZm9yIChcbiAgICAgICAgICBsZXQgb2Zmc2V0OiBudW1iZXIgPSBkZXN0aW5hdGlvblBhcmFtZXRlckluZGV4LCBvdXRQYXJhbUluZGV4ID0gMDtcbiAgICAgICAgICBvZmZzZXQgPCB0aGlzLl9wYXJhbWV0ZXJDYWNoZXMubGVuZ3RoO1xuICAgICAgICAgIG9mZnNldCsrLCBvdXRQYXJhbUluZGV4KytcbiAgICAgICAgKSB7XG4gICAgICAgICAgcGFyYW1ldGVyVmFsdWVzW29mZnNldF0gPSB0aGlzLl9wYXJhbWV0ZXJDYWNoZXNbb2Zmc2V0XSA9XG4gICAgICAgICAgICBvdXRQYXJhbWV0ZXJDYWNoZXNbb3V0UGFyYW1JbmRleF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog54mp55CG5ryU566X44Gu6KmV5L6hXG4gICAqXG4gICAqIFBlbmR1bHVtIGludGVycG9sYXRpb24gd2VpZ2h0c1xuICAgKlxuICAgKiDmjK/jgorlrZDjga7oqIjnrpfntZDmnpzjga/kv53lrZjjgZXjgozjgIHjg5Hjg6njg6Hjg7zjgr/jgbjjga7lh7rlipvjga/kv53lrZjjgZXjgozjgZ/liY3lm57jga7ntZDmnpzjgafoo5zplpPjgZXjgozjgb7jgZnjgIJcbiAgICogVGhlIHJlc3VsdCBvZiB0aGUgcGVuZHVsdW0gY2FsY3VsYXRpb24gaXMgc2F2ZWQgYW5kXG4gICAqIHRoZSBvdXRwdXQgdG8gdGhlIHBhcmFtZXRlcnMgaXMgaW50ZXJwb2xhdGVkIHdpdGggdGhlIHNhdmVkIHByZXZpb3VzIHJlc3VsdCBvZiB0aGUgcGVuZHVsdW0gY2FsY3VsYXRpb24uXG4gICAqXG4gICAqIOWbs+OBp+ekuuOBmeOBqFsxXeOBqFsyXeOBp+ijnOmWk+OBleOCjOOBvuOBmeOAglxuICAgKiBUaGUgZmlndXJlIHNob3dzIHRoZSBpbnRlcnBvbGF0aW9uIGJldHdlZW4gWzFdIGFuZCBbMl0uXG4gICAqXG4gICAqIOijnOmWk+OBrumHjeOBv+OBr+acgOaWsOOBruaMr+OCiuWtkOioiOeul+OCv+OCpOODn+ODs+OCsOOBqOasoeWbnuOBruOCv+OCpOODn+ODs+OCsOOBrumWk+OBp+imi+OBn+ePvuWcqOaZgumWk+OBp+axuuWumuOBmeOCi+OAglxuICAgKiBUaGUgd2VpZ2h0IG9mIHRoZSBpbnRlcnBvbGF0aW9uIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBjdXJyZW50IHRpbWUgc2VlbiBiZXR3ZWVuXG4gICAqIHRoZSBsYXRlc3QgcGVuZHVsdW0gY2FsY3VsYXRpb24gdGltaW5nIGFuZCB0aGUgbmV4dCB0aW1pbmcuXG4gICAqXG4gICAqIOWbs+OBp+ekuuOBmeOBqFsyXeOBqFs0XeOBrumWk+OBp+OBv+OBnygzKeOBruS9jee9ruOBrumHjeOBv+OBq+OBquOCi+OAglxuICAgKiBGaWd1cmUgc2hvd3MgdGhlIHdlaWdodCBvZiBwb3NpdGlvbiAoMykgYXMgc2VlbiBiZXR3ZWVuIFsyXSBhbmQgWzRdLlxuICAgKlxuICAgKiDop6Pph4jjgajjgZfjgabmjK/jgorlrZDoqIjnrpfjga7jgr/jgqTjg5/jg7PjgrDjgajph43jgb/oqIjnrpfjga7jgr/jgqTjg5/jg7PjgrDjgYzjgrrjg6zjgovjgIJcbiAgICogQXMgYW4gaW50ZXJwcmV0YXRpb24sIHRoZSBwZW5kdWx1bSBjYWxjdWxhdGlvbiBhbmQgd2VpZ2h0cyBhcmUgbWlzYWxpZ25lZC5cbiAgICpcbiAgICogcGh5c2ljczMuanNvbuOBq0ZQU+aDheWgseOBjOWtmOWcqOOBl+OBquOBhOWgtOWQiOOBr+W4uOOBq+WJjeOBruaMr+OCiuWtkOeKtuaFi+OBp+ioreWumuOBleOCjOOCi+OAglxuICAgKiBJZiB0aGVyZSBpcyBubyBGUFMgaW5mb3JtYXRpb24gaW4gcGh5c2ljczMuanNvbiwgaXQgaXMgYWx3YXlzIHNldCBpbiB0aGUgcHJldmlvdXMgcGVuZHVsdW0gc3RhdGUuXG4gICAqXG4gICAqIOOBk+OBruS7leanmOOBr+ijnOmWk+evhOWbsuOCkumAuOiEseOBl+OBn+OBk+OBqOOBjOWOn+WboOOBrumch+OBiOOBn+OCiOOBhuOBquimi+OBn+ebruOCkuWbnumBv+OCkuebrueahOOBq+OBl+OBpuOBhOOCi+OAglxuICAgKiBUaGUgcHVycG9zZSBvZiB0aGlzIHNwZWNpZmljYXRpb24gaXMgdG8gYXZvaWQgdGhlIHF1aXZlcmluZyBhcHBlYXJhbmNlIGNhdXNlZCBieSBkZXZpYXRpb25zIGZyb20gdGhlIGludGVycG9sYXRpb24gcmFuZ2UuXG4gICAqXG4gICAqIC0tLS0tLS0tLS0tLSB0aW1lIC0tLS0tLS0tLS0tLS0tPlxuICAgKlxuICAgKiAgICAgICAgICAgICAgICAgfCsrKysrfC0tLS0tLXwgPC0gd2VpZ2h0XG4gICAqID09WzFdPT09PSM9PT09PVsyXS0tLSgzKS0tLS0oNClcbiAgICogICAgICAgICAgXiBvdXRwdXQgY29udGVudHNcbiAgICpcbiAgICogMTpfcHJldmlvdXNSaWdPdXRwdXRzXG4gICAqIDI6X2N1cnJlbnRSaWdPdXRwdXRzXG4gICAqIDM6X2N1cnJlbnRSZW1haW5UaW1lIChub3cgcmVuZGVyaW5nKVxuICAgKiA0Om5leHQgcGFydGljbGVzIHRpbWluZ1xuICAgKiBAcGFyYW0gbW9kZWwg54mp55CG5ryU566X44Gu57WQ5p6c44KS6YGp55So44GZ44KL44Oi44OH44OrXG4gICAqIEBwYXJhbSBkZWx0YVRpbWVTZWNvbmRzIOODh+ODq+OCv+aZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgZXZhbHVhdGUobW9kZWw6IEN1YmlzbU1vZGVsLCBkZWx0YVRpbWVTZWNvbmRzOiBudW1iZXIpOiB2b2lkIHtcbiAgICBsZXQgdG90YWxBbmdsZTogeyBhbmdsZTogbnVtYmVyIH07XG4gICAgbGV0IHdlaWdodDogbnVtYmVyO1xuICAgIGxldCByYWRBbmdsZTogbnVtYmVyO1xuICAgIGxldCBvdXRwdXRWYWx1ZTogbnVtYmVyO1xuICAgIGNvbnN0IHRvdGFsVHJhbnNsYXRpb246IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigpO1xuICAgIGxldCBjdXJyZW50U2V0dGluZzogQ3ViaXNtUGh5c2ljc1N1YlJpZztcbiAgICBsZXQgY3VycmVudElucHV0czogQ3ViaXNtUGh5c2ljc0lucHV0W107XG4gICAgbGV0IGN1cnJlbnRPdXRwdXRzOiBDdWJpc21QaHlzaWNzT3V0cHV0W107XG4gICAgbGV0IGN1cnJlbnRQYXJ0aWNsZXM6IEN1YmlzbVBoeXNpY3NQYXJ0aWNsZVtdO1xuXG4gICAgaWYgKDAuMCA+PSBkZWx0YVRpbWVTZWNvbmRzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHBhcmFtZXRlclZhbHVlczogRmxvYXQzMkFycmF5O1xuICAgIGxldCBwYXJhbWV0ZXJNYXhpbXVtVmFsdWVzOiBGbG9hdDMyQXJyYXk7XG4gICAgbGV0IHBhcmFtZXRlck1pbmltdW1WYWx1ZXM6IEZsb2F0MzJBcnJheTtcbiAgICBsZXQgcGFyYW1ldGVyRGVmYXVsdFZhbHVlczogRmxvYXQzMkFycmF5O1xuXG4gICAgbGV0IHBoeXNpY3NEZWx0YVRpbWU6IG51bWJlcjtcbiAgICB0aGlzLl9jdXJyZW50UmVtYWluVGltZSArPSBkZWx0YVRpbWVTZWNvbmRzO1xuICAgIGlmICh0aGlzLl9jdXJyZW50UmVtYWluVGltZSA+IE1heERlbHRhVGltZSkge1xuICAgICAgdGhpcy5fY3VycmVudFJlbWFpblRpbWUgPSAwLjA7XG4gICAgfVxuXG4gICAgcGFyYW1ldGVyVmFsdWVzID0gbW9kZWwuZ2V0TW9kZWwoKS5wYXJhbWV0ZXJzLnZhbHVlcztcbiAgICBwYXJhbWV0ZXJNYXhpbXVtVmFsdWVzID0gbW9kZWwuZ2V0TW9kZWwoKS5wYXJhbWV0ZXJzLm1heGltdW1WYWx1ZXM7XG4gICAgcGFyYW1ldGVyTWluaW11bVZhbHVlcyA9IG1vZGVsLmdldE1vZGVsKCkucGFyYW1ldGVycy5taW5pbXVtVmFsdWVzO1xuICAgIHBhcmFtZXRlckRlZmF1bHRWYWx1ZXMgPSBtb2RlbC5nZXRNb2RlbCgpLnBhcmFtZXRlcnMuZGVmYXVsdFZhbHVlcztcblxuICAgIGlmICgodGhpcy5fcGFyYW1ldGVyQ2FjaGVzPy5sZW5ndGggPz8gMCkgPCBtb2RlbC5nZXRQYXJhbWV0ZXJDb3VudCgpKSB7XG4gICAgICB0aGlzLl9wYXJhbWV0ZXJDYWNoZXMgPSBuZXcgRmxvYXQzMkFycmF5KG1vZGVsLmdldFBhcmFtZXRlckNvdW50KCkpO1xuICAgIH1cblxuICAgIGlmICgodGhpcy5fcGFyYW1ldGVySW5wdXRDYWNoZXM/Lmxlbmd0aCA/PyAwKSA8IG1vZGVsLmdldFBhcmFtZXRlckNvdW50KCkpIHtcbiAgICAgIHRoaXMuX3BhcmFtZXRlcklucHV0Q2FjaGVzID0gbmV3IEZsb2F0MzJBcnJheShtb2RlbC5nZXRQYXJhbWV0ZXJDb3VudCgpKTtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbW9kZWwuZ2V0UGFyYW1ldGVyQ291bnQoKTsgKytqKSB7XG4gICAgICAgIHRoaXMuX3BhcmFtZXRlcklucHV0Q2FjaGVzW2pdID0gcGFyYW1ldGVyVmFsdWVzW2pdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9waHlzaWNzUmlnLmZwcyA+IDAuMCkge1xuICAgICAgcGh5c2ljc0RlbHRhVGltZSA9IDEuMCAvIHRoaXMuX3BoeXNpY3NSaWcuZnBzO1xuICAgIH0gZWxzZSB7XG4gICAgICBwaHlzaWNzRGVsdGFUaW1lID0gZGVsdGFUaW1lU2Vjb25kcztcbiAgICB9XG5cbiAgICB3aGlsZSAodGhpcy5fY3VycmVudFJlbWFpblRpbWUgPj0gcGh5c2ljc0RlbHRhVGltZSkge1xuICAgICAgLy8gY29weVJpZ091dHB1dHMgX2N1cnJlbnRSaWdPdXRwdXRzIHRvIF9wcmV2aW91c1JpZ091dHB1dHNcbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBzZXR0aW5nSW5kZXggPSAwO1xuICAgICAgICBzZXR0aW5nSW5kZXggPCB0aGlzLl9waHlzaWNzUmlnLnN1YlJpZ0NvdW50O1xuICAgICAgICArK3NldHRpbmdJbmRleFxuICAgICAgKSB7XG4gICAgICAgIGN1cnJlbnRTZXR0aW5nID0gdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChzZXR0aW5nSW5kZXgpO1xuICAgICAgICBjdXJyZW50T3V0cHV0cyA9IHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5nZXQoXG4gICAgICAgICAgY3VycmVudFNldHRpbmcuYmFzZU91dHB1dEluZGV4XG4gICAgICAgICk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3VycmVudFNldHRpbmcub3V0cHV0Q291bnQ7ICsraSkge1xuICAgICAgICAgIHRoaXMuX3ByZXZpb3VzUmlnT3V0cHV0cy5hdChzZXR0aW5nSW5kZXgpLm91dHB1dHNbaV0gPVxuICAgICAgICAgICAgdGhpcy5fY3VycmVudFJpZ091dHB1dHMuYXQoc2V0dGluZ0luZGV4KS5vdXRwdXRzW2ldO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIOWFpeWKm+OCreODo+ODg+OCt+ODpeOBqOODkeODqeODoeODvOOCv+OBp+e3muW9ouijnOmWk+OBl+OBplVwZGF0ZVBhcnRpY2xlc+OBmeOCi+OCv+OCpOODn+ODs+OCsOOBp+OBruWFpeWKm+OCkuioiOeul+OBmeOCi+OAglxuICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBpbnB1dCBhdCB0aGUgdGltaW5nIHRvIFVwZGF0ZVBhcnRpY2xlcyBieSBsaW5lYXIgaW50ZXJwb2xhdGlvbiB3aXRoIHRoZSBfcGFyYW1ldGVySW5wdXRDYWNoZSBhbmQgcGFyYW1ldGVyVmFsdWUuXG4gICAgICAvLyBfcGFyYW1ldGVyQ2FjaGXjga/jgrDjg6vjg7zjg5fplpPjgafjga7lgKTjga7kvJ3mkKzjga7lvbnlibLjgYzjgYLjgovjga7jgadfcGFyYW1ldGVySW5wdXRDYWNoZeOBqOOBruWIhumbouOBjOW/heimgeOAglxuICAgICAgLy8gX3BhcmFtZXRlckNhY2hlIG5lZWRzIHRvIGJlIHNlcGFyYXRlZCBmcm9tIF9wYXJhbWV0ZXJJbnB1dENhY2hlIGJlY2F1c2Ugb2YgaXRzIHJvbGUgaW4gcHJvcGFnYXRpbmcgdmFsdWVzIGJldHdlZW4gZ3JvdXBzLlxuICAgICAgY29uc3QgaW5wdXRXZWlnaHQgPSBwaHlzaWNzRGVsdGFUaW1lIC8gdGhpcy5fY3VycmVudFJlbWFpblRpbWU7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG1vZGVsLmdldFBhcmFtZXRlckNvdW50KCk7ICsraikge1xuICAgICAgICB0aGlzLl9wYXJhbWV0ZXJDYWNoZXNbal0gPVxuICAgICAgICAgIHRoaXMuX3BhcmFtZXRlcklucHV0Q2FjaGVzW2pdICogKDEuMCAtIGlucHV0V2VpZ2h0KSArXG4gICAgICAgICAgcGFyYW1ldGVyVmFsdWVzW2pdICogaW5wdXRXZWlnaHQ7XG4gICAgICAgIHRoaXMuX3BhcmFtZXRlcklucHV0Q2FjaGVzW2pdID0gdGhpcy5fcGFyYW1ldGVyQ2FjaGVzW2pdO1xuICAgICAgfVxuXG4gICAgICBmb3IgKFxuICAgICAgICBsZXQgc2V0dGluZ0luZGV4ID0gMDtcbiAgICAgICAgc2V0dGluZ0luZGV4IDwgdGhpcy5fcGh5c2ljc1JpZy5zdWJSaWdDb3VudDtcbiAgICAgICAgKytzZXR0aW5nSW5kZXhcbiAgICAgICkge1xuICAgICAgICB0b3RhbEFuZ2xlID0geyBhbmdsZTogMC4wIH07XG4gICAgICAgIHRvdGFsVHJhbnNsYXRpb24ueCA9IDAuMDtcbiAgICAgICAgdG90YWxUcmFuc2xhdGlvbi55ID0gMC4wO1xuICAgICAgICBjdXJyZW50U2V0dGluZyA9IHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoc2V0dGluZ0luZGV4KTtcbiAgICAgICAgY3VycmVudElucHV0cyA9IHRoaXMuX3BoeXNpY3NSaWcuaW5wdXRzLmdldChcbiAgICAgICAgICBjdXJyZW50U2V0dGluZy5iYXNlSW5wdXRJbmRleFxuICAgICAgICApO1xuICAgICAgICBjdXJyZW50T3V0cHV0cyA9IHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5nZXQoXG4gICAgICAgICAgY3VycmVudFNldHRpbmcuYmFzZU91dHB1dEluZGV4XG4gICAgICAgICk7XG4gICAgICAgIGN1cnJlbnRQYXJ0aWNsZXMgPSB0aGlzLl9waHlzaWNzUmlnLnBhcnRpY2xlcy5nZXQoXG4gICAgICAgICAgY3VycmVudFNldHRpbmcuYmFzZVBhcnRpY2xlSW5kZXhcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBMb2FkIGlucHV0IHBhcmFtZXRlcnNcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyZW50U2V0dGluZy5pbnB1dENvdW50OyArK2kpIHtcbiAgICAgICAgICB3ZWlnaHQgPSBjdXJyZW50SW5wdXRzW2ldLndlaWdodCAvIE1heGltdW1XZWlnaHQ7XG5cbiAgICAgICAgICBpZiAoY3VycmVudElucHV0c1tpXS5zb3VyY2VQYXJhbWV0ZXJJbmRleCA9PSAtMSkge1xuICAgICAgICAgICAgY3VycmVudElucHV0c1tpXS5zb3VyY2VQYXJhbWV0ZXJJbmRleCA9IG1vZGVsLmdldFBhcmFtZXRlckluZGV4KFxuICAgICAgICAgICAgICBjdXJyZW50SW5wdXRzW2ldLnNvdXJjZS5pZFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjdXJyZW50SW5wdXRzW2ldLmdldE5vcm1hbGl6ZWRQYXJhbWV0ZXJWYWx1ZShcbiAgICAgICAgICAgIHRvdGFsVHJhbnNsYXRpb24sXG4gICAgICAgICAgICB0b3RhbEFuZ2xlLFxuICAgICAgICAgICAgdGhpcy5fcGFyYW1ldGVyQ2FjaGVzW2N1cnJlbnRJbnB1dHNbaV0uc291cmNlUGFyYW1ldGVySW5kZXhdLFxuICAgICAgICAgICAgcGFyYW1ldGVyTWluaW11bVZhbHVlc1tjdXJyZW50SW5wdXRzW2ldLnNvdXJjZVBhcmFtZXRlckluZGV4XSxcbiAgICAgICAgICAgIHBhcmFtZXRlck1heGltdW1WYWx1ZXNbY3VycmVudElucHV0c1tpXS5zb3VyY2VQYXJhbWV0ZXJJbmRleF0sXG4gICAgICAgICAgICBwYXJhbWV0ZXJEZWZhdWx0VmFsdWVzW2N1cnJlbnRJbnB1dHNbaV0uc291cmNlUGFyYW1ldGVySW5kZXhdLFxuICAgICAgICAgICAgY3VycmVudFNldHRpbmcubm9ybWFsaXphdGlvblBvc2l0aW9uLFxuICAgICAgICAgICAgY3VycmVudFNldHRpbmcubm9ybWFsaXphdGlvbkFuZ2xlLFxuICAgICAgICAgICAgY3VycmVudElucHV0c1tpXS5yZWZsZWN0LFxuICAgICAgICAgICAgd2VpZ2h0XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJhZEFuZ2xlID0gQ3ViaXNtTWF0aC5kZWdyZWVzVG9SYWRpYW4oLXRvdGFsQW5nbGUuYW5nbGUpO1xuXG4gICAgICAgIHRvdGFsVHJhbnNsYXRpb24ueCA9XG4gICAgICAgICAgdG90YWxUcmFuc2xhdGlvbi54ICogQ3ViaXNtTWF0aC5jb3MocmFkQW5nbGUpIC1cbiAgICAgICAgICB0b3RhbFRyYW5zbGF0aW9uLnkgKiBDdWJpc21NYXRoLnNpbihyYWRBbmdsZSk7XG4gICAgICAgIHRvdGFsVHJhbnNsYXRpb24ueSA9XG4gICAgICAgICAgdG90YWxUcmFuc2xhdGlvbi54ICogQ3ViaXNtTWF0aC5zaW4ocmFkQW5nbGUpICtcbiAgICAgICAgICB0b3RhbFRyYW5zbGF0aW9uLnkgKiBDdWJpc21NYXRoLmNvcyhyYWRBbmdsZSk7XG5cbiAgICAgICAgLy8gQ2FsY3VsYXRlIHBhcnRpY2xlcyBwb3NpdGlvbi5cbiAgICAgICAgdXBkYXRlUGFydGljbGVzKFxuICAgICAgICAgIGN1cnJlbnRQYXJ0aWNsZXMsXG4gICAgICAgICAgY3VycmVudFNldHRpbmcucGFydGljbGVDb3VudCxcbiAgICAgICAgICB0b3RhbFRyYW5zbGF0aW9uLFxuICAgICAgICAgIHRvdGFsQW5nbGUuYW5nbGUsXG4gICAgICAgICAgdGhpcy5fb3B0aW9ucy53aW5kLFxuICAgICAgICAgIE1vdmVtZW50VGhyZXNob2xkICogY3VycmVudFNldHRpbmcubm9ybWFsaXphdGlvblBvc2l0aW9uLm1heGltdW0sXG4gICAgICAgICAgcGh5c2ljc0RlbHRhVGltZSxcbiAgICAgICAgICBBaXJSZXNpc3RhbmNlXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gVXBkYXRlIG91dHB1dCBwYXJhbWV0ZXJzLlxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnJlbnRTZXR0aW5nLm91dHB1dENvdW50OyArK2kpIHtcbiAgICAgICAgICBjb25zdCBwYXJ0aWNsZUluZGV4ID0gY3VycmVudE91dHB1dHNbaV0udmVydGV4SW5kZXg7XG5cbiAgICAgICAgICBpZiAoY3VycmVudE91dHB1dHNbaV0uZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleCA9PSAtMSkge1xuICAgICAgICAgICAgY3VycmVudE91dHB1dHNbaV0uZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleCA9XG4gICAgICAgICAgICAgIG1vZGVsLmdldFBhcmFtZXRlckluZGV4KGN1cnJlbnRPdXRwdXRzW2ldLmRlc3RpbmF0aW9uLmlkKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBwYXJ0aWNsZUluZGV4IDwgMSB8fFxuICAgICAgICAgICAgcGFydGljbGVJbmRleCA+PSBjdXJyZW50U2V0dGluZy5wYXJ0aWNsZUNvdW50XG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCB0cmFuc2xhdGlvbjogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKCk7XG4gICAgICAgICAgdHJhbnNsYXRpb24ueCA9XG4gICAgICAgICAgICBjdXJyZW50UGFydGljbGVzW3BhcnRpY2xlSW5kZXhdLnBvc2l0aW9uLnggLVxuICAgICAgICAgICAgY3VycmVudFBhcnRpY2xlc1twYXJ0aWNsZUluZGV4IC0gMV0ucG9zaXRpb24ueDtcbiAgICAgICAgICB0cmFuc2xhdGlvbi55ID1cbiAgICAgICAgICAgIGN1cnJlbnRQYXJ0aWNsZXNbcGFydGljbGVJbmRleF0ucG9zaXRpb24ueSAtXG4gICAgICAgICAgICBjdXJyZW50UGFydGljbGVzW3BhcnRpY2xlSW5kZXggLSAxXS5wb3NpdGlvbi55O1xuXG4gICAgICAgICAgb3V0cHV0VmFsdWUgPSBjdXJyZW50T3V0cHV0c1tpXS5nZXRWYWx1ZShcbiAgICAgICAgICAgIHRyYW5zbGF0aW9uLFxuICAgICAgICAgICAgY3VycmVudFBhcnRpY2xlcyxcbiAgICAgICAgICAgIHBhcnRpY2xlSW5kZXgsXG4gICAgICAgICAgICBjdXJyZW50T3V0cHV0c1tpXS5yZWZsZWN0LFxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5ncmF2aXR5XG4gICAgICAgICAgKTtcblxuICAgICAgICAgIHRoaXMuX2N1cnJlbnRSaWdPdXRwdXRzLmF0KHNldHRpbmdJbmRleCkub3V0cHV0c1tpXSA9IG91dHB1dFZhbHVlO1xuXG4gICAgICAgICAgY29uc3QgZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleDogbnVtYmVyID1cbiAgICAgICAgICAgIGN1cnJlbnRPdXRwdXRzW2ldLmRlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXg7XG4gICAgICAgICAgY29uc3Qgb3V0UGFyYW1ldGVyQ2FjaGVzOiBGbG9hdDMyQXJyYXkgPVxuICAgICAgICAgICAgIUZsb2F0MzJBcnJheS5wcm90b3R5cGUuc2xpY2UgJiZcbiAgICAgICAgICAgICdzdWJhcnJheScgaW4gRmxvYXQzMkFycmF5LnByb3RvdHlwZVxuICAgICAgICAgICAgICA/IEpTT04ucGFyc2UoXG4gICAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGFyYW1ldGVyQ2FjaGVzLnN1YmFycmF5KGRlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXgpXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKSAvLyDlgKTmuKHjgZfjgZnjgovjgZ/jgoHjgIFKU09OLnBhcnNlLCBKU09OLnN0cmluZ2lmeVxuICAgICAgICAgICAgICA6IHRoaXMuX3BhcmFtZXRlckNhY2hlcy5zbGljZShkZXN0aW5hdGlvblBhcmFtZXRlckluZGV4KTtcblxuICAgICAgICAgIHVwZGF0ZU91dHB1dFBhcmFtZXRlclZhbHVlKFxuICAgICAgICAgICAgb3V0UGFyYW1ldGVyQ2FjaGVzLFxuICAgICAgICAgICAgcGFyYW1ldGVyTWluaW11bVZhbHVlc1tkZXN0aW5hdGlvblBhcmFtZXRlckluZGV4XSxcbiAgICAgICAgICAgIHBhcmFtZXRlck1heGltdW1WYWx1ZXNbZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleF0sXG4gICAgICAgICAgICBvdXRwdXRWYWx1ZSxcbiAgICAgICAgICAgIGN1cnJlbnRPdXRwdXRzW2ldXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIC8vIOWApOOCkuWPjeaYoFxuICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICBsZXQgb2Zmc2V0OiBudW1iZXIgPSBkZXN0aW5hdGlvblBhcmFtZXRlckluZGV4LCBvdXRQYXJhbUluZGV4ID0gMDtcbiAgICAgICAgICAgIG9mZnNldCA8IHRoaXMuX3BhcmFtZXRlckNhY2hlcy5sZW5ndGg7XG4gICAgICAgICAgICBvZmZzZXQrKywgb3V0UGFyYW1JbmRleCsrXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLl9wYXJhbWV0ZXJDYWNoZXNbb2Zmc2V0XSA9IG91dFBhcmFtZXRlckNhY2hlc1tvdXRQYXJhbUluZGV4XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuX2N1cnJlbnRSZW1haW5UaW1lIC09IHBoeXNpY3NEZWx0YVRpbWU7XG4gICAgfVxuXG4gICAgY29uc3QgYWxwaGE6IG51bWJlciA9IHRoaXMuX2N1cnJlbnRSZW1haW5UaW1lIC8gcGh5c2ljc0RlbHRhVGltZTtcbiAgICB0aGlzLmludGVycG9sYXRlKG1vZGVsLCBhbHBoYSk7XG4gIH1cblxuICAvKipcbiAgICog54mp55CG5ryU566X57WQ5p6c44Gu6YGp55SoXG4gICAqIOaMr+OCiuWtkOa8lOeul+OBruacgOaWsOOBrue1kOaenOOBqOS4gOOBpOWJjeOBrue1kOaenOOBi+OCieaMh+WumuOBl+OBn+mHjeOBv+OBp+mBqeeUqOOBmeOCi+OAglxuICAgKiBAcGFyYW0gbW9kZWwg54mp55CG5ryU566X44Gu57WQ5p6c44KS6YGp55So44GZ44KL44Oi44OH44OrXG4gICAqIEBwYXJhbSB3ZWlnaHQg5pyA5paw57WQ5p6c44Gu6YeN44G/XG4gICAqL1xuICBwdWJsaWMgaW50ZXJwb2xhdGUobW9kZWw6IEN1YmlzbU1vZGVsLCB3ZWlnaHQ6IG51bWJlcik6IHZvaWQge1xuICAgIGxldCBjdXJyZW50T3V0cHV0czogQ3ViaXNtUGh5c2ljc091dHB1dFtdO1xuICAgIGxldCBjdXJyZW50U2V0dGluZzogQ3ViaXNtUGh5c2ljc1N1YlJpZztcbiAgICBsZXQgcGFyYW1ldGVyVmFsdWVzOiBGbG9hdDMyQXJyYXk7XG4gICAgbGV0IHBhcmFtZXRlck1heGltdW1WYWx1ZXM6IEZsb2F0MzJBcnJheTtcbiAgICBsZXQgcGFyYW1ldGVyTWluaW11bVZhbHVlczogRmxvYXQzMkFycmF5O1xuXG4gICAgcGFyYW1ldGVyVmFsdWVzID0gbW9kZWwuZ2V0TW9kZWwoKS5wYXJhbWV0ZXJzLnZhbHVlcztcbiAgICBwYXJhbWV0ZXJNYXhpbXVtVmFsdWVzID0gbW9kZWwuZ2V0TW9kZWwoKS5wYXJhbWV0ZXJzLm1heGltdW1WYWx1ZXM7XG4gICAgcGFyYW1ldGVyTWluaW11bVZhbHVlcyA9IG1vZGVsLmdldE1vZGVsKCkucGFyYW1ldGVycy5taW5pbXVtVmFsdWVzO1xuXG4gICAgZm9yIChcbiAgICAgIGxldCBzZXR0aW5nSW5kZXggPSAwO1xuICAgICAgc2V0dGluZ0luZGV4IDwgdGhpcy5fcGh5c2ljc1JpZy5zdWJSaWdDb3VudDtcbiAgICAgICsrc2V0dGluZ0luZGV4XG4gICAgKSB7XG4gICAgICBjdXJyZW50U2V0dGluZyA9IHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoc2V0dGluZ0luZGV4KTtcbiAgICAgIGN1cnJlbnRPdXRwdXRzID0gdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmdldChcbiAgICAgICAgY3VycmVudFNldHRpbmcuYmFzZU91dHB1dEluZGV4XG4gICAgICApO1xuXG4gICAgICAvLyBMb2FkIGlucHV0IHBhcmFtZXRlcnMuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnJlbnRTZXR0aW5nLm91dHB1dENvdW50OyArK2kpIHtcbiAgICAgICAgaWYgKGN1cnJlbnRPdXRwdXRzW2ldLmRlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXggPT0gLTEpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGRlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXg6IG51bWJlciA9XG4gICAgICAgICAgY3VycmVudE91dHB1dHNbaV0uZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleDtcbiAgICAgICAgY29uc3Qgb3V0UGFyYW1ldGVyVmFsdWVzOiBGbG9hdDMyQXJyYXkgPVxuICAgICAgICAgICFGbG9hdDMyQXJyYXkucHJvdG90eXBlLnNsaWNlICYmICdzdWJhcnJheScgaW4gRmxvYXQzMkFycmF5LnByb3RvdHlwZVxuICAgICAgICAgICAgPyBKU09OLnBhcnNlKFxuICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KFxuICAgICAgICAgICAgICAgICAgcGFyYW1ldGVyVmFsdWVzLnN1YmFycmF5KGRlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXgpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApIC8vIOWApOa4oeOBl+OBmeOCi+OBn+OCgeOAgUpTT04ucGFyc2UsIEpTT04uc3RyaW5naWZ5XG4gICAgICAgICAgICA6IHBhcmFtZXRlclZhbHVlcy5zbGljZShkZXN0aW5hdGlvblBhcmFtZXRlckluZGV4KTtcblxuICAgICAgICB1cGRhdGVPdXRwdXRQYXJhbWV0ZXJWYWx1ZShcbiAgICAgICAgICBvdXRQYXJhbWV0ZXJWYWx1ZXMsXG4gICAgICAgICAgcGFyYW1ldGVyTWluaW11bVZhbHVlc1tkZXN0aW5hdGlvblBhcmFtZXRlckluZGV4XSxcbiAgICAgICAgICBwYXJhbWV0ZXJNYXhpbXVtVmFsdWVzW2Rlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXhdLFxuICAgICAgICAgIHRoaXMuX3ByZXZpb3VzUmlnT3V0cHV0cy5hdChzZXR0aW5nSW5kZXgpLm91dHB1dHNbaV0gKiAoMSAtIHdlaWdodCkgK1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudFJpZ091dHB1dHMuYXQoc2V0dGluZ0luZGV4KS5vdXRwdXRzW2ldICogd2VpZ2h0LFxuICAgICAgICAgIGN1cnJlbnRPdXRwdXRzW2ldXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8g5YCk44KS5Y+N5pigXG4gICAgICAgIGZvciAoXG4gICAgICAgICAgbGV0IG9mZnNldDogbnVtYmVyID0gZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleCwgb3V0UGFyYW1JbmRleCA9IDA7XG4gICAgICAgICAgb2Zmc2V0IDwgcGFyYW1ldGVyVmFsdWVzLmxlbmd0aDtcbiAgICAgICAgICBvZmZzZXQrKywgb3V0UGFyYW1JbmRleCsrXG4gICAgICAgICkge1xuICAgICAgICAgIHBhcmFtZXRlclZhbHVlc1tvZmZzZXRdID0gb3V0UGFyYW1ldGVyVmFsdWVzW291dFBhcmFtSW5kZXhdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOOCquODl+OCt+ODp+ODs+OBruioreWumlxuICAgKiBAcGFyYW0gb3B0aW9ucyDjgqrjg5fjgrfjg6fjg7NcbiAgICovXG4gIHB1YmxpYyBzZXRPcHRpb25zKG9wdGlvbnM6IE9wdGlvbnMpOiB2b2lkIHtcbiAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqrjg5fjgrfjg6fjg7Pjga7lj5blvpdcbiAgICogQHJldHVybiDjgqrjg5fjgrfjg6fjg7NcbiAgICovXG4gIHB1YmxpYyBnZXRPcHRpb24oKTogT3B0aW9ucyB7XG4gICAgcmV0dXJuIHRoaXMuX29wdGlvbnM7XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fcGh5c2ljc1JpZyA9IG51bGw7XG5cbiAgICAvLyBzZXQgZGVmYXVsdCBvcHRpb25zXG4gICAgdGhpcy5fb3B0aW9ucyA9IG5ldyBPcHRpb25zKCk7XG4gICAgdGhpcy5fb3B0aW9ucy5ncmF2aXR5LnkgPSAtMS4wO1xuICAgIHRoaXMuX29wdGlvbnMuZ3Jhdml0eS54ID0gMC4wO1xuICAgIHRoaXMuX29wdGlvbnMud2luZC54ID0gMC4wO1xuICAgIHRoaXMuX29wdGlvbnMud2luZC55ID0gMC4wO1xuICAgIHRoaXMuX2N1cnJlbnRSaWdPdXRwdXRzID0gbmV3IGNzbVZlY3RvcjxQaHlzaWNzT3V0cHV0PigpO1xuICAgIHRoaXMuX3ByZXZpb3VzUmlnT3V0cHV0cyA9IG5ldyBjc21WZWN0b3I8UGh5c2ljc091dHB1dD4oKTtcbiAgICB0aGlzLl9jdXJyZW50UmVtYWluVGltZSA9IDAuMDtcbiAgICB0aGlzLl9wYXJhbWV0ZXJDYWNoZXMgPSBudWxsO1xuICAgIHRoaXMuX3BhcmFtZXRlcklucHV0Q2FjaGVzID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIHRoaXMuX3BoeXNpY3NSaWcgPSB2b2lkIDA7XG4gICAgdGhpcy5fcGh5c2ljc1JpZyA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICog5Yid5pyf5YyW44GZ44KLXG4gICAqL1xuICBwdWJsaWMgaW5pdGlhbGl6ZSgpOiB2b2lkIHtcbiAgICBsZXQgc3RyYW5kOiBDdWJpc21QaHlzaWNzUGFydGljbGVbXTtcbiAgICBsZXQgY3VycmVudFNldHRpbmc6IEN1YmlzbVBoeXNpY3NTdWJSaWc7XG4gICAgbGV0IHJhZGl1czogQ3ViaXNtVmVjdG9yMjtcblxuICAgIGZvciAoXG4gICAgICBsZXQgc2V0dGluZ0luZGV4ID0gMDtcbiAgICAgIHNldHRpbmdJbmRleCA8IHRoaXMuX3BoeXNpY3NSaWcuc3ViUmlnQ291bnQ7XG4gICAgICArK3NldHRpbmdJbmRleFxuICAgICkge1xuICAgICAgY3VycmVudFNldHRpbmcgPSB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KHNldHRpbmdJbmRleCk7XG4gICAgICBzdHJhbmQgPSB0aGlzLl9waHlzaWNzUmlnLnBhcnRpY2xlcy5nZXQoY3VycmVudFNldHRpbmcuYmFzZVBhcnRpY2xlSW5kZXgpO1xuXG4gICAgICAvLyBJbml0aWFsaXplIHRoZSB0b3Agb2YgcGFydGljbGUuXG4gICAgICBzdHJhbmRbMF0uaW5pdGlhbFBvc2l0aW9uID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xuICAgICAgc3RyYW5kWzBdLmxhc3RQb3NpdGlvbiA9IG5ldyBDdWJpc21WZWN0b3IyKFxuICAgICAgICBzdHJhbmRbMF0uaW5pdGlhbFBvc2l0aW9uLngsXG4gICAgICAgIHN0cmFuZFswXS5pbml0aWFsUG9zaXRpb24ueVxuICAgICAgKTtcbiAgICAgIHN0cmFuZFswXS5sYXN0R3Jhdml0eSA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgLTEuMCk7XG4gICAgICBzdHJhbmRbMF0ubGFzdEdyYXZpdHkueSAqPSAtMS4wO1xuICAgICAgc3RyYW5kWzBdLnZlbG9jaXR5ID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xuICAgICAgc3RyYW5kWzBdLmZvcmNlID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xuXG4gICAgICAvLyBJbml0aWFsaXplIHBhcnRpY2xlcy5cbiAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgY3VycmVudFNldHRpbmcucGFydGljbGVDb3VudDsgKytpKSB7XG4gICAgICAgIHJhZGl1cyA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcbiAgICAgICAgcmFkaXVzLnkgPSBzdHJhbmRbaV0ucmFkaXVzO1xuICAgICAgICBzdHJhbmRbaV0uaW5pdGlhbFBvc2l0aW9uID0gbmV3IEN1YmlzbVZlY3RvcjIoXG4gICAgICAgICAgc3RyYW5kW2kgLSAxXS5pbml0aWFsUG9zaXRpb24ueCArIHJhZGl1cy54LFxuICAgICAgICAgIHN0cmFuZFtpIC0gMV0uaW5pdGlhbFBvc2l0aW9uLnkgKyByYWRpdXMueVxuICAgICAgICApO1xuICAgICAgICBzdHJhbmRbaV0ucG9zaXRpb24gPSBuZXcgQ3ViaXNtVmVjdG9yMihcbiAgICAgICAgICBzdHJhbmRbaV0uaW5pdGlhbFBvc2l0aW9uLngsXG4gICAgICAgICAgc3RyYW5kW2ldLmluaXRpYWxQb3NpdGlvbi55XG4gICAgICAgICk7XG4gICAgICAgIHN0cmFuZFtpXS5sYXN0UG9zaXRpb24gPSBuZXcgQ3ViaXNtVmVjdG9yMihcbiAgICAgICAgICBzdHJhbmRbaV0uaW5pdGlhbFBvc2l0aW9uLngsXG4gICAgICAgICAgc3RyYW5kW2ldLmluaXRpYWxQb3NpdGlvbi55XG4gICAgICAgICk7XG4gICAgICAgIHN0cmFuZFtpXS5sYXN0R3Jhdml0eSA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgLTEuMCk7XG4gICAgICAgIHN0cmFuZFtpXS5sYXN0R3Jhdml0eS55ICo9IC0xLjA7XG4gICAgICAgIHN0cmFuZFtpXS52ZWxvY2l0eSA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcbiAgICAgICAgc3RyYW5kW2ldLmZvcmNlID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9waHlzaWNzUmlnOiBDdWJpc21QaHlzaWNzUmlnOyAvLyDniannkIbmvJTnrpfjga7jg4fjg7zjgr9cbiAgX29wdGlvbnM6IE9wdGlvbnM7IC8vIOOCquODl+OCt+ODp+ODs1xuXG4gIF9jdXJyZW50UmlnT3V0cHV0czogY3NtVmVjdG9yPFBoeXNpY3NPdXRwdXQ+OyAvLy88IOacgOaWsOOBruaMr+OCiuWtkOioiOeul+OBrue1kOaenFxuICBfcHJldmlvdXNSaWdPdXRwdXRzOiBjc21WZWN0b3I8UGh5c2ljc091dHB1dD47IC8vLzwg5LiA44Gk5YmN44Gu5oyv44KK5a2Q6KiI566X44Gu57WQ5p6cXG5cbiAgX2N1cnJlbnRSZW1haW5UaW1lOiBudW1iZXI7IC8vLzwg54mp55CG5ryU566X44GM5Yem55CG44GX44Gm44GE44Gq44GE5pmC6ZaTXG5cbiAgX3BhcmFtZXRlckNhY2hlczogRmxvYXQzMkFycmF5OyAvLy88IEV2YWx1YXRl44Gn5Yip55So44GZ44KL44OR44Op44Oh44O844K/44Gu44Kt44Oj44OD44K344OlXG4gIF9wYXJhbWV0ZXJJbnB1dENhY2hlczogRmxvYXQzMkFycmF5OyAvLy88IFVwZGF0ZVBhcnRpY2xlc+OBjOWLleOBj+OBqOOBjeOBruWFpeWKm+OCkuOCreODo+ODg+OCt+ODpVxufVxuXG4vKipcbiAqIOeJqeeQhua8lOeul+OBruOCquODl+OCt+ODp+ODs1xuICovXG5leHBvcnQgY2xhc3MgT3B0aW9ucyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuZ3Jhdml0eSA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xuICAgIHRoaXMud2luZCA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xuICB9XG5cbiAgZ3Jhdml0eTogQ3ViaXNtVmVjdG9yMjsgLy8g6YeN5Yqb5pa55ZCRXG4gIHdpbmQ6IEN1YmlzbVZlY3RvcjI7IC8vIOmiqOOBruaWueWQkVxufVxuXG4vKipcbiAqIOODkeODqeODoeODvOOCv+OBq+mBqeeUqOOBmeOCi+WJjeOBrueJqeeQhua8lOeul+OBruWHuuWKm+e1kOaenFxuICovXG5leHBvcnQgY2xhc3MgUGh5c2ljc091dHB1dCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMub3V0cHV0cyA9IG5ldyBjc21WZWN0b3I8bnVtYmVyPigwKTtcbiAgfVxuXG4gIG91dHB1dHM6IGNzbVZlY3RvcjxudW1iZXI+OyAvLyDniannkIbmvJTnrpflh7rlipvntZDmnpxcbn1cblxuLyoqXG4gKiBHZXRzIHNpZ24uXG4gKlxuICogQHBhcmFtIHZhbHVlIEV2YWx1YXRpb24gdGFyZ2V0IHZhbHVlLlxuICpcbiAqIEByZXR1cm4gU2lnbiBvZiB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gc2lnbih2YWx1ZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgbGV0IHJldCA9IDA7XG5cbiAgaWYgKHZhbHVlID4gMC4wKSB7XG4gICAgcmV0ID0gMTtcbiAgfSBlbHNlIGlmICh2YWx1ZSA8IDAuMCkge1xuICAgIHJldCA9IC0xO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZ2V0SW5wdXRUcmFuc2xhdGlvblhGcm9tTm9ybWFsaXplZFBhcmFtZXRlclZhbHVlKFxuICB0YXJnZXRUcmFuc2xhdGlvbjogQ3ViaXNtVmVjdG9yMixcbiAgdGFyZ2V0QW5nbGU6IHsgYW5nbGU6IG51bWJlciB9LFxuICB2YWx1ZTogbnVtYmVyLFxuICBwYXJhbWV0ZXJNaW5pbXVtVmFsdWU6IG51bWJlcixcbiAgcGFyYW1ldGVyTWF4aW11bVZhbHVlOiBudW1iZXIsXG4gIHBhcmFtZXRlckRlZmF1bHRWYWx1ZTogbnVtYmVyLFxuICBub3JtYWxpemF0aW9uUG9zaXRpb246IEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uLFxuICBub3JtYWxpemF0aW9uQW5nbGU6IEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uLFxuICBpc0ludmVydGVkOiBib29sZWFuLFxuICB3ZWlnaHQ6IG51bWJlclxuKTogdm9pZCB7XG4gIHRhcmdldFRyYW5zbGF0aW9uLnggKz1cbiAgICBub3JtYWxpemVQYXJhbWV0ZXJWYWx1ZShcbiAgICAgIHZhbHVlLFxuICAgICAgcGFyYW1ldGVyTWluaW11bVZhbHVlLFxuICAgICAgcGFyYW1ldGVyTWF4aW11bVZhbHVlLFxuICAgICAgcGFyYW1ldGVyRGVmYXVsdFZhbHVlLFxuICAgICAgbm9ybWFsaXphdGlvblBvc2l0aW9uLm1pbmltdW0sXG4gICAgICBub3JtYWxpemF0aW9uUG9zaXRpb24ubWF4aW11bSxcbiAgICAgIG5vcm1hbGl6YXRpb25Qb3NpdGlvbi5kZWZhbHV0LFxuICAgICAgaXNJbnZlcnRlZFxuICAgICkgKiB3ZWlnaHQ7XG59XG5cbmZ1bmN0aW9uIGdldElucHV0VHJhbnNsYXRpb25ZRnJvbU5vcm1hbGl6ZWRQYXJhbXRlclZhbHVlKFxuICB0YXJnZXRUcmFuc2xhdGlvbjogQ3ViaXNtVmVjdG9yMixcbiAgdGFyZ2V0QW5nbGU6IHsgYW5nbGU6IG51bWJlciB9LFxuICB2YWx1ZTogbnVtYmVyLFxuICBwYXJhbWV0ZXJNaW5pbXVtVmFsdWU6IG51bWJlcixcbiAgcGFyYW1ldGVyTWF4aW11bVZhbHVlOiBudW1iZXIsXG4gIHBhcmFtZXRlckRlZmF1bHRWYWx1ZTogbnVtYmVyLFxuICBub3JtYWxpemF0aW9uUG9zaXRpb246IEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uLFxuICBub3JtYWxpemF0aW9uQW5nbGU6IEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uLFxuICBpc0ludmVydGVkOiBib29sZWFuLFxuICB3ZWlnaHQ6IG51bWJlclxuKTogdm9pZCB7XG4gIHRhcmdldFRyYW5zbGF0aW9uLnkgKz1cbiAgICBub3JtYWxpemVQYXJhbWV0ZXJWYWx1ZShcbiAgICAgIHZhbHVlLFxuICAgICAgcGFyYW1ldGVyTWluaW11bVZhbHVlLFxuICAgICAgcGFyYW1ldGVyTWF4aW11bVZhbHVlLFxuICAgICAgcGFyYW1ldGVyRGVmYXVsdFZhbHVlLFxuICAgICAgbm9ybWFsaXphdGlvblBvc2l0aW9uLm1pbmltdW0sXG4gICAgICBub3JtYWxpemF0aW9uUG9zaXRpb24ubWF4aW11bSxcbiAgICAgIG5vcm1hbGl6YXRpb25Qb3NpdGlvbi5kZWZhbHV0LFxuICAgICAgaXNJbnZlcnRlZFxuICAgICkgKiB3ZWlnaHQ7XG59XG5cbmZ1bmN0aW9uIGdldElucHV0QW5nbGVGcm9tTm9ybWFsaXplZFBhcmFtZXRlclZhbHVlKFxuICB0YXJnZXRUcmFuc2xhdGlvbjogQ3ViaXNtVmVjdG9yMixcbiAgdGFyZ2V0QW5nbGU6IHsgYW5nbGU6IG51bWJlciB9LFxuICB2YWx1ZTogbnVtYmVyLFxuICBwYXJhbWV0ZXJNaW5pbXVtVmFsdWU6IG51bWJlcixcbiAgcGFyYW1ldGVyTWF4aW11bVZhbHVlOiBudW1iZXIsXG4gIHBhcmFtZXRlckRlZmF1bHRWYWx1ZTogbnVtYmVyLFxuICBub3JtYWxpemFpdGlvblBvc2l0aW9uOiBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbixcbiAgbm9ybWFsaXphdGlvbkFuZ2xlOiBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbixcbiAgaXNJbnZlcnRlZDogYm9vbGVhbixcbiAgd2VpZ2h0OiBudW1iZXJcbik6IHZvaWQge1xuICB0YXJnZXRBbmdsZS5hbmdsZSArPVxuICAgIG5vcm1hbGl6ZVBhcmFtZXRlclZhbHVlKFxuICAgICAgdmFsdWUsXG4gICAgICBwYXJhbWV0ZXJNaW5pbXVtVmFsdWUsXG4gICAgICBwYXJhbWV0ZXJNYXhpbXVtVmFsdWUsXG4gICAgICBwYXJhbWV0ZXJEZWZhdWx0VmFsdWUsXG4gICAgICBub3JtYWxpemF0aW9uQW5nbGUubWluaW11bSxcbiAgICAgIG5vcm1hbGl6YXRpb25BbmdsZS5tYXhpbXVtLFxuICAgICAgbm9ybWFsaXphdGlvbkFuZ2xlLmRlZmFsdXQsXG4gICAgICBpc0ludmVydGVkXG4gICAgKSAqIHdlaWdodDtcbn1cblxuZnVuY3Rpb24gZ2V0T3V0cHV0VHJhbnNsYXRpb25YKFxuICB0cmFuc2xhdGlvbjogQ3ViaXNtVmVjdG9yMixcbiAgcGFydGljbGVzOiBDdWJpc21QaHlzaWNzUGFydGljbGVbXSxcbiAgcGFydGljbGVJbmRleDogbnVtYmVyLFxuICBpc0ludmVydGVkOiBib29sZWFuLFxuICBwYXJlbnRHcmF2aXR5OiBDdWJpc21WZWN0b3IyXG4pOiBudW1iZXIge1xuICBsZXQgb3V0cHV0VmFsdWU6IG51bWJlciA9IHRyYW5zbGF0aW9uLng7XG5cbiAgaWYgKGlzSW52ZXJ0ZWQpIHtcbiAgICBvdXRwdXRWYWx1ZSAqPSAtMS4wO1xuICB9XG5cbiAgcmV0dXJuIG91dHB1dFZhbHVlO1xufVxuXG5mdW5jdGlvbiBnZXRPdXRwdXRUcmFuc2xhdGlvblkoXG4gIHRyYW5zbGF0aW9uOiBDdWJpc21WZWN0b3IyLFxuICBwYXJ0aWNsZXM6IEN1YmlzbVBoeXNpY3NQYXJ0aWNsZVtdLFxuICBwYXJ0aWNsZUluZGV4OiBudW1iZXIsXG4gIGlzSW52ZXJ0ZWQ6IGJvb2xlYW4sXG4gIHBhcmVudEdyYXZpdHk6IEN1YmlzbVZlY3RvcjJcbik6IG51bWJlciB7XG4gIGxldCBvdXRwdXRWYWx1ZTogbnVtYmVyID0gdHJhbnNsYXRpb24ueTtcblxuICBpZiAoaXNJbnZlcnRlZCkge1xuICAgIG91dHB1dFZhbHVlICo9IC0xLjA7XG4gIH1cbiAgcmV0dXJuIG91dHB1dFZhbHVlO1xufVxuXG5mdW5jdGlvbiBnZXRPdXRwdXRBbmdsZShcbiAgdHJhbnNsYXRpb246IEN1YmlzbVZlY3RvcjIsXG4gIHBhcnRpY2xlczogQ3ViaXNtUGh5c2ljc1BhcnRpY2xlW10sXG4gIHBhcnRpY2xlSW5kZXg6IG51bWJlcixcbiAgaXNJbnZlcnRlZDogYm9vbGVhbixcbiAgcGFyZW50R3Jhdml0eTogQ3ViaXNtVmVjdG9yMlxuKTogbnVtYmVyIHtcbiAgbGV0IG91dHB1dFZhbHVlOiBudW1iZXI7XG5cbiAgaWYgKHBhcnRpY2xlSW5kZXggPj0gMikge1xuICAgIHBhcmVudEdyYXZpdHkgPSBwYXJ0aWNsZXNbcGFydGljbGVJbmRleCAtIDFdLnBvc2l0aW9uLnN1YnN0cmFjdChcbiAgICAgIHBhcnRpY2xlc1twYXJ0aWNsZUluZGV4IC0gMl0ucG9zaXRpb25cbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHBhcmVudEdyYXZpdHkgPSBwYXJlbnRHcmF2aXR5Lm11bHRpcGx5QnlTY2FsZXIoLTEuMCk7XG4gIH1cblxuICBvdXRwdXRWYWx1ZSA9IEN1YmlzbU1hdGguZGlyZWN0aW9uVG9SYWRpYW4ocGFyZW50R3Jhdml0eSwgdHJhbnNsYXRpb24pO1xuXG4gIGlmIChpc0ludmVydGVkKSB7XG4gICAgb3V0cHV0VmFsdWUgKj0gLTEuMDtcbiAgfVxuXG4gIHJldHVybiBvdXRwdXRWYWx1ZTtcbn1cblxuZnVuY3Rpb24gZ2V0UmFuZ2VWYWx1ZShtaW46IG51bWJlciwgbWF4OiBudW1iZXIpOiBudW1iZXIge1xuICBjb25zdCBtYXhWYWx1ZTogbnVtYmVyID0gQ3ViaXNtTWF0aC5tYXgobWluLCBtYXgpO1xuICBjb25zdCBtaW5WYWx1ZTogbnVtYmVyID0gQ3ViaXNtTWF0aC5taW4obWluLCBtYXgpO1xuXG4gIHJldHVybiBDdWJpc21NYXRoLmFicyhtYXhWYWx1ZSAtIG1pblZhbHVlKTtcbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdFZhbHVlKG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcik6IG51bWJlciB7XG4gIGNvbnN0IG1pblZhbHVlOiBudW1iZXIgPSBDdWJpc21NYXRoLm1pbihtaW4sIG1heCk7XG4gIHJldHVybiBtaW5WYWx1ZSArIGdldFJhbmdlVmFsdWUobWluLCBtYXgpIC8gMi4wO1xufVxuXG5mdW5jdGlvbiBnZXRPdXRwdXRTY2FsZVRyYW5zbGF0aW9uWChcbiAgdHJhbnNsYXRpb25TY2FsZTogQ3ViaXNtVmVjdG9yMixcbiAgYW5nbGVTY2FsZTogbnVtYmVyXG4pOiBudW1iZXIge1xuICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0cmFuc2xhdGlvblNjYWxlLngpKTtcbn1cblxuZnVuY3Rpb24gZ2V0T3V0cHV0U2NhbGVUcmFuc2xhdGlvblkoXG4gIHRyYW5zbGF0aW9uU2NhbGU6IEN1YmlzbVZlY3RvcjIsXG4gIGFuZ2xlU2NhbGU6IG51bWJlclxuKTogbnVtYmVyIHtcbiAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodHJhbnNsYXRpb25TY2FsZS55KSk7XG59XG5cbmZ1bmN0aW9uIGdldE91dHB1dFNjYWxlQW5nbGUoXG4gIHRyYW5zbGF0aW9uU2NhbGU6IEN1YmlzbVZlY3RvcjIsXG4gIGFuZ2xlU2NhbGU6IG51bWJlclxuKTogbnVtYmVyIHtcbiAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoYW5nbGVTY2FsZSkpO1xufVxuXG4vKipcbiAqIFVwZGF0ZXMgcGFydGljbGVzLlxuICpcbiAqIEBwYXJhbSBzdHJhbmQgICAgICAgICAgICAgICAgVGFyZ2V0IGFycmF5IG9mIHBhcnRpY2xlLlxuICogQHBhcmFtIHN0cmFuZENvdW50ICAgICAgICAgICBDb3VudCBvZiBwYXJ0aWNsZS5cbiAqIEBwYXJhbSB0b3RhbFRyYW5zbGF0aW9uICAgICAgVG90YWwgdHJhbnNsYXRpb24gdmFsdWUuXG4gKiBAcGFyYW0gdG90YWxBbmdsZSAgICAgICAgICAgIFRvdGFsIGFuZ2xlLlxuICogQHBhcmFtIHdpbmREaXJlY3Rpb24gICAgICAgICBEaXJlY3Rpb24gb2YgV2luZC5cbiAqIEBwYXJhbSB0aHJlc2hvbGRWYWx1ZSAgICAgICAgVGhyZXNob2xkIG9mIG1vdmVtZW50LlxuICogQHBhcmFtIGRlbHRhVGltZVNlY29uZHMgICAgICBEZWx0YSB0aW1lLlxuICogQHBhcmFtIGFpclJlc2lzdGFuY2UgICAgICAgICBBaXIgcmVzaXN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gdXBkYXRlUGFydGljbGVzKFxuICBzdHJhbmQ6IEN1YmlzbVBoeXNpY3NQYXJ0aWNsZVtdLFxuICBzdHJhbmRDb3VudDogbnVtYmVyLFxuICB0b3RhbFRyYW5zbGF0aW9uOiBDdWJpc21WZWN0b3IyLFxuICB0b3RhbEFuZ2xlOiBudW1iZXIsXG4gIHdpbmREaXJlY3Rpb246IEN1YmlzbVZlY3RvcjIsXG4gIHRocmVzaG9sZFZhbHVlOiBudW1iZXIsXG4gIGRlbHRhVGltZVNlY29uZHM6IG51bWJlcixcbiAgYWlyUmVzaXN0YW5jZTogbnVtYmVyXG4pIHtcbiAgbGV0IHRvdGFsUmFkaWFuOiBudW1iZXI7XG4gIGxldCBkZWxheTogbnVtYmVyO1xuICBsZXQgcmFkaWFuOiBudW1iZXI7XG4gIGxldCBjdXJyZW50R3Jhdml0eTogQ3ViaXNtVmVjdG9yMjtcbiAgbGV0IGRpcmVjdGlvbjogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcbiAgbGV0IHZlbG9jaXR5OiBDdWJpc21WZWN0b3IyID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xuICBsZXQgZm9yY2U6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG4gIGxldCBuZXdEaXJlY3Rpb246IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG5cbiAgc3RyYW5kWzBdLnBvc2l0aW9uID0gbmV3IEN1YmlzbVZlY3RvcjIoXG4gICAgdG90YWxUcmFuc2xhdGlvbi54LFxuICAgIHRvdGFsVHJhbnNsYXRpb24ueVxuICApO1xuXG4gIHRvdGFsUmFkaWFuID0gQ3ViaXNtTWF0aC5kZWdyZWVzVG9SYWRpYW4odG90YWxBbmdsZSk7XG4gIGN1cnJlbnRHcmF2aXR5ID0gQ3ViaXNtTWF0aC5yYWRpYW5Ub0RpcmVjdGlvbih0b3RhbFJhZGlhbik7XG4gIGN1cnJlbnRHcmF2aXR5Lm5vcm1hbGl6ZSgpO1xuXG4gIGZvciAobGV0IGkgPSAxOyBpIDwgc3RyYW5kQ291bnQ7ICsraSkge1xuICAgIHN0cmFuZFtpXS5mb3JjZSA9IGN1cnJlbnRHcmF2aXR5XG4gICAgICAubXVsdGlwbHlCeVNjYWxlcihzdHJhbmRbaV0uYWNjZWxlcmF0aW9uKVxuICAgICAgLmFkZCh3aW5kRGlyZWN0aW9uKTtcblxuICAgIHN0cmFuZFtpXS5sYXN0UG9zaXRpb24gPSBuZXcgQ3ViaXNtVmVjdG9yMihcbiAgICAgIHN0cmFuZFtpXS5wb3NpdGlvbi54LFxuICAgICAgc3RyYW5kW2ldLnBvc2l0aW9uLnlcbiAgICApO1xuXG4gICAgZGVsYXkgPSBzdHJhbmRbaV0uZGVsYXkgKiBkZWx0YVRpbWVTZWNvbmRzICogMzAuMDtcblxuICAgIGRpcmVjdGlvbiA9IHN0cmFuZFtpXS5wb3NpdGlvbi5zdWJzdHJhY3Qoc3RyYW5kW2kgLSAxXS5wb3NpdGlvbik7XG5cbiAgICByYWRpYW4gPVxuICAgICAgQ3ViaXNtTWF0aC5kaXJlY3Rpb25Ub1JhZGlhbihzdHJhbmRbaV0ubGFzdEdyYXZpdHksIGN1cnJlbnRHcmF2aXR5KSAvXG4gICAgICBhaXJSZXNpc3RhbmNlO1xuXG4gICAgZGlyZWN0aW9uLnggPVxuICAgICAgQ3ViaXNtTWF0aC5jb3MocmFkaWFuKSAqIGRpcmVjdGlvbi54IC1cbiAgICAgIGRpcmVjdGlvbi55ICogQ3ViaXNtTWF0aC5zaW4ocmFkaWFuKTtcbiAgICBkaXJlY3Rpb24ueSA9XG4gICAgICBDdWJpc21NYXRoLnNpbihyYWRpYW4pICogZGlyZWN0aW9uLnggK1xuICAgICAgZGlyZWN0aW9uLnkgKiBDdWJpc21NYXRoLmNvcyhyYWRpYW4pO1xuXG4gICAgc3RyYW5kW2ldLnBvc2l0aW9uID0gc3RyYW5kW2kgLSAxXS5wb3NpdGlvbi5hZGQoZGlyZWN0aW9uKTtcblxuICAgIHZlbG9jaXR5ID0gc3RyYW5kW2ldLnZlbG9jaXR5Lm11bHRpcGx5QnlTY2FsZXIoZGVsYXkpO1xuICAgIGZvcmNlID0gc3RyYW5kW2ldLmZvcmNlLm11bHRpcGx5QnlTY2FsZXIoZGVsYXkpLm11bHRpcGx5QnlTY2FsZXIoZGVsYXkpO1xuXG4gICAgc3RyYW5kW2ldLnBvc2l0aW9uID0gc3RyYW5kW2ldLnBvc2l0aW9uLmFkZCh2ZWxvY2l0eSkuYWRkKGZvcmNlKTtcblxuICAgIG5ld0RpcmVjdGlvbiA9IHN0cmFuZFtpXS5wb3NpdGlvbi5zdWJzdHJhY3Qoc3RyYW5kW2kgLSAxXS5wb3NpdGlvbik7XG4gICAgbmV3RGlyZWN0aW9uLm5vcm1hbGl6ZSgpO1xuXG4gICAgc3RyYW5kW2ldLnBvc2l0aW9uID0gc3RyYW5kW2kgLSAxXS5wb3NpdGlvbi5hZGQoXG4gICAgICBuZXdEaXJlY3Rpb24ubXVsdGlwbHlCeVNjYWxlcihzdHJhbmRbaV0ucmFkaXVzKVxuICAgICk7XG5cbiAgICBpZiAoQ3ViaXNtTWF0aC5hYnMoc3RyYW5kW2ldLnBvc2l0aW9uLngpIDwgdGhyZXNob2xkVmFsdWUpIHtcbiAgICAgIHN0cmFuZFtpXS5wb3NpdGlvbi54ID0gMC4wO1xuICAgIH1cblxuICAgIGlmIChkZWxheSAhPSAwLjApIHtcbiAgICAgIHN0cmFuZFtpXS52ZWxvY2l0eSA9IHN0cmFuZFtpXS5wb3NpdGlvbi5zdWJzdHJhY3Qoc3RyYW5kW2ldLmxhc3RQb3NpdGlvbik7XG4gICAgICBzdHJhbmRbaV0udmVsb2NpdHkgPSBzdHJhbmRbaV0udmVsb2NpdHkuZGl2aXNpb25CeVNjYWxhcihkZWxheSk7XG4gICAgICBzdHJhbmRbaV0udmVsb2NpdHkgPSBzdHJhbmRbaV0udmVsb2NpdHkubXVsdGlwbHlCeVNjYWxlcihcbiAgICAgICAgc3RyYW5kW2ldLm1vYmlsaXR5XG4gICAgICApO1xuICAgIH1cblxuICAgIHN0cmFuZFtpXS5mb3JjZSA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcbiAgICBzdHJhbmRbaV0ubGFzdEdyYXZpdHkgPSBuZXcgQ3ViaXNtVmVjdG9yMihcbiAgICAgIGN1cnJlbnRHcmF2aXR5LngsXG4gICAgICBjdXJyZW50R3Jhdml0eS55XG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIFVwZGF0ZXMgcGFydGljbGVzIGZvciBzdGFiaWxpemF0aW9uLlxuICpcbiAqIEBwYXJhbSBzdHJhbmQgICAgICAgICAgICAgICAgVGFyZ2V0IGFycmF5IG9mIHBhcnRpY2xlLlxuICogQHBhcmFtIHN0cmFuZENvdW50ICAgICAgICAgICBDb3VudCBvZiBwYXJ0aWNsZS5cbiAqIEBwYXJhbSB0b3RhbFRyYW5zbGF0aW9uICAgICAgVG90YWwgdHJhbnNsYXRpb24gdmFsdWUuXG4gKiBAcGFyYW0gdG90YWxBbmdsZSAgICAgICAgICAgIFRvdGFsIGFuZ2xlLlxuICogQHBhcmFtIHdpbmREaXJlY3Rpb24gICAgICAgICBEaXJlY3Rpb24gb2YgV2luZC5cbiAqIEBwYXJhbSB0aHJlc2hvbGRWYWx1ZSAgICAgICAgVGhyZXNob2xkIG9mIG1vdmVtZW50LlxuICovXG5mdW5jdGlvbiB1cGRhdGVQYXJ0aWNsZXNGb3JTdGFiaWxpemF0aW9uKFxuICBzdHJhbmQ6IEN1YmlzbVBoeXNpY3NQYXJ0aWNsZVtdLFxuICBzdHJhbmRDb3VudDogbnVtYmVyLFxuICB0b3RhbFRyYW5zbGF0aW9uOiBDdWJpc21WZWN0b3IyLFxuICB0b3RhbEFuZ2xlOiBudW1iZXIsXG4gIHdpbmREaXJlY3Rpb246IEN1YmlzbVZlY3RvcjIsXG4gIHRocmVzaG9sZFZhbHVlOiBudW1iZXJcbikge1xuICBsZXQgdG90YWxSYWRpYW46IG51bWJlcjtcbiAgbGV0IGN1cnJlbnRHcmF2aXR5OiBDdWJpc21WZWN0b3IyO1xuICBsZXQgZm9yY2U6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG5cbiAgc3RyYW5kWzBdLnBvc2l0aW9uID0gbmV3IEN1YmlzbVZlY3RvcjIoXG4gICAgdG90YWxUcmFuc2xhdGlvbi54LFxuICAgIHRvdGFsVHJhbnNsYXRpb24ueVxuICApO1xuXG4gIHRvdGFsUmFkaWFuID0gQ3ViaXNtTWF0aC5kZWdyZWVzVG9SYWRpYW4odG90YWxBbmdsZSk7XG4gIGN1cnJlbnRHcmF2aXR5ID0gQ3ViaXNtTWF0aC5yYWRpYW5Ub0RpcmVjdGlvbih0b3RhbFJhZGlhbik7XG4gIGN1cnJlbnRHcmF2aXR5Lm5vcm1hbGl6ZSgpO1xuXG4gIGZvciAobGV0IGkgPSAxOyBpIDwgc3RyYW5kQ291bnQ7ICsraSkge1xuICAgIHN0cmFuZFtpXS5mb3JjZSA9IGN1cnJlbnRHcmF2aXR5XG4gICAgICAubXVsdGlwbHlCeVNjYWxlcihzdHJhbmRbaV0uYWNjZWxlcmF0aW9uKVxuICAgICAgLmFkZCh3aW5kRGlyZWN0aW9uKTtcblxuICAgIHN0cmFuZFtpXS5sYXN0UG9zaXRpb24gPSBuZXcgQ3ViaXNtVmVjdG9yMihcbiAgICAgIHN0cmFuZFtpXS5wb3NpdGlvbi54LFxuICAgICAgc3RyYW5kW2ldLnBvc2l0aW9uLnlcbiAgICApO1xuXG4gICAgc3RyYW5kW2ldLnZlbG9jaXR5ID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xuICAgIGZvcmNlID0gc3RyYW5kW2ldLmZvcmNlO1xuICAgIGZvcmNlLm5vcm1hbGl6ZSgpO1xuXG4gICAgZm9yY2UgPSBmb3JjZS5tdWx0aXBseUJ5U2NhbGVyKHN0cmFuZFtpXS5yYWRpdXMpO1xuICAgIHN0cmFuZFtpXS5wb3NpdGlvbiA9IHN0cmFuZFtpIC0gMV0ucG9zaXRpb24uYWRkKGZvcmNlKTtcblxuICAgIGlmIChDdWJpc21NYXRoLmFicyhzdHJhbmRbaV0ucG9zaXRpb24ueCkgPCB0aHJlc2hvbGRWYWx1ZSkge1xuICAgICAgc3RyYW5kW2ldLnBvc2l0aW9uLnggPSAwLjA7XG4gICAgfVxuXG4gICAgc3RyYW5kW2ldLmZvcmNlID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xuICAgIHN0cmFuZFtpXS5sYXN0R3Jhdml0eSA9IG5ldyBDdWJpc21WZWN0b3IyKFxuICAgICAgY3VycmVudEdyYXZpdHkueCxcbiAgICAgIGN1cnJlbnRHcmF2aXR5LnlcbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogVXBkYXRlcyBvdXRwdXQgcGFyYW1ldGVyIHZhbHVlLlxuICogQHBhcmFtIHBhcmFtZXRlclZhbHVlICAgICAgICAgICAgVGFyZ2V0IHBhcmFtZXRlciB2YWx1ZS5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJWYWx1ZU1pbmltdW0gICAgIE1pbmltdW0gb2YgcGFyYW1ldGVyIHZhbHVlLlxuICogQHBhcmFtIHBhcmFtZXRlclZhbHVlTWF4aW11bSAgICAgTWF4aW11bSBvZiBwYXJhbWV0ZXIgdmFsdWUuXG4gKiBAcGFyYW0gdHJhbnNsYXRpb24gICAgICAgICAgICAgICBUcmFuc2xhdGlvbiB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gdXBkYXRlT3V0cHV0UGFyYW1ldGVyVmFsdWUoXG4gIHBhcmFtZXRlclZhbHVlOiBGbG9hdDMyQXJyYXksXG4gIHBhcmFtZXRlclZhbHVlTWluaW11bTogbnVtYmVyLFxuICBwYXJhbWV0ZXJWYWx1ZU1heGltdW06IG51bWJlcixcbiAgdHJhbnNsYXRpb246IG51bWJlcixcbiAgb3V0cHV0OiBDdWJpc21QaHlzaWNzT3V0cHV0XG4pOiB2b2lkIHtcbiAgbGV0IG91dHB1dFNjYWxlOiBudW1iZXI7XG4gIGxldCB2YWx1ZTogbnVtYmVyO1xuICBsZXQgd2VpZ2h0OiBudW1iZXI7XG5cbiAgb3V0cHV0U2NhbGUgPSBvdXRwdXQuZ2V0U2NhbGUob3V0cHV0LnRyYW5zbGF0aW9uU2NhbGUsIG91dHB1dC5hbmdsZVNjYWxlKTtcblxuICB2YWx1ZSA9IHRyYW5zbGF0aW9uICogb3V0cHV0U2NhbGU7XG5cbiAgaWYgKHZhbHVlIDwgcGFyYW1ldGVyVmFsdWVNaW5pbXVtKSB7XG4gICAgaWYgKHZhbHVlIDwgb3V0cHV0LnZhbHVlQmVsb3dNaW5pbXVtKSB7XG4gICAgICBvdXRwdXQudmFsdWVCZWxvd01pbmltdW0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICB2YWx1ZSA9IHBhcmFtZXRlclZhbHVlTWluaW11bTtcbiAgfSBlbHNlIGlmICh2YWx1ZSA+IHBhcmFtZXRlclZhbHVlTWF4aW11bSkge1xuICAgIGlmICh2YWx1ZSA+IG91dHB1dC52YWx1ZUV4Y2VlZGVkTWF4aW11bSkge1xuICAgICAgb3V0cHV0LnZhbHVlRXhjZWVkZWRNYXhpbXVtID0gdmFsdWU7XG4gICAgfVxuXG4gICAgdmFsdWUgPSBwYXJhbWV0ZXJWYWx1ZU1heGltdW07XG4gIH1cblxuICB3ZWlnaHQgPSBvdXRwdXQud2VpZ2h0IC8gTWF4aW11bVdlaWdodDtcblxuICBpZiAod2VpZ2h0ID49IDEuMCkge1xuICAgIHBhcmFtZXRlclZhbHVlWzBdID0gdmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgdmFsdWUgPSBwYXJhbWV0ZXJWYWx1ZVswXSAqICgxLjAgLSB3ZWlnaHQpICsgdmFsdWUgKiB3ZWlnaHQ7XG4gICAgcGFyYW1ldGVyVmFsdWVbMF0gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVQYXJhbWV0ZXJWYWx1ZShcbiAgdmFsdWU6IG51bWJlcixcbiAgcGFyYW1ldGVyTWluaW11bTogbnVtYmVyLFxuICBwYXJhbWV0ZXJNYXhpbXVtOiBudW1iZXIsXG4gIHBhcmFtZXRlckRlZmF1bHQ6IG51bWJlcixcbiAgbm9ybWFsaXplZE1pbmltdW06IG51bWJlcixcbiAgbm9ybWFsaXplZE1heGltdW06IG51bWJlcixcbiAgbm9ybWFsaXplZERlZmF1bHQ6IG51bWJlcixcbiAgaXNJbnZlcnRlZDogYm9vbGVhblxuKSB7XG4gIGxldCByZXN1bHQgPSAwLjA7XG5cbiAgY29uc3QgbWF4VmFsdWU6IG51bWJlciA9IEN1YmlzbU1hdGgubWF4KHBhcmFtZXRlck1heGltdW0sIHBhcmFtZXRlck1pbmltdW0pO1xuXG4gIGlmIChtYXhWYWx1ZSA8IHZhbHVlKSB7XG4gICAgdmFsdWUgPSBtYXhWYWx1ZTtcbiAgfVxuXG4gIGNvbnN0IG1pblZhbHVlOiBudW1iZXIgPSBDdWJpc21NYXRoLm1pbihwYXJhbWV0ZXJNYXhpbXVtLCBwYXJhbWV0ZXJNaW5pbXVtKTtcblxuICBpZiAobWluVmFsdWUgPiB2YWx1ZSkge1xuICAgIHZhbHVlID0gbWluVmFsdWU7XG4gIH1cblxuICBjb25zdCBtaW5Ob3JtVmFsdWU6IG51bWJlciA9IEN1YmlzbU1hdGgubWluKFxuICAgIG5vcm1hbGl6ZWRNaW5pbXVtLFxuICAgIG5vcm1hbGl6ZWRNYXhpbXVtXG4gICk7XG4gIGNvbnN0IG1heE5vcm1WYWx1ZTogbnVtYmVyID0gQ3ViaXNtTWF0aC5tYXgoXG4gICAgbm9ybWFsaXplZE1pbmltdW0sXG4gICAgbm9ybWFsaXplZE1heGltdW1cbiAgKTtcbiAgY29uc3QgbWlkZGxlTm9ybVZhbHVlOiBudW1iZXIgPSBub3JtYWxpemVkRGVmYXVsdDtcblxuICBjb25zdCBtaWRkbGVWYWx1ZTogbnVtYmVyID0gZ2V0RGVmYXVsdFZhbHVlKG1pblZhbHVlLCBtYXhWYWx1ZSk7XG4gIGNvbnN0IHBhcmFtVmFsdWU6IG51bWJlciA9IHZhbHVlIC0gbWlkZGxlVmFsdWU7XG5cbiAgc3dpdGNoIChzaWduKHBhcmFtVmFsdWUpKSB7XG4gICAgY2FzZSAxOiB7XG4gICAgICBjb25zdCBuTGVuZ3RoOiBudW1iZXIgPSBtYXhOb3JtVmFsdWUgLSBtaWRkbGVOb3JtVmFsdWU7XG4gICAgICBjb25zdCBwTGVuZ3RoOiBudW1iZXIgPSBtYXhWYWx1ZSAtIG1pZGRsZVZhbHVlO1xuXG4gICAgICBpZiAocExlbmd0aCAhPSAwLjApIHtcbiAgICAgICAgcmVzdWx0ID0gcGFyYW1WYWx1ZSAqIChuTGVuZ3RoIC8gcExlbmd0aCk7XG4gICAgICAgIHJlc3VsdCArPSBtaWRkbGVOb3JtVmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIC0xOiB7XG4gICAgICBjb25zdCBuTGVuZ3RoOiBudW1iZXIgPSBtaW5Ob3JtVmFsdWUgLSBtaWRkbGVOb3JtVmFsdWU7XG4gICAgICBjb25zdCBwTGVuZ3RoOiBudW1iZXIgPSBtaW5WYWx1ZSAtIG1pZGRsZVZhbHVlO1xuXG4gICAgICBpZiAocExlbmd0aCAhPSAwLjApIHtcbiAgICAgICAgcmVzdWx0ID0gcGFyYW1WYWx1ZSAqIChuTGVuZ3RoIC8gcExlbmd0aCk7XG4gICAgICAgIHJlc3VsdCArPSBtaWRkbGVOb3JtVmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIDA6IHtcbiAgICAgIHJlc3VsdCA9IG1pZGRsZU5vcm1WYWx1ZTtcblxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGRlZmF1bHQ6IHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpc0ludmVydGVkID8gcmVzdWx0IDogcmVzdWx0ICogLTEuMDtcbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtcGh5c2ljcyc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtUGh5c2ljcyA9ICQuQ3ViaXNtUGh5c2ljcztcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtUGh5c2ljcyA9ICQuQ3ViaXNtUGh5c2ljcztcbiAgZXhwb3J0IGNvbnN0IE9wdGlvbnMgPSAkLk9wdGlvbnM7XG4gIGV4cG9ydCB0eXBlIE9wdGlvbnMgPSAkLk9wdGlvbnM7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21JZEhhbmRsZSB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7IEN1YmlzbVZlY3RvcjIgfSBmcm9tICcuLi9tYXRoL2N1YmlzbXZlY3RvcjInO1xuaW1wb3J0IHsgY3NtVmVjdG9yIH0gZnJvbSAnLi4vdHlwZS9jc212ZWN0b3InO1xuXG4vKipcbiAqIOeJqeeQhua8lOeul+OBrumBqeeUqOWFiOOBrueorumhnlxuICovXG5leHBvcnQgZW51bSBDdWJpc21QaHlzaWNzVGFyZ2V0VHlwZSB7XG4gIEN1YmlzbVBoeXNpY3NUYXJnZXRUeXBlX1BhcmFtZXRlciwgLy8g44OR44Op44Oh44O844K/44Gr5a++44GX44Gm6YGp55SoXG59XG5cbi8qKlxuICog54mp55CG5ryU566X44Gu5YWl5Yqb44Gu56iu6aGeXG4gKi9cbmV4cG9ydCBlbnVtIEN1YmlzbVBoeXNpY3NTb3VyY2Uge1xuICBDdWJpc21QaHlzaWNzU291cmNlX1gsIC8vIFjou7jjga7kvY3nva7jgYvjgolcbiAgQ3ViaXNtUGh5c2ljc1NvdXJjZV9ZLCAvLyBZ6Lu444Gu5L2N572u44GL44KJXG4gIEN1YmlzbVBoeXNpY3NTb3VyY2VfQW5nbGUsIC8vIOinkuW6puOBi+OCiVxufVxuXG4vKipcbiAqIEBicmllZiDniannkIbmvJTnrpfjgafkvb/nlKjjgZnjgovlpJbpg6jjga7liptcbiAqXG4gKiDniannkIbmvJTnrpfjgafkvb/nlKjjgZnjgovlpJbpg6jjga7lipvjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIFBoeXNpY3NKc29uRWZmZWN0aXZlRm9yY2VzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5ncmF2aXR5ID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XG4gICAgdGhpcy53aW5kID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XG4gIH1cbiAgZ3Jhdml0eTogQ3ViaXNtVmVjdG9yMjsgLy8g6YeN5YqbXG4gIHdpbmQ6IEN1YmlzbVZlY3RvcjI7IC8vIOmiqFxufVxuXG4vKipcbiAqIOeJqeeQhua8lOeul+OBruODkeODqeODoeODvOOCv+aDheWgsVxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtUGh5c2ljc1BhcmFtZXRlciB7XG4gIGlkOiBDdWJpc21JZEhhbmRsZTsgLy8g44OR44Op44Oh44O844K/XG4gIHRhcmdldFR5cGU6IEN1YmlzbVBoeXNpY3NUYXJnZXRUeXBlOyAvLyDpgannlKjlhYjjga7nqK7poZ5cbn1cblxuLyoqXG4gKiDniannkIbmvJTnrpfjga7mraPopo/ljJbmg4XloLFcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uIHtcbiAgbWluaW11bTogbnVtYmVyOyAvLyDmnIDlpKflgKRcbiAgbWF4aW11bTogbnVtYmVyOyAvLyDmnIDlsI/lgKRcbiAgZGVmYWx1dDogbnVtYmVyOyAvLyDjg4fjg5Xjgqnjg6vjg4jlgKRcbn1cblxuLyoqXG4gKiDniannkIbmvJTnrpfjga7mvJTnrpflp5Tkvb/nlKjjgZnjgovniannkIbngrnjga7mg4XloLFcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbVBoeXNpY3NQYXJ0aWNsZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaW5pdGlhbFBvc2l0aW9uID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XG4gICAgdGhpcy5wb3NpdGlvbiA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xuICAgIHRoaXMubGFzdFBvc2l0aW9uID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XG4gICAgdGhpcy5sYXN0R3Jhdml0eSA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xuICAgIHRoaXMuZm9yY2UgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcbiAgICB0aGlzLnZlbG9jaXR5ID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XG4gIH1cblxuICBpbml0aWFsUG9zaXRpb246IEN1YmlzbVZlY3RvcjI7IC8vIOWIneacn+S9jee9rlxuICBtb2JpbGl0eTogbnVtYmVyOyAvLyDli5XjgY3jgoTjgZnjgZVcbiAgZGVsYXk6IG51bWJlcjsgLy8g6YGF44KMXG4gIGFjY2VsZXJhdGlvbjogbnVtYmVyOyAvLyDliqDpgJ/luqZcbiAgcmFkaXVzOiBudW1iZXI7IC8vIOi3nembolxuICBwb3NpdGlvbjogQ3ViaXNtVmVjdG9yMjsgLy8g54++5Zyo44Gu5L2N572uXG4gIGxhc3RQb3NpdGlvbjogQ3ViaXNtVmVjdG9yMjsgLy8g5pyA5b6M44Gu5L2N572uXG4gIGxhc3RHcmF2aXR5OiBDdWJpc21WZWN0b3IyOyAvLyDmnIDlvozjga7ph43liptcbiAgZm9yY2U6IEN1YmlzbVZlY3RvcjI7IC8vIOePvuWcqOOBi+OBi+OBo+OBpuOBhOOCi+WKm1xuICB2ZWxvY2l0eTogQ3ViaXNtVmVjdG9yMjsgLy8g54++5Zyo44Gu6YCf5bqmXG59XG5cbi8qKlxuICog54mp55CG5ryU566X44Gu54mp55CG54K544Gu566h55CGXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21QaHlzaWNzU3ViUmlnIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5ub3JtYWxpemF0aW9uUG9zaXRpb24gPSBuZXcgQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb24oKTtcbiAgICB0aGlzLm5vcm1hbGl6YXRpb25BbmdsZSA9IG5ldyBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbigpO1xuICB9XG4gIGlucHV0Q291bnQ6IG51bWJlcjsgLy8g5YWl5Yqb44Gu5YCL5pWwXG4gIG91dHB1dENvdW50OiBudW1iZXI7IC8vIOWHuuWKm+OBruWAi+aVsFxuICBwYXJ0aWNsZUNvdW50OiBudW1iZXI7IC8vIOeJqeeQhueCueOBruWAi+aVsFxuICBiYXNlSW5wdXRJbmRleDogbnVtYmVyOyAvLyDlhaXlipvjga7mnIDliJ3jga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgYmFzZU91dHB1dEluZGV4OiBudW1iZXI7IC8vIOWHuuWKm+OBruacgOWIneOBruOCpOODs+ODh+ODg+OCr+OCuVxuICBiYXNlUGFydGljbGVJbmRleDogbnVtYmVyOyAvLyDniannkIbngrnjga7mnIDliJ3jga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgbm9ybWFsaXphdGlvblBvc2l0aW9uOiBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbjsgLy8g5q2j6KaP5YyW44GV44KM44Gf5L2N572uXG4gIG5vcm1hbGl6YXRpb25BbmdsZTogQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb247IC8vIOato+imj+WMluOBleOCjOOBn+inkuW6plxufVxuXG4vKipcbiAqIOato+imj+WMluOBleOCjOOBn+ODkeODqeODoeODvOOCv+OBruWPluW+l+mWouaVsOOBruWuo+iogFxuICogQHBhcmFtIHRhcmdldFRyYW5zbGF0aW9uICAgICAvLyDmvJTnrpfntZDmnpzjga7np7vli5XlgKRcbiAqIEBwYXJhbSB0YXJnZXRBbmdsZSAgICAgICAgICAgLy8g5ryU566X57WQ5p6c44Gu6KeS5bqmXG4gKiBAcGFyYW0gdmFsdWUgICAgICAgICAgICAgICAgIC8vIOODkeODqeODoeODvOOCv+OBruWApFxuICogQHBhcmFtIHBhcmFtZXRlck1pbmltdW5WYWx1ZSAvLyDjg5Hjg6njg6Hjg7zjgr/jga7mnIDlsI/lgKRcbiAqIEBwYXJhbSBwYXJhbWV0ZXJNYXhpbXVtVmFsdWUgLy8g44OR44Op44Oh44O844K/44Gu5pyA5aSn5YCkXG4gKiBAcGFyYW0gcGFyYW1ldGVyRGVmYXVsdFZhbHVlIC8vIOODkeODqeODoeODvOOCv+OBruODh+ODleOCqeODq+ODiOWApFxuICogQHBhcmFtIG5vcm1hbGl6YXRpb25Qb3NpdGlvbiAvLyDmraPopo/ljJbjgZXjgozjgZ/kvY3nva5cbiAqIEBwYXJhbSBub3JtYWxpemF0aW9uQW5nbGUgICAgLy8g5q2j6KaP5YyW44GV44KM44Gf6KeS5bqmXG4gKiBAcGFyYW0gaXNJbnZlcnRlZCAgICAgICAgICAgIC8vIOWApOOBjOWPjei7ouOBleOCjOOBpuOBhOOCi+OBi++8n1xuICogQHBhcmFtIHdlaWdodCAgICAgICAgICAgICAgICAvLyDph43jgb9cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBub3JtYWxpemVkUGh5c2ljc1BhcmFtZXRlclZhbHVlR2V0dGVyIHtcbiAgKFxuICAgIHRhcmdldFRyYW5zbGF0aW9uOiBDdWJpc21WZWN0b3IyLFxuICAgIHRhcmdldEFuZ2xlOiB7IGFuZ2xlOiBudW1iZXIgfSxcbiAgICB2YWx1ZTogbnVtYmVyLFxuICAgIHBhcmFtZXRlck1pbmltdW5WYWx1ZTogbnVtYmVyLFxuICAgIHBhcmFtZXRlck1heGltdW1WYWx1ZTogbnVtYmVyLFxuICAgIHBhcmFtZXRlckRlZmF1bHRWYWx1ZTogbnVtYmVyLFxuICAgIG5vcm1hbGl6YXRpb25Qb3NpdGlvbjogQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb24sXG4gICAgbm9ybWFsaXphdGlvbkFuZ2xlOiBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbixcbiAgICBpc0ludmVydGVkOiBib29sZWFuLFxuICAgIHdlaWdodDogbnVtYmVyXG4gICk6IHZvaWQ7XG59XG5cbi8qKlxuICog54mp55CG5ryU566X44Gu5YCk44Gu5Y+W5b6X6Zai5pWw44Gu5a6j6KiAXG4gKiBAcGFyYW0gdHJhbnNsYXRpb24g56e75YuV5YCkXG4gKiBAcGFyYW0gcGFydGljbGVzIOeJqeeQhueCueOBruODquOCueODiFxuICogQHBhcmFtIGlzSW52ZXJ0ZWQg5YCk44GM5Y+N5pig44GV44KM44Gm44GE44KL44GLXG4gKiBAcGFyYW0gcGFyZW50R3Jhdml0eSDph43liptcbiAqIEByZXR1cm4g5YCkXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgcGh5c2ljc1ZhbHVlR2V0dGVyIHtcbiAgKFxuICAgIHRyYW5zbGF0aW9uOiBDdWJpc21WZWN0b3IyLFxuICAgIHBhcnRpY2xlczogQ3ViaXNtUGh5c2ljc1BhcnRpY2xlW10sXG4gICAgcGFydGljbGVJbmRleDogbnVtYmVyLFxuICAgIGlzSW52ZXJ0ZWQ6IGJvb2xlYW4sXG4gICAgcGFyZW50R3Jhdml0eTogQ3ViaXNtVmVjdG9yMlxuICApOiBudW1iZXI7XG59XG5cbi8qKlxuICog54mp55CG5ryU566X44Gu44K544Kx44O844Or44Gu5Y+W5b6X6Zai5pWw44Gu5a6j6KiAXG4gKiBAcGFyYW0gdHJhbnNsYXRpb25TY2FsZSDnp7vli5XlgKTjga7jgrnjgrHjg7zjg6tcbiAqIEBwYXJhbSBhbmdsZVNjYWxlICAgIOinkuW6puOBruOCueOCseODvOODq1xuICogQHJldHVybiDjgrnjgrHjg7zjg6vlgKRcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBwaHlzaWNzU2NhbGVHZXR0ZXIge1xuICAodHJhbnNsYXRpb25TY2FsZTogQ3ViaXNtVmVjdG9yMiwgYW5nbGVTY2FsZTogbnVtYmVyKTogbnVtYmVyO1xufVxuXG4vKipcbiAqIOeJqeeQhua8lOeul+OBruWFpeWKm+aDheWgsVxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtUGh5c2ljc0lucHV0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5zb3VyY2UgPSBuZXcgQ3ViaXNtUGh5c2ljc1BhcmFtZXRlcigpO1xuICB9XG4gIHNvdXJjZTogQ3ViaXNtUGh5c2ljc1BhcmFtZXRlcjsgLy8g5YWl5Yqb5YWD44Gu44OR44Op44Oh44O844K/XG4gIHNvdXJjZVBhcmFtZXRlckluZGV4OiBudW1iZXI7IC8vIOWFpeWKm+WFg+OBruODkeODqeODoeODvOOCv+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICB3ZWlnaHQ6IG51bWJlcjsgLy8g6YeN44G/XG4gIHR5cGU6IG51bWJlcjsgLy8g5YWl5Yqb44Gu56iu6aGeXG4gIHJlZmxlY3Q6IGJvb2xlYW47IC8vIOWApOOBjOWPjei7ouOBleOCjOOBpuOBhOOCi+OBi+OBqeOBhuOBi1xuICBnZXROb3JtYWxpemVkUGFyYW1ldGVyVmFsdWU6IG5vcm1hbGl6ZWRQaHlzaWNzUGFyYW1ldGVyVmFsdWVHZXR0ZXI7IC8vIOato+imj+WMluOBleOCjOOBn+ODkeODqeODoeODvOOCv+WApOOBruWPluW+l+mWouaVsFxufVxuXG4vKipcbiAqIEBicmllZiDniannkIbmvJTnrpfjga7lh7rlipvmg4XloLFcbiAqXG4gKiDniannkIbmvJTnrpfjga7lh7rlipvmg4XloLHjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbVBoeXNpY3NPdXRwdXQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmRlc3RpbmF0aW9uID0gbmV3IEN1YmlzbVBoeXNpY3NQYXJhbWV0ZXIoKTtcbiAgICB0aGlzLnRyYW5zbGF0aW9uU2NhbGUgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcbiAgfVxuXG4gIGRlc3RpbmF0aW9uOiBDdWJpc21QaHlzaWNzUGFyYW1ldGVyOyAvLyDlh7rlipvlhYjjga7jg5Hjg6njg6Hjg7zjgr9cbiAgZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleDogbnVtYmVyOyAvLyDlh7rlipvlhYjjga7jg5Hjg6njg6Hjg7zjgr/jga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgdmVydGV4SW5kZXg6IG51bWJlcjsgLy8g5oyv44KK5a2Q44Gu44Kk44Oz44OH44OD44Kv44K5XG4gIHRyYW5zbGF0aW9uU2NhbGU6IEN1YmlzbVZlY3RvcjI7IC8vIOenu+WLleWApOOBruOCueOCseODvOODq1xuICBhbmdsZVNjYWxlOiBudW1iZXI7IC8vIOinkuW6puOBruOCueOCseODvOODq1xuICB3ZWlnaHQ6IG51bWJlcjsgLy8g6YeN44G/XG4gIHR5cGU6IEN1YmlzbVBoeXNpY3NTb3VyY2U7IC8vIOWHuuWKm+OBrueorumhnlxuICByZWZsZWN0OiBib29sZWFuOyAvLyDlgKTjgYzlj43ou6LjgZXjgozjgabjgYTjgovjgYvjganjgYbjgYtcbiAgdmFsdWVCZWxvd01pbmltdW06IG51bWJlcjsgLy8g5pyA5bCP5YCk44KS5LiL5Zue44Gj44Gf5pmC44Gu5YCkXG4gIHZhbHVlRXhjZWVkZWRNYXhpbXVtOiBudW1iZXI7IC8vIOacgOWkp+WApOOCkuOBk+OBiOOBn+aZguOBruWApFxuICBnZXRWYWx1ZTogcGh5c2ljc1ZhbHVlR2V0dGVyOyAvLyDniannkIbmvJTnrpfjga7lgKTjga7lj5blvpfplqLmlbBcbiAgZ2V0U2NhbGU6IHBoeXNpY3NTY2FsZUdldHRlcjsgLy8g54mp55CG5ryU566X44Gu44K544Kx44O844Or5YCk44Gu5Y+W5b6X6Zai5pWwXG59XG5cbi8qKlxuICogQGJyaWVmIOeJqeeQhua8lOeul+OBruODh+ODvOOCv1xuICpcbiAqIOeJqeeQhua8lOeul+OBruODh+ODvOOCv+OAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtUGh5c2ljc1JpZyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuc2V0dGluZ3MgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbVBoeXNpY3NTdWJSaWc+KCk7XG4gICAgdGhpcy5pbnB1dHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbVBoeXNpY3NJbnB1dD4oKTtcbiAgICB0aGlzLm91dHB1dHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbVBoeXNpY3NPdXRwdXQ+KCk7XG4gICAgdGhpcy5wYXJ0aWNsZXMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbVBoeXNpY3NQYXJ0aWNsZT4oKTtcbiAgICB0aGlzLmdyYXZpdHkgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcbiAgICB0aGlzLndpbmQgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcbiAgICB0aGlzLmZwcyA9IDAuMDtcbiAgfVxuXG4gIHN1YlJpZ0NvdW50OiBudW1iZXI7IC8vIOeJqeeQhua8lOeul+OBrueJqeeQhueCueOBruWAi+aVsFxuICBzZXR0aW5nczogY3NtVmVjdG9yPEN1YmlzbVBoeXNpY3NTdWJSaWc+OyAvLyDniannkIbmvJTnrpfjga7niannkIbngrnjga7nrqHnkIbjga7jg6rjgrnjg4hcbiAgaW5wdXRzOiBjc21WZWN0b3I8Q3ViaXNtUGh5c2ljc0lucHV0PjsgLy8g54mp55CG5ryU566X44Gu5YWl5Yqb44Gu44Oq44K544OIXG4gIG91dHB1dHM6IGNzbVZlY3RvcjxDdWJpc21QaHlzaWNzT3V0cHV0PjsgLy8g54mp55CG5ryU566X44Gu5Ye65Yqb44Gu44Oq44K544OIXG4gIHBhcnRpY2xlczogY3NtVmVjdG9yPEN1YmlzbVBoeXNpY3NQYXJ0aWNsZT47IC8vIOeJqeeQhua8lOeul+OBrueJqeeQhueCueOBruODquOCueODiFxuICBncmF2aXR5OiBDdWJpc21WZWN0b3IyOyAvLyDph43liptcbiAgd2luZDogQ3ViaXNtVmVjdG9yMjsgLy8g6aKoXG4gIGZwczogbnVtYmVyOyAvL+eJqeeQhua8lOeul+WLleS9nEZQU1xufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21waHlzaWNzaW50ZXJuYWwnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVBoeXNpY3NJbnB1dCA9ICQuQ3ViaXNtUGh5c2ljc0lucHV0O1xuICBleHBvcnQgdHlwZSBDdWJpc21QaHlzaWNzSW5wdXQgPSAkLkN1YmlzbVBoeXNpY3NJbnB1dDtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uID0gJC5DdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbjtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb24gPSAkLkN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uO1xuICBleHBvcnQgY29uc3QgQ3ViaXNtUGh5c2ljc091dHB1dCA9ICQuQ3ViaXNtUGh5c2ljc091dHB1dDtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtUGh5c2ljc091dHB1dCA9ICQuQ3ViaXNtUGh5c2ljc091dHB1dDtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVBoeXNpY3NQYXJhbWV0ZXIgPSAkLkN1YmlzbVBoeXNpY3NQYXJhbWV0ZXI7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbVBoeXNpY3NQYXJhbWV0ZXIgPSAkLkN1YmlzbVBoeXNpY3NQYXJhbWV0ZXI7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21QaHlzaWNzUGFydGljbGUgPSAkLkN1YmlzbVBoeXNpY3NQYXJ0aWNsZTtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtUGh5c2ljc1BhcnRpY2xlID0gJC5DdWJpc21QaHlzaWNzUGFydGljbGU7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21QaHlzaWNzUmlnID0gJC5DdWJpc21QaHlzaWNzUmlnO1xuICBleHBvcnQgdHlwZSBDdWJpc21QaHlzaWNzUmlnID0gJC5DdWJpc21QaHlzaWNzUmlnO1xuICBleHBvcnQgY29uc3QgQ3ViaXNtUGh5c2ljc1NvdXJjZSA9ICQuQ3ViaXNtUGh5c2ljc1NvdXJjZTtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtUGh5c2ljc1NvdXJjZSA9ICQuQ3ViaXNtUGh5c2ljc1NvdXJjZTtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVBoeXNpY3NTdWJSaWcgPSAkLkN1YmlzbVBoeXNpY3NTdWJSaWc7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbVBoeXNpY3NTdWJSaWcgPSAkLkN1YmlzbVBoeXNpY3NTdWJSaWc7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21QaHlzaWNzVGFyZ2V0VHlwZSA9ICQuQ3ViaXNtUGh5c2ljc1RhcmdldFR5cGU7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbVBoeXNpY3NUYXJnZXRUeXBlID0gJC5DdWJpc21QaHlzaWNzVGFyZ2V0VHlwZTtcbiAgZXhwb3J0IGNvbnN0IFBoeXNpY3NKc29uRWZmZWN0aXZlRm9yY2VzID0gJC5QaHlzaWNzSnNvbkVmZmVjdGl2ZUZvcmNlcztcbiAgZXhwb3J0IHR5cGUgUGh5c2ljc0pzb25FZmZlY3RpdmVGb3JjZXMgPSAkLlBoeXNpY3NKc29uRWZmZWN0aXZlRm9yY2VzO1xuICBleHBvcnQgdHlwZSBub3JtYWxpemVkUGh5c2ljc1BhcmFtZXRlclZhbHVlR2V0dGVyID1cbiAgICAkLm5vcm1hbGl6ZWRQaHlzaWNzUGFyYW1ldGVyVmFsdWVHZXR0ZXI7XG4gIGV4cG9ydCB0eXBlIHBoeXNpY3NTY2FsZUdldHRlciA9ICQucGh5c2ljc1NjYWxlR2V0dGVyO1xuICBleHBvcnQgdHlwZSBwaHlzaWNzVmFsdWVHZXR0ZXIgPSAkLnBoeXNpY3NWYWx1ZUdldHRlcjtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IEN1YmlzbUlkSGFuZGxlIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xuaW1wb3J0IHsgQ3ViaXNtRnJhbWV3b3JrIH0gZnJvbSAnLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcbmltcG9ydCB7IEN1YmlzbVZlY3RvcjIgfSBmcm9tICcuLi9tYXRoL2N1YmlzbXZlY3RvcjInO1xuaW1wb3J0IHsgQ3ViaXNtSnNvbiB9IGZyb20gJy4uL3V0aWxzL2N1YmlzbWpzb24nO1xuXG4vLyBKU09OIGtleXNcbmNvbnN0IFBvc2l0aW9uID0gJ1Bvc2l0aW9uJztcbmNvbnN0IFggPSAnWCc7XG5jb25zdCBZID0gJ1knO1xuY29uc3QgQW5nbGUgPSAnQW5nbGUnO1xuY29uc3QgVHlwZSA9ICdUeXBlJztcbmNvbnN0IElkID0gJ0lkJztcblxuLy8gTWV0YVxuY29uc3QgTWV0YSA9ICdNZXRhJztcbmNvbnN0IEVmZmVjdGl2ZUZvcmNlcyA9ICdFZmZlY3RpdmVGb3JjZXMnO1xuY29uc3QgVG90YWxJbnB1dENvdW50ID0gJ1RvdGFsSW5wdXRDb3VudCc7XG5jb25zdCBUb3RhbE91dHB1dENvdW50ID0gJ1RvdGFsT3V0cHV0Q291bnQnO1xuY29uc3QgUGh5c2ljc1NldHRpbmdDb3VudCA9ICdQaHlzaWNzU2V0dGluZ0NvdW50JztcbmNvbnN0IEdyYXZpdHkgPSAnR3Jhdml0eSc7XG5jb25zdCBXaW5kID0gJ1dpbmQnO1xuY29uc3QgVmVydGV4Q291bnQgPSAnVmVydGV4Q291bnQnO1xuY29uc3QgRnBzID0gJ0Zwcyc7XG5cbi8vIFBoeXNpY3NTZXR0aW5nc1xuY29uc3QgUGh5c2ljc1NldHRpbmdzID0gJ1BoeXNpY3NTZXR0aW5ncyc7XG5jb25zdCBOb3JtYWxpemF0aW9uID0gJ05vcm1hbGl6YXRpb24nO1xuY29uc3QgTWluaW11bSA9ICdNaW5pbXVtJztcbmNvbnN0IE1heGltdW0gPSAnTWF4aW11bSc7XG5jb25zdCBEZWZhdWx0ID0gJ0RlZmF1bHQnO1xuY29uc3QgUmVmbGVjdCA9ICdSZWZsZWN0JztcbmNvbnN0IFdlaWdodCA9ICdXZWlnaHQnO1xuXG4vLyBJbnB1dFxuY29uc3QgSW5wdXQgPSAnSW5wdXQnO1xuY29uc3QgU291cmNlID0gJ1NvdXJjZSc7XG5cbi8vIE91dHB1dFxuY29uc3QgT3V0cHV0ID0gJ091dHB1dCc7XG5jb25zdCBTY2FsZSA9ICdTY2FsZSc7XG5jb25zdCBWZXJ0ZXhJbmRleCA9ICdWZXJ0ZXhJbmRleCc7XG5jb25zdCBEZXN0aW5hdGlvbiA9ICdEZXN0aW5hdGlvbic7XG5cbi8vIFBhcnRpY2xlXG5jb25zdCBWZXJ0aWNlcyA9ICdWZXJ0aWNlcyc7XG5jb25zdCBNb2JpbGl0eSA9ICdNb2JpbGl0eSc7XG5jb25zdCBEZWxheSA9ICdEZWxheSc7XG5jb25zdCBSYWRpdXMgPSAnUmFkaXVzJztcbmNvbnN0IEFjY2VsZXJhdGlvbiA9ICdBY2NlbGVyYXRpb24nO1xuXG4vKipcbiAqIHBoeXNpY3MzLmpzb27jga7jgrPjg7Pjg4bjg4rjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbVBoeXNpY3NKc29uIHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKiBAcGFyYW0gYnVmZmVyIHBoeXNpY3MzLmpzb27jgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcbiAgICogQHBhcmFtIHNpemUg44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fanNvbiA9IEN1YmlzbUpzb24uY3JlYXRlKGJ1ZmZlciwgc2l6ZSk7XG4gIH1cblxuICAvKipcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICBDdWJpc21Kc29uLmRlbGV0ZSh0aGlzLl9qc29uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDph43lipvjga7lj5blvpdcbiAgICogQHJldHVybiDph43liptcbiAgICovXG4gIHB1YmxpYyBnZXRHcmF2aXR5KCk6IEN1YmlzbVZlY3RvcjIge1xuICAgIGNvbnN0IHJldDogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xuICAgIHJldC54ID0gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEVmZmVjdGl2ZUZvcmNlcylcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEdyYXZpdHkpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhYKVxuICAgICAgLnRvRmxvYXQoKTtcbiAgICByZXQueSA9IHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhFZmZlY3RpdmVGb3JjZXMpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhHcmF2aXR5KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoWSlcbiAgICAgIC50b0Zsb2F0KCk7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiDpoqjjga7lj5blvpdcbiAgICogQHJldHVybiDpoqhcbiAgICovXG4gIHB1YmxpYyBnZXRXaW5kKCk6IEN1YmlzbVZlY3RvcjIge1xuICAgIGNvbnN0IHJldDogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xuICAgIHJldC54ID0gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEVmZmVjdGl2ZUZvcmNlcylcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFdpbmQpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhYKVxuICAgICAgLnRvRmxvYXQoKTtcbiAgICByZXQueSA9IHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhFZmZlY3RpdmVGb3JjZXMpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhXaW5kKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoWSlcbiAgICAgIC50b0Zsb2F0KCk7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiDniannkIbmvJTnrpfoqK3lrppGUFPjga7lj5blvpdcbiAgICogQHJldHVybiDniannkIbmvJTnrpfoqK3lrppGUFNcbiAgICovXG4gIHB1YmxpYyBnZXRGcHMoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZwcylcbiAgICAgIC50b0Zsb2F0KDAuMCk7XG4gIH1cblxuICAvKipcbiAgICog54mp55CG5bqX44Gu566h55CG44Gu5YCL5pWw44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g54mp55CG5bqX44Gu566h55CG44Gu5YCL5pWwXG4gICAqL1xuICBwdWJsaWMgZ2V0U3ViUmlnQ291bnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5nQ291bnQpXG4gICAgICAudG9JbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlhaXlipvjga7nt4/lkIjoqIjjga7lj5blvpdcbiAgICogQHJldHVybiDlhaXlipvjga7nt4/lkIjoqIhcbiAgICovXG4gIHB1YmxpYyBnZXRUb3RhbElucHV0Q291bnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFRvdGFsSW5wdXRDb3VudClcbiAgICAgIC50b0ludCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWHuuWKm+OBrue3j+WQiOioiOOBruWPluW+l1xuICAgKiBAcmV0dXJuIOWHuuWKm+OBrue3j+WQiOioiFxuICAgKi9cbiAgcHVibGljIGdldFRvdGFsT3V0cHV0Q291bnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFRvdGFsT3V0cHV0Q291bnQpXG4gICAgICAudG9JbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDniannkIbngrnjga7lgIvmlbDjga7lj5blvpdcbiAgICogQHJldHVybiDniannkIbngrnjga7lgIvmlbBcbiAgICovXG4gIHB1YmxpYyBnZXRWZXJ0ZXhDb3VudCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVmVydGV4Q291bnQpXG4gICAgICAudG9JbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmraPopo/ljJbjgZXjgozjgZ/kvY3nva7jga7mnIDlsI/lgKTjga7lj5blvpdcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g5q2j6KaP5YyW44GV44KM44Gf5L2N572u44Gu5pyA5bCP5YCkXG4gICAqL1xuICBwdWJsaWMgZ2V0Tm9ybWFsaXphdGlvblBvc2l0aW9uTWluaW11bVZhbHVlKFxuICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhOb3JtYWxpemF0aW9uKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUG9zaXRpb24pXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNaW5pbXVtKVxuICAgICAgLnRvRmxvYXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmraPopo/ljJbjgZXjgozjgZ/kvY3nva7jga7mnIDlpKflgKTjga7lj5blvpdcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g5q2j6KaP5YyW44GV44KM44Gf5L2N572u44Gu5pyA5aSn5YCkXG4gICAqL1xuICBwdWJsaWMgZ2V0Tm9ybWFsaXphdGlvblBvc2l0aW9uTWF4aW11bVZhbHVlKFxuICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhOb3JtYWxpemF0aW9uKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUG9zaXRpb24pXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNYXhpbXVtKVxuICAgICAgLnRvRmxvYXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmraPopo/ljJbjgZXjgozjgZ/kvY3nva7jga7jg4fjg5Xjgqnjg6vjg4jlgKTjga7lj5blvpdcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g5q2j6KaP5YyW44GV44KM44Gf5L2N572u44Gu44OH44OV44Kp44Or44OI5YCkXG4gICAqL1xuICBwdWJsaWMgZ2V0Tm9ybWFsaXphdGlvblBvc2l0aW9uRGVmYXVsdFZhbHVlKFxuICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhOb3JtYWxpemF0aW9uKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUG9zaXRpb24pXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhEZWZhdWx0KVxuICAgICAgLnRvRmxvYXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmraPopo/ljJbjgZXjgozjgZ/op5Lluqbjga7mnIDlsI/lgKTjga7lj5blvpdcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g5q2j6KaP5YyW44GV44KM44Gf6KeS5bqm44Gu5pyA5bCP5YCkXG4gICAqL1xuICBwdWJsaWMgZ2V0Tm9ybWFsaXphdGlvbkFuZ2xlTWluaW11bVZhbHVlKFxuICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhOb3JtYWxpemF0aW9uKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoQW5nbGUpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNaW5pbXVtKVxuICAgICAgLnRvRmxvYXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmraPopo/ljJbjgZXjgozjgZ/op5Lluqbjga7mnIDlpKflgKTjga7lj5blvpdcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXhcbiAgICogQHJldHVybiDmraPopo/ljJbjgZXjgozjgZ/op5Lluqbjga7mnIDlpKflgKRcbiAgICovXG4gIHB1YmxpYyBnZXROb3JtYWxpemF0aW9uQW5nbGVNYXhpbXVtVmFsdWUoXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyXG4gICk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE5vcm1hbGl6YXRpb24pXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhBbmdsZSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1heGltdW0pXG4gICAgICAudG9GbG9hdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOato+imj+WMluOBleOCjOOBn+inkuW6puOBruODh+ODleOCqeODq+ODiOWApOOBruWPluW+l1xuICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiDmraPopo/ljJbjgZXjgozjgZ/op5Lluqbjga7jg4fjg5Xjgqnjg6vjg4jlgKRcbiAgICovXG4gIHB1YmxpYyBnZXROb3JtYWxpemF0aW9uQW5nbGVEZWZhdWx0VmFsdWUoXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyXG4gICk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE5vcm1hbGl6YXRpb24pXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhBbmdsZSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKERlZmF1bHQpXG4gICAgICAudG9GbG9hdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWFpeWKm+OBruWAi+aVsOOBruWPluW+l1xuICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiDlhaXlipvjga7lgIvmlbBcbiAgICovXG4gIHB1YmxpYyBnZXRJbnB1dENvdW50KHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKElucHV0KVxuICAgICAgLmdldFZlY3RvcigpXG4gICAgICAuZ2V0U2l6ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWFpeWKm+OBrumHjeOBv+OBruWPluW+l1xuICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIGlucHV0SW5kZXgg5YWl5Yqb44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g5YWl5Yqb44Gu6YeN44G/XG4gICAqL1xuICBwdWJsaWMgZ2V0SW5wdXRXZWlnaHQoXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgIGlucHV0SW5kZXg6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhJbnB1dClcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5wdXRJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFdlaWdodClcbiAgICAgIC50b0Zsb2F0KCk7XG4gIH1cblxuICAvKipcbiAgICog5YWl5Yqb44Gu5Y+N6Lui44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcGFyYW0gaW5wdXRJbmRleCDlhaXlipvjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiDlhaXlipvjga7lj43ou6JcbiAgICovXG4gIHB1YmxpYyBnZXRJbnB1dFJlZmxlY3QoXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgIGlucHV0SW5kZXg6IG51bWJlclxuICApOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoSW5wdXQpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGlucHV0SW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhSZWZsZWN0KVxuICAgICAgLnRvQm9vbGVhbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWFpeWKm+OBrueorumhnuOBruWPluW+l1xuICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIGlucHV0SW5kZXgg5YWl5Yqb44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g5YWl5Yqb44Gu56iu6aGeXG4gICAqL1xuICBwdWJsaWMgZ2V0SW5wdXRUeXBlKHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlciwgaW5wdXRJbmRleDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoSW5wdXQpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGlucHV0SW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhUeXBlKVxuICAgICAgLmdldFJhd1N0cmluZygpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWFpeWKm+WFg+OBrklE44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcGFyYW0gaW5wdXRJbmRleCDlhaXlipvjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiDlhaXlipvlhYPjga5JRFxuICAgKi9cbiAgcHVibGljIGdldElucHV0U291cmNlSWQoXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgIGlucHV0SW5kZXg6IG51bWJlclxuICApOiBDdWJpc21JZEhhbmRsZSB7XG4gICAgcmV0dXJuIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgIHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoSW5wdXQpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5wdXRJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoU291cmNlKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhJZClcbiAgICAgICAgLmdldFJhd1N0cmluZygpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlh7rlipvjga7lgIvmlbDjga7lj5blvpdcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g5Ye65Yqb44Gu5YCL5pWwXG4gICAqL1xuICBwdWJsaWMgZ2V0T3V0cHV0Q291bnQocGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoT3V0cHV0KVxuICAgICAgLmdldFZlY3RvcigpXG4gICAgICAuZ2V0U2l6ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWHuuWKm+OBrueJqeeQhueCueOBruOCpOODs+ODh+ODg+OCr+OCueOBruWPluW+l1xuICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIG91dHB1dEluZGV4IOWHuuWKm+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOWHuuWKm+OBrueJqeeQhueCueOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKi9cbiAgcHVibGljIGdldE91dHB1dFZlcnRleEluZGV4KFxuICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcixcbiAgICBvdXRwdXRJbmRleDogbnVtYmVyXG4gICk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE91dHB1dClcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgob3V0cHV0SW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhWZXJ0ZXhJbmRleClcbiAgICAgIC50b0ludCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWHuuWKm+OBruinkuW6puOBruOCueOCseODvOODq+OCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIG91dHB1dEluZGV4IOWHuuWKm+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOWHuuWKm+OBruinkuW6puOBruOCueOCseODvOODq1xuICAgKi9cbiAgcHVibGljIGdldE91dHB1dEFuZ2xlU2NhbGUoXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgIG91dHB1dEluZGV4OiBudW1iZXJcbiAgKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoT3V0cHV0KVxuICAgICAgLmdldFZhbHVlQnlJbmRleChvdXRwdXRJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFNjYWxlKVxuICAgICAgLnRvRmxvYXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlh7rlipvjga7ph43jgb/jga7lj5blvpdcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEBwYXJhbSBvdXRwdXRJbmRleCDlh7rlipvjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiDlh7rlipvjga7ph43jgb9cbiAgICovXG4gIHB1YmxpYyBnZXRPdXRwdXRXZWlnaHQoXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgIG91dHB1dEluZGV4OiBudW1iZXJcbiAgKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoT3V0cHV0KVxuICAgICAgLmdldFZhbHVlQnlJbmRleChvdXRwdXRJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFdlaWdodClcbiAgICAgIC50b0Zsb2F0KCk7XG4gIH1cblxuICAvKipcbiAgICog5Ye65Yqb5YWI44GuSUTjga7lj5blvpdcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEBwYXJhbSBvdXRwdXRJbmRleCDlh7rlipvjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiDlh7rlipvlhYjjga5JRFxuICAgKi9cbiAgcHVibGljIGdldE91dHB1dERlc3RpbmF0aW9uSWQoXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgIG91dHB1dEluZGV4OiBudW1iZXJcbiAgKTogQ3ViaXNtSWRIYW5kbGUge1xuICAgIHJldHVybiBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE91dHB1dClcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChvdXRwdXRJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRGVzdGluYXRpb24pXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKElkKVxuICAgICAgICAuZ2V0UmF3U3RyaW5nKClcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOWHuuWKm+OBrueorumhnuOBruWPluW+l1xuICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIG91dHB1dEluZGV4IOWHuuWKm+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOWHuuWKm+OBrueorumhnlxuICAgKi9cbiAgcHVibGljIGdldE91dHB1dFR5cGUoXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgIG91dHB1dEluZGV4OiBudW1iZXJcbiAgKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoT3V0cHV0KVxuICAgICAgLmdldFZhbHVlQnlJbmRleChvdXRwdXRJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFR5cGUpXG4gICAgICAuZ2V0UmF3U3RyaW5nKCk7XG4gIH1cblxuICAvKipcbiAgICog5Ye65Yqb44Gu5Y+N6Lui44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcGFyYW0gb3V0cHV0SW5kZXgg5Ye65Yqb44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g5Ye65Yqb44Gu5Y+N6LuiXG4gICAqL1xuICBwdWJsaWMgZ2V0T3V0cHV0UmVmbGVjdChcbiAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIsXG4gICAgb3V0cHV0SW5kZXg6IG51bWJlclxuICApOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoT3V0cHV0KVxuICAgICAgLmdldFZhbHVlQnlJbmRleChvdXRwdXRJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFJlZmxlY3QpXG4gICAgICAudG9Cb29sZWFuKCk7XG4gIH1cblxuICAvKipcbiAgICog54mp55CG54K544Gu5YCL5pWw44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+eUt+ioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOeJqeeQhueCueOBruWAi+aVsFxuICAgKi9cbiAgcHVibGljIGdldFBhcnRpY2xlQ291bnQocGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVmVydGljZXMpXG4gICAgICAuZ2V0VmVjdG9yKClcbiAgICAgIC5nZXRTaXplKCk7XG4gIH1cblxuICAvKipcbiAgICog54mp55CG54K544Gu5YuV44GN44KE44GZ44GV44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcGFyYW0gdmVydGV4SW5kZXgg54mp55CG54K544Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g54mp55CG54K544Gu5YuV44GN44KE44GZ44GVXG4gICAqL1xuICBwdWJsaWMgZ2V0UGFydGljbGVNb2JpbGl0eShcbiAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIsXG4gICAgdmVydGV4SW5kZXg6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhWZXJ0aWNlcylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgodmVydGV4SW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNb2JpbGl0eSlcbiAgICAgIC50b0Zsb2F0KCk7XG4gIH1cblxuICAvKipcbiAgICog54mp55CG54K544Gu6YGF44KM44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcGFyYW0gdmVydGV4SW5kZXgg54mp55CG54K544Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g54mp55CG54K544Gu6YGF44KMXG4gICAqL1xuICBwdWJsaWMgZ2V0UGFydGljbGVEZWxheShcbiAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIsXG4gICAgdmVydGV4SW5kZXg6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhWZXJ0aWNlcylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgodmVydGV4SW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhEZWxheSlcbiAgICAgIC50b0Zsb2F0KCk7XG4gIH1cblxuICAvKipcbiAgICog54mp55CG54K544Gu5Yqg6YCf5bqm44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumlxuICAgKiBAcGFyYW0gdmVydGV4SW5kZXgg54mp55CG54K544Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g54mp55CG54K544Gu5Yqg6YCf5bqmXG4gICAqL1xuICBwdWJsaWMgZ2V0UGFydGljbGVBY2NlbGVyYXRpb24oXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgIHZlcnRleEluZGV4OiBudW1iZXJcbiAgKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVmVydGljZXMpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHZlcnRleEluZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoQWNjZWxlcmF0aW9uKVxuICAgICAgLnRvRmxvYXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDniannkIbngrnjga7ot53pm6Ljga7lj5blvpdcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEBwYXJhbSB2ZXJ0ZXhJbmRleCDniannkIbngrnjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiDniannkIbngrnjga7ot53pm6JcbiAgICovXG4gIHB1YmxpYyBnZXRQYXJ0aWNsZVJhZGl1cyhcbiAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIsXG4gICAgdmVydGV4SW5kZXg6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhWZXJ0aWNlcylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgodmVydGV4SW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhSYWRpdXMpXG4gICAgICAudG9GbG9hdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOeJqeeQhueCueOBruS9jee9ruOBruWPluW+l1xuICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIHZlcnRleEluZGUg54mp55CG54K544Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g54mp55CG54K544Gu5L2N572uXG4gICAqL1xuICBwdWJsaWMgZ2V0UGFydGljbGVQb3NpdGlvbihcbiAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIsXG4gICAgdmVydGV4SW5kZXg6IG51bWJlclxuICApOiBDdWJpc21WZWN0b3IyIHtcbiAgICBjb25zdCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcbiAgICByZXQueCA9IHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFZlcnRpY2VzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleCh2ZXJ0ZXhJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBvc2l0aW9uKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoWClcbiAgICAgIC50b0Zsb2F0KCk7XG4gICAgcmV0LnkgPSB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhWZXJ0aWNlcylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgodmVydGV4SW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQb3NpdGlvbilcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFkpXG4gICAgICAudG9GbG9hdCgpO1xuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICBfanNvbjogQ3ViaXNtSnNvbjsgLy8gcGh5c2ljczMuanNvbuODh+ODvOOCv1xufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21waHlzaWNzanNvbic7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtUGh5c2ljc0pzb24gPSAkLkN1YmlzbVBoeXNpY3NKc29uO1xuICBleHBvcnQgdHlwZSBDdWJpc21QaHlzaWNzSnNvbiA9ICQuQ3ViaXNtUGh5c2ljc0pzb247XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21NYXRyaXg0NCB9IGZyb20gJy4uL21hdGgvY3ViaXNtbWF0cml4NDQnO1xuaW1wb3J0IHsgQ3ViaXNtTW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XG5cbi8qKlxuICog44Oi44OH44Or5o+P55S744KS5Yem55CG44GZ44KL44Os44Oz44OA44OpXG4gKlxuICog44K144OW44Kv44Op44K544Gr55Kw5aKD5L6d5a2Y44Gu5o+P55S75ZG95Luk44KS6KiY6L+w44GZ44KL44CCXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDdWJpc21SZW5kZXJlciB7XG4gIC8qKlxuICAgKiDjg6zjg7Pjg4Djg6njga7jgqTjg7Pjgrnjgr/jg7PjgrnjgpLnlJ/miJDjgZfjgablj5blvpfjgZnjgotcbiAgICpcbiAgICogQHJldHVybiDjg6zjg7Pjg4Djg6njga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCk6IEN1YmlzbVJlbmRlcmVyIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6zjg7Pjg4Djg6njga7jgqTjg7Pjgrnjgr/jg7PjgrnjgpLop6PmlL7jgZnjgotcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZGVsZXRlKHJlbmRlcmVyOiBDdWJpc21SZW5kZXJlcik6IHZvaWQge1xuICAgIHJlbmRlcmVyID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6zjg7Pjg4Djg6njga7liJ3mnJ/ljJblh6bnkIbjgpLlrp/ooYzjgZnjgotcbiAgICog5byV5pWw44Gr5rih44GX44Gf44Oi44OH44Or44GL44KJ44Os44Oz44OA44Op44Gu5Yid5pyf5YyW5Yem55CG44Gr5b+F6KaB44Gq5oOF5aCx44KS5Y+W44KK5Ye644GZ44GT44Go44GM44Gn44GN44KLXG4gICAqIEBwYXJhbSBtb2RlbCDjg6Ljg4fjg6vjga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHB1YmxpYyBpbml0aWFsaXplKG1vZGVsOiBDdWJpc21Nb2RlbCk6IHZvaWQge1xuICAgIHRoaXMuX21vZGVsID0gbW9kZWw7XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44KS5o+P55S744GZ44KLXG4gICAqL1xuICBwdWJsaWMgZHJhd01vZGVsKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmdldE1vZGVsKCkgPT0gbnVsbCkgcmV0dXJuO1xuXG4gICAgdGhpcy5kb0RyYXdNb2RlbCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1vZGVsLVZpZXctUHJvamVjdGlvbiDooYzliJfjgpLjgrvjg4Pjg4jjgZnjgotcbiAgICog6YWN5YiX44Gv6KSH6KO944GV44KM44KL44Gu44Gn44CB5YWD44Gu6YWN5YiX44Gv5aSW44Gn56C05qOE44GX44Gm6Imv44GEXG4gICAqIEBwYXJhbSBtYXRyaXg0NCBNb2RlbC1WaWV3LVByb2plY3Rpb24g6KGM5YiXXG4gICAqL1xuICBwdWJsaWMgc2V0TXZwTWF0cml4KG1hdHJpeDQ0OiBDdWJpc21NYXRyaXg0NCk6IHZvaWQge1xuICAgIHRoaXMuX212cE1hdHJpeDR4NC5zZXRNYXRyaXgobWF0cml4NDQuZ2V0QXJyYXkoKSk7XG4gIH1cblxuICAvKipcbiAgICogTW9kZWwtVmlldy1Qcm9qZWN0aW9uIOihjOWIl+OCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIE1vZGVsLVZpZXctUHJvamVjdGlvbiDooYzliJdcbiAgICovXG4gIHB1YmxpYyBnZXRNdnBNYXRyaXgoKTogQ3ViaXNtTWF0cml4NDQge1xuICAgIHJldHVybiB0aGlzLl9tdnBNYXRyaXg0eDQ7XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44Gu6Imy44KS44K744OD44OI44GZ44KLXG4gICAqIOWQhOiJsjAuMH4xLjDjga7plpPjgafmjIflrprjgZnjgovvvIgxLjDjgYzmqJnmupbjga7nirbmhYvvvIlcbiAgICogQHBhcmFtIHJlZCDotaTjg4Hjg6Pjg7Pjg43jg6vjga7lgKRcbiAgICogQHBhcmFtIGdyZWVuIOe3keODgeODo+ODs+ODjeODq+OBruWApFxuICAgKiBAcGFyYW0gYmx1ZSDpnZLjg4Hjg6Pjg7Pjg43jg6vjga7lgKRcbiAgICogQHBhcmFtIGFscGhhIM6x44OB44Oj44Oz44ON44Or44Gu5YCkXG4gICAqL1xuICBwdWJsaWMgc2V0TW9kZWxDb2xvcihcbiAgICByZWQ6IG51bWJlcixcbiAgICBncmVlbjogbnVtYmVyLFxuICAgIGJsdWU6IG51bWJlcixcbiAgICBhbHBoYTogbnVtYmVyXG4gICk6IHZvaWQge1xuICAgIGlmIChyZWQgPCAwLjApIHtcbiAgICAgIHJlZCA9IDAuMDtcbiAgICB9IGVsc2UgaWYgKHJlZCA+IDEuMCkge1xuICAgICAgcmVkID0gMS4wO1xuICAgIH1cblxuICAgIGlmIChncmVlbiA8IDAuMCkge1xuICAgICAgZ3JlZW4gPSAwLjA7XG4gICAgfSBlbHNlIGlmIChncmVlbiA+IDEuMCkge1xuICAgICAgZ3JlZW4gPSAxLjA7XG4gICAgfVxuXG4gICAgaWYgKGJsdWUgPCAwLjApIHtcbiAgICAgIGJsdWUgPSAwLjA7XG4gICAgfSBlbHNlIGlmIChibHVlID4gMS4wKSB7XG4gICAgICBibHVlID0gMS4wO1xuICAgIH1cblxuICAgIGlmIChhbHBoYSA8IDAuMCkge1xuICAgICAgYWxwaGEgPSAwLjA7XG4gICAgfSBlbHNlIGlmIChhbHBoYSA+IDEuMCkge1xuICAgICAgYWxwaGEgPSAxLjA7XG4gICAgfVxuXG4gICAgdGhpcy5fbW9kZWxDb2xvci5SID0gcmVkO1xuICAgIHRoaXMuX21vZGVsQ29sb3IuRyA9IGdyZWVuO1xuICAgIHRoaXMuX21vZGVsQ29sb3IuQiA9IGJsdWU7XG4gICAgdGhpcy5fbW9kZWxDb2xvci5BID0gYWxwaGE7XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44Gu6Imy44KS5Y+W5b6X44GZ44KLXG4gICAqIOWQhOiJsjAuMH4xLjDjga7plpPjgafmjIflrprjgZnjgosoMS4w44GM5qiZ5rqW44Gu54q25oWLKVxuICAgKlxuICAgKiBAcmV0dXJuIFJHQkHjga7jgqvjg6njg7zmg4XloLFcbiAgICovXG4gIHB1YmxpYyBnZXRNb2RlbENvbG9yKCk6IEN1YmlzbVRleHR1cmVDb2xvciB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5fbW9kZWxDb2xvcikpO1xuICB9XG5cbiAgLyoqXG4gICAqIOS5l+eul+a4iOOBv86x44Gu5pyJ5Yq544O754Sh5Yq544KS44K744OD44OI44GZ44KLXG4gICAqIOacieWKueOBq+OBmeOCi+OBquOCiXRydWXjgIHnhKHlirnjgavjgZnjgovjgarjgolmYWxzZeOCkuOCu+ODg+ODiOOBmeOCi1xuICAgKi9cbiAgcHVibGljIHNldElzUHJlbXVsdGlwbGllZEFscGhhKGVuYWJsZTogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuX2lzUHJlbXVsdGlwbGllZEFscGhhID0gZW5hYmxlO1xuICB9XG5cbiAgLyoqXG4gICAqIOS5l+eul+a4iOOBv86x44Gu5pyJ5Yq544O754Sh5Yq544KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4gdHJ1ZSDkuZfnrpfmuIjjgb/jga7OseacieWKuVxuICAgKiBAcmV0dXJuIGZhbHNlIOS5l+eul+a4iOOBv+OBrs6x54Sh5Yq5XG4gICAqL1xuICBwdWJsaWMgaXNQcmVtdWx0aXBsaWVkQWxwaGEoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2lzUHJlbXVsdGlwbGllZEFscGhhO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCq+ODquODs+OCsO+8iOeJh+mdouaPj+eUu++8ieOBruacieWKueODu+eEoeWKueOCkuOCu+ODg+ODiOOBmeOCi+OAglxuICAgKiDmnInlirnjgavjgZnjgovjgarjgol0cnVl44CB54Sh5Yq544Gr44GZ44KL44Gq44KJZmFsc2XjgpLjgrvjg4Pjg4jjgZnjgotcbiAgICovXG4gIHB1YmxpYyBzZXRJc0N1bGxpbmcoY3VsbGluZzogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuX2lzQ3VsbGluZyA9IGN1bGxpbmc7XG4gIH1cblxuICAvKipcbiAgICog44Kr44Oq44Oz44Kw77yI54mH6Z2i5o+P55S777yJ44Gu5pyJ5Yq544O754Sh5Yq544KS5Y+W5b6X44GZ44KL44CCXG4gICAqIEByZXR1cm4gdHJ1ZSDjgqvjg6rjg7PjgrDmnInlirlcbiAgICogQHJldHVybiBmYWxzZSDjgqvjg6rjg7PjgrDnhKHlirlcbiAgICovXG4gIHB1YmxpYyBpc0N1bGxpbmcoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2lzQ3VsbGluZztcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4bjgq/jgrnjg4Hjg6Pjga7nlbDmlrnmgKfjg5XjgqPjg6vjgr/jg6rjg7PjgrDjga7jg5Hjg6njg6Hjg7zjgr/jgpLjgrvjg4Pjg4jjgZnjgotcbiAgICog44OR44Op44Oh44O844K/5YCk44Gu5b2x6Z+/5bqm44Gv44Os44Oz44OA44Op44Gu5a6f6KOF44Gr5L6d5a2Y44GZ44KLXG4gICAqIEBwYXJhbSBuIOODkeODqeODoeODvOOCv+OBruWApFxuICAgKi9cbiAgcHVibGljIHNldEFuaXNvdHJvcHkobjogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fYW5pc290cm9weSA9IG47XG4gIH1cblxuICAvKipcbiAgICog44OG44Kv44K544OB44Oj44Gu55Ww5pa55oCn44OV44Kj44Or44K/44Oq44Oz44Kw44Gu44OR44Op44Oh44O844K/44KS44K744OD44OI44GZ44KLXG4gICAqIEByZXR1cm4g55Ww5pa55oCn44OV44Kj44Or44K/44Oq44Oz44Kw44Gu44OR44Op44Oh44O844K/XG4gICAqL1xuICBwdWJsaWMgZ2V0QW5pc290cm9weSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9hbmlzb3Ryb3B5O1xuICB9XG5cbiAgLyoqXG4gICAqIOODrOODs+ODgOODquODs+OCsOOBmeOCi+ODouODh+ODq+OCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOODrOODs+ODgOODquODs+OCsOOBmeOCi+ODouODh+ODq1xuICAgKi9cbiAgcHVibGljIGdldE1vZGVsKCk6IEN1YmlzbU1vZGVsIHtcbiAgICByZXR1cm4gdGhpcy5fbW9kZWw7XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5faXNDdWxsaW5nID0gZmFsc2U7XG4gICAgdGhpcy5faXNQcmVtdWx0aXBsaWVkQWxwaGEgPSBmYWxzZTtcbiAgICB0aGlzLl9hbmlzb3Ryb3B5ID0gMC4wO1xuICAgIHRoaXMuX21vZGVsID0gbnVsbDtcbiAgICB0aGlzLl9tb2RlbENvbG9yID0gbmV3IEN1YmlzbVRleHR1cmVDb2xvcigpO1xuXG4gICAgLy8g5Y2Y5L2N6KGM5YiX44Gr5Yid5pyf5YyWXG4gICAgdGhpcy5fbXZwTWF0cml4NHg0ID0gbmV3IEN1YmlzbU1hdHJpeDQ0KCk7XG4gICAgdGhpcy5fbXZwTWF0cml4NHg0LmxvYWRJZGVudGl0eSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+aPj+eUu+OBruWun+ijhVxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGRvRHJhd01vZGVsKCk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIOaPj+eUu+OCquODluOCuOOCp+OCr+ODiO+8iOOCouODvOODiOODoeODg+OCt+ODpe+8ieOCkuaPj+eUu+OBmeOCi1xuICAgKiDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6Xjgajjg4bjgq/jgrnjg4Hjg6Pnlarlj7fjgpLjgrvjg4Pjg4jjgafmuKHjgZnjgIJcbiAgICogQHBhcmFtIHRleHR1cmVObyDmj4/nlLvjgZnjgovjg4bjgq/jgrnjg4Hjg6Pnlarlj7dcbiAgICogQHBhcmFtIGluZGV4Q291bnQg5o+P55S744Kq44OW44K444Kn44Kv44OI44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAqIEBwYXJhbSB2ZXJ0ZXhDb3VudCDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6Xjga7poILngrnmlbBcbiAgICogQHBhcmFtIGluZGV4QXJyYXkg44Od44Oq44K044Oz44Oh44OD44K344Ol6aCC54K544Gu44Kk44Oz44OH44OD44Kv44K56YWN5YiXXG4gICAqIEBwYXJhbSB2ZXJ0ZXhBcnJheSDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6Xjga7poILngrnphY3liJdcbiAgICogQHBhcmFtIHV2QXJyYXkgdXbphY3liJdcbiAgICogQHBhcmFtIG9wYWNpdHkg5LiN6YCP5piO5bqmXG4gICAqIEBwYXJhbSBjb2xvckJsZW5kTW9kZSDjgqvjg6njg7zjg5bjg6zjg7Pjg4fjgqPjg7PjgrDjga7jgr/jgqTjg5dcbiAgICogQHBhcmFtIGludmVydGVkTWFzayDjg57jgrnjgq/kvb/nlKjmmYLjga7jg57jgrnjgq/jga7lj43ou6Lkvb/nlKhcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBkcmF3TWVzaChcbiAgICB0ZXh0dXJlTm86IG51bWJlcixcbiAgICBpbmRleENvdW50OiBudW1iZXIsXG4gICAgdmVydGV4Q291bnQ6IG51bWJlcixcbiAgICBpbmRleEFycmF5OiBVaW50MTZBcnJheSxcbiAgICB2ZXJ0ZXhBcnJheTogRmxvYXQzMkFycmF5LFxuICAgIHV2QXJyYXk6IEZsb2F0MzJBcnJheSxcbiAgICBtdWx0aXBseUNvbG9yOiBDdWJpc21UZXh0dXJlQ29sb3IsXG4gICAgc2NyZWVuQ29sb3I6IEN1YmlzbVRleHR1cmVDb2xvcixcbiAgICBvcGFjaXR5OiBudW1iZXIsXG4gICAgY29sb3JCbGVuZE1vZGU6IEN1YmlzbUJsZW5kTW9kZSxcbiAgICBpbnZlcnRlZE1hc2s6IGJvb2xlYW5cbiAgKTogdm9pZDtcblxuICAvKipcbiAgICog44Os44Oz44OA44Op44GM5L+d5oyB44GZ44KL6Z2Z55qE44Gq44Oq44K944O844K544KS6ZaL5pS+44GZ44KLXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHN0YXRpY1JlbGVhc2U6IGFueTtcblxuICBwcm90ZWN0ZWQgX212cE1hdHJpeDR4NDogQ3ViaXNtTWF0cml4NDQ7IC8vIE1vZGVsLVZpZXctUHJvamVjdGlvbiDooYzliJdcbiAgcHJvdGVjdGVkIF9tb2RlbENvbG9yOiBDdWJpc21UZXh0dXJlQ29sb3I7IC8vIOODouODh+ODq+iHquS9k+OBruOCq+ODqeODvO+8iFJHQkHvvIlcbiAgcHJvdGVjdGVkIF9pc0N1bGxpbmc6IGJvb2xlYW47IC8vIOOCq+ODquODs+OCsOOBjOacieWKueOBquOCiXRydWVcbiAgcHJvdGVjdGVkIF9pc1ByZW11bHRpcGxpZWRBbHBoYTogYm9vbGVhbjsgLy8g5LmX566X5riI44G/zrHjgarjgol0cnVlXG4gIHByb3RlY3RlZCBfYW5pc290cm9weTogYW55OyAvLyDjg4bjgq/jgrnjg4Hjg6Pjga7nlbDmlrnmgKfjg5XjgqPjg6vjgr/jg6rjg7PjgrDjga7jg5Hjg6njg6Hjg7zjgr9cbiAgcHJvdGVjdGVkIF9tb2RlbDogQ3ViaXNtTW9kZWw7IC8vIOODrOODs+ODgOODquODs+OCsOWvvuixoeOBruODouODh+ODq1xufVxuXG5leHBvcnQgZW51bSBDdWJpc21CbGVuZE1vZGUge1xuICBDdWJpc21CbGVuZE1vZGVfTm9ybWFsID0gMCwgLy8g6YCa5bi4XG4gIEN1YmlzbUJsZW5kTW9kZV9BZGRpdGl2ZSA9IDEsIC8vIOWKoOeul1xuICBDdWJpc21CbGVuZE1vZGVfTXVsdGlwbGljYXRpdmUgPSAyLCAvLyDkuZfnrpdcbn1cblxuLyoqXG4gKiDjg4bjgq/jgrnjg4Hjg6Pjga7oibLjgpJSR0JB44Gn5omx44GG44Gf44KB44Gu44Kv44Op44K5XG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21UZXh0dXJlQ29sb3Ige1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLlIgPSAxLjA7XG4gICAgdGhpcy5HID0gMS4wO1xuICAgIHRoaXMuQiA9IDEuMDtcbiAgICB0aGlzLkEgPSAxLjA7XG4gIH1cblxuICBSOiBudW1iZXI7IC8vIOi1pOODgeODo+ODs+ODjeODq1xuICBHOiBudW1iZXI7IC8vIOe3keODgeODo+ODs+ODjeODq1xuICBCOiBudW1iZXI7IC8vIOmdkuODgeODo+ODs+ODjeODq1xuICBBOiBudW1iZXI7IC8vIM6x44OB44Oj44Oz44ON44OrXG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbXJlbmRlcmVyJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21CbGVuZE1vZGUgPSAkLkN1YmlzbUJsZW5kTW9kZTtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtQmxlbmRNb2RlID0gJC5DdWJpc21CbGVuZE1vZGU7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21SZW5kZXJlciA9ICQuQ3ViaXNtUmVuZGVyZXI7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbVJlbmRlcmVyID0gJC5DdWJpc21SZW5kZXJlcjtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVRleHR1cmVDb2xvciA9ICQuQ3ViaXNtVGV4dHVyZUNvbG9yO1xuICBleHBvcnQgdHlwZSBDdWJpc21UZXh0dXJlQ29sb3IgPSAkLkN1YmlzbVRleHR1cmVDb2xvcjtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IENvbnN0YW50IH0gZnJvbSAnLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcbmltcG9ydCB7IEN1YmlzbU1hdHJpeDQ0IH0gZnJvbSAnLi4vbWF0aC9jdWJpc21tYXRyaXg0NCc7XG5pbXBvcnQgeyBDdWJpc21Nb2RlbCB9IGZyb20gJy4uL21vZGVsL2N1YmlzbW1vZGVsJztcbmltcG9ydCB7IGNzbU1hcCB9IGZyb20gJy4uL3R5cGUvY3NtbWFwJztcbmltcG9ydCB7IGNzbVJlY3QgfSBmcm9tICcuLi90eXBlL2NzbXJlY3RmJztcbmltcG9ydCB7IGNzbVZlY3RvciB9IGZyb20gJy4uL3R5cGUvY3NtdmVjdG9yJztcbmltcG9ydCB7IEN1YmlzbUxvZ0Vycm9yIH0gZnJvbSAnLi4vdXRpbHMvY3ViaXNtZGVidWcnO1xuaW1wb3J0IHtcbiAgQ3ViaXNtQmxlbmRNb2RlLFxuICBDdWJpc21SZW5kZXJlcixcbiAgQ3ViaXNtVGV4dHVyZUNvbG9yLFxufSBmcm9tICcuL2N1YmlzbXJlbmRlcmVyJztcblxuY29uc3QgQ29sb3JDaGFubmVsQ291bnQgPSA0OyAvLyDlrp/pqJPmmYLjgasx44OB44Oj44Oz44ON44Or44Gu5aC05ZCI44GvMeOAgVJHQuOBoOOBkeOBruWgtOWQiOOBrzPjgIHjgqLjg6vjg5XjgqHjgoLlkKvjgoHjgovloLTlkIjjga80XG5cbmNvbnN0IHNoYWRlckNvdW50ID0gMTA7IC8vIOOCt+OCp+ODvOODgOODvOOBruaVsCA9IOODnuOCueOCr+eUn+aIkOeUqCArICjpgJrluLjnlKggKyDliqDnrpcgKyDkuZfnrpcpICogKOODnuOCueOCr+eEoeOBruS5l+eul+a4iOOCouODq+ODleOCoeWvvuW/nOeJiCArIOODnuOCueOCr+acieOBruS5l+eul+a4iOOCouODq+ODleOCoeWvvuW/nOeJiCArIOODnuOCueOCr+acieWPjei7ouOBruS5l+eul+a4iOOCouODq+ODleOCoeWvvuW/nOeJiClcbmxldCBzX2luc3RhbmNlOiBDdWJpc21TaGFkZXJfV2ViR0w7XG5sZXQgc192aWV3cG9ydDogbnVtYmVyW107XG5sZXQgc19mYm86IFdlYkdMRnJhbWVidWZmZXI7XG5cbi8qKlxuICog44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gu5Yem55CG44KS5a6f6KGM44GZ44KL44Kv44Op44K5XG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21DbGlwcGluZ01hbmFnZXJfV2ViR0wge1xuICAvKipcbiAgICog44Kr44Op44O844OB44Oj44Oz44ON44Or77yIUkdCQe+8ieOBruODleODqeOCsOOCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gY2hhbm5lbE5vIOOCq+ODqeODvOODgeODo+ODs+ODjeODq++8iFJHQkHvvInjga7nlarlj7fvvIgwOlIsIDE6RywgMjpCLCAzOkHvvIlcbiAgICovXG4gIHB1YmxpYyBnZXRDaGFubmVsRmxhZ0FzQ29sb3IoY2hhbm5lbE5vOiBudW1iZXIpOiBDdWJpc21UZXh0dXJlQ29sb3Ige1xuICAgIHJldHVybiB0aGlzLl9jaGFubmVsQ29sb3JzLmF0KGNoYW5uZWxObyk7XG4gIH1cblxuICAvKipcbiAgICog44OG44Oz44Od44Op44Oq44Gu44Os44Oz44OA44O844OG44Kv44K544OB44Oj44Gu44Ki44OJ44Os44K544KS5Y+W5b6X44GZ44KLXG4gICAqIEZyYW1lQnVmZmVyT2JqZWN044GM5a2Y5Zyo44GX44Gq44GE5aC05ZCI44CB5paw44GX44GP55Sf5oiQ44GZ44KLXG4gICAqXG4gICAqIEByZXR1cm4g44Os44Oz44OA44O844OG44Kv44K544OB44Oj44Gu44Ki44OJ44Os44K5XG4gICAqL1xuICBwdWJsaWMgZ2V0TWFza1JlbmRlclRleHR1cmUoKTogV2ViR0xGcmFtZWJ1ZmZlciB7XG4gICAgbGV0IHJldDogV2ViR0xGcmFtZWJ1ZmZlciA9IDA7XG5cbiAgICAvLyDjg4bjg7Pjg53jg6njg6rjga5SZW5kZXJUZXh0dXJl44KS5Y+W5b6X44GZ44KLXG4gICAgaWYgKHRoaXMuX21hc2tUZXh0dXJlICYmIHRoaXMuX21hc2tUZXh0dXJlLnRleHR1cmUgIT0gMCkge1xuICAgICAgLy8g5YmN5Zue5L2/44Gj44Gf44KC44Gu44KS6L+U44GZXG4gICAgICB0aGlzLl9tYXNrVGV4dHVyZS5mcmFtZU5vID0gdGhpcy5fY3VycmVudEZyYW1lTm87XG4gICAgICByZXQgPSB0aGlzLl9tYXNrVGV4dHVyZS50ZXh0dXJlO1xuICAgIH1cblxuICAgIGlmIChyZXQgPT0gMCkge1xuICAgICAgLy8gRnJhbWVCdWZmZXJPYmplY3TjgYzlrZjlnKjjgZfjgarjgYTloLTlkIjjgIHmlrDjgZfjgY/nlJ/miJDjgZnjgotcblxuICAgICAgLy8g44Kv44Oq44OD44OU44Oz44Kw44OQ44OD44OV44Kh44K144Kk44K644KS5Y+W5b6XXG4gICAgICBjb25zdCBzaXplOiBudW1iZXIgPSB0aGlzLl9jbGlwcGluZ01hc2tCdWZmZXJTaXplO1xuXG4gICAgICB0aGlzLl9jb2xvckJ1ZmZlciA9IHRoaXMuZ2wuY3JlYXRlVGV4dHVyZSgpO1xuICAgICAgdGhpcy5nbC5iaW5kVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkVfMkQsIHRoaXMuX2NvbG9yQnVmZmVyKTtcbiAgICAgIHRoaXMuZ2wudGV4SW1hZ2UyRChcbiAgICAgICAgdGhpcy5nbC5URVhUVVJFXzJELFxuICAgICAgICAwLFxuICAgICAgICB0aGlzLmdsLlJHQkEsXG4gICAgICAgIHNpemUsXG4gICAgICAgIHNpemUsXG4gICAgICAgIDAsXG4gICAgICAgIHRoaXMuZ2wuUkdCQSxcbiAgICAgICAgdGhpcy5nbC5VTlNJR05FRF9CWVRFLFxuICAgICAgICBudWxsXG4gICAgICApO1xuICAgICAgdGhpcy5nbC50ZXhQYXJhbWV0ZXJpKFxuICAgICAgICB0aGlzLmdsLlRFWFRVUkVfMkQsXG4gICAgICAgIHRoaXMuZ2wuVEVYVFVSRV9XUkFQX1MsXG4gICAgICAgIHRoaXMuZ2wuQ0xBTVBfVE9fRURHRVxuICAgICAgKTtcbiAgICAgIHRoaXMuZ2wudGV4UGFyYW1ldGVyaShcbiAgICAgICAgdGhpcy5nbC5URVhUVVJFXzJELFxuICAgICAgICB0aGlzLmdsLlRFWFRVUkVfV1JBUF9ULFxuICAgICAgICB0aGlzLmdsLkNMQU1QX1RPX0VER0VcbiAgICAgICk7XG4gICAgICB0aGlzLmdsLnRleFBhcmFtZXRlcmkoXG4gICAgICAgIHRoaXMuZ2wuVEVYVFVSRV8yRCxcbiAgICAgICAgdGhpcy5nbC5URVhUVVJFX01JTl9GSUxURVIsXG4gICAgICAgIHRoaXMuZ2wuTElORUFSXG4gICAgICApO1xuICAgICAgdGhpcy5nbC50ZXhQYXJhbWV0ZXJpKFxuICAgICAgICB0aGlzLmdsLlRFWFRVUkVfMkQsXG4gICAgICAgIHRoaXMuZ2wuVEVYVFVSRV9NQUdfRklMVEVSLFxuICAgICAgICB0aGlzLmdsLkxJTkVBUlxuICAgICAgKTtcbiAgICAgIHRoaXMuZ2wuYmluZFRleHR1cmUodGhpcy5nbC5URVhUVVJFXzJELCBudWxsKTtcblxuICAgICAgcmV0ID0gdGhpcy5nbC5jcmVhdGVGcmFtZWJ1ZmZlcigpO1xuICAgICAgdGhpcy5nbC5iaW5kRnJhbWVidWZmZXIodGhpcy5nbC5GUkFNRUJVRkZFUiwgcmV0KTtcbiAgICAgIHRoaXMuZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoXG4gICAgICAgIHRoaXMuZ2wuRlJBTUVCVUZGRVIsXG4gICAgICAgIHRoaXMuZ2wuQ09MT1JfQVRUQUNITUVOVDAsXG4gICAgICAgIHRoaXMuZ2wuVEVYVFVSRV8yRCxcbiAgICAgICAgdGhpcy5fY29sb3JCdWZmZXIsXG4gICAgICAgIDBcbiAgICAgICk7XG4gICAgICB0aGlzLmdsLmJpbmRGcmFtZWJ1ZmZlcih0aGlzLmdsLkZSQU1FQlVGRkVSLCBzX2Zibyk7XG5cbiAgICAgIHRoaXMuX21hc2tUZXh0dXJlID0gbmV3IEN1YmlzbVJlbmRlclRleHR1cmVSZXNvdXJjZShcbiAgICAgICAgdGhpcy5fY3VycmVudEZyYW1lTm8sXG4gICAgICAgIHJldFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLyoqXG4gICAqIFdlYkdM44Os44Oz44OA44Oq44Oz44Kw44Kz44Oz44OG44Kt44K544OI44KS6Kit5a6a44GZ44KLXG4gICAqIEBwYXJhbSBnbCBXZWJHTOODrOODs+ODgOODquODs+OCsOOCs+ODs+ODhuOCreOCueODiFxuICAgKi9cbiAgcHVibGljIHNldEdMKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpOiB2b2lkIHtcbiAgICB0aGlzLmdsID0gZ2w7XG4gIH1cblxuICAvKipcbiAgICog44Oe44K544Kv44GV44KM44KL5o+P55S744Kq44OW44K444Kn44Kv44OI576k5YWo5L2T44KS5Zuy44KA55+p5b2i77yI44Oi44OH44Or5bqn5qiZ57O777yJ44KS6KiI566X44GZ44KLXG4gICAqIEBwYXJhbSBtb2RlbCDjg6Ljg4fjg6vjga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICogQHBhcmFtIGNsaXBwaW5nQ29udGV4dCDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jga7jgrPjg7Pjg4bjgq3jgrnjg4hcbiAgICovXG4gIHB1YmxpYyBjYWxjQ2xpcHBlZERyYXdUb3RhbEJvdW5kcyhcbiAgICBtb2RlbDogQ3ViaXNtTW9kZWwsXG4gICAgY2xpcHBpbmdDb250ZXh0OiBDdWJpc21DbGlwcGluZ0NvbnRleHRcbiAgKTogdm9pZCB7XG4gICAgLy8g6KKr44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv77yI44Oe44K544Kv44GV44KM44KL5o+P55S744Kq44OW44K444Kn44Kv44OI77yJ44Gu5YWo5L2T44Gu55+p5b2iXG4gICAgbGV0IGNsaXBwZWREcmF3VG90YWxNaW5YOiBudW1iZXIgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuICAgIGxldCBjbGlwcGVkRHJhd1RvdGFsTWluWTogbnVtYmVyID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICBsZXQgY2xpcHBlZERyYXdUb3RhbE1heFg6IG51bWJlciA9IE51bWJlci5NSU5fVkFMVUU7XG4gICAgbGV0IGNsaXBwZWREcmF3VG90YWxNYXhZOiBudW1iZXIgPSBOdW1iZXIuTUlOX1ZBTFVFO1xuXG4gICAgLy8g44GT44Gu44Oe44K544Kv44GM5a6f6Zqb44Gr5b+F6KaB44GL5Yik5a6a44GZ44KLXG4gICAgLy8g44GT44Gu44Kv44Oq44OD44OU44Oz44Kw44KS5Yip55So44GZ44KL44CM5o+P55S744Kq44OW44K444Kn44Kv44OI44CN44GM44Gy44Go44Gk44Gn44KC5L2/55So5Y+v6IO944Gn44GC44KM44Gw44Oe44K544Kv44KS55Sf5oiQ44GZ44KL5b+F6KaB44GM44GC44KLXG4gICAgY29uc3QgY2xpcHBlZERyYXdDb3VudDogbnVtYmVyID1cbiAgICAgIGNsaXBwaW5nQ29udGV4dC5fY2xpcHBlZERyYXdhYmxlSW5kZXhMaXN0Lmxlbmd0aDtcblxuICAgIGZvciAoXG4gICAgICBsZXQgY2xpcHBlZERyYXdhYmxlSW5kZXggPSAwO1xuICAgICAgY2xpcHBlZERyYXdhYmxlSW5kZXggPCBjbGlwcGVkRHJhd0NvdW50O1xuICAgICAgY2xpcHBlZERyYXdhYmxlSW5kZXgrK1xuICAgICkge1xuICAgICAgLy8g44Oe44K544Kv44KS5L2/55So44GZ44KL5o+P55S744Kq44OW44K444Kn44Kv44OI44Gu5o+P55S744GV44KM44KL55+p5b2i44KS5rGC44KB44KLXG4gICAgICBjb25zdCBkcmF3YWJsZUluZGV4OiBudW1iZXIgPVxuICAgICAgICBjbGlwcGluZ0NvbnRleHQuX2NsaXBwZWREcmF3YWJsZUluZGV4TGlzdFtjbGlwcGVkRHJhd2FibGVJbmRleF07XG5cbiAgICAgIGNvbnN0IGRyYXdhYmxlVmVydGV4Q291bnQ6IG51bWJlciA9XG4gICAgICAgIG1vZGVsLmdldERyYXdhYmxlVmVydGV4Q291bnQoZHJhd2FibGVJbmRleCk7XG4gICAgICBjb25zdCBkcmF3YWJsZVZlcnRleGVzOiBGbG9hdDMyQXJyYXkgPVxuICAgICAgICBtb2RlbC5nZXREcmF3YWJsZVZlcnRpY2VzKGRyYXdhYmxlSW5kZXgpO1xuXG4gICAgICBsZXQgbWluWDogbnVtYmVyID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICAgIGxldCBtaW5ZOiBudW1iZXIgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuICAgICAgbGV0IG1heFg6IG51bWJlciA9IE51bWJlci5NSU5fVkFMVUU7XG4gICAgICBsZXQgbWF4WTogbnVtYmVyID0gTnVtYmVyLk1JTl9WQUxVRTtcblxuICAgICAgY29uc3QgbG9vcDogbnVtYmVyID0gZHJhd2FibGVWZXJ0ZXhDb3VudCAqIENvbnN0YW50LnZlcnRleFN0ZXA7XG4gICAgICBmb3IgKFxuICAgICAgICBsZXQgcGk6IG51bWJlciA9IENvbnN0YW50LnZlcnRleE9mZnNldDtcbiAgICAgICAgcGkgPCBsb29wO1xuICAgICAgICBwaSArPSBDb25zdGFudC52ZXJ0ZXhTdGVwXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgeDogbnVtYmVyID0gZHJhd2FibGVWZXJ0ZXhlc1twaV07XG4gICAgICAgIGNvbnN0IHk6IG51bWJlciA9IGRyYXdhYmxlVmVydGV4ZXNbcGkgKyAxXTtcblxuICAgICAgICBpZiAoeCA8IG1pblgpIHtcbiAgICAgICAgICBtaW5YID0geDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoeCA+IG1heFgpIHtcbiAgICAgICAgICBtYXhYID0geDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoeSA8IG1pblkpIHtcbiAgICAgICAgICBtaW5ZID0geTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoeSA+IG1heFkpIHtcbiAgICAgICAgICBtYXhZID0geTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyDmnInlirnjgarngrnjgYzkuIDjgaTjgoLlj5bjgozjgarjgYvjgaPjgZ/jga7jgafjgrnjgq3jg4Pjg5dcbiAgICAgIGlmIChtaW5YID09IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIOWFqOS9k+OBruefqeW9ouOBq+WPjeaYoFxuICAgICAgaWYgKG1pblggPCBjbGlwcGVkRHJhd1RvdGFsTWluWCkge1xuICAgICAgICBjbGlwcGVkRHJhd1RvdGFsTWluWCA9IG1pblg7XG4gICAgICB9XG4gICAgICBpZiAobWluWSA8IGNsaXBwZWREcmF3VG90YWxNaW5ZKSB7XG4gICAgICAgIGNsaXBwZWREcmF3VG90YWxNaW5ZID0gbWluWTtcbiAgICAgIH1cbiAgICAgIGlmIChtYXhYID4gY2xpcHBlZERyYXdUb3RhbE1heFgpIHtcbiAgICAgICAgY2xpcHBlZERyYXdUb3RhbE1heFggPSBtYXhYO1xuICAgICAgfVxuICAgICAgaWYgKG1heFkgPiBjbGlwcGVkRHJhd1RvdGFsTWF4WSkge1xuICAgICAgICBjbGlwcGVkRHJhd1RvdGFsTWF4WSA9IG1heFk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjbGlwcGVkRHJhd1RvdGFsTWluWCA9PSBOdW1iZXIuTUFYX1ZBTFVFKSB7XG4gICAgICAgIGNsaXBwaW5nQ29udGV4dC5fYWxsQ2xpcHBlZERyYXdSZWN0LnggPSAwLjA7XG4gICAgICAgIGNsaXBwaW5nQ29udGV4dC5fYWxsQ2xpcHBlZERyYXdSZWN0LnkgPSAwLjA7XG4gICAgICAgIGNsaXBwaW5nQ29udGV4dC5fYWxsQ2xpcHBlZERyYXdSZWN0LndpZHRoID0gMC4wO1xuICAgICAgICBjbGlwcGluZ0NvbnRleHQuX2FsbENsaXBwZWREcmF3UmVjdC5oZWlnaHQgPSAwLjA7XG4gICAgICAgIGNsaXBwaW5nQ29udGV4dC5faXNVc2luZyA9IGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2xpcHBpbmdDb250ZXh0Ll9pc1VzaW5nID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgdzogbnVtYmVyID0gY2xpcHBlZERyYXdUb3RhbE1heFggLSBjbGlwcGVkRHJhd1RvdGFsTWluWDtcbiAgICAgICAgY29uc3QgaDogbnVtYmVyID0gY2xpcHBlZERyYXdUb3RhbE1heFkgLSBjbGlwcGVkRHJhd1RvdGFsTWluWTtcbiAgICAgICAgY2xpcHBpbmdDb250ZXh0Ll9hbGxDbGlwcGVkRHJhd1JlY3QueCA9IGNsaXBwZWREcmF3VG90YWxNaW5YO1xuICAgICAgICBjbGlwcGluZ0NvbnRleHQuX2FsbENsaXBwZWREcmF3UmVjdC55ID0gY2xpcHBlZERyYXdUb3RhbE1pblk7XG4gICAgICAgIGNsaXBwaW5nQ29udGV4dC5fYWxsQ2xpcHBlZERyYXdSZWN0LndpZHRoID0gdztcbiAgICAgICAgY2xpcHBpbmdDb250ZXh0Ll9hbGxDbGlwcGVkRHJhd1JlY3QuaGVpZ2h0ID0gaDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fbWFza1JlbmRlclRleHR1cmUgPSBudWxsO1xuICAgIHRoaXMuX2NvbG9yQnVmZmVyID0gbnVsbDtcbiAgICB0aGlzLl9jdXJyZW50RnJhbWVObyA9IDA7XG4gICAgdGhpcy5fY2xpcHBpbmdNYXNrQnVmZmVyU2l6ZSA9IDI1NjtcbiAgICB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzayA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtQ2xpcHBpbmdDb250ZXh0PigpO1xuICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF3ID0gbmV3IGNzbVZlY3RvcjxDdWJpc21DbGlwcGluZ0NvbnRleHQ+KCk7XG4gICAgdGhpcy5fY2hhbm5lbENvbG9ycyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtVGV4dHVyZUNvbG9yPigpO1xuICAgIHRoaXMuX3RtcEJvdW5kc09uTW9kZWwgPSBuZXcgY3NtUmVjdCgpO1xuICAgIHRoaXMuX3RtcE1hdHJpeCA9IG5ldyBDdWJpc21NYXRyaXg0NCgpO1xuICAgIHRoaXMuX3RtcE1hdHJpeEZvck1hc2sgPSBuZXcgQ3ViaXNtTWF0cml4NDQoKTtcbiAgICB0aGlzLl90bXBNYXRyaXhGb3JEcmF3ID0gbmV3IEN1YmlzbU1hdHJpeDQ0KCk7XG4gICAgdGhpcy5fbWFza1RleHR1cmUgPSBudWxsO1xuXG4gICAgbGV0IHRtcDogQ3ViaXNtVGV4dHVyZUNvbG9yID0gbmV3IEN1YmlzbVRleHR1cmVDb2xvcigpO1xuICAgIHRtcC5SID0gMS4wO1xuICAgIHRtcC5HID0gMC4wO1xuICAgIHRtcC5CID0gMC4wO1xuICAgIHRtcC5BID0gMC4wO1xuICAgIHRoaXMuX2NoYW5uZWxDb2xvcnMucHVzaEJhY2sodG1wKTtcblxuICAgIHRtcCA9IG5ldyBDdWJpc21UZXh0dXJlQ29sb3IoKTtcbiAgICB0bXAuUiA9IDAuMDtcbiAgICB0bXAuRyA9IDEuMDtcbiAgICB0bXAuQiA9IDAuMDtcbiAgICB0bXAuQSA9IDAuMDtcbiAgICB0aGlzLl9jaGFubmVsQ29sb3JzLnB1c2hCYWNrKHRtcCk7XG5cbiAgICB0bXAgPSBuZXcgQ3ViaXNtVGV4dHVyZUNvbG9yKCk7XG4gICAgdG1wLlIgPSAwLjA7XG4gICAgdG1wLkcgPSAwLjA7XG4gICAgdG1wLkIgPSAxLjA7XG4gICAgdG1wLkEgPSAwLjA7XG4gICAgdGhpcy5fY2hhbm5lbENvbG9ycy5wdXNoQmFjayh0bXApO1xuXG4gICAgdG1wID0gbmV3IEN1YmlzbVRleHR1cmVDb2xvcigpO1xuICAgIHRtcC5SID0gMC4wO1xuICAgIHRtcC5HID0gMC4wO1xuICAgIHRtcC5CID0gMC4wO1xuICAgIHRtcC5BID0gMS4wO1xuICAgIHRoaXMuX2NoYW5uZWxDb2xvcnMucHVzaEJhY2sodG1wKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suZ2V0U2l6ZSgpOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5hdChpKSkge1xuICAgICAgICB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5hdChpKS5yZWxlYXNlKCk7XG4gICAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLnNldChpLCB2b2lkIDApO1xuICAgICAgfVxuICAgICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suc2V0KGksIG51bGwpO1xuICAgIH1cbiAgICB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzayA9IG51bGw7XG5cbiAgICAvLyBfY2xpcHBpbmdDb250ZXh0TGlzdEZvckRyYXfjga9fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2vjgavjgYLjgovjgqTjg7Pjgrnjgr/jg7PjgrnjgpLmjIfjgZfjgabjgYTjgovjgILkuIroqJjjga7lh6bnkIbjgavjgojjgoropoHntKDjgZTjgajjga5ERUxFVEXjga/kuI3opoHjgIJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF3LmdldFNpemUoKTsgaSsrKSB7XG4gICAgICB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yRHJhdy5zZXQoaSwgbnVsbCk7XG4gICAgfVxuICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF3ID0gbnVsbDtcblxuICAgIGlmICh0aGlzLl9tYXNrVGV4dHVyZSkge1xuICAgICAgdGhpcy5nbC5kZWxldGVGcmFtZWJ1ZmZlcih0aGlzLl9tYXNrVGV4dHVyZS50ZXh0dXJlKTtcbiAgICAgIHRoaXMuX21hc2tUZXh0dXJlID0gbnVsbDtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2NoYW5uZWxDb2xvcnMuZ2V0U2l6ZSgpOyBpKyspIHtcbiAgICAgIHRoaXMuX2NoYW5uZWxDb2xvcnMuc2V0KGksIG51bGwpO1xuICAgIH1cblxuICAgIHRoaXMuX2NoYW5uZWxDb2xvcnMgPSBudWxsO1xuXG4gICAgLy8g44OG44Kv44K544OB44Oj6Kej5pS+XG4gICAgdGhpcy5nbC5kZWxldGVUZXh0dXJlKHRoaXMuX2NvbG9yQnVmZmVyKTtcbiAgICB0aGlzLl9jb2xvckJ1ZmZlciA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICog44Oe44ON44O844K444Oj44Gu5Yid5pyf5YyW5Yem55CGXG4gICAqIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OCkuS9v+OBhuaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBrueZu+mMsuOCkuihjOOBhlxuICAgKiBAcGFyYW0gbW9kZWwg44Oi44OH44Or44Gu44Kk44Oz44K544K/44Oz44K5XG4gICAqIEBwYXJhbSBkcmF3YWJsZUNvdW50IOaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruaVsFxuICAgKiBAcGFyYW0gZHJhd2FibGVNYXNrcyDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjgpLjg57jgrnjgq/jgZnjgovmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7jgqTjg7Pjg4fjg4Pjgq/jgrnjga7jg6rjgrnjg4hcbiAgICogQHBhcmFtIGRyYXdhYmxlQ291bnRzIOaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOCkuODnuOCueOCr+OBmeOCi+aPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruaVsFxuICAgKi9cbiAgcHVibGljIGluaXRpYWxpemUoXG4gICAgbW9kZWw6IEN1YmlzbU1vZGVsLFxuICAgIGRyYXdhYmxlQ291bnQ6IG51bWJlcixcbiAgICBkcmF3YWJsZU1hc2tzOiBJbnQzMkFycmF5W10sXG4gICAgZHJhd2FibGVNYXNrQ291bnRzOiBJbnQzMkFycmF5XG4gICk6IHZvaWQge1xuICAgIC8vIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OCkuS9v+OBhuaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOCkuOBmeOBueOBpueZu+mMsuOBmeOCi1xuICAgIC8vIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBr+OAgemAmuW4uOaVsOWAi+eoi+W6puOBq+mZkOWumuOBl+OBpuS9v+OBhuOCguOBruOBqOOBmeOCi1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZHJhd2FibGVDb3VudDsgaSsrKSB7XG4gICAgICBpZiAoZHJhd2FibGVNYXNrQ291bnRzW2ldIDw9IDApIHtcbiAgICAgICAgLy8g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44GM5L2/55So44GV44KM44Gm44GE44Gq44GE44Ki44O844OI44Oh44OD44K344Ol77yI5aSa44GP44Gu5aC05ZCI5L2/55So44GX44Gq44GE77yJXG4gICAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF3LnB1c2hCYWNrKG51bGwpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8g5pei44Gr44GC44KLQ2xpcENvbnRleHTjgajlkIzjgZjjgYvjg4Hjgqfjg4Pjgq/jgZnjgotcbiAgICAgIGxldCBjbGlwcGluZ0NvbnRleHQ6IEN1YmlzbUNsaXBwaW5nQ29udGV4dCA9IHRoaXMuZmluZFNhbWVDbGlwKFxuICAgICAgICBkcmF3YWJsZU1hc2tzW2ldLFxuICAgICAgICBkcmF3YWJsZU1hc2tDb3VudHNbaV1cbiAgICAgICk7XG4gICAgICBpZiAoY2xpcHBpbmdDb250ZXh0ID09IG51bGwpIHtcbiAgICAgICAgLy8g5ZCM5LiA44Gu44Oe44K544Kv44GM5a2Y5Zyo44GX44Gm44GE44Gq44GE5aC05ZCI44Gv55Sf5oiQ44GZ44KLXG4gICAgICAgIGNsaXBwaW5nQ29udGV4dCA9IG5ldyBDdWJpc21DbGlwcGluZ0NvbnRleHQoXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICBkcmF3YWJsZU1hc2tzW2ldLFxuICAgICAgICAgIGRyYXdhYmxlTWFza0NvdW50c1tpXVxuICAgICAgICApO1xuICAgICAgICB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5wdXNoQmFjayhjbGlwcGluZ0NvbnRleHQpO1xuICAgICAgfVxuXG4gICAgICBjbGlwcGluZ0NvbnRleHQuYWRkQ2xpcHBlZERyYXdhYmxlKGkpO1xuXG4gICAgICB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yRHJhdy5wdXNoQmFjayhjbGlwcGluZ0NvbnRleHQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjgq/jg6rjg4Pjg5Tjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4jjgpLkvZzmiJDjgZnjgovjgILjg6Ljg4fjg6vmj4/nlLvmmYLjgavlrp/ooYzjgZnjgovjgIJcbiAgICogQHBhcmFtIG1vZGVsIOODouODh+ODq+OBruOCpOODs+OCueOCv+ODs+OCuVxuICAgKiBAcGFyYW0gcmVuZGVyZXIg44Os44Oz44OA44Op44Gu44Kk44Oz44K544K/44Oz44K5XG4gICAqL1xuICBwdWJsaWMgc2V0dXBDbGlwcGluZ0NvbnRleHQoXG4gICAgbW9kZWw6IEN1YmlzbU1vZGVsLFxuICAgIHJlbmRlcmVyOiBDdWJpc21SZW5kZXJlcl9XZWJHTFxuICApOiB2b2lkIHtcbiAgICB0aGlzLl9jdXJyZW50RnJhbWVObysrO1xuXG4gICAgLy8g5YWo44Gm44Gu44Kv44Oq44OD44OU44Oz44Kw44KS55So5oSP44GZ44KLXG4gICAgLy8g5ZCM44GY44Kv44Oq44OD44OX77yI6KSH5pWw44Gu5aC05ZCI44Gv44G+44Go44KB44Gm5LiA44Gk44Gu44Kv44Oq44OD44OX77yJ44KS5L2/44GG5aC05ZCI44GvMeW6puOBoOOBkeioreWumuOBmeOCi1xuICAgIGxldCB1c2luZ0NsaXBDb3VudCA9IDA7XG4gICAgZm9yIChcbiAgICAgIGxldCBjbGlwSW5kZXggPSAwO1xuICAgICAgY2xpcEluZGV4IDwgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suZ2V0U2l6ZSgpO1xuICAgICAgY2xpcEluZGV4KytcbiAgICApIHtcbiAgICAgIC8vIDHjgaTjga7jgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jgavplqLjgZfjgaZcbiAgICAgIGNvbnN0IGNjOiBDdWJpc21DbGlwcGluZ0NvbnRleHQgPVxuICAgICAgICB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5hdChjbGlwSW5kZXgpO1xuXG4gICAgICAvLyDjgZPjga7jgq/jg6rjg4Pjg5fjgpLliKnnlKjjgZnjgovmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jnvqTlhajkvZPjgpLlm7LjgoDnn6nlvaLjgpLoqIjnrpdcbiAgICAgIHRoaXMuY2FsY0NsaXBwZWREcmF3VG90YWxCb3VuZHMobW9kZWwsIGNjKTtcblxuICAgICAgaWYgKGNjLl9pc1VzaW5nKSB7XG4gICAgICAgIHVzaW5nQ2xpcENvdW50Kys7IC8vIOS9v+eUqOS4reOBqOOBl+OBpuOCq+OCpuODs+ODiFxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIOODnuOCueOCr+S9nOaIkOWHpueQhlxuICAgIGlmICh1c2luZ0NsaXBDb3VudCA+IDApIHtcbiAgICAgIC8vIOeUn+aIkOOBl+OBn0ZyYW1lQnVmZmVy44Go5ZCM44GY44K144Kk44K644Gn44OT44Ol44O844Od44O844OI44KS6Kit5a6aXG4gICAgICB0aGlzLmdsLnZpZXdwb3J0KFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICB0aGlzLl9jbGlwcGluZ01hc2tCdWZmZXJTaXplLFxuICAgICAgICB0aGlzLl9jbGlwcGluZ01hc2tCdWZmZXJTaXplXG4gICAgICApO1xuXG4gICAgICAvLyDjg57jgrnjgq/jgpJhY3RpdmXjgavjgZnjgotcbiAgICAgIHRoaXMuX21hc2tSZW5kZXJUZXh0dXJlID0gdGhpcy5nZXRNYXNrUmVuZGVyVGV4dHVyZSgpO1xuXG4gICAgICAvLyDjg6Ljg4fjg6vmj4/nlLvmmYLjgatEcmF3TWVzaE5vd+OBq+a4oeOBleOCjOOCi+WkieaPmyjjg6Ljg4fjg6t0b+ODr+ODvOODq+ODieW6p+aomeWkieaPmylcbiAgICAgIGNvbnN0IG1vZGVsVG9Xb3JsZEY6IEN1YmlzbU1hdHJpeDQ0ID0gcmVuZGVyZXIuZ2V0TXZwTWF0cml4KCk7XG5cbiAgICAgIHJlbmRlcmVyLnByZURyYXcoKTsgLy8g44OQ44OD44OV44Kh44KS44Kv44Oq44Ki44GZ44KLXG5cbiAgICAgIC8vIOWQhOODnuOCueOCr+OBruODrOOCpOOCouOCpuODiOOCkuaxuuWumuOBl+OBpuOBhOOBj1xuICAgICAgdGhpcy5zZXR1cExheW91dEJvdW5kcyh1c2luZ0NsaXBDb3VudCk7XG5cbiAgICAgIC8vIC0tLS0tLS0tLS0g44Oe44K544Kv5o+P55S75Yem55CGIC0tLS0tLS0tLS1cbiAgICAgIC8vIOODnuOCueOCr+eUqFJlbmRlclRleHR1cmXjgpJhY3RpdmXjgavjgrvjg4Pjg4hcbiAgICAgIHRoaXMuZ2wuYmluZEZyYW1lYnVmZmVyKHRoaXMuZ2wuRlJBTUVCVUZGRVIsIHRoaXMuX21hc2tSZW5kZXJUZXh0dXJlKTtcblxuICAgICAgLy8g44Oe44K544Kv44KS44Kv44Oq44Ki44GZ44KLXG4gICAgICAvLyAo5Luu5LuV5qeYKSAx44GM54Sh5Yq577yI5o+P44GL44KM44Gq44GE77yJ6aCY5Z+f44CBMOOBjOacieWKue+8iOaPj+OBi+OCjOOCi++8iemgmOWfn+OAgu+8iOOCt+OCp+ODvOODgOODvENkKkNz44GnMOOBq+i/keOBhOWApOOCkuOBi+OBkeOBpuODnuOCueOCr+OCkuS9nOOCi+OAgjHjgpLjgYvjgZHjgovjgajkvZXjgoLotbfjgZPjgonjgarjgYTvvIlcbiAgICAgIHRoaXMuZ2wuY2xlYXJDb2xvcigxLjAsIDEuMCwgMS4wLCAxLjApO1xuICAgICAgdGhpcy5nbC5jbGVhcih0aGlzLmdsLkNPTE9SX0JVRkZFUl9CSVQpO1xuXG4gICAgICAvLyDlrp/pmpvjgavjg57jgrnjgq/jgpLnlJ/miJDjgZnjgotcbiAgICAgIC8vIOWFqOOBpuOBruODnuOCueOCr+OCkuOBqeOBruOCiOOBhuOBq+ODrOOCpOOCouOCpuODiOOBl+OBpuaPj+OBj+OBi+OCkuaxuuWumuOBl+OAgUNsaXBDb250ZXh0LCBDbGlwcGVkRHJhd0NvbnRleHTjgavoqJjmhrbjgZnjgotcbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBjbGlwSW5kZXggPSAwO1xuICAgICAgICBjbGlwSW5kZXggPCB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5nZXRTaXplKCk7XG4gICAgICAgIGNsaXBJbmRleCsrXG4gICAgICApIHtcbiAgICAgICAgLy8gLS0tIOWun+mam+OBqzHjgaTjga7jg57jgrnjgq/jgpLmj4/jgY8gLS0tXG4gICAgICAgIGNvbnN0IGNsaXBDb250ZXh0OiBDdWJpc21DbGlwcGluZ0NvbnRleHQgPVxuICAgICAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLmF0KGNsaXBJbmRleCk7XG4gICAgICAgIGNvbnN0IGFsbENsaXBlZERyYXdSZWN0OiBjc21SZWN0ID0gY2xpcENvbnRleHQuX2FsbENsaXBwZWREcmF3UmVjdDsgLy8g44GT44Gu44Oe44K544Kv44KS5L2/44GG44CB44GZ44G544Gm44Gu5o+P55S744Kq44OW44K444Kn44Kv44OI44Gu6KuW55CG5bqn5qiZ5LiK44Gu5Zuy44G/55+p5b2iXG4gICAgICAgIGNvbnN0IGxheW91dEJvdW5kc09uVGV4MDE6IGNzbVJlY3QgPSBjbGlwQ29udGV4dC5fbGF5b3V0Qm91bmRzOyAvLyDjgZPjga7kuK3jgavjg57jgrnjgq/jgpLlj47jgoHjgotcblxuICAgICAgICAvLyDjg6Ljg4fjg6vluqfmqJnkuIrjga7nn6nlvaLjgpLjgIHpganlrpzjg57jg7zjgrjjg7PjgpLku5jjgZHjgabkvb/jgYZcbiAgICAgICAgY29uc3QgTUFSR0lOID0gMC4wNTtcbiAgICAgICAgdGhpcy5fdG1wQm91bmRzT25Nb2RlbC5zZXRSZWN0KGFsbENsaXBlZERyYXdSZWN0KTtcbiAgICAgICAgdGhpcy5fdG1wQm91bmRzT25Nb2RlbC5leHBhbmQoXG4gICAgICAgICAgYWxsQ2xpcGVkRHJhd1JlY3Qud2lkdGggKiBNQVJHSU4sXG4gICAgICAgICAgYWxsQ2xpcGVkRHJhd1JlY3QuaGVpZ2h0ICogTUFSR0lOXG4gICAgICAgICk7XG4gICAgICAgIC8vIyMjIyMjIyMjIyDmnKzmnaXjga/libLjgorlvZPjgabjgonjgozjgZ/poJjln5/jga7lhajkvZPjgpLkvb/jgo/jgZrlv4XopoHmnIDkvY7pmZDjga7jgrXjgqTjgrrjgYzjgojjgYRcblxuICAgICAgICAvLyDjgrfjgqfjg7zjg4DnlKjjga7oqIjnrpflvI/jgpLmsYLjgoHjgovjgILlm57ou6LjgpLogIPmha7jgZfjgarjgYTloLTlkIjjga/ku6XkuIvjga7jgajjgYrjgopcbiAgICAgICAgLy8gbW92ZVBlcmlvZCcgPSBtb3ZlUGVyaW9kICogc2NhbGVYICsgb2ZmWFx0XHQgIFtbIG1vdmVQZXJpb2QnID0gKG1vdmVQZXJpb2QgLSB0bXBCb3VuZHNPbk1vZGVsLm1vdmVQZXJpb2QpKnNjYWxlICsgbGF5b3V0Qm91bmRzT25UZXgwMS5tb3ZlUGVyaW9kIF1dXG4gICAgICAgIGNvbnN0IHNjYWxlWDogbnVtYmVyID1cbiAgICAgICAgICBsYXlvdXRCb3VuZHNPblRleDAxLndpZHRoIC8gdGhpcy5fdG1wQm91bmRzT25Nb2RlbC53aWR0aDtcbiAgICAgICAgY29uc3Qgc2NhbGVZOiBudW1iZXIgPVxuICAgICAgICAgIGxheW91dEJvdW5kc09uVGV4MDEuaGVpZ2h0IC8gdGhpcy5fdG1wQm91bmRzT25Nb2RlbC5oZWlnaHQ7XG5cbiAgICAgICAgLy8g44Oe44K544Kv55Sf5oiQ5pmC44Gr5L2/44GG6KGM5YiX44KS5rGC44KB44KLXG4gICAgICAgIHtcbiAgICAgICAgICAvLyDjgrfjgqfjg7zjg4DjgavmuKHjgZnooYzliJfjgpLmsYLjgoHjgosgPDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8IOimgeacgOmBqeWMlu+8iOmAhumghuOBq+ioiOeul+OBmeOCjOOBsOOCt+ODs+ODl+ODq+OBq+OBp+OBjeOCi++8iVxuICAgICAgICAgIHRoaXMuX3RtcE1hdHJpeC5sb2FkSWRlbnRpdHkoKTtcbiAgICAgICAgICB7XG4gICAgICAgICAgICAvLyBsYXlvdXQwLi4xIOOCkiAtMS4uMeOBq+WkieaPm1xuICAgICAgICAgICAgdGhpcy5fdG1wTWF0cml4LnRyYW5zbGF0ZVJlbGF0aXZlKC0xLjAsIC0xLjApO1xuICAgICAgICAgICAgdGhpcy5fdG1wTWF0cml4LnNjYWxlUmVsYXRpdmUoMi4wLCAyLjApO1xuICAgICAgICAgIH1cbiAgICAgICAgICB7XG4gICAgICAgICAgICAvLyB2aWV3IHRvIGxheW91dDAuLjFcbiAgICAgICAgICAgIHRoaXMuX3RtcE1hdHJpeC50cmFuc2xhdGVSZWxhdGl2ZShcbiAgICAgICAgICAgICAgbGF5b3V0Qm91bmRzT25UZXgwMS54LFxuICAgICAgICAgICAgICBsYXlvdXRCb3VuZHNPblRleDAxLnlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLl90bXBNYXRyaXguc2NhbGVSZWxhdGl2ZShzY2FsZVgsIHNjYWxlWSk7IC8vIG5ldyA9IFt0cmFuc2xhdGVdW3NjYWxlXVxuICAgICAgICAgICAgdGhpcy5fdG1wTWF0cml4LnRyYW5zbGF0ZVJlbGF0aXZlKFxuICAgICAgICAgICAgICAtdGhpcy5fdG1wQm91bmRzT25Nb2RlbC54LFxuICAgICAgICAgICAgICAtdGhpcy5fdG1wQm91bmRzT25Nb2RlbC55XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgLy8gbmV3ID0gW3RyYW5zbGF0ZV1bc2NhbGVdW3RyYW5zbGF0ZV1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gdG1wTWF0cml4Rm9yTWFza+OBjOioiOeul+e1kOaenFxuICAgICAgICAgIHRoaXMuX3RtcE1hdHJpeEZvck1hc2suc2V0TWF0cml4KHRoaXMuX3RtcE1hdHJpeC5nZXRBcnJheSgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vLS0tLS0tLS0tIGRyYXfmmYLjga4gbWFzayDlj4LnhafnlKjooYzliJfjgpLoqIjnrpdcbiAgICAgICAge1xuICAgICAgICAgIC8vIOOCt+OCp+ODvOODgOOBq+a4oeOBmeihjOWIl+OCkuaxguOCgeOCiyA8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwg6KaB5pyA6YGp5YyW77yI6YCG6aCG44Gr6KiI566X44GZ44KM44Gw44K344Oz44OX44Or44Gr44Gn44GN44KL77yJXG4gICAgICAgICAgdGhpcy5fdG1wTWF0cml4LmxvYWRJZGVudGl0eSgpO1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX3RtcE1hdHJpeC50cmFuc2xhdGVSZWxhdGl2ZShcbiAgICAgICAgICAgICAgbGF5b3V0Qm91bmRzT25UZXgwMS54LFxuICAgICAgICAgICAgICBsYXlvdXRCb3VuZHNPblRleDAxLnlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLl90bXBNYXRyaXguc2NhbGVSZWxhdGl2ZShzY2FsZVgsIHNjYWxlWSk7IC8vIG5ldyA9IFt0cmFuc2xhdGVdW3NjYWxlXVxuICAgICAgICAgICAgdGhpcy5fdG1wTWF0cml4LnRyYW5zbGF0ZVJlbGF0aXZlKFxuICAgICAgICAgICAgICAtdGhpcy5fdG1wQm91bmRzT25Nb2RlbC54LFxuICAgICAgICAgICAgICAtdGhpcy5fdG1wQm91bmRzT25Nb2RlbC55XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgLy8gbmV3ID0gW3RyYW5zbGF0ZV1bc2NhbGVdW3RyYW5zbGF0ZV1cbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5fdG1wTWF0cml4Rm9yRHJhdy5zZXRNYXRyaXgodGhpcy5fdG1wTWF0cml4LmdldEFycmF5KCkpO1xuICAgICAgICB9XG4gICAgICAgIGNsaXBDb250ZXh0Ll9tYXRyaXhGb3JNYXNrLnNldE1hdHJpeCh0aGlzLl90bXBNYXRyaXhGb3JNYXNrLmdldEFycmF5KCkpO1xuICAgICAgICBjbGlwQ29udGV4dC5fbWF0cml4Rm9yRHJhdy5zZXRNYXRyaXgodGhpcy5fdG1wTWF0cml4Rm9yRHJhdy5nZXRBcnJheSgpKTtcblxuICAgICAgICBjb25zdCBjbGlwRHJhd0NvdW50OiBudW1iZXIgPSBjbGlwQ29udGV4dC5fY2xpcHBpbmdJZENvdW50O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNsaXBEcmF3Q291bnQ7IGkrKykge1xuICAgICAgICAgIGNvbnN0IGNsaXBEcmF3SW5kZXg6IG51bWJlciA9IGNsaXBDb250ZXh0Ll9jbGlwcGluZ0lkTGlzdFtpXTtcblxuICAgICAgICAgIC8vIOmggueCueaDheWgseOBjOabtOaWsOOBleOCjOOBpuOBiuOCieOBmuOAgeS/oemgvOaAp+OBjOOBquOBhOWgtOWQiOOBr+aPj+eUu+OCkuODkeOCueOBmeOCi1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICFtb2RlbC5nZXREcmF3YWJsZUR5bmFtaWNGbGFnVmVydGV4UG9zaXRpb25zRGlkQ2hhbmdlKGNsaXBEcmF3SW5kZXgpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZW5kZXJlci5zZXRJc0N1bGxpbmcoXG4gICAgICAgICAgICBtb2RlbC5nZXREcmF3YWJsZUN1bGxpbmcoY2xpcERyYXdJbmRleCkgIT0gZmFsc2VcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgLy8g5LuK5Zue5bCC55So44Gu5aSJ5o+b44KS6YGp55So44GX44Gm5o+P44GPXG4gICAgICAgICAgLy8g44OB44Oj44Oz44ON44Or44KC5YiH44KK5pu/44GI44KL5b+F6KaB44GM44GC44KLKEEsUixHLEIpXG4gICAgICAgICAgcmVuZGVyZXIuc2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzayhjbGlwQ29udGV4dCk7XG4gICAgICAgICAgcmVuZGVyZXIuZHJhd01lc2goXG4gICAgICAgICAgICBtb2RlbC5nZXREcmF3YWJsZVRleHR1cmVJbmRleChjbGlwRHJhd0luZGV4KSxcbiAgICAgICAgICAgIG1vZGVsLmdldERyYXdhYmxlVmVydGV4SW5kZXhDb3VudChjbGlwRHJhd0luZGV4KSxcbiAgICAgICAgICAgIG1vZGVsLmdldERyYXdhYmxlVmVydGV4Q291bnQoY2xpcERyYXdJbmRleCksXG4gICAgICAgICAgICBtb2RlbC5nZXREcmF3YWJsZVZlcnRleEluZGljZXMoY2xpcERyYXdJbmRleCksXG4gICAgICAgICAgICBtb2RlbC5nZXREcmF3YWJsZVZlcnRpY2VzKGNsaXBEcmF3SW5kZXgpLFxuICAgICAgICAgICAgbW9kZWwuZ2V0RHJhd2FibGVWZXJ0ZXhVdnMoY2xpcERyYXdJbmRleCksXG4gICAgICAgICAgICBtb2RlbC5nZXRNdWx0aXBseUNvbG9yKGNsaXBEcmF3SW5kZXgpLFxuICAgICAgICAgICAgbW9kZWwuZ2V0U2NyZWVuQ29sb3IoY2xpcERyYXdJbmRleCksXG4gICAgICAgICAgICBtb2RlbC5nZXREcmF3YWJsZU9wYWNpdHkoY2xpcERyYXdJbmRleCksXG4gICAgICAgICAgICBDdWJpc21CbGVuZE1vZGUuQ3ViaXNtQmxlbmRNb2RlX05vcm1hbCwgLy8g44Kv44Oq44OD44OU44Oz44Kw44Gv6YCa5bi45o+P55S744KS5by35Yi2XG4gICAgICAgICAgICBmYWxzZSAvLyDjg57jgrnjgq/nlJ/miJDmmYLjga/jgq/jg6rjg4Pjg5Tjg7PjgrDjga7lj43ou6Lkvb/nlKjjga/lhajjgY/plqLkv4LjgYzjgarjgYRcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIC0tLSDlvozlh6bnkIYgLS0tXG4gICAgICB0aGlzLmdsLmJpbmRGcmFtZWJ1ZmZlcih0aGlzLmdsLkZSQU1FQlVGRkVSLCBzX2Zibyk7IC8vIOaPj+eUu+WvvuixoeOCkuaIu+OBmVxuICAgICAgcmVuZGVyZXIuc2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzayhudWxsKTtcblxuICAgICAgdGhpcy5nbC52aWV3cG9ydChcbiAgICAgICAgc192aWV3cG9ydFswXSxcbiAgICAgICAgc192aWV3cG9ydFsxXSxcbiAgICAgICAgc192aWV3cG9ydFsyXSxcbiAgICAgICAgc192aWV3cG9ydFszXVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog5pei44Gr44Oe44K544Kv44KS5L2c44Gj44Gm44GE44KL44GL44KS56K66KqNXG4gICAqIOS9nOOBo+OBpuOBhOOCi+anmOOBp+OBguOCjOOBsOipsuW9k+OBmeOCi+OCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBruOCpOODs+OCueOCv+ODs+OCueOCkui/lOOBmVxuICAgKiDkvZzjgaPjgabjgYTjgarjgZHjgozjgbBOVUxM44KS6L+U44GZXG4gICAqIEBwYXJhbSBkcmF3YWJsZU1hc2tzIOaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOCkuODnuOCueOCr+OBmeOCi+aPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruODquOCueODiFxuICAgKiBAcGFyYW0gZHJhd2FibGVNYXNrQ291bnRzIOaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOCkuODnuOCueOCr+OBmeOCi+aPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruaVsFxuICAgKiBAcmV0dXJuIOipsuW9k+OBmeOCi+OCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBjOWtmOWcqOOBmeOCjOOBsOOCpOODs+OCueOCv+ODs+OCueOCkui/lOOBl+OAgeOBquOBkeOCjOOBsE5VTEzjgpLov5TjgZlcbiAgICovXG4gIHB1YmxpYyBmaW5kU2FtZUNsaXAoXG4gICAgZHJhd2FibGVNYXNrczogSW50MzJBcnJheSxcbiAgICBkcmF3YWJsZU1hc2tDb3VudHM6IG51bWJlclxuICApOiBDdWJpc21DbGlwcGluZ0NvbnRleHQge1xuICAgIC8vIOS9nOaIkOa4iOOBv0NsaXBwaW5nQ29udGV4dOOBqOS4gOiHtOOBmeOCi+OBi+eiuuiqjVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suZ2V0U2l6ZSgpOyBpKyspIHtcbiAgICAgIGNvbnN0IGNsaXBwaW5nQ29udGV4dDogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0ID1cbiAgICAgICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suYXQoaSk7XG4gICAgICBjb25zdCBjb3VudDogbnVtYmVyID0gY2xpcHBpbmdDb250ZXh0Ll9jbGlwcGluZ0lkQ291bnQ7XG5cbiAgICAgIC8vIOWAi+aVsOOBjOmBleOBhuWgtOWQiOOBr+WIpeeJqVxuICAgICAgaWYgKGNvdW50ICE9IGRyYXdhYmxlTWFza0NvdW50cykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgbGV0IHNhbWVDb3VudCA9IDA7XG5cbiAgICAgIC8vIOWQjOOBmElE44KS5oyB44Gk44GL56K66KqN44CC6YWN5YiX44Gu5pWw44GM5ZCM44GY44Gq44Gu44Gn44CB5LiA6Ie044GX44Gf5YCL5pWw44GM5ZCM44GY44Gq44KJ5ZCM44GY54mp44KS5oyB44Gk44Go44GZ44KLXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvdW50OyBqKyspIHtcbiAgICAgICAgY29uc3QgY2xpcElkOiBudW1iZXIgPSBjbGlwcGluZ0NvbnRleHQuX2NsaXBwaW5nSWRMaXN0W2pdO1xuXG4gICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgY291bnQ7IGsrKykge1xuICAgICAgICAgIGlmIChkcmF3YWJsZU1hc2tzW2tdID09IGNsaXBJZCkge1xuICAgICAgICAgICAgc2FtZUNvdW50Kys7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHNhbWVDb3VudCA9PSBjb3VudCkge1xuICAgICAgICByZXR1cm4gY2xpcHBpbmdDb250ZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsOyAvLyDopovjgaTjgYvjgonjgarjgYvjgaPjgZ9cbiAgfVxuXG4gIC8qKlxuICAgKiDjgq/jg6rjg4Pjg5Tjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4jjgpLphY3nva7jgZnjgovjg6zjgqTjgqLjgqbjg4hcbiAgICog5LiA44Gk44Gu44Os44Oz44OA44O844OG44Kv44K544OB44Oj44KS5qW15Yqb44GE44Gj44Gx44GE44Gr5L2/44Gj44Gm44Oe44K544Kv44KS44Os44Kk44Ki44Km44OI44GZ44KLXG4gICAqIOODnuOCueOCr+OCsOODq+ODvOODl+OBruaVsOOBjDTku6XkuIvjgarjgolSR0JB5ZCE44OB44Oj44Oz44ON44Or44Gr5LiA44Gk44Ga44Gk44Oe44K544Kv44KS6YWN572u44GX44CBNeS7peS4ijbku6XkuIvjgarjgolSR0JB44KSMiwyLDEsMeOBqOmFjee9ruOBmeOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gdXNpbmdDbGlwQ291bnQg6YWN572u44GZ44KL44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OI44Gu5pWwXG4gICAqL1xuICBwdWJsaWMgc2V0dXBMYXlvdXRCb3VuZHModXNpbmdDbGlwQ291bnQ6IG51bWJlcik6IHZvaWQge1xuICAgIC8vIOOBsuOBqOOBpOOBrlJlbmRlclRleHR1cmXjgpLmpbXlipvjgYTjgaPjgbHjgYTjgavkvb/jgaPjgabjg57jgrnjgq/jgpLjg6zjgqTjgqLjgqbjg4jjgZnjgotcbiAgICAvLyDjg57jgrnjgq/jgrDjg6vjg7zjg5fjga7mlbDjgYw05Lul5LiL44Gq44KJUkdCQeWQhOODgeODo+ODs+ODjeODq+OBqzHjgaTjgZrjgaTjg57jgrnjgq/jgpLphY3nva7jgZfjgIE15Lul5LiKNuS7peS4i+OBquOCiVJHQkHjgpIyLDIsMSwx44Go6YWN572u44GZ44KLXG5cbiAgICAvLyBSR0JB44KS6aCG55Wq44Gr5L2/44Gj44Gm44GE44GPXG4gICAgbGV0IGRpdjogbnVtYmVyID0gdXNpbmdDbGlwQ291bnQgLyBDb2xvckNoYW5uZWxDb3VudDsgLy8gMeODgeODo+ODs+ODjeODq+OBq+mFjee9ruOBmeOCi+WfuuacrOOBruODnuOCueOCr1xuICAgIGxldCBtb2Q6IG51bWJlciA9IHVzaW5nQ2xpcENvdW50ICUgQ29sb3JDaGFubmVsQ291bnQ7IC8vIOS9meOCiuOAgeOBk+OBrueVquWPt+OBruODgeODo+ODs+ODjeODq+OBvuOBp+OBq+S4gOOBpOOBmuOBpOmFjeWIhuOBmeOCi1xuXG4gICAgLy8g5bCP5pWw54K544Gv5YiH44KK5o2o44Gm44KLXG4gICAgZGl2ID0gfn5kaXY7XG4gICAgbW9kID0gfn5tb2Q7XG5cbiAgICAvLyBSR0JB44Gd44KM44Ge44KM44Gu44OB44Oj44Oz44ON44Or44KS55So5oSP44GX44Gm44GE44GP77yIMDpSLCAxOkcsIDI6QiwgMzpB77yJXG4gICAgbGV0IGN1ckNsaXBJbmRleCA9IDA7IC8vIOmghueVquOBq+ioreWumuOBl+OBpuOBhOOBj1xuXG4gICAgZm9yIChsZXQgY2hhbm5lbE5vID0gMDsgY2hhbm5lbE5vIDwgQ29sb3JDaGFubmVsQ291bnQ7IGNoYW5uZWxObysrKSB7XG4gICAgICAvLyDjgZPjga7jg4Hjg6Pjg7Pjg43jg6vjgavjg6zjgqTjgqLjgqbjg4jjgZnjgovmlbBcbiAgICAgIGNvbnN0IGxheW91dENvdW50OiBudW1iZXIgPSBkaXYgKyAoY2hhbm5lbE5vIDwgbW9kID8gMSA6IDApO1xuXG4gICAgICAvLyDliIblibLmlrnms5XjgpLmsbrlrprjgZnjgotcbiAgICAgIGlmIChsYXlvdXRDb3VudCA9PSAwKSB7XG4gICAgICAgIC8vIOS9leOCguOBl+OBquOBhFxuICAgICAgfSBlbHNlIGlmIChsYXlvdXRDb3VudCA9PSAxKSB7XG4gICAgICAgIC8vIOWFqOOBpuOCkuOBneOBruOBvuOBvuS9v+OBhlxuICAgICAgICBjb25zdCBjbGlwQ29udGV4dDogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0ID1cbiAgICAgICAgICB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5hdChjdXJDbGlwSW5kZXgrKyk7XG4gICAgICAgIGNsaXBDb250ZXh0Ll9sYXlvdXRDaGFubmVsTm8gPSBjaGFubmVsTm87XG4gICAgICAgIGNsaXBDb250ZXh0Ll9sYXlvdXRCb3VuZHMueCA9IDAuMDtcbiAgICAgICAgY2xpcENvbnRleHQuX2xheW91dEJvdW5kcy55ID0gMC4wO1xuICAgICAgICBjbGlwQ29udGV4dC5fbGF5b3V0Qm91bmRzLndpZHRoID0gMS4wO1xuICAgICAgICBjbGlwQ29udGV4dC5fbGF5b3V0Qm91bmRzLmhlaWdodCA9IDEuMDtcbiAgICAgIH0gZWxzZSBpZiAobGF5b3V0Q291bnQgPT0gMikge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxheW91dENvdW50OyBpKyspIHtcbiAgICAgICAgICBsZXQgeHBvczogbnVtYmVyID0gaSAlIDI7XG5cbiAgICAgICAgICAvLyDlsI/mlbDngrnjga/liIfjgormjajjgabjgotcbiAgICAgICAgICB4cG9zID0gfn54cG9zO1xuXG4gICAgICAgICAgY29uc3QgY2M6IEN1YmlzbUNsaXBwaW5nQ29udGV4dCA9IHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLmF0KFxuICAgICAgICAgICAgY3VyQ2xpcEluZGV4KytcbiAgICAgICAgICApO1xuICAgICAgICAgIGNjLl9sYXlvdXRDaGFubmVsTm8gPSBjaGFubmVsTm87XG5cbiAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLnggPSB4cG9zICogMC41O1xuICAgICAgICAgIGNjLl9sYXlvdXRCb3VuZHMueSA9IDAuMDtcbiAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLndpZHRoID0gMC41O1xuICAgICAgICAgIGNjLl9sYXlvdXRCb3VuZHMuaGVpZ2h0ID0gMS4wO1xuICAgICAgICAgIC8vIFVW44KSMuOBpOOBq+WIhuino+OBl+OBpuS9v+OBhlxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGxheW91dENvdW50IDw9IDQpIHtcbiAgICAgICAgLy8gNOWIhuWJsuOBl+OBpuS9v+OBhlxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxheW91dENvdW50OyBpKyspIHtcbiAgICAgICAgICBsZXQgeHBvczogbnVtYmVyID0gaSAlIDI7XG4gICAgICAgICAgbGV0IHlwb3M6IG51bWJlciA9IGkgLyAyO1xuXG4gICAgICAgICAgLy8g5bCP5pWw54K544Gv5YiH44KK5o2o44Gm44KLXG4gICAgICAgICAgeHBvcyA9IH5+eHBvcztcbiAgICAgICAgICB5cG9zID0gfn55cG9zO1xuXG4gICAgICAgICAgY29uc3QgY2MgPSB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5hdChjdXJDbGlwSW5kZXgrKyk7XG4gICAgICAgICAgY2MuX2xheW91dENoYW5uZWxObyA9IGNoYW5uZWxObztcblxuICAgICAgICAgIGNjLl9sYXlvdXRCb3VuZHMueCA9IHhwb3MgKiAwLjU7XG4gICAgICAgICAgY2MuX2xheW91dEJvdW5kcy55ID0geXBvcyAqIDAuNTtcbiAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLndpZHRoID0gMC41O1xuICAgICAgICAgIGNjLl9sYXlvdXRCb3VuZHMuaGVpZ2h0ID0gMC41O1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGxheW91dENvdW50IDw9IDkpIHtcbiAgICAgICAgLy8gOeWIhuWJsuOBl+OBpuS9v+OBhlxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxheW91dENvdW50OyBpKyspIHtcbiAgICAgICAgICBsZXQgeHBvcyA9IGkgJSAzO1xuICAgICAgICAgIGxldCB5cG9zID0gaSAvIDM7XG5cbiAgICAgICAgICAvLyDlsI/mlbDngrnjga/liIfjgormjajjgabjgotcbiAgICAgICAgICB4cG9zID0gfn54cG9zO1xuICAgICAgICAgIHlwb3MgPSB+fnlwb3M7XG5cbiAgICAgICAgICBjb25zdCBjYzogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0ID0gdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suYXQoXG4gICAgICAgICAgICBjdXJDbGlwSW5kZXgrK1xuICAgICAgICAgICk7XG4gICAgICAgICAgY2MuX2xheW91dENoYW5uZWxObyA9IGNoYW5uZWxObztcblxuICAgICAgICAgIGNjLl9sYXlvdXRCb3VuZHMueCA9IHhwb3MgLyAzLjA7XG4gICAgICAgICAgY2MuX2xheW91dEJvdW5kcy55ID0geXBvcyAvIDMuMDtcbiAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLndpZHRoID0gMS4wIC8gMy4wO1xuICAgICAgICAgIGNjLl9sYXlvdXRCb3VuZHMuaGVpZ2h0ID0gMS4wIC8gMy4wO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyDjg57jgrnjgq/jga7liLbpmZDmnprmlbDjgpLotoXjgYjjgZ/loLTlkIjjga7lh6bnkIZcbiAgICAgICAgQ3ViaXNtTG9nRXJyb3IoJ25vdCBzdXBwb3J0ZWQgbWFzayBjb3VudCA6IHswfScsIGxheW91dENvdW50KTtcblxuICAgICAgICAvLyBTZXR1cFNoYWRlclByb2dyYW3jgafjgqrjg7zjg5Djg7zjgqLjgq/jgrvjgrnjgYznmbrnlJ/jgZnjgovjga7jgafku67jgafmlbDlgKTjgpLlhaXjgozjgotcbiAgICAgICAgLy8g44KC44Gh44KN44KT5o+P55S757WQ5p6c44Gv5q2j44GX44GE44KC44Gu44Gn44Gv44Gq44GP44Gq44KLXG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBsYXlvdXRDb3VudDsgaW5kZXgrKykge1xuICAgICAgICAgIGNvbnN0IGNjOiBDdWJpc21DbGlwcGluZ0NvbnRleHQgPSB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5hdChcbiAgICAgICAgICAgIGN1ckNsaXBJbmRleCsrXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIGNjLl9sYXlvdXRDaGFubmVsTm8gPSAwO1xuXG4gICAgICAgICAgY2MuX2xheW91dEJvdW5kcy54ID0gMC4wO1xuICAgICAgICAgIGNjLl9sYXlvdXRCb3VuZHMueSA9IDAuMDtcbiAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLndpZHRoID0gMS4wO1xuICAgICAgICAgIGNjLl9sYXlvdXRCb3VuZHMuaGVpZ2h0ID0gMS4wO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOOCq+ODqeODvOODkOODg+ODleOCoeOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOOCq+ODqeODvOODkOODg+ODleOCoVxuICAgKi9cbiAgcHVibGljIGdldENvbG9yQnVmZmVyKCk6IFdlYkdMVGV4dHVyZSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbG9yQnVmZmVyO1xuICB9XG5cbiAgLyoqXG4gICAqIOeUu+mdouaPj+eUu+OBq+S9v+eUqOOBmeOCi+OCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBruODquOCueODiOOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOeUu+mdouaPj+eUu+OBq+S9v+eUqOOBmeOCi+OCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBruODquOCueODiFxuICAgKi9cbiAgcHVibGljIGdldENsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF3KCk6IGNzbVZlY3RvcjxDdWJpc21DbGlwcGluZ0NvbnRleHQ+IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvckRyYXc7XG4gIH1cblxuICAvKipcbiAgICog44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44OQ44OD44OV44Kh44Gu44K144Kk44K644KS6Kit5a6a44GZ44KLXG4gICAqIEBwYXJhbSBzaXplIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODkOODg+ODleOCoeOBruOCteOCpOOCulxuICAgKi9cbiAgcHVibGljIHNldENsaXBwaW5nTWFza0J1ZmZlclNpemUoc2l6ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fY2xpcHBpbmdNYXNrQnVmZmVyU2l6ZSA9IHNpemU7XG4gIH1cblxuICAvKipcbiAgICog44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44OQ44OD44OV44Kh44Gu44K144Kk44K644KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAqL1xuICBwdWJsaWMgZ2V0Q2xpcHBpbmdNYXNrQnVmZmVyU2l6ZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9jbGlwcGluZ01hc2tCdWZmZXJTaXplO1xuICB9XG5cbiAgcHVibGljIF9tYXNrUmVuZGVyVGV4dHVyZTogV2ViR0xGcmFtZWJ1ZmZlcjsgLy8g44Oe44K544Kv55So44Os44Oz44OA44O844OG44Kv44K544OB44Oj44Gu44Ki44OJ44Os44K5XG4gIHB1YmxpYyBfY29sb3JCdWZmZXI6IFdlYkdMVGV4dHVyZTsgLy8g44Oe44K544Kv55So44Kr44Op44O844OQ44OD44OV44Kh44O844Gu44Ki44OJ44Os44K5XG4gIHB1YmxpYyBfY3VycmVudEZyYW1lTm86IG51bWJlcjsgLy8g44Oe44K544Kv44OG44Kv44K544OB44Oj44Gr5LiO44GI44KL44OV44Os44O844Og55Wq5Y+3XG5cbiAgcHVibGljIF9jaGFubmVsQ29sb3JzOiBjc21WZWN0b3I8Q3ViaXNtVGV4dHVyZUNvbG9yPjtcbiAgcHVibGljIF9tYXNrVGV4dHVyZTogQ3ViaXNtUmVuZGVyVGV4dHVyZVJlc291cmNlOyAvLyDjg57jgrnjgq/nlKjjga7jg4bjgq/jgrnjg4Hjg6Pjg6rjgr3jg7zjgrnjga7jg6rjgrnjg4hcbiAgcHVibGljIF9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzazogY3NtVmVjdG9yPEN1YmlzbUNsaXBwaW5nQ29udGV4dD47IC8vIOODnuOCueOCr+eUqOOCr+ODquODg+ODlOODs+OCsOOCs+ODs+ODhuOCreOCueODiOOBruODquOCueODiFxuICBwdWJsaWMgX2NsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF3OiBjc21WZWN0b3I8Q3ViaXNtQ2xpcHBpbmdDb250ZXh0PjsgLy8g5o+P55S755So44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OI44Gu44Oq44K544OIXG4gIHB1YmxpYyBfY2xpcHBpbmdNYXNrQnVmZmVyU2l6ZTogbnVtYmVyOyAvLyDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jga7jg5Djg4Pjg5XjgqHjgrXjgqTjgrrvvIjliJ3mnJ/lgKQ6MjU277yJXG5cbiAgcHJpdmF0ZSBfdG1wTWF0cml4OiBDdWJpc21NYXRyaXg0NDsgLy8g44Oe44K544Kv6KiI566X55So44Gu6KGM5YiXXG4gIHByaXZhdGUgX3RtcE1hdHJpeEZvck1hc2s6IEN1YmlzbU1hdHJpeDQ0OyAvLyDjg57jgrnjgq/oqIjnrpfnlKjjga7ooYzliJdcbiAgcHJpdmF0ZSBfdG1wTWF0cml4Rm9yRHJhdzogQ3ViaXNtTWF0cml4NDQ7IC8vIOODnuOCueOCr+ioiOeul+eUqOOBruihjOWIl1xuICBwcml2YXRlIF90bXBCb3VuZHNPbk1vZGVsOiBjc21SZWN0OyAvLyDjg57jgrnjgq/phY3nva7oqIjnrpfnlKjjga7nn6nlvaJcblxuICBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0OyAvLyBXZWJHTOODrOODs+ODgOODquODs+OCsOOCs+ODs+ODhuOCreOCueODiFxufVxuXG4vKipcbiAqIOODrOODs+ODgOODvOODhuOCr+OCueODgeODo+OBruODquOCveODvOOCueOCkuWumue+qeOBmeOCi+ani+mAoOS9k1xuICog44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gn5L2/55So44GZ44KLXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21SZW5kZXJUZXh0dXJlUmVzb3VyY2Uge1xuICAvKipcbiAgICog5byV5pWw5LuY44GN44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqIEBwYXJhbSBmcmFtZU5vIOODrOODs+ODgOODqeODvOOBruODleODrOODvOODoOeVquWPt1xuICAgKiBAcGFyYW0gdGV4dHVyZSDjg4bjgq/jgrnjg4Hjg6Pjga7jgqLjg4njg6zjgrlcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihmcmFtZU5vOiBudW1iZXIsIHRleHR1cmU6IFdlYkdMRnJhbWVidWZmZXIpIHtcbiAgICB0aGlzLmZyYW1lTm8gPSBmcmFtZU5vO1xuICAgIHRoaXMudGV4dHVyZSA9IHRleHR1cmU7XG4gIH1cblxuICBwdWJsaWMgZnJhbWVObzogbnVtYmVyOyAvLyDjg6zjg7Pjg4Djg6njga7jg5Xjg6zjg7zjg6Dnlarlj7dcbiAgcHVibGljIHRleHR1cmU6IFdlYkdMRnJhbWVidWZmZXI7IC8vIOODhuOCr+OCueODgeODo+OBruOCouODieODrOOCuVxufVxuXG4vKipcbiAqIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBruOCs+ODs+ODhuOCreOCueODiFxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtQ2xpcHBpbmdDb250ZXh0IHtcbiAgLyoqXG4gICAqIOW8leaVsOS7mOOBjeOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKFxuICAgIG1hbmFnZXI6IEN1YmlzbUNsaXBwaW5nTWFuYWdlcl9XZWJHTCxcbiAgICBjbGlwcGluZ0RyYXdhYmxlSW5kaWNlczogSW50MzJBcnJheSxcbiAgICBjbGlwQ291bnQ6IG51bWJlclxuICApIHtcbiAgICB0aGlzLl9vd25lciA9IG1hbmFnZXI7XG5cbiAgICAvLyDjgq/jg6rjg4Pjg5fjgZfjgabjgYTjgovvvIjvvJ3jg57jgrnjgq/nlKjjga7vvIlEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCueODquOCueODiFxuICAgIHRoaXMuX2NsaXBwaW5nSWRMaXN0ID0gY2xpcHBpbmdEcmF3YWJsZUluZGljZXM7XG5cbiAgICAvLyDjg57jgrnjgq/jga7mlbBcbiAgICB0aGlzLl9jbGlwcGluZ0lkQ291bnQgPSBjbGlwQ291bnQ7XG5cbiAgICB0aGlzLl9hbGxDbGlwcGVkRHJhd1JlY3QgPSBuZXcgY3NtUmVjdCgpO1xuICAgIHRoaXMuX2xheW91dEJvdW5kcyA9IG5ldyBjc21SZWN0KCk7XG5cbiAgICB0aGlzLl9jbGlwcGVkRHJhd2FibGVJbmRleExpc3QgPSBbXTtcblxuICAgIHRoaXMuX21hdHJpeEZvck1hc2sgPSBuZXcgQ3ViaXNtTWF0cml4NDQoKTtcbiAgICB0aGlzLl9tYXRyaXhGb3JEcmF3ID0gbmV3IEN1YmlzbU1hdHJpeDQ0KCk7XG4gIH1cblxuICAvKipcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fbGF5b3V0Qm91bmRzICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX2xheW91dEJvdW5kcyA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2FsbENsaXBwZWREcmF3UmVjdCAhPSBudWxsKSB7XG4gICAgICB0aGlzLl9hbGxDbGlwcGVkRHJhd1JlY3QgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9jbGlwcGVkRHJhd2FibGVJbmRleExpc3QgIT0gbnVsbCkge1xuICAgICAgdGhpcy5fY2xpcHBlZERyYXdhYmxlSW5kZXhMaXN0ID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44GT44Gu44Oe44K544Kv44Gr44Kv44Oq44OD44OX44GV44KM44KL5o+P55S744Kq44OW44K444Kn44Kv44OI44KS6L+95Yqg44GZ44KLXG4gICAqXG4gICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IOOCr+ODquODg+ODlOODs+OCsOWvvuixoeOBq+i/veWKoOOBmeOCi+aPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKi9cbiAgcHVibGljIGFkZENsaXBwZWREcmF3YWJsZShkcmF3YWJsZUluZGV4OiBudW1iZXIpIHtcbiAgICB0aGlzLl9jbGlwcGVkRHJhd2FibGVJbmRleExpc3QucHVzaChkcmF3YWJsZUluZGV4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgZPjga7jg57jgrnjgq/jgpLnrqHnkIbjgZnjgovjg57jg43jg7zjgrjjg6Pjga7jgqTjg7Pjgrnjgr/jg7PjgrnjgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jg43jg7zjgrjjg6Pjga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHB1YmxpYyBnZXRDbGlwcGluZ01hbmFnZXIoKTogQ3ViaXNtQ2xpcHBpbmdNYW5hZ2VyX1dlYkdMIHtcbiAgICByZXR1cm4gdGhpcy5fb3duZXI7XG4gIH1cblxuICBwdWJsaWMgc2V0R2woZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCk6IHZvaWQge1xuICAgIHRoaXMuX293bmVyLnNldEdMKGdsKTtcbiAgfVxuXG4gIHB1YmxpYyBfaXNVc2luZzogYm9vbGVhbjsgLy8g54++5Zyo44Gu5o+P55S754q25oWL44Gn44Oe44K544Kv44Gu5rqW5YKZ44GM5b+F6KaB44Gq44KJdHJ1ZVxuICBwdWJsaWMgcmVhZG9ubHkgX2NsaXBwaW5nSWRMaXN0OiBJbnQzMkFycmF5OyAvLyDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jga5JROODquOCueODiFxuICBwdWJsaWMgX2NsaXBwaW5nSWRDb3VudDogbnVtYmVyOyAvLyDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jga7mlbBcbiAgcHVibGljIF9sYXlvdXRDaGFubmVsTm86IG51bWJlcjsgLy8gUkdCQeOBruOBhOOBmuOCjOOBruODgeODo+ODs+ODjeODq+OBq+OBk+OBruOCr+ODquODg+ODl+OCkumFjee9ruOBmeOCi+OBi++8iDA6UiwgMTpHLCAyOkIsIDM6Qe+8iVxuICBwdWJsaWMgX2xheW91dEJvdW5kczogY3NtUmVjdDsgLy8g44Oe44K544Kv55So44OB44Oj44Oz44ON44Or44Gu44Gp44Gu6aCY5Z+f44Gr44Oe44K544Kv44KS5YWl44KM44KL44GL77yIVmlld+W6p+aomS0xfjEsIFVW44GvMH4x44Gr55u044GZ77yJXG4gIHB1YmxpYyBfYWxsQ2xpcHBlZERyYXdSZWN0OiBjc21SZWN0OyAvLyDjgZPjga7jgq/jg6rjg4Pjg5Tjg7PjgrDjgafjgIHjgq/jg6rjg4Pjg5Tjg7PjgrDjgZXjgozjgovjgZnjgbnjgabjga7mj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7lm7Ljgb/nn6nlvaLvvIjmr47lm57mm7TmlrDvvIlcbiAgcHVibGljIF9tYXRyaXhGb3JNYXNrOiBDdWJpc21NYXRyaXg0NDsgLy8g44Oe44K544Kv44Gu5L2N572u6KiI566X57WQ5p6c44KS5L+d5oyB44GZ44KL6KGM5YiXXG4gIHB1YmxpYyBfbWF0cml4Rm9yRHJhdzogQ3ViaXNtTWF0cml4NDQ7IC8vIOaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruS9jee9ruioiOeul+e1kOaenOOCkuS/neaMgeOBmeOCi+ihjOWIl1xuICBwdWJsaWMgX2NsaXBwZWREcmF3YWJsZUluZGV4TGlzdDogbnVtYmVyW107IC8vIOOBk+OBruODnuOCueOCr+OBq+OCr+ODquODg+ODl+OBleOCjOOCi+aPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruODquOCueODiFxuXG4gIHByaXZhdGUgX293bmVyOiBDdWJpc21DbGlwcGluZ01hbmFnZXJfV2ViR0w7IC8vIOOBk+OBruODnuOCueOCr+OCkueuoeeQhuOBl+OBpuOBhOOCi+ODnuODjeODvOOCuOODo+OBruOCpOODs+OCueOCv+ODs+OCuVxufVxuXG4vKipcbiAqIFdlYkdM55So44Gu44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44KS55Sf5oiQ44O756C05qOE44GZ44KL44Kv44Op44K5XG4gKiDjgrfjg7PjgrDjg6vjg4jjg7Pjgarjgq/jg6njgrnjgafjgYLjgorjgIFDdWJpc21TaGFkZXJfV2ViR0wuZ2V0SW5zdGFuY2XjgYvjgonjgqLjgq/jgrvjgrnjgZnjgovjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbVNoYWRlcl9XZWJHTCB7XG4gIC8qKlxuICAgKiDjgqTjg7Pjgrnjgr/jg7PjgrnjgpLlj5blvpfjgZnjgovvvIjjgrfjg7PjgrDjg6vjg4jjg7PvvIlcbiAgICogQHJldHVybiDjgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2UoKTogQ3ViaXNtU2hhZGVyX1dlYkdMIHtcbiAgICBpZiAoc19pbnN0YW5jZSA9PSBudWxsKSB7XG4gICAgICBzX2luc3RhbmNlID0gbmV3IEN1YmlzbVNoYWRlcl9XZWJHTCgpO1xuXG4gICAgICByZXR1cm4gc19pbnN0YW5jZTtcbiAgICB9XG4gICAgcmV0dXJuIHNfaW5zdGFuY2U7XG4gIH1cblxuICAvKipcbiAgICog44Kk44Oz44K544K/44Oz44K544KS6ZaL5pS+44GZ44KL77yI44K344Oz44Kw44Or44OI44Oz77yJXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGRlbGV0ZUluc3RhbmNlKCk6IHZvaWQge1xuICAgIGlmIChzX2luc3RhbmNlKSB7XG4gICAgICBzX2luc3RhbmNlLnJlbGVhc2UoKTtcbiAgICAgIHNfaW5zdGFuY2UgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBwcml2YXRl44Gq44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwcml2YXRlIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3NoYWRlclNldHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbVNoYWRlclNldD4oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIHRoaXMucmVsZWFzZVNoYWRlclByb2dyYW0oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6Djga7kuIDpgKPjga7jgrvjg4Pjg4jjgqLjg4Pjg5fjgpLlrp/ooYzjgZnjgotcbiAgICogQHBhcmFtIHJlbmRlcmVyIOODrOODs+ODgOODqeOBruOCpOODs+OCueOCv+ODs+OCuVxuICAgKiBAcGFyYW0gdGV4dHVyZUlkIEdQVeOBruODhuOCr+OCueODgeODo0lEXG4gICAqIEBwYXJhbSB2ZXJ0ZXhDb3VudCDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6Xjga7poILngrnmlbBcbiAgICogQHBhcmFtIHZlcnRleEFycmF5IOODneODquOCtOODs+ODoeODg+OCt+ODpeOBrumggueCuemFjeWIl1xuICAgKiBAcGFyYW0gaW5kZXhBcnJheSDjgqTjg7Pjg4fjg4Pjgq/jgrnjg5Djg4Pjg5XjgqHjga7poILngrnphY3liJdcbiAgICogQHBhcmFtIHV2QXJyYXkgdXbphY3liJdcbiAgICogQHBhcmFtIG9wYWNpdHkg5LiN6YCP5piO5bqmXG4gICAqIEBwYXJhbSBjb2xvckJsZW5kTW9kZSDjgqvjg6njg7zjg5bjg6zjg7Pjg4fjgqPjg7PjgrDjga7jgr/jgqTjg5dcbiAgICogQHBhcmFtIGJhc2VDb2xvciDjg5njg7zjgrnjgqvjg6njg7xcbiAgICogQHBhcmFtIGlzUHJlbXVsdGlwbGllZEFscGhhIOS5l+eul+a4iOOBv+OCouODq+ODleOCoeOBi+OBqeOBhuOBi1xuICAgKiBAcGFyYW0gbWF0cml4NHg0IE1vZGVsLVZpZXctUHJvamVjdGlvbuihjOWIl1xuICAgKiBAcGFyYW0gaW52ZXJ0ZWRNYXNrIOODnuOCueOCr+OCkuWPjei7ouOBl+OBpuS9v+eUqOOBmeOCi+ODleODqeOCsFxuICAgKi9cbiAgcHVibGljIHNldHVwU2hhZGVyUHJvZ3JhbShcbiAgICByZW5kZXJlcjogQ3ViaXNtUmVuZGVyZXJfV2ViR0wsXG4gICAgdGV4dHVyZUlkOiBXZWJHTFRleHR1cmUsXG4gICAgdmVydGV4Q291bnQ6IG51bWJlcixcbiAgICB2ZXJ0ZXhBcnJheTogRmxvYXQzMkFycmF5LFxuICAgIGluZGV4QXJyYXk6IFVpbnQxNkFycmF5LFxuICAgIHV2QXJyYXk6IEZsb2F0MzJBcnJheSxcbiAgICBidWZmZXJEYXRhOiB7XG4gICAgICB2ZXJ0ZXg6IFdlYkdMQnVmZmVyO1xuICAgICAgdXY6IFdlYkdMQnVmZmVyO1xuICAgICAgaW5kZXg6IFdlYkdMQnVmZmVyO1xuICAgIH0sXG4gICAgb3BhY2l0eTogbnVtYmVyLFxuICAgIGNvbG9yQmxlbmRNb2RlOiBDdWJpc21CbGVuZE1vZGUsXG4gICAgYmFzZUNvbG9yOiBDdWJpc21UZXh0dXJlQ29sb3IsXG4gICAgbXVsdGlwbHlDb2xvcjogQ3ViaXNtVGV4dHVyZUNvbG9yLFxuICAgIHNjcmVlbkNvbG9yOiBDdWJpc21UZXh0dXJlQ29sb3IsXG4gICAgaXNQcmVtdWx0aXBsaWVkQWxwaGE6IGJvb2xlYW4sXG4gICAgbWF0cml4NHg0OiBDdWJpc21NYXRyaXg0NCxcbiAgICBpbnZlcnRlZE1hc2s6IGJvb2xlYW5cbiAgKTogdm9pZCB7XG4gICAgaWYgKCFpc1ByZW11bHRpcGxpZWRBbHBoYSkge1xuICAgICAgQ3ViaXNtTG9nRXJyb3IoJ05vUHJlbXVsdGlwbGllZEFscGhhIGlzIG5vdCBhbGxvd2VkJyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3NoYWRlclNldHMuZ2V0U2l6ZSgpID09IDApIHtcbiAgICAgIHRoaXMuZ2VuZXJhdGVTaGFkZXJzKCk7XG4gICAgfVxuXG4gICAgLy8gQmxlbmRpbmdcbiAgICBsZXQgU1JDX0NPTE9SOiBudW1iZXI7XG4gICAgbGV0IERTVF9DT0xPUjogbnVtYmVyO1xuICAgIGxldCBTUkNfQUxQSEE6IG51bWJlcjtcbiAgICBsZXQgRFNUX0FMUEhBOiBudW1iZXI7XG5cbiAgICBpZiAocmVuZGVyZXIuZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzaygpICE9IG51bGwpIHtcbiAgICAgIC8vIOODnuOCueOCr+eUn+aIkOaZglxuICAgICAgY29uc3Qgc2hhZGVyU2V0OiBDdWJpc21TaGFkZXJTZXQgPSB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICBTaGFkZXJOYW1lcy5TaGFkZXJOYW1lc19TZXR1cE1hc2tcbiAgICAgICk7XG4gICAgICB0aGlzLmdsLnVzZVByb2dyYW0oc2hhZGVyU2V0LnNoYWRlclByb2dyYW0pO1xuXG4gICAgICAvLyDjg4bjgq/jgrnjg4Hjg6PoqK3lrppcbiAgICAgIHRoaXMuZ2wuYWN0aXZlVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkUwKTtcbiAgICAgIHRoaXMuZ2wuYmluZFRleHR1cmUodGhpcy5nbC5URVhUVVJFXzJELCB0ZXh0dXJlSWQpO1xuICAgICAgdGhpcy5nbC51bmlmb3JtMWkoc2hhZGVyU2V0LnNhbXBsZXJUZXh0dXJlMExvY2F0aW9uLCAwKTtcblxuICAgICAgLy8g6aCC54K56YWN5YiX44Gu6Kit5a6aKFZCTylcbiAgICAgIGlmIChidWZmZXJEYXRhLnZlcnRleCA9PSBudWxsKSB7XG4gICAgICAgIGJ1ZmZlckRhdGEudmVydGV4ID0gdGhpcy5nbC5jcmVhdGVCdWZmZXIoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLmdsLkFSUkFZX0JVRkZFUiwgYnVmZmVyRGF0YS52ZXJ0ZXgpO1xuICAgICAgdGhpcy5nbC5idWZmZXJEYXRhKFxuICAgICAgICB0aGlzLmdsLkFSUkFZX0JVRkZFUixcbiAgICAgICAgdmVydGV4QXJyYXksXG4gICAgICAgIHRoaXMuZ2wuRFlOQU1JQ19EUkFXXG4gICAgICApO1xuICAgICAgdGhpcy5nbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShzaGFkZXJTZXQuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbik7XG4gICAgICB0aGlzLmdsLnZlcnRleEF0dHJpYlBvaW50ZXIoXG4gICAgICAgIHNoYWRlclNldC5hdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uLFxuICAgICAgICAyLFxuICAgICAgICB0aGlzLmdsLkZMT0FULFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgMCxcbiAgICAgICAgMFxuICAgICAgKTtcblxuICAgICAgLy8g44OG44Kv44K544OB44Oj6aCC54K544Gu6Kit5a6aXG4gICAgICBpZiAoYnVmZmVyRGF0YS51diA9PSBudWxsKSB7XG4gICAgICAgIGJ1ZmZlckRhdGEudXYgPSB0aGlzLmdsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgICAgfVxuICAgICAgdGhpcy5nbC5iaW5kQnVmZmVyKHRoaXMuZ2wuQVJSQVlfQlVGRkVSLCBidWZmZXJEYXRhLnV2KTtcbiAgICAgIHRoaXMuZ2wuYnVmZmVyRGF0YSh0aGlzLmdsLkFSUkFZX0JVRkZFUiwgdXZBcnJheSwgdGhpcy5nbC5EWU5BTUlDX0RSQVcpO1xuICAgICAgdGhpcy5nbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShzaGFkZXJTZXQuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbik7XG4gICAgICB0aGlzLmdsLnZlcnRleEF0dHJpYlBvaW50ZXIoXG4gICAgICAgIHNoYWRlclNldC5hdHRyaWJ1dGVUZXhDb29yZExvY2F0aW9uLFxuICAgICAgICAyLFxuICAgICAgICB0aGlzLmdsLkZMT0FULFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgMCxcbiAgICAgICAgMFxuICAgICAgKTtcblxuICAgICAgLy8g44OB44Oj44Oz44ON44OrXG4gICAgICBjb25zdCBjaGFubmVsTm86IG51bWJlciA9XG4gICAgICAgIHJlbmRlcmVyLmdldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2soKS5fbGF5b3V0Q2hhbm5lbE5vO1xuICAgICAgY29uc3QgY29sb3JDaGFubmVsOiBDdWJpc21UZXh0dXJlQ29sb3IgPSByZW5kZXJlclxuICAgICAgICAuZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzaygpXG4gICAgICAgIC5nZXRDbGlwcGluZ01hbmFnZXIoKVxuICAgICAgICAuZ2V0Q2hhbm5lbEZsYWdBc0NvbG9yKGNoYW5uZWxObyk7XG4gICAgICB0aGlzLmdsLnVuaWZvcm00ZihcbiAgICAgICAgc2hhZGVyU2V0LnVuaWZvcm1DaGFubmVsRmxhZ0xvY2F0aW9uLFxuICAgICAgICBjb2xvckNoYW5uZWwuUixcbiAgICAgICAgY29sb3JDaGFubmVsLkcsXG4gICAgICAgIGNvbG9yQ2hhbm5lbC5CLFxuICAgICAgICBjb2xvckNoYW5uZWwuQVxuICAgICAgKTtcblxuICAgICAgdGhpcy5nbC51bmlmb3JtTWF0cml4NGZ2KFxuICAgICAgICBzaGFkZXJTZXQudW5pZm9ybUNsaXBNYXRyaXhMb2NhdGlvbixcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIHJlbmRlcmVyLmdldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2soKS5fbWF0cml4Rm9yTWFzay5nZXRBcnJheSgpXG4gICAgICApO1xuXG4gICAgICBjb25zdCByZWN0OiBjc21SZWN0ID1cbiAgICAgICAgcmVuZGVyZXIuZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzaygpLl9sYXlvdXRCb3VuZHM7XG5cbiAgICAgIHRoaXMuZ2wudW5pZm9ybTRmKFxuICAgICAgICBzaGFkZXJTZXQudW5pZm9ybUJhc2VDb2xvckxvY2F0aW9uLFxuICAgICAgICByZWN0LnggKiAyLjAgLSAxLjAsXG4gICAgICAgIHJlY3QueSAqIDIuMCAtIDEuMCxcbiAgICAgICAgcmVjdC5nZXRSaWdodCgpICogMi4wIC0gMS4wLFxuICAgICAgICByZWN0LmdldEJvdHRvbSgpICogMi4wIC0gMS4wXG4gICAgICApO1xuXG4gICAgICB0aGlzLmdsLnVuaWZvcm00ZihcbiAgICAgICAgc2hhZGVyU2V0LnVuaWZvcm1NdWx0aXBseUNvbG9yTG9jYXRpb24sXG4gICAgICAgIG11bHRpcGx5Q29sb3IuUixcbiAgICAgICAgbXVsdGlwbHlDb2xvci5HLFxuICAgICAgICBtdWx0aXBseUNvbG9yLkIsXG4gICAgICAgIG11bHRpcGx5Q29sb3IuQVxuICAgICAgKTtcblxuICAgICAgdGhpcy5nbC51bmlmb3JtNGYoXG4gICAgICAgIHNoYWRlclNldC51bmlmb3JtU2NyZWVuQ29sb3JMb2NhdGlvbixcbiAgICAgICAgc2NyZWVuQ29sb3IuUixcbiAgICAgICAgc2NyZWVuQ29sb3IuRyxcbiAgICAgICAgc2NyZWVuQ29sb3IuQixcbiAgICAgICAgc2NyZWVuQ29sb3IuQVxuICAgICAgKTtcblxuICAgICAgU1JDX0NPTE9SID0gdGhpcy5nbC5aRVJPO1xuICAgICAgRFNUX0NPTE9SID0gdGhpcy5nbC5PTkVfTUlOVVNfU1JDX0NPTE9SO1xuICAgICAgU1JDX0FMUEhBID0gdGhpcy5nbC5aRVJPO1xuICAgICAgRFNUX0FMUEhBID0gdGhpcy5nbC5PTkVfTUlOVVNfU1JDX0FMUEhBO1xuICAgIH0gLy8g44Oe44K544Kv55Sf5oiQ5Lul5aSW44Gu5aC05ZCIXG4gICAgZWxzZSB7XG4gICAgICBjb25zdCBtYXNrZWQ6IGJvb2xlYW4gPVxuICAgICAgICByZW5kZXJlci5nZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3KCkgIT0gbnVsbDsgLy8g44GT44Gu5o+P55S744Kq44OW44K444Kn44Kv44OI44Gv44Oe44K544Kv5a++6LGh44GLXG4gICAgICBjb25zdCBvZmZzZXQ6IG51bWJlciA9IG1hc2tlZCA/IChpbnZlcnRlZE1hc2sgPyAyIDogMSkgOiAwO1xuXG4gICAgICBsZXQgc2hhZGVyU2V0OiBDdWJpc21TaGFkZXJTZXQgPSBuZXcgQ3ViaXNtU2hhZGVyU2V0KCk7XG5cbiAgICAgIHN3aXRjaCAoY29sb3JCbGVuZE1vZGUpIHtcbiAgICAgICAgY2FzZSBDdWJpc21CbGVuZE1vZGUuQ3ViaXNtQmxlbmRNb2RlX05vcm1hbDpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBzaGFkZXJTZXQgPSB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICAgICAgU2hhZGVyTmFtZXMuU2hhZGVyTmFtZXNfTm9ybWFsUHJlbXVsdGlwbGllZEFscGhhICsgb2Zmc2V0XG4gICAgICAgICAgKTtcbiAgICAgICAgICBTUkNfQ09MT1IgPSB0aGlzLmdsLk9ORTtcbiAgICAgICAgICBEU1RfQ09MT1IgPSB0aGlzLmdsLk9ORV9NSU5VU19TUkNfQUxQSEE7XG4gICAgICAgICAgU1JDX0FMUEhBID0gdGhpcy5nbC5PTkU7XG4gICAgICAgICAgRFNUX0FMUEhBID0gdGhpcy5nbC5PTkVfTUlOVVNfU1JDX0FMUEhBO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgQ3ViaXNtQmxlbmRNb2RlLkN1YmlzbUJsZW5kTW9kZV9BZGRpdGl2ZTpcbiAgICAgICAgICBzaGFkZXJTZXQgPSB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICAgICAgU2hhZGVyTmFtZXMuU2hhZGVyTmFtZXNfQWRkUHJlbXVsdGlwbGllZEFscGhhICsgb2Zmc2V0XG4gICAgICAgICAgKTtcbiAgICAgICAgICBTUkNfQ09MT1IgPSB0aGlzLmdsLk9ORTtcbiAgICAgICAgICBEU1RfQ09MT1IgPSB0aGlzLmdsLk9ORTtcbiAgICAgICAgICBTUkNfQUxQSEEgPSB0aGlzLmdsLlpFUk87XG4gICAgICAgICAgRFNUX0FMUEhBID0gdGhpcy5nbC5PTkU7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBDdWJpc21CbGVuZE1vZGUuQ3ViaXNtQmxlbmRNb2RlX011bHRpcGxpY2F0aXZlOlxuICAgICAgICAgIHNoYWRlclNldCA9IHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgICAgICBTaGFkZXJOYW1lcy5TaGFkZXJOYW1lc19NdWx0UHJlbXVsdGlwbGllZEFscGhhICsgb2Zmc2V0XG4gICAgICAgICAgKTtcbiAgICAgICAgICBTUkNfQ09MT1IgPSB0aGlzLmdsLkRTVF9DT0xPUjtcbiAgICAgICAgICBEU1RfQ09MT1IgPSB0aGlzLmdsLk9ORV9NSU5VU19TUkNfQUxQSEE7XG4gICAgICAgICAgU1JDX0FMUEhBID0gdGhpcy5nbC5aRVJPO1xuICAgICAgICAgIERTVF9BTFBIQSA9IHRoaXMuZ2wuT05FO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmdsLnVzZVByb2dyYW0oc2hhZGVyU2V0LnNoYWRlclByb2dyYW0pO1xuXG4gICAgICAvLyDpoILngrnphY3liJfjga7oqK3lrppcbiAgICAgIGlmIChidWZmZXJEYXRhLnZlcnRleCA9PSBudWxsKSB7XG4gICAgICAgIGJ1ZmZlckRhdGEudmVydGV4ID0gdGhpcy5nbC5jcmVhdGVCdWZmZXIoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLmdsLkFSUkFZX0JVRkZFUiwgYnVmZmVyRGF0YS52ZXJ0ZXgpO1xuICAgICAgdGhpcy5nbC5idWZmZXJEYXRhKFxuICAgICAgICB0aGlzLmdsLkFSUkFZX0JVRkZFUixcbiAgICAgICAgdmVydGV4QXJyYXksXG4gICAgICAgIHRoaXMuZ2wuRFlOQU1JQ19EUkFXXG4gICAgICApO1xuICAgICAgdGhpcy5nbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShzaGFkZXJTZXQuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbik7XG4gICAgICB0aGlzLmdsLnZlcnRleEF0dHJpYlBvaW50ZXIoXG4gICAgICAgIHNoYWRlclNldC5hdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uLFxuICAgICAgICAyLFxuICAgICAgICB0aGlzLmdsLkZMT0FULFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgMCxcbiAgICAgICAgMFxuICAgICAgKTtcblxuICAgICAgLy8g44OG44Kv44K544OB44Oj6aCC54K544Gu6Kit5a6aXG4gICAgICBpZiAoYnVmZmVyRGF0YS51diA9PSBudWxsKSB7XG4gICAgICAgIGJ1ZmZlckRhdGEudXYgPSB0aGlzLmdsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgICAgfVxuICAgICAgdGhpcy5nbC5iaW5kQnVmZmVyKHRoaXMuZ2wuQVJSQVlfQlVGRkVSLCBidWZmZXJEYXRhLnV2KTtcbiAgICAgIHRoaXMuZ2wuYnVmZmVyRGF0YSh0aGlzLmdsLkFSUkFZX0JVRkZFUiwgdXZBcnJheSwgdGhpcy5nbC5EWU5BTUlDX0RSQVcpO1xuICAgICAgdGhpcy5nbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShzaGFkZXJTZXQuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbik7XG4gICAgICB0aGlzLmdsLnZlcnRleEF0dHJpYlBvaW50ZXIoXG4gICAgICAgIHNoYWRlclNldC5hdHRyaWJ1dGVUZXhDb29yZExvY2F0aW9uLFxuICAgICAgICAyLFxuICAgICAgICB0aGlzLmdsLkZMT0FULFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgMCxcbiAgICAgICAgMFxuICAgICAgKTtcblxuICAgICAgaWYgKG1hc2tlZCkge1xuICAgICAgICB0aGlzLmdsLmFjdGl2ZVRleHR1cmUodGhpcy5nbC5URVhUVVJFMSk7XG4gICAgICAgIGNvbnN0IHRleDogV2ViR0xUZXh0dXJlID0gcmVuZGVyZXJcbiAgICAgICAgICAuZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdygpXG4gICAgICAgICAgLmdldENsaXBwaW5nTWFuYWdlcigpXG4gICAgICAgICAgLmdldENvbG9yQnVmZmVyKCk7XG4gICAgICAgIHRoaXMuZ2wuYmluZFRleHR1cmUodGhpcy5nbC5URVhUVVJFXzJELCB0ZXgpO1xuICAgICAgICB0aGlzLmdsLnVuaWZvcm0xaShzaGFkZXJTZXQuc2FtcGxlclRleHR1cmUxTG9jYXRpb24sIDEpO1xuXG4gICAgICAgIC8vIHZpZXfluqfmqJnjgpJDbGlwcGluZ0NvbnRleHTjga7luqfmqJnjgavlpInmj5vjgZnjgovjgZ/jgoHjga7ooYzliJfjgpLoqK3lrppcbiAgICAgICAgdGhpcy5nbC51bmlmb3JtTWF0cml4NGZ2KFxuICAgICAgICAgIHNoYWRlclNldC51bmlmb3JtQ2xpcE1hdHJpeExvY2F0aW9uLFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIHJlbmRlcmVyLmdldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvckRyYXcoKS5fbWF0cml4Rm9yRHJhdy5nZXRBcnJheSgpXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8g5L2/55So44GZ44KL44Kr44Op44O844OB44Oj44Oz44ON44Or44KS6Kit5a6aXG4gICAgICAgIGNvbnN0IGNoYW5uZWxObzogbnVtYmVyID1cbiAgICAgICAgICByZW5kZXJlci5nZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3KCkuX2xheW91dENoYW5uZWxObztcbiAgICAgICAgY29uc3QgY29sb3JDaGFubmVsOiBDdWJpc21UZXh0dXJlQ29sb3IgPSByZW5kZXJlclxuICAgICAgICAgIC5nZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3KClcbiAgICAgICAgICAuZ2V0Q2xpcHBpbmdNYW5hZ2VyKClcbiAgICAgICAgICAuZ2V0Q2hhbm5lbEZsYWdBc0NvbG9yKGNoYW5uZWxObyk7XG4gICAgICAgIHRoaXMuZ2wudW5pZm9ybTRmKFxuICAgICAgICAgIHNoYWRlclNldC51bmlmb3JtQ2hhbm5lbEZsYWdMb2NhdGlvbixcbiAgICAgICAgICBjb2xvckNoYW5uZWwuUixcbiAgICAgICAgICBjb2xvckNoYW5uZWwuRyxcbiAgICAgICAgICBjb2xvckNoYW5uZWwuQixcbiAgICAgICAgICBjb2xvckNoYW5uZWwuQVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAvLyDjg4bjgq/jgrnjg4Hjg6PoqK3lrppcbiAgICAgIHRoaXMuZ2wuYWN0aXZlVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkUwKTtcbiAgICAgIHRoaXMuZ2wuYmluZFRleHR1cmUodGhpcy5nbC5URVhUVVJFXzJELCB0ZXh0dXJlSWQpO1xuICAgICAgdGhpcy5nbC51bmlmb3JtMWkoc2hhZGVyU2V0LnNhbXBsZXJUZXh0dXJlMExvY2F0aW9uLCAwKTtcblxuICAgICAgLy8g5bqn5qiZ5aSJ5o+bXG4gICAgICB0aGlzLmdsLnVuaWZvcm1NYXRyaXg0ZnYoXG4gICAgICAgIHNoYWRlclNldC51bmlmb3JtTWF0cml4TG9jYXRpb24sXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBtYXRyaXg0eDQuZ2V0QXJyYXkoKVxuICAgICAgKTtcblxuICAgICAgdGhpcy5nbC51bmlmb3JtNGYoXG4gICAgICAgIHNoYWRlclNldC51bmlmb3JtQmFzZUNvbG9yTG9jYXRpb24sXG4gICAgICAgIGJhc2VDb2xvci5SLFxuICAgICAgICBiYXNlQ29sb3IuRyxcbiAgICAgICAgYmFzZUNvbG9yLkIsXG4gICAgICAgIGJhc2VDb2xvci5BXG4gICAgICApO1xuXG4gICAgICB0aGlzLmdsLnVuaWZvcm00ZihcbiAgICAgICAgc2hhZGVyU2V0LnVuaWZvcm1NdWx0aXBseUNvbG9yTG9jYXRpb24sXG4gICAgICAgIG11bHRpcGx5Q29sb3IuUixcbiAgICAgICAgbXVsdGlwbHlDb2xvci5HLFxuICAgICAgICBtdWx0aXBseUNvbG9yLkIsXG4gICAgICAgIG11bHRpcGx5Q29sb3IuQVxuICAgICAgKTtcblxuICAgICAgdGhpcy5nbC51bmlmb3JtNGYoXG4gICAgICAgIHNoYWRlclNldC51bmlmb3JtU2NyZWVuQ29sb3JMb2NhdGlvbixcbiAgICAgICAgc2NyZWVuQ29sb3IuUixcbiAgICAgICAgc2NyZWVuQ29sb3IuRyxcbiAgICAgICAgc2NyZWVuQ29sb3IuQixcbiAgICAgICAgc2NyZWVuQ29sb3IuQVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBJQk/jgpLkvZzmiJDjgZfjgIHjg4fjg7zjgr/jgpLou6LpgIFcbiAgICBpZiAoYnVmZmVyRGF0YS5pbmRleCA9PSBudWxsKSB7XG4gICAgICBidWZmZXJEYXRhLmluZGV4ID0gdGhpcy5nbC5jcmVhdGVCdWZmZXIoKTtcbiAgICB9XG4gICAgdGhpcy5nbC5iaW5kQnVmZmVyKHRoaXMuZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIGJ1ZmZlckRhdGEuaW5kZXgpO1xuICAgIHRoaXMuZ2wuYnVmZmVyRGF0YShcbiAgICAgIHRoaXMuZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsXG4gICAgICBpbmRleEFycmF5LFxuICAgICAgdGhpcy5nbC5EWU5BTUlDX0RSQVdcbiAgICApO1xuICAgIHRoaXMuZ2wuYmxlbmRGdW5jU2VwYXJhdGUoU1JDX0NPTE9SLCBEU1RfQ09MT1IsIFNSQ19BTFBIQSwgRFNUX0FMUEhBKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgpLop6PmlL7jgZnjgotcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlU2hhZGVyUHJvZ3JhbSgpOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3NoYWRlclNldHMuZ2V0U2l6ZSgpOyBpKyspIHtcbiAgICAgIHRoaXMuZ2wuZGVsZXRlUHJvZ3JhbSh0aGlzLl9zaGFkZXJTZXRzLmF0KGkpLnNoYWRlclByb2dyYW0pO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChpKS5zaGFkZXJQcm9ncmFtID0gMDtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuc2V0KGksIHZvaWQgMCk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLnNldChpLCBudWxsKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44KS5Yid5pyf5YyW44GZ44KLXG4gICAqIEBwYXJhbSB2ZXJ0U2hhZGVyU3JjIOmggueCueOCt+OCp+ODvOODgOOBruOCveODvOOCuVxuICAgKiBAcGFyYW0gZnJhZ1NoYWRlclNyYyDjg5Xjg6njgrDjg6Hjg7Pjg4jjgrfjgqfjg7zjg4Djga7jgr3jg7zjgrlcbiAgICovXG4gIHB1YmxpYyBnZW5lcmF0ZVNoYWRlcnMoKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGFkZXJDb3VudDsgaSsrKSB7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLnB1c2hCYWNrKG5ldyBDdWJpc21TaGFkZXJTZXQoKSk7XG4gICAgfVxuXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgwKS5zaGFkZXJQcm9ncmFtID0gdGhpcy5sb2FkU2hhZGVyUHJvZ3JhbShcbiAgICAgIHZlcnRleFNoYWRlclNyY1NldHVwTWFzayxcbiAgICAgIGZyYWdtZW50U2hhZGVyU3Jjc2V0dXBNYXNrXG4gICAgKTtcblxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMSkuc2hhZGVyUHJvZ3JhbSA9IHRoaXMubG9hZFNoYWRlclByb2dyYW0oXG4gICAgICB2ZXJ0ZXhTaGFkZXJTcmMsXG4gICAgICBmcmFnbWVudFNoYWRlclNyY1ByZW11bHRpcGxpZWRBbHBoYVxuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zaGFkZXJQcm9ncmFtID0gdGhpcy5sb2FkU2hhZGVyUHJvZ3JhbShcbiAgICAgIHZlcnRleFNoYWRlclNyY01hc2tlZCxcbiAgICAgIGZyYWdtZW50U2hhZGVyU3JjTWFza1ByZW11bHRpcGxpZWRBbHBoYVxuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5zaGFkZXJQcm9ncmFtID0gdGhpcy5sb2FkU2hhZGVyUHJvZ3JhbShcbiAgICAgIHZlcnRleFNoYWRlclNyY01hc2tlZCxcbiAgICAgIGZyYWdtZW50U2hhZGVyU3JjTWFza0ludmVydGVkUHJlbXVsdGlwbGllZEFscGhhXG4gICAgKTtcblxuICAgIC8vIOWKoOeul+OCgumAmuW4uOOBqOWQjOOBmOOCt+OCp+ODvOODgOODvOOCkuWIqeeUqOOBmeOCi1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNCkuc2hhZGVyUHJvZ3JhbSA9IHRoaXMuX3NoYWRlclNldHMuYXQoMSkuc2hhZGVyUHJvZ3JhbTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnNoYWRlclByb2dyYW0gPSB0aGlzLl9zaGFkZXJTZXRzLmF0KDIpLnNoYWRlclByb2dyYW07XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5zaGFkZXJQcm9ncmFtID0gdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5zaGFkZXJQcm9ncmFtO1xuXG4gICAgLy8g5LmX566X44KC6YCa5bi444Go5ZCM44GY44K344Kn44O844OA44O844KS5Yip55So44GZ44KLXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg3KS5zaGFkZXJQcm9ncmFtID0gdGhpcy5fc2hhZGVyU2V0cy5hdCgxKS5zaGFkZXJQcm9ncmFtO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOCkuc2hhZGVyUHJvZ3JhbSA9IHRoaXMuX3NoYWRlclNldHMuYXQoMikuc2hhZGVyUHJvZ3JhbTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDkpLnNoYWRlclByb2dyYW0gPSB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLnNoYWRlclByb2dyYW07XG5cbiAgICAvLyBTZXR1cE1hc2tcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDApLmF0dHJpYnV0ZVBvc2l0aW9uTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgwKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV9wb3NpdGlvbidcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgwKS5hdHRyaWJ1dGVUZXhDb29yZExvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ2FfdGV4Q29vcmQnXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMCkuc2FtcGxlclRleHR1cmUwTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICdzX3RleHR1cmUwJ1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgwKS51bmlmb3JtQ2xpcE1hdHJpeExvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDApLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X2NsaXBNYXRyaXgnXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMCkudW5pZm9ybUNoYW5uZWxGbGFnTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfY2hhbm5lbEZsYWcnXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMCkudW5pZm9ybUJhc2VDb2xvckxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDApLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X2Jhc2VDb2xvcidcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgwKS51bmlmb3JtTXVsdGlwbHlDb2xvckxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDApLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X211bHRpcGx5Q29sb3InXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMCkudW5pZm9ybVNjcmVlbkNvbG9yTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3Vfc2NyZWVuQ29sb3InXG4gICAgICApO1xuXG4gICAgLy8g6YCa5bi477yIUHJlbXVsdGlwbGllZEFscGhh77yJXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgxKS5hdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ2FfcG9zaXRpb24nXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMSkuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDEpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdhX3RleENvb3JkJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDEpLnNhbXBsZXJUZXh0dXJlMExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDEpLnNoYWRlclByb2dyYW0sXG4gICAgICAnc190ZXh0dXJlMCdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMSkudW5pZm9ybU1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDEpLnNoYWRlclByb2dyYW0sXG4gICAgICAndV9tYXRyaXgnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDEpLnVuaWZvcm1CYXNlQ29sb3JMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgxKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9iYXNlQ29sb3InXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMSkudW5pZm9ybU11bHRpcGx5Q29sb3JMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgxKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9tdWx0aXBseUNvbG9yJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDEpLnVuaWZvcm1TY3JlZW5Db2xvckxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDEpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X3NjcmVlbkNvbG9yJ1xuICAgICAgKTtcblxuICAgIC8vIOmAmuW4uO+8iOOCr+ODquODg+ODlOODs+OCsOOAgVByZW11bHRpcGxpZWRBbHBoYe+8iVxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMikuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDIpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdhX3Bvc2l0aW9uJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDIpLmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV90ZXhDb29yZCdcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zYW1wbGVyVGV4dHVyZTBMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ3NfdGV4dHVyZTAnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDIpLnNhbXBsZXJUZXh0dXJlMUxvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDIpLnNoYWRlclByb2dyYW0sXG4gICAgICAnc190ZXh0dXJlMSdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMikudW5pZm9ybU1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDIpLnNoYWRlclByb2dyYW0sXG4gICAgICAndV9tYXRyaXgnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDIpLnVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMikuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfY2xpcE1hdHJpeCdcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS51bmlmb3JtQ2hhbm5lbEZsYWdMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9jaGFubmVsRmxhZydcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS51bmlmb3JtQmFzZUNvbG9yTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMikuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfYmFzZUNvbG9yJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDIpLnVuaWZvcm1NdWx0aXBseUNvbG9yTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMikuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfbXVsdGlwbHlDb2xvcidcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS51bmlmb3JtU2NyZWVuQ29sb3JMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9zY3JlZW5Db2xvcidcbiAgICAgICk7XG5cbiAgICAvLyDpgJrluLjvvIjjgq/jg6rjg4Pjg5Tjg7PjgrDjg7vlj43ou6IsIFByZW11bHRpcGxpZWRBbHBoYe+8iVxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMykuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdhX3Bvc2l0aW9uJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV90ZXhDb29yZCdcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5zYW1wbGVyVGV4dHVyZTBMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ3NfdGV4dHVyZTAnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLnNhbXBsZXJUZXh0dXJlMUxvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLnNoYWRlclByb2dyYW0sXG4gICAgICAnc190ZXh0dXJlMSdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMykudW5pZm9ybU1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLnNoYWRlclByb2dyYW0sXG4gICAgICAndV9tYXRyaXgnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLnVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMykuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfY2xpcE1hdHJpeCdcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS51bmlmb3JtQ2hhbm5lbEZsYWdMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9jaGFubmVsRmxhZydcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS51bmlmb3JtQmFzZUNvbG9yTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMykuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfYmFzZUNvbG9yJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLnVuaWZvcm1NdWx0aXBseUNvbG9yTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMykuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfbXVsdGlwbHlDb2xvcidcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS51bmlmb3JtU2NyZWVuQ29sb3JMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9zY3JlZW5Db2xvcidcbiAgICAgICk7XG5cbiAgICAvLyDliqDnrpfvvIhQcmVtdWx0aXBsaWVkQWxwaGHvvIlcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDQpLmF0dHJpYnV0ZVBvc2l0aW9uTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg0KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV9wb3NpdGlvbidcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg0KS5hdHRyaWJ1dGVUZXhDb29yZExvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ2FfdGV4Q29vcmQnXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNCkuc2FtcGxlclRleHR1cmUwTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICdzX3RleHR1cmUwJ1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg0KS51bmlmb3JtTWF0cml4TG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICd1X21hdHJpeCdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNCkudW5pZm9ybUJhc2VDb2xvckxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDQpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X2Jhc2VDb2xvcidcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg0KS51bmlmb3JtTXVsdGlwbHlDb2xvckxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDQpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X211bHRpcGx5Q29sb3InXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNCkudW5pZm9ybVNjcmVlbkNvbG9yTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3Vfc2NyZWVuQ29sb3InXG4gICAgICApO1xuXG4gICAgLy8g5Yqg566X77yI44Kv44Oq44OD44OU44Oz44Kw44CBUHJlbXVsdGlwbGllZEFscGhh77yJXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg1KS5hdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ2FfcG9zaXRpb24nXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdhX3RleENvb3JkJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnNhbXBsZXJUZXh0dXJlMExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnNoYWRlclByb2dyYW0sXG4gICAgICAnc190ZXh0dXJlMCdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkuc2FtcGxlclRleHR1cmUxTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICdzX3RleHR1cmUxJ1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg1KS51bmlmb3JtTWF0cml4TG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICd1X21hdHJpeCdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkudW5pZm9ybUNsaXBNYXRyaXhMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg1KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9jbGlwTWF0cml4J1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnVuaWZvcm1DaGFubmVsRmxhZ0xvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X2NoYW5uZWxGbGFnJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnVuaWZvcm1CYXNlQ29sb3JMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg1KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9iYXNlQ29sb3InXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkudW5pZm9ybU11bHRpcGx5Q29sb3JMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg1KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9tdWx0aXBseUNvbG9yJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnVuaWZvcm1TY3JlZW5Db2xvckxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X3NjcmVlbkNvbG9yJ1xuICAgICAgKTtcblxuICAgIC8vIOWKoOeul++8iOOCr+ODquODg+ODlOODs+OCsOODu+WPjei7ouOAgVByZW11bHRpcGxpZWRBbHBoYe+8iVxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNikuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdhX3Bvc2l0aW9uJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV90ZXhDb29yZCdcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5zYW1wbGVyVGV4dHVyZTBMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ3NfdGV4dHVyZTAnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnNhbXBsZXJUZXh0dXJlMUxvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnNoYWRlclByb2dyYW0sXG4gICAgICAnc190ZXh0dXJlMSdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNikudW5pZm9ybU1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnNoYWRlclByb2dyYW0sXG4gICAgICAndV9tYXRyaXgnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNikuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfY2xpcE1hdHJpeCdcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS51bmlmb3JtQ2hhbm5lbEZsYWdMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9jaGFubmVsRmxhZydcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS51bmlmb3JtQmFzZUNvbG9yTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNikuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfYmFzZUNvbG9yJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnVuaWZvcm1NdWx0aXBseUNvbG9yTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNikuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfbXVsdGlwbHlDb2xvcidcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS51bmlmb3JtU2NyZWVuQ29sb3JMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9zY3JlZW5Db2xvcidcbiAgICAgICk7XG5cbiAgICAvLyDkuZfnrpfvvIhQcmVtdWx0aXBsaWVkQWxwaGHvvIlcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDcpLmF0dHJpYnV0ZVBvc2l0aW9uTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg3KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV9wb3NpdGlvbidcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg3KS5hdHRyaWJ1dGVUZXhDb29yZExvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNykuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ2FfdGV4Q29vcmQnXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNykuc2FtcGxlclRleHR1cmUwTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNykuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICdzX3RleHR1cmUwJ1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg3KS51bmlmb3JtTWF0cml4TG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNykuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICd1X21hdHJpeCdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNykudW5pZm9ybUJhc2VDb2xvckxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDcpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X2Jhc2VDb2xvcidcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg3KS51bmlmb3JtTXVsdGlwbHlDb2xvckxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDcpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X211bHRpcGx5Q29sb3InXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNykudW5pZm9ybVNjcmVlbkNvbG9yTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNykuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3Vfc2NyZWVuQ29sb3InXG4gICAgICApO1xuXG4gICAgLy8g5LmX566X77yI44Kv44Oq44OD44OU44Oz44Kw44CBUHJlbXVsdGlwbGllZEFscGhh77yJXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg4KS5hdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ2FfcG9zaXRpb24nXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOCkuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDgpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdhX3RleENvb3JkJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDgpLnNhbXBsZXJUZXh0dXJlMExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDgpLnNoYWRlclByb2dyYW0sXG4gICAgICAnc190ZXh0dXJlMCdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOCkuc2FtcGxlclRleHR1cmUxTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICdzX3RleHR1cmUxJ1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg4KS51bmlmb3JtTWF0cml4TG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICd1X21hdHJpeCdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOCkudW5pZm9ybUNsaXBNYXRyaXhMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg4KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9jbGlwTWF0cml4J1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDgpLnVuaWZvcm1DaGFubmVsRmxhZ0xvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDgpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X2NoYW5uZWxGbGFnJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDgpLnVuaWZvcm1CYXNlQ29sb3JMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg4KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9iYXNlQ29sb3InXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOCkudW5pZm9ybU11bHRpcGx5Q29sb3JMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg4KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9tdWx0aXBseUNvbG9yJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDgpLnVuaWZvcm1TY3JlZW5Db2xvckxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDgpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X3NjcmVlbkNvbG9yJ1xuICAgICAgKTtcblxuICAgIC8vIOS5l+eul++8iOOCr+ODquODg+ODlOODs+OCsOODu+WPjei7ouOAgVByZW11bHRpcGxpZWRBbHBoYe+8iVxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDkpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdhX3Bvc2l0aW9uJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDkpLmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg5KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV90ZXhDb29yZCdcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg5KS5zYW1wbGVyVGV4dHVyZTBMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg5KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ3NfdGV4dHVyZTAnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDkpLnNhbXBsZXJUZXh0dXJlMUxvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDkpLnNoYWRlclByb2dyYW0sXG4gICAgICAnc190ZXh0dXJlMSdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkudW5pZm9ybU1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDkpLnNoYWRlclByb2dyYW0sXG4gICAgICAndV9tYXRyaXgnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDkpLnVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfY2xpcE1hdHJpeCdcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg5KS51bmlmb3JtQ2hhbm5lbEZsYWdMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg5KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9jaGFubmVsRmxhZydcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg5KS51bmlmb3JtQmFzZUNvbG9yTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfYmFzZUNvbG9yJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDkpLnVuaWZvcm1NdWx0aXBseUNvbG9yTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfbXVsdGlwbHlDb2xvcidcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg5KS51bmlmb3JtU2NyZWVuQ29sb3JMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg5KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9zY3JlZW5Db2xvcidcbiAgICAgICk7XG4gIH1cblxuICAvKipcbiAgICog44K344Kn44O844OA44OX44Ot44Kw44Op44Og44KS44Ot44O844OJ44GX44Gm44Ki44OJ44Os44K544KS6L+U44GZXG4gICAqIEBwYXJhbSB2ZXJ0ZXhTaGFkZXJTb3VyY2UgICAg6aCC54K544K344Kn44O844OA44Gu44K944O844K5XG4gICAqIEBwYXJhbSBmcmFnbWVudFNoYWRlclNvdXJjZSAg44OV44Op44Kw44Oh44Oz44OI44K344Kn44O844OA44Gu44K944O844K5XG4gICAqIEByZXR1cm4g44K344Kn44O844OA44OX44Ot44Kw44Op44Og44Gu44Ki44OJ44Os44K5XG4gICAqL1xuICBwdWJsaWMgbG9hZFNoYWRlclByb2dyYW0oXG4gICAgdmVydGV4U2hhZGVyU291cmNlOiBzdHJpbmcsXG4gICAgZnJhZ21lbnRTaGFkZXJTb3VyY2U6IHN0cmluZ1xuICApOiBXZWJHTFByb2dyYW0ge1xuICAgIC8vIENyZWF0ZSBTaGFkZXIgUHJvZ3JhbVxuICAgIGxldCBzaGFkZXJQcm9ncmFtOiBXZWJHTFByb2dyYW0gPSB0aGlzLmdsLmNyZWF0ZVByb2dyYW0oKTtcblxuICAgIGxldCB2ZXJ0U2hhZGVyID0gdGhpcy5jb21waWxlU2hhZGVyU291cmNlKFxuICAgICAgdGhpcy5nbC5WRVJURVhfU0hBREVSLFxuICAgICAgdmVydGV4U2hhZGVyU291cmNlXG4gICAgKTtcblxuICAgIGlmICghdmVydFNoYWRlcikge1xuICAgICAgQ3ViaXNtTG9nRXJyb3IoJ1ZlcnRleCBzaGFkZXIgY29tcGlsZSBlcnJvciEnKTtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIGxldCBmcmFnU2hhZGVyID0gdGhpcy5jb21waWxlU2hhZGVyU291cmNlKFxuICAgICAgdGhpcy5nbC5GUkFHTUVOVF9TSEFERVIsXG4gICAgICBmcmFnbWVudFNoYWRlclNvdXJjZVxuICAgICk7XG4gICAgaWYgKCFmcmFnU2hhZGVyKSB7XG4gICAgICBDdWJpc21Mb2dFcnJvcignVmVydGV4IHNoYWRlciBjb21waWxlIGVycm9yIScpO1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgLy8gQXR0YWNoIHZlcnRleCBzaGFkZXIgdG8gcHJvZ3JhbVxuICAgIHRoaXMuZ2wuYXR0YWNoU2hhZGVyKHNoYWRlclByb2dyYW0sIHZlcnRTaGFkZXIpO1xuXG4gICAgLy8gQXR0YWNoIGZyYWdtZW50IHNoYWRlciB0byBwcm9ncmFtXG4gICAgdGhpcy5nbC5hdHRhY2hTaGFkZXIoc2hhZGVyUHJvZ3JhbSwgZnJhZ1NoYWRlcik7XG5cbiAgICAvLyBsaW5rIHByb2dyYW1cbiAgICB0aGlzLmdsLmxpbmtQcm9ncmFtKHNoYWRlclByb2dyYW0pO1xuICAgIGNvbnN0IGxpbmtTdGF0dXMgPSB0aGlzLmdsLmdldFByb2dyYW1QYXJhbWV0ZXIoXG4gICAgICBzaGFkZXJQcm9ncmFtLFxuICAgICAgdGhpcy5nbC5MSU5LX1NUQVRVU1xuICAgICk7XG5cbiAgICAvLyDjg6rjg7Pjgq/jgavlpLHmlZfjgZfjgZ/jgonjgrfjgqfjg7zjg4Djg7zjgpLliYrpmaRcbiAgICBpZiAoIWxpbmtTdGF0dXMpIHtcbiAgICAgIEN1YmlzbUxvZ0Vycm9yKCdGYWlsZWQgdG8gbGluayBwcm9ncmFtOiB7MH0nLCBzaGFkZXJQcm9ncmFtKTtcblxuICAgICAgdGhpcy5nbC5kZWxldGVTaGFkZXIodmVydFNoYWRlcik7XG4gICAgICB2ZXJ0U2hhZGVyID0gMDtcblxuICAgICAgdGhpcy5nbC5kZWxldGVTaGFkZXIoZnJhZ1NoYWRlcik7XG4gICAgICBmcmFnU2hhZGVyID0gMDtcblxuICAgICAgaWYgKHNoYWRlclByb2dyYW0pIHtcbiAgICAgICAgdGhpcy5nbC5kZWxldGVQcm9ncmFtKHNoYWRlclByb2dyYW0pO1xuICAgICAgICBzaGFkZXJQcm9ncmFtID0gMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgLy8gUmVsZWFzZSB2ZXJ0ZXggYW5kIGZyYWdtZW50IHNoYWRlcnMuXG4gICAgdGhpcy5nbC5kZWxldGVTaGFkZXIodmVydFNoYWRlcik7XG4gICAgdGhpcy5nbC5kZWxldGVTaGFkZXIoZnJhZ1NoYWRlcik7XG5cbiAgICByZXR1cm4gc2hhZGVyUHJvZ3JhbTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgpLjgrPjg7Pjg5HjgqTjg6vjgZnjgotcbiAgICogQHBhcmFtIHNoYWRlclR5cGUg44K344Kn44O844OA44K/44Kk44OXKFZlcnRleC9GcmFnbWVudClcbiAgICogQHBhcmFtIHNoYWRlclNvdXJjZSDjgrfjgqfjg7zjg4Djgr3jg7zjgrnjgrPjg7zjg4lcbiAgICpcbiAgICogQHJldHVybiDjgrPjg7Pjg5HjgqTjg6vjgZXjgozjgZ/jgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6BcbiAgICovXG4gIHB1YmxpYyBjb21waWxlU2hhZGVyU291cmNlKFxuICAgIHNoYWRlclR5cGU6IEdMZW51bSxcbiAgICBzaGFkZXJTb3VyY2U6IHN0cmluZ1xuICApOiBXZWJHTFByb2dyYW0ge1xuICAgIGNvbnN0IHNvdXJjZTogc3RyaW5nID0gc2hhZGVyU291cmNlO1xuXG4gICAgY29uc3Qgc2hhZGVyOiBXZWJHTFByb2dyYW0gPSB0aGlzLmdsLmNyZWF0ZVNoYWRlcihzaGFkZXJUeXBlKTtcbiAgICB0aGlzLmdsLnNoYWRlclNvdXJjZShzaGFkZXIsIHNvdXJjZSk7XG4gICAgdGhpcy5nbC5jb21waWxlU2hhZGVyKHNoYWRlcik7XG5cbiAgICBpZiAoIXNoYWRlcikge1xuICAgICAgY29uc3QgbG9nOiBzdHJpbmcgPSB0aGlzLmdsLmdldFNoYWRlckluZm9Mb2coc2hhZGVyKTtcbiAgICAgIEN1YmlzbUxvZ0Vycm9yKCdTaGFkZXIgY29tcGlsZSBsb2c6IHswfSAnLCBsb2cpO1xuICAgIH1cblxuICAgIGNvbnN0IHN0YXR1czogYW55ID0gdGhpcy5nbC5nZXRTaGFkZXJQYXJhbWV0ZXIoXG4gICAgICBzaGFkZXIsXG4gICAgICB0aGlzLmdsLkNPTVBJTEVfU1RBVFVTXG4gICAgKTtcbiAgICBpZiAoIXN0YXR1cykge1xuICAgICAgdGhpcy5nbC5kZWxldGVTaGFkZXIoc2hhZGVyKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBzaGFkZXI7XG4gIH1cblxuICBwdWJsaWMgc2V0R2woZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCk6IHZvaWQge1xuICAgIHRoaXMuZ2wgPSBnbDtcbiAgfVxuXG4gIF9zaGFkZXJTZXRzOiBjc21WZWN0b3I8Q3ViaXNtU2hhZGVyU2V0PjsgLy8g44Ot44O844OJ44GX44Gf44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44KS5L+d5oyB44GZ44KL5aSJ5pWwXG4gIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7IC8vIHdlYmds44Kz44Oz44OG44Kt44K544OIXG59XG5cbi8qKlxuICogQ3ViaXNtU2hhZGVyX1dlYkdM44Gu44Kk44Oz44OK44O844Kv44Op44K5XG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21TaGFkZXJTZXQge1xuICBzaGFkZXJQcm9ncmFtOiBXZWJHTFByb2dyYW07IC8vIOOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOBruOCouODieODrOOCuVxuICBhdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uOiBHTHVpbnQ7IC8vIOOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOBq+a4oeOBmeWkieaVsOOBruOCouODieODrOOCue+8iFBvc2l0aW9u77yJXG4gIGF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb246IEdMdWludDsgLy8g44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44Gr5rih44GZ5aSJ5pWw44Gu44Ki44OJ44Os44K577yIVGV4Q29vcmTvvIlcbiAgdW5pZm9ybU1hdHJpeExvY2F0aW9uOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbjsgLy8g44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44Gr5rih44GZ5aSJ5pWw44Gu44Ki44OJ44Os44K577yITWF0cml477yJXG4gIHVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb246IFdlYkdMVW5pZm9ybUxvY2F0aW9uOyAvLyDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgavmuKHjgZnlpInmlbDjga7jgqLjg4njg6zjgrnvvIhDbGlwTWF0cml477yJXG4gIHNhbXBsZXJUZXh0dXJlMExvY2F0aW9uOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbjsgLy8g44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44Gr5rih44GZ5aSJ5pWw44Gu44Ki44OJ44Os44K577yIVGV4dHVyZTDvvIlcbiAgc2FtcGxlclRleHR1cmUxTG9jYXRpb246IFdlYkdMVW5pZm9ybUxvY2F0aW9uOyAvLyDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgavmuKHjgZnlpInmlbDjga7jgqLjg4njg6zjgrnvvIhUZXh0dXJlMe+8iVxuICB1bmlmb3JtQmFzZUNvbG9yTG9jYXRpb246IFdlYkdMVW5pZm9ybUxvY2F0aW9uOyAvLyDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgavmuKHjgZnlpInmlbDjga7jgqLjg4njg6zjgrnvvIhCYXNlQ29sb3LvvIlcbiAgdW5pZm9ybUNoYW5uZWxGbGFnTG9jYXRpb246IFdlYkdMVW5pZm9ybUxvY2F0aW9uOyAvLyDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgavmuKHjgZnlpInmlbDjga7jgqLjg4njg6zjgrnvvIhDaGFubmVsRmxhZ++8iVxuICB1bmlmb3JtTXVsdGlwbHlDb2xvckxvY2F0aW9uOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbjsgLy8g44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44Gr5rih44GZ5aSJ5pWw44Gu44Ki44OJ44Os44K577yITXVsdGlwbHlDb2xvcu+8iVxuICB1bmlmb3JtU2NyZWVuQ29sb3JMb2NhdGlvbjogV2ViR0xVbmlmb3JtTG9jYXRpb247IC8vIOOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOBq+a4oeOBmeWkieaVsOOBruOCouODieODrOOCue+8iFNjcmVlbkNvbG9y77yJXG59XG5cbmV4cG9ydCBlbnVtIFNoYWRlck5hbWVzIHtcbiAgLy8gU2V0dXBNYXNrXG4gIFNoYWRlck5hbWVzX1NldHVwTWFzayxcblxuICAvLyBOb3JtYWxcbiAgU2hhZGVyTmFtZXNfTm9ybWFsUHJlbXVsdGlwbGllZEFscGhhLFxuICBTaGFkZXJOYW1lc19Ob3JtYWxNYXNrZWRQcmVtdWx0aXBsaWVkQWxwaGEsXG4gIFNoYWRlck5hbWVzX05vbXJhbE1hc2tlZEludmVydGVkUHJlbXVsdGlwbGllZEFscGhhLFxuXG4gIC8vIEFkZFxuICBTaGFkZXJOYW1lc19BZGRQcmVtdWx0aXBsaWVkQWxwaGEsXG4gIFNoYWRlck5hbWVzX0FkZE1hc2tlZFByZW11bHRpcGxpZWRBbHBoYSxcbiAgU2hhZGVyTmFtZXNfQWRkTWFza2VkUHJlbXVsdGlwbGllZEFscGhhSW52ZXJ0ZWQsXG5cbiAgLy8gTXVsdFxuICBTaGFkZXJOYW1lc19NdWx0UHJlbXVsdGlwbGllZEFscGhhLFxuICBTaGFkZXJOYW1lc19NdWx0TWFza2VkUHJlbXVsdGlwbGllZEFscGhhLFxuICBTaGFkZXJOYW1lc19NdWx0TWFza2VkUHJlbXVsdGlwbGllZEFscGhhSW52ZXJ0ZWQsXG59XG5cbmV4cG9ydCBjb25zdCB2ZXJ0ZXhTaGFkZXJTcmNTZXR1cE1hc2sgPVxuICAnYXR0cmlidXRlIHZlYzQgICAgIGFfcG9zaXRpb247JyArXG4gICdhdHRyaWJ1dGUgdmVjMiAgICAgYV90ZXhDb29yZDsnICtcbiAgJ3ZhcnlpbmcgdmVjMiAgICAgICB2X3RleENvb3JkOycgK1xuICAndmFyeWluZyB2ZWM0ICAgICAgIHZfbXlQb3M7JyArXG4gICd1bmlmb3JtIG1hdDQgICAgICAgdV9jbGlwTWF0cml4OycgK1xuICAndm9pZCBtYWluKCknICtcbiAgJ3snICtcbiAgJyAgIGdsX1Bvc2l0aW9uID0gdV9jbGlwTWF0cml4ICogYV9wb3NpdGlvbjsnICtcbiAgJyAgIHZfbXlQb3MgPSB1X2NsaXBNYXRyaXggKiBhX3Bvc2l0aW9uOycgK1xuICAnICAgdl90ZXhDb29yZCA9IGFfdGV4Q29vcmQ7JyArXG4gICcgICB2X3RleENvb3JkLnkgPSAxLjAgLSB2X3RleENvb3JkLnk7JyArXG4gICd9JztcbmV4cG9ydCBjb25zdCBmcmFnbWVudFNoYWRlclNyY3NldHVwTWFzayA9XG4gICdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnICtcbiAgJ3ZhcnlpbmcgdmVjMiAgICAgICB2X3RleENvb3JkOycgK1xuICAndmFyeWluZyB2ZWM0ICAgICAgIHZfbXlQb3M7JyArXG4gICd1bmlmb3JtIHZlYzQgICAgICAgdV9iYXNlQ29sb3I7JyArXG4gICd1bmlmb3JtIHZlYzQgICAgICAgdV9jaGFubmVsRmxhZzsnICtcbiAgJ3VuaWZvcm0gc2FtcGxlcjJEICBzX3RleHR1cmUwOycgK1xuICAndm9pZCBtYWluKCknICtcbiAgJ3snICtcbiAgJyAgIGZsb2F0IGlzSW5zaWRlID0gJyArXG4gICcgICAgICAgc3RlcCh1X2Jhc2VDb2xvci54LCB2X215UG9zLngvdl9teVBvcy53KScgK1xuICAnICAgICAgICogc3RlcCh1X2Jhc2VDb2xvci55LCB2X215UG9zLnkvdl9teVBvcy53KScgK1xuICAnICAgICAgICogc3RlcCh2X215UG9zLngvdl9teVBvcy53LCB1X2Jhc2VDb2xvci56KScgK1xuICAnICAgICAgICogc3RlcCh2X215UG9zLnkvdl9teVBvcy53LCB1X2Jhc2VDb2xvci53KTsnICtcbiAgJyAgIGdsX0ZyYWdDb2xvciA9IHVfY2hhbm5lbEZsYWcgKiB0ZXh0dXJlMkQoc190ZXh0dXJlMCwgdl90ZXhDb29yZCkuYSAqIGlzSW5zaWRlOycgK1xuICAnfSc7XG5cbi8vLS0tLS0g44OQ44O844OG44OD44Kv44K544K344Kn44O844OA44OX44Ot44Kw44Op44OgIC0tLS0tXG4vLyBOb3JtYWwgJiBBZGQgJiBNdWx0IOWFsemAmlxuZXhwb3J0IGNvbnN0IHZlcnRleFNoYWRlclNyYyA9XG4gICdhdHRyaWJ1dGUgdmVjNCAgICAgYV9wb3NpdGlvbjsnICsgLy92LnZlcnRleFxuICAnYXR0cmlidXRlIHZlYzIgICAgIGFfdGV4Q29vcmQ7JyArIC8vdi50ZXhjb29yZFxuICAndmFyeWluZyB2ZWMyICAgICAgIHZfdGV4Q29vcmQ7JyArIC8vdjJmLnRleGNvb3JkXG4gICd1bmlmb3JtIG1hdDQgICAgICAgdV9tYXRyaXg7JyArXG4gICd2b2lkIG1haW4oKScgK1xuICAneycgK1xuICAnICAgZ2xfUG9zaXRpb24gPSB1X21hdHJpeCAqIGFfcG9zaXRpb247JyArXG4gICcgICB2X3RleENvb3JkID0gYV90ZXhDb29yZDsnICtcbiAgJyAgIHZfdGV4Q29vcmQueSA9IDEuMCAtIHZfdGV4Q29vcmQueTsnICtcbiAgJ30nO1xuXG4vLyBOb3JtYWwgJiBBZGQgJiBNdWx0IOWFsemAmu+8iOOCr+ODquODg+ODlOODs+OCsOOBleOCjOOBn+OCguOBruOBruaPj+eUu+eUqO+8iVxuZXhwb3J0IGNvbnN0IHZlcnRleFNoYWRlclNyY01hc2tlZCA9XG4gICdhdHRyaWJ1dGUgdmVjNCAgICAgYV9wb3NpdGlvbjsnICtcbiAgJ2F0dHJpYnV0ZSB2ZWMyICAgICBhX3RleENvb3JkOycgK1xuICAndmFyeWluZyB2ZWMyICAgICAgIHZfdGV4Q29vcmQ7JyArXG4gICd2YXJ5aW5nIHZlYzQgICAgICAgdl9jbGlwUG9zOycgK1xuICAndW5pZm9ybSBtYXQ0ICAgICAgIHVfbWF0cml4OycgK1xuICAndW5pZm9ybSBtYXQ0ICAgICAgIHVfY2xpcE1hdHJpeDsnICtcbiAgJ3ZvaWQgbWFpbigpJyArXG4gICd7JyArXG4gICcgICBnbF9Qb3NpdGlvbiA9IHVfbWF0cml4ICogYV9wb3NpdGlvbjsnICtcbiAgJyAgIHZfY2xpcFBvcyA9IHVfY2xpcE1hdHJpeCAqIGFfcG9zaXRpb247JyArXG4gICcgICB2X3RleENvb3JkID0gYV90ZXhDb29yZDsnICtcbiAgJyAgIHZfdGV4Q29vcmQueSA9IDEuMCAtIHZfdGV4Q29vcmQueTsnICtcbiAgJ30nO1xuXG4vLy0tLS0tIOODleODqeOCsOODoeODs+ODiOOCt+OCp+ODvOODgOODl+ODreOCsOODqeODoCAtLS0tLVxuLy8gTm9ybWFsICYgQWRkICYgTXVsdCDlhbHpgJog77yIUHJlbXVsdGlwbGllZEFscGhh77yJXG5leHBvcnQgY29uc3QgZnJhZ21lbnRTaGFkZXJTcmNQcmVtdWx0aXBsaWVkQWxwaGEgPVxuICAncHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7JyArXG4gICd2YXJ5aW5nIHZlYzIgICAgICAgdl90ZXhDb29yZDsnICsgLy92MmYudGV4Y29vcmRcbiAgJ3VuaWZvcm0gdmVjNCAgICAgICB1X2Jhc2VDb2xvcjsnICtcbiAgJ3VuaWZvcm0gc2FtcGxlcjJEICBzX3RleHR1cmUwOycgKyAvL19NYWluVGV4XG4gICd1bmlmb3JtIHZlYzQgICAgICAgdV9tdWx0aXBseUNvbG9yOycgK1xuICAndW5pZm9ybSB2ZWM0ICAgICAgIHVfc2NyZWVuQ29sb3I7JyArXG4gICd2b2lkIG1haW4oKScgK1xuICAneycgK1xuICAnICAgdmVjNCB0ZXhDb2xvciA9IHRleHR1cmUyRChzX3RleHR1cmUwLCB2X3RleENvb3JkKTsnICtcbiAgJyAgIHRleENvbG9yLnJnYiA9IHRleENvbG9yLnJnYiAqIHVfbXVsdGlwbHlDb2xvci5yZ2I7JyArXG4gICcgICB0ZXhDb2xvci5yZ2IgPSAodGV4Q29sb3IucmdiICsgdV9zY3JlZW5Db2xvci5yZ2IgKiB0ZXhDb2xvci5hKSAtICh0ZXhDb2xvci5yZ2IgKiB1X3NjcmVlbkNvbG9yLnJnYik7JyArXG4gICcgICB2ZWM0IGNvbG9yID0gdGV4Q29sb3IgKiB1X2Jhc2VDb2xvcjsnICtcbiAgJyAgIGdsX0ZyYWdDb2xvciA9IHZlYzQoY29sb3IucmdiLCBjb2xvci5hKTsnICtcbiAgJ30nO1xuXG4vLyBOb3JtYWwg77yI44Kv44Oq44OD44OU44Oz44Kw44GV44KM44Gf44KC44Gu44Gu5o+P55S755So44CBUHJlbXVsdGlwbGllZEFscGhh5YW855So77yJXG5leHBvcnQgY29uc3QgZnJhZ21lbnRTaGFkZXJTcmNNYXNrUHJlbXVsdGlwbGllZEFscGhhID1cbiAgJ3ByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OycgK1xuICAndmFyeWluZyB2ZWMyICAgICAgIHZfdGV4Q29vcmQ7JyArXG4gICd2YXJ5aW5nIHZlYzQgICAgICAgdl9jbGlwUG9zOycgK1xuICAndW5pZm9ybSB2ZWM0ICAgICAgIHVfYmFzZUNvbG9yOycgK1xuICAndW5pZm9ybSB2ZWM0ICAgICAgIHVfY2hhbm5lbEZsYWc7JyArXG4gICd1bmlmb3JtIHNhbXBsZXIyRCAgc190ZXh0dXJlMDsnICtcbiAgJ3VuaWZvcm0gc2FtcGxlcjJEICBzX3RleHR1cmUxOycgK1xuICAndW5pZm9ybSB2ZWM0ICAgICAgIHVfbXVsdGlwbHlDb2xvcjsnICtcbiAgJ3VuaWZvcm0gdmVjNCAgICAgICB1X3NjcmVlbkNvbG9yOycgK1xuICAndm9pZCBtYWluKCknICtcbiAgJ3snICtcbiAgJyAgIHZlYzQgdGV4Q29sb3IgPSB0ZXh0dXJlMkQoc190ZXh0dXJlMCwgdl90ZXhDb29yZCk7JyArXG4gICcgICB0ZXhDb2xvci5yZ2IgPSB0ZXhDb2xvci5yZ2IgKiB1X211bHRpcGx5Q29sb3IucmdiOycgK1xuICAnICAgdGV4Q29sb3IucmdiID0gKHRleENvbG9yLnJnYiArIHVfc2NyZWVuQ29sb3IucmdiICogdGV4Q29sb3IuYSkgLSAodGV4Q29sb3IucmdiICogdV9zY3JlZW5Db2xvci5yZ2IpOycgK1xuICAnICAgdmVjNCBjb2xfZm9ybWFzayA9IHRleENvbG9yICogdV9iYXNlQ29sb3I7JyArXG4gICcgICB2ZWM0IGNsaXBNYXNrID0gKDEuMCAtIHRleHR1cmUyRChzX3RleHR1cmUxLCB2X2NsaXBQb3MueHkgLyB2X2NsaXBQb3MudykpICogdV9jaGFubmVsRmxhZzsnICtcbiAgJyAgIGZsb2F0IG1hc2tWYWwgPSBjbGlwTWFzay5yICsgY2xpcE1hc2suZyArIGNsaXBNYXNrLmIgKyBjbGlwTWFzay5hOycgK1xuICAnICAgY29sX2Zvcm1hc2sgPSBjb2xfZm9ybWFzayAqIG1hc2tWYWw7JyArXG4gICcgICBnbF9GcmFnQ29sb3IgPSBjb2xfZm9ybWFzazsnICtcbiAgJ30nO1xuXG4vLyBOb3JtYWwgJiBBZGQgJiBNdWx0IOWFsemAmu+8iOOCr+ODquODg+ODlOODs+OCsOOBleOCjOOBpuWPjei7ouS9v+eUqOOBruaPj+eUu+eUqOOAgVByZW11bHRpcGxpZWRBbHBoYeOBruWgtOWQiO+8iVxuZXhwb3J0IGNvbnN0IGZyYWdtZW50U2hhZGVyU3JjTWFza0ludmVydGVkUHJlbXVsdGlwbGllZEFscGhhID1cbiAgJ3ByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OycgK1xuICAndmFyeWluZyB2ZWMyICAgICAgdl90ZXhDb29yZDsnICtcbiAgJ3ZhcnlpbmcgdmVjNCAgICAgIHZfY2xpcFBvczsnICtcbiAgJ3VuaWZvcm0gc2FtcGxlcjJEIHNfdGV4dHVyZTA7JyArXG4gICd1bmlmb3JtIHNhbXBsZXIyRCBzX3RleHR1cmUxOycgK1xuICAndW5pZm9ybSB2ZWM0ICAgICAgdV9jaGFubmVsRmxhZzsnICtcbiAgJ3VuaWZvcm0gdmVjNCAgICAgIHVfYmFzZUNvbG9yOycgK1xuICAndW5pZm9ybSB2ZWM0ICAgICAgdV9tdWx0aXBseUNvbG9yOycgK1xuICAndW5pZm9ybSB2ZWM0ICAgICAgdV9zY3JlZW5Db2xvcjsnICtcbiAgJ3ZvaWQgbWFpbigpJyArXG4gICd7JyArXG4gICcgICB2ZWM0IHRleENvbG9yID0gdGV4dHVyZTJEKHNfdGV4dHVyZTAsIHZfdGV4Q29vcmQpOycgK1xuICAnICAgdGV4Q29sb3IucmdiID0gdGV4Q29sb3IucmdiICogdV9tdWx0aXBseUNvbG9yLnJnYjsnICtcbiAgJyAgIHRleENvbG9yLnJnYiA9ICh0ZXhDb2xvci5yZ2IgKyB1X3NjcmVlbkNvbG9yLnJnYiAqIHRleENvbG9yLmEpIC0gKHRleENvbG9yLnJnYiAqIHVfc2NyZWVuQ29sb3IucmdiKTsnICtcbiAgJyAgIHZlYzQgY29sX2Zvcm1hc2sgPSB0ZXhDb2xvciAqIHVfYmFzZUNvbG9yOycgK1xuICAnICAgdmVjNCBjbGlwTWFzayA9ICgxLjAgLSB0ZXh0dXJlMkQoc190ZXh0dXJlMSwgdl9jbGlwUG9zLnh5IC8gdl9jbGlwUG9zLncpKSAqIHVfY2hhbm5lbEZsYWc7JyArXG4gICcgICBmbG9hdCBtYXNrVmFsID0gY2xpcE1hc2suciArIGNsaXBNYXNrLmcgKyBjbGlwTWFzay5iICsgY2xpcE1hc2suYTsnICtcbiAgJyAgIGNvbF9mb3JtYXNrID0gY29sX2Zvcm1hc2sgKiAoMS4wIC0gbWFza1ZhbCk7JyArXG4gICcgICBnbF9GcmFnQ29sb3IgPSBjb2xfZm9ybWFzazsnICtcbiAgJ30nO1xuXG4vKipcbiAqIFdlYkdM55So44Gu5o+P55S75ZG95Luk44KS5a6f6KOF44GX44Gf44Kv44Op44K5XG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21SZW5kZXJlcl9XZWJHTCBleHRlbmRzIEN1YmlzbVJlbmRlcmVyIHtcbiAgLyoqXG4gICAqIOODrOODs+ODgOODqeOBruWIneacn+WMluWHpueQhuOCkuWun+ihjOOBmeOCi1xuICAgKiDlvJXmlbDjgavmuKHjgZfjgZ/jg6Ljg4fjg6vjgYvjgonjg6zjg7Pjg4Djg6njga7liJ3mnJ/ljJblh6bnkIbjgavlv4XopoHjgarmg4XloLHjgpLlj5bjgorlh7rjgZnjgZPjgajjgYzjgafjgY3jgotcbiAgICpcbiAgICogQHBhcmFtIG1vZGVsIOODouODh+ODq+OBruOCpOODs+OCueOCv+ODs+OCuVxuICAgKi9cbiAgcHVibGljIGluaXRpYWxpemUobW9kZWw6IEN1YmlzbU1vZGVsKTogdm9pZCB7XG4gICAgaWYgKG1vZGVsLmlzVXNpbmdNYXNraW5nKCkpIHtcbiAgICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlciA9IG5ldyBDdWJpc21DbGlwcGluZ01hbmFnZXJfV2ViR0woKTsgLy8g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44O744OQ44OD44OV44Kh5YmN5Yem55CG5pa55byP44KS5Yid5pyf5YyWXG4gICAgICB0aGlzLl9jbGlwcGluZ01hbmFnZXIuaW5pdGlhbGl6ZShcbiAgICAgICAgbW9kZWwsXG4gICAgICAgIG1vZGVsLmdldERyYXdhYmxlQ291bnQoKSxcbiAgICAgICAgbW9kZWwuZ2V0RHJhd2FibGVNYXNrcygpLFxuICAgICAgICBtb2RlbC5nZXREcmF3YWJsZU1hc2tDb3VudHMoKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aGlzLl9zb3J0ZWREcmF3YWJsZUluZGV4TGlzdC5yZXNpemUobW9kZWwuZ2V0RHJhd2FibGVDb3VudCgpLCAwKTtcblxuICAgIHN1cGVyLmluaXRpYWxpemUobW9kZWwpOyAvLyDopqrjgq/jg6njgrnjga7lh6bnkIbjgpLlkbzjgbZcbiAgfVxuXG4gIC8qKlxuICAgKiBXZWJHTOODhuOCr+OCueODgeODo+OBruODkOOCpOODs+ODieWHpueQhlxuICAgKiBDdWJpc21SZW5kZXJlcuOBq+ODhuOCr+OCueODgeODo+OCkuioreWumuOBl+OAgUN1YmlzbVJlbmRlcmVy5YaF44Gn44Gd44Gu55S75YOP44KS5Y+C54Wn44GZ44KL44Gf44KB44GuSW5kZXjlgKTjgpLmiLvjgorlgKTjgajjgZnjgotcbiAgICogQHBhcmFtIG1vZGVsVGV4dHVyZU5vIOOCu+ODg+ODiOOBmeOCi+ODouODh+ODq+ODhuOCr+OCueODgeODo+OBrueVquWPt1xuICAgKiBAcGFyYW0gZ2xUZXh0dXJlTm8gV2ViR0zjg4bjgq/jgrnjg4Hjg6Pjga7nlarlj7dcbiAgICovXG4gIHB1YmxpYyBiaW5kVGV4dHVyZShtb2RlbFRleHR1cmVObzogbnVtYmVyLCBnbFRleHR1cmU6IFdlYkdMVGV4dHVyZSk6IHZvaWQge1xuICAgIHRoaXMuX3RleHR1cmVzLnNldFZhbHVlKG1vZGVsVGV4dHVyZU5vLCBnbFRleHR1cmUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFdlYkdM44Gr44OQ44Kk44Oz44OJ44GV44KM44Gf44OG44Kv44K544OB44Oj44Gu44Oq44K544OI44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g44OG44Kv44K544OB44Oj44Gu44Oq44K544OIXG4gICAqL1xuICBwdWJsaWMgZ2V0QmluZGVkVGV4dHVyZXMoKTogY3NtTWFwPG51bWJlciwgV2ViR0xUZXh0dXJlPiB7XG4gICAgcmV0dXJuIHRoaXMuX3RleHR1cmVzO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODkOODg+ODleOCoeOBruOCteOCpOOCuuOCkuioreWumuOBmeOCi1xuICAgKiDjg57jgrnjgq/nlKjjga5GcmFtZUJ1ZmZlcuOCkuegtOajhOOAgeWGjeS9nOaIkOOBmeOCi+eCuuWHpueQhuOCs+OCueODiOOBr+mrmOOBhFxuICAgKiBAcGFyYW0gc2l6ZSDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICovXG4gIHB1YmxpYyBzZXRDbGlwcGluZ01hc2tCdWZmZXJTaXplKHNpemU6IG51bWJlcikge1xuICAgIC8vIEZyYW1lQnVmZmVy44Gu44K144Kk44K644KS5aSJ5pu044GZ44KL44Gf44KB44Gr44Kk44Oz44K544K/44Oz44K544KS56C05qOE44O75YaN5L2c5oiQ44GZ44KLXG4gICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyLnJlbGVhc2UoKTtcbiAgICB0aGlzLl9jbGlwcGluZ01hbmFnZXIgPSB2b2lkIDA7XG4gICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyID0gbnVsbDtcblxuICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlciA9IG5ldyBDdWJpc21DbGlwcGluZ01hbmFnZXJfV2ViR0woKTtcblxuICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlci5zZXRDbGlwcGluZ01hc2tCdWZmZXJTaXplKHNpemUpO1xuXG4gICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyLmluaXRpYWxpemUoXG4gICAgICB0aGlzLmdldE1vZGVsKCksXG4gICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVDb3VudCgpLFxuICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlTWFza3MoKSxcbiAgICAgIHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZU1hc2tDb3VudHMoKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44OQ44OD44OV44Kh44Gu44K144Kk44K644KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAqL1xuICBwdWJsaWMgZ2V0Q2xpcHBpbmdNYXNrQnVmZmVyU2l6ZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9jbGlwcGluZ01hbmFnZXIuZ2V0Q2xpcHBpbmdNYXNrQnVmZmVyU2l6ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzayA9IG51bGw7XG4gICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdyA9IG51bGw7XG4gICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyID0gbmV3IEN1YmlzbUNsaXBwaW5nTWFuYWdlcl9XZWJHTCgpO1xuICAgIHRoaXMuZmlyc3REcmF3ID0gdHJ1ZTtcbiAgICB0aGlzLl90ZXh0dXJlcyA9IG5ldyBjc21NYXA8bnVtYmVyLCBudW1iZXI+KCk7XG4gICAgdGhpcy5fc29ydGVkRHJhd2FibGVJbmRleExpc3QgPSBuZXcgY3NtVmVjdG9yPG51bWJlcj4oKTtcbiAgICB0aGlzLl9idWZmZXJEYXRhID0ge1xuICAgICAgdmVydGV4OiAoV2ViR0xCdWZmZXIgPSBudWxsKSxcbiAgICAgIHV2OiAoV2ViR0xCdWZmZXIgPSBudWxsKSxcbiAgICAgIGluZGV4OiAoV2ViR0xCdWZmZXIgPSBudWxsKSxcbiAgICB9O1xuXG4gICAgLy8g44OG44Kv44K544OB44Oj5a++5b+c44Oe44OD44OX44Gu5a656YeP44KS56K65L+d44GX44Gm44GK44GPXG4gICAgdGhpcy5fdGV4dHVyZXMucHJlcGFyZUNhcGFjaXR5KDMyLCB0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlci5yZWxlYXNlKCk7XG4gICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyID0gdm9pZCAwO1xuICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlciA9IG51bGw7XG5cbiAgICB0aGlzLmdsLmRlbGV0ZUJ1ZmZlcih0aGlzLl9idWZmZXJEYXRhLnZlcnRleCk7XG4gICAgdGhpcy5fYnVmZmVyRGF0YS52ZXJ0ZXggPSBudWxsO1xuICAgIHRoaXMuZ2wuZGVsZXRlQnVmZmVyKHRoaXMuX2J1ZmZlckRhdGEudXYpO1xuICAgIHRoaXMuX2J1ZmZlckRhdGEudXYgPSBudWxsO1xuICAgIHRoaXMuZ2wuZGVsZXRlQnVmZmVyKHRoaXMuX2J1ZmZlckRhdGEuaW5kZXgpO1xuICAgIHRoaXMuX2J1ZmZlckRhdGEuaW5kZXggPSBudWxsO1xuICAgIHRoaXMuX2J1ZmZlckRhdGEgPSBudWxsO1xuXG4gICAgdGhpcy5fdGV4dHVyZXMgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OCkuaPj+eUu+OBmeOCi+Wun+mam+OBruWHpueQhlxuICAgKi9cbiAgcHVibGljIGRvRHJhd01vZGVsKCk6IHZvaWQge1xuICAgIC8vLS0tLS0tLS0tLS0tIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODu+ODkOODg+ODleOCoeWJjeWHpueQhuaWueW8j+OBruWgtOWQiCAtLS0tLS0tLS0tLS1cbiAgICBpZiAodGhpcy5fY2xpcHBpbmdNYW5hZ2VyICE9IG51bGwpIHtcbiAgICAgIHRoaXMucHJlRHJhdygpO1xuICAgICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyLnNldHVwQ2xpcHBpbmdDb250ZXh0KHRoaXMuZ2V0TW9kZWwoKSwgdGhpcyk7XG4gICAgfVxuXG4gICAgLy8g5LiK6KiY44Kv44Oq44OD44OU44Oz44Kw5Yem55CG5YaF44Gn44KC5LiA5bqmUHJlRHJhd+OCkuWRvOOBtuOBruOBp+azqOaEjyEhXG4gICAgdGhpcy5wcmVEcmF3KCk7XG5cbiAgICBjb25zdCBkcmF3YWJsZUNvdW50OiBudW1iZXIgPSB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVDb3VudCgpO1xuICAgIGNvbnN0IHJlbmRlck9yZGVyOiBJbnQzMkFycmF5ID0gdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlUmVuZGVyT3JkZXJzKCk7XG5cbiAgICAvLyDjgqTjg7Pjg4fjg4Pjgq/jgrnjgpLmj4/nlLvpoIbjgafjgr3jg7zjg4hcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRyYXdhYmxlQ291bnQ7ICsraSkge1xuICAgICAgY29uc3Qgb3JkZXI6IG51bWJlciA9IHJlbmRlck9yZGVyW2ldO1xuICAgICAgdGhpcy5fc29ydGVkRHJhd2FibGVJbmRleExpc3Quc2V0KG9yZGVyLCBpKTtcbiAgICB9XG5cbiAgICAvLyDmj4/nlLtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRyYXdhYmxlQ291bnQ7ICsraSkge1xuICAgICAgY29uc3QgZHJhd2FibGVJbmRleDogbnVtYmVyID0gdGhpcy5fc29ydGVkRHJhd2FibGVJbmRleExpc3QuYXQoaSk7XG5cbiAgICAgIC8vIERyYXdhYmxl44GM6KGo56S654q25oWL44Gn44Gq44GR44KM44Gw5Yem55CG44KS44OR44K544GZ44KLXG4gICAgICBpZiAoIXRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZUR5bmFtaWNGbGFnSXNWaXNpYmxlKGRyYXdhYmxlSW5kZXgpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jgpLjgrvjg4Pjg4jjgZnjgotcbiAgICAgIHRoaXMuc2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdyhcbiAgICAgICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyICE9IG51bGxcbiAgICAgICAgICA/IHRoaXMuX2NsaXBwaW5nTWFuYWdlclxuICAgICAgICAgICAgICAuZ2V0Q2xpcHBpbmdDb250ZXh0TGlzdEZvckRyYXcoKVxuICAgICAgICAgICAgICAuYXQoZHJhd2FibGVJbmRleClcbiAgICAgICAgICA6IG51bGxcbiAgICAgICk7XG5cbiAgICAgIHRoaXMuc2V0SXNDdWxsaW5nKHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZUN1bGxpbmcoZHJhd2FibGVJbmRleCkpO1xuXG4gICAgICB0aGlzLmRyYXdNZXNoKFxuICAgICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVUZXh0dXJlSW5kZXgoZHJhd2FibGVJbmRleCksXG4gICAgICAgIHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZVZlcnRleEluZGV4Q291bnQoZHJhd2FibGVJbmRleCksXG4gICAgICAgIHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZVZlcnRleENvdW50KGRyYXdhYmxlSW5kZXgpLFxuICAgICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVWZXJ0ZXhJbmRpY2VzKGRyYXdhYmxlSW5kZXgpLFxuICAgICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVWZXJ0aWNlcyhkcmF3YWJsZUluZGV4KSxcbiAgICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlVmVydGV4VXZzKGRyYXdhYmxlSW5kZXgpLFxuICAgICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0TXVsdGlwbHlDb2xvcihkcmF3YWJsZUluZGV4KSxcbiAgICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldFNjcmVlbkNvbG9yKGRyYXdhYmxlSW5kZXgpLFxuICAgICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVPcGFjaXR5KGRyYXdhYmxlSW5kZXgpLFxuICAgICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVCbGVuZE1vZGUoZHJhd2FibGVJbmRleCksXG4gICAgICAgIHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZUludmVydGVkTWFza0JpdChkcmF3YWJsZUluZGV4KVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogW+OCquODvOODkOODvOODqeOCpOODiV1cbiAgICog5o+P55S744Kq44OW44K444Kn44Kv44OI77yI44Ki44O844OI44Oh44OD44K344Ol77yJ44KS5o+P55S744GZ44KL44CCXG4gICAqIOODneODquOCtOODs+ODoeODg+OCt+ODpeOBqOODhuOCr+OCueODgeODo+eVquWPt+OCkuOCu+ODg+ODiOOBp+a4oeOBmeOAglxuICAgKiBAcGFyYW0gdGV4dHVyZU5vIOaPj+eUu+OBmeOCi+ODhuOCr+OCueODgeODo+eVquWPt1xuICAgKiBAcGFyYW0gaW5kZXhDb3VudCDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHBhcmFtIHZlcnRleENvdW50IOODneODquOCtOODs+ODoeODg+OCt+ODpeOBrumggueCueaVsFxuICAgKiBAcGFyYW0gaW5kZXhBcnJheSDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6Xjga7jgqTjg7Pjg4fjg4Pjgq/jgrnphY3liJdcbiAgICogQHBhcmFtIHZlcnRleEFycmF5IOODneODquOCtOODs+ODoeODg+OCt+ODpeOBrumggueCuemFjeWIl1xuICAgKiBAcGFyYW0gdXZBcnJheSB1dumFjeWIl1xuICAgKiBAcGFyYW0gb3BhY2l0eSDkuI3pgI/mmI7luqZcbiAgICogQHBhcmFtIGNvbG9yQmxlbmRNb2RlIOOCq+ODqeODvOWQiOaIkOOCv+OCpOODl1xuICAgKiBAcGFyYW0gaW52ZXJ0ZWRNYXNrIOODnuOCueOCr+S9v+eUqOaZguOBruODnuOCueOCr+OBruWPjei7ouS9v+eUqFxuICAgKi9cbiAgcHVibGljIGRyYXdNZXNoKFxuICAgIHRleHR1cmVObzogbnVtYmVyLFxuICAgIGluZGV4Q291bnQ6IG51bWJlcixcbiAgICB2ZXJ0ZXhDb3VudDogbnVtYmVyLFxuICAgIGluZGV4QXJyYXk6IFVpbnQxNkFycmF5LFxuICAgIHZlcnRleEFycmF5OiBGbG9hdDMyQXJyYXksXG4gICAgdXZBcnJheTogRmxvYXQzMkFycmF5LFxuICAgIG11bHRpcGx5Q29sb3I6IEN1YmlzbVRleHR1cmVDb2xvcixcbiAgICBzY3JlZW5Db2xvcjogQ3ViaXNtVGV4dHVyZUNvbG9yLFxuICAgIG9wYWNpdHk6IG51bWJlcixcbiAgICBjb2xvckJsZW5kTW9kZTogQ3ViaXNtQmxlbmRNb2RlLFxuICAgIGludmVydGVkTWFzazogYm9vbGVhblxuICApOiB2b2lkIHtcbiAgICAvLyDoo4/pnaLmj4/nlLvjga7mnInlirnjg7vnhKHlirlcbiAgICBpZiAodGhpcy5pc0N1bGxpbmcoKSkge1xuICAgICAgdGhpcy5nbC5lbmFibGUodGhpcy5nbC5DVUxMX0ZBQ0UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmdsLmRpc2FibGUodGhpcy5nbC5DVUxMX0ZBQ0UpO1xuICAgIH1cblxuICAgIHRoaXMuZ2wuZnJvbnRGYWNlKHRoaXMuZ2wuQ0NXKTsgLy8gQ3ViaXNtIFNESyBPcGVuR0zjga/jg57jgrnjgq/jg7vjgqLjg7zjg4jjg6Hjg4Pjgrfjg6XlhbHjgatDQ1fjgYzooajpnaJcblxuICAgIGNvbnN0IG1vZGVsQ29sb3JSR0JBOiBDdWJpc21UZXh0dXJlQ29sb3IgPSB0aGlzLmdldE1vZGVsQ29sb3IoKTtcblxuICAgIGlmICh0aGlzLmdldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2soKSA9PSBudWxsKSB7XG4gICAgICAvLyDjg57jgrnjgq/nlJ/miJDmmYLku6XlpJZcbiAgICAgIG1vZGVsQ29sb3JSR0JBLkEgKj0gb3BhY2l0eTtcbiAgICAgIGlmICh0aGlzLmlzUHJlbXVsdGlwbGllZEFscGhhKCkpIHtcbiAgICAgICAgbW9kZWxDb2xvclJHQkEuUiAqPSBtb2RlbENvbG9yUkdCQS5BO1xuICAgICAgICBtb2RlbENvbG9yUkdCQS5HICo9IG1vZGVsQ29sb3JSR0JBLkE7XG4gICAgICAgIG1vZGVsQ29sb3JSR0JBLkIgKj0gbW9kZWxDb2xvclJHQkEuQTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgZHJhd3RleHR1cmU6IFdlYkdMVGV4dHVyZTsgLy8g44K344Kn44O844OA44Gr5rih44GZ44OG44Kv44K544OB44OjXG5cbiAgICAvLyDjg4bjgq/jgrnjg4Hjg6Pjg57jg4Pjg5fjgYvjgonjg5DjgqTjg7Pjg4nmuIjjgb/jg4bjgq/jgrnjg4Hjg6PvvKnvvKTjgpLlj5blvpdcbiAgICAvLyDjg5DjgqTjg7Pjg4njgZXjgozjgabjgYTjgarjgZHjgozjgbDjg4Djg5/jg7zjga7jg4bjgq/jgrnjg4Hjg6NJROOCkuOCu+ODg+ODiOOBmeOCi1xuICAgIGlmICh0aGlzLl90ZXh0dXJlcy5nZXRWYWx1ZSh0ZXh0dXJlTm8pICE9IG51bGwpIHtcbiAgICAgIGRyYXd0ZXh0dXJlID0gdGhpcy5fdGV4dHVyZXMuZ2V0VmFsdWUodGV4dHVyZU5vKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZHJhd3RleHR1cmUgPSBudWxsO1xuICAgIH1cblxuICAgIEN1YmlzbVNoYWRlcl9XZWJHTC5nZXRJbnN0YW5jZSgpLnNldHVwU2hhZGVyUHJvZ3JhbShcbiAgICAgIHRoaXMsXG4gICAgICBkcmF3dGV4dHVyZSxcbiAgICAgIHZlcnRleENvdW50LFxuICAgICAgdmVydGV4QXJyYXksXG4gICAgICBpbmRleEFycmF5LFxuICAgICAgdXZBcnJheSxcbiAgICAgIHRoaXMuX2J1ZmZlckRhdGEsXG4gICAgICBvcGFjaXR5LFxuICAgICAgY29sb3JCbGVuZE1vZGUsXG4gICAgICBtb2RlbENvbG9yUkdCQSxcbiAgICAgIG11bHRpcGx5Q29sb3IsXG4gICAgICBzY3JlZW5Db2xvcixcbiAgICAgIHRoaXMuaXNQcmVtdWx0aXBsaWVkQWxwaGEoKSxcbiAgICAgIHRoaXMuZ2V0TXZwTWF0cml4KCksXG4gICAgICBpbnZlcnRlZE1hc2tcbiAgICApO1xuXG4gICAgLy8g44Od44Oq44K044Oz44Oh44OD44K344Ol44KS5o+P55S744GZ44KLXG4gICAgdGhpcy5nbC5kcmF3RWxlbWVudHMoXG4gICAgICB0aGlzLmdsLlRSSUFOR0xFUyxcbiAgICAgIGluZGV4Q291bnQsXG4gICAgICB0aGlzLmdsLlVOU0lHTkVEX1NIT1JULFxuICAgICAgMFxuICAgICk7XG5cbiAgICAvLyDlvozlh6bnkIZcbiAgICB0aGlzLmdsLnVzZVByb2dyYW0obnVsbCk7XG4gICAgdGhpcy5zZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3KG51bGwpO1xuICAgIHRoaXMuc2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzayhudWxsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6zjg7Pjg4Djg6njgYzkv53mjIHjgZnjgovpnZnnmoTjgarjg6rjgr3jg7zjgrnjgpLop6PmlL7jgZnjgotcbiAgICogV2ViR0zjga7pnZnnmoTjgarjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgpLop6PmlL7jgZnjgotcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZG9TdGF0aWNSZWxlYXNlKCk6IHZvaWQge1xuICAgIEN1YmlzbVNoYWRlcl9XZWJHTC5kZWxldGVJbnN0YW5jZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODrOODs+ODgOODvOOCueODhuODvOODiOOCkuioreWumuOBmeOCi1xuICAgKiBAcGFyYW0gZmJvIOOCouODl+ODquOCseODvOOCt+ODp+ODs+WBtOOBp+aMh+WumuOBl+OBpuOBhOOCi+ODleODrOODvOODoOODkOODg+ODleOCoVxuICAgKiBAcGFyYW0gdmlld3BvcnQg44OT44Ol44O844Od44O844OIXG4gICAqL1xuICBwdWJsaWMgc2V0UmVuZGVyU3RhdGUoZmJvOiBXZWJHTEZyYW1lYnVmZmVyLCB2aWV3cG9ydDogbnVtYmVyW10pOiB2b2lkIHtcbiAgICBzX2ZibyA9IGZibztcbiAgICBzX3ZpZXdwb3J0ID0gdmlld3BvcnQ7XG4gIH1cblxuICAvKipcbiAgICog5o+P55S76ZaL5aeL5pmC44Gu6L+95Yqg5Yem55CGXG4gICAqIOODouODh+ODq+OCkuaPj+eUu+OBmeOCi+WJjeOBq+OCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBq+W/heimgeOBquWHpueQhuOCkuWun+ijheOBl+OBpuOBhOOCi1xuICAgKi9cbiAgcHVibGljIHByZURyYXcoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuZmlyc3REcmF3KSB7XG4gICAgICB0aGlzLmZpcnN0RHJhdyA9IGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMuZ2wuZGlzYWJsZSh0aGlzLmdsLlNDSVNTT1JfVEVTVCk7XG4gICAgdGhpcy5nbC5kaXNhYmxlKHRoaXMuZ2wuU1RFTkNJTF9URVNUKTtcbiAgICB0aGlzLmdsLmRpc2FibGUodGhpcy5nbC5ERVBUSF9URVNUKTtcblxuICAgIC8vIOOCq+ODquODs+OCsO+8iDEuMGJldGEz77yJXG4gICAgdGhpcy5nbC5mcm9udEZhY2UodGhpcy5nbC5DVyk7XG5cbiAgICB0aGlzLmdsLmVuYWJsZSh0aGlzLmdsLkJMRU5EKTtcbiAgICB0aGlzLmdsLmNvbG9yTWFzayh0cnVlLCB0cnVlLCB0cnVlLCB0cnVlKTtcblxuICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLmdsLkFSUkFZX0JVRkZFUiwgbnVsbCk7IC8vIOWJjeOBq+ODkOODg+ODleOCoeOBjOODkOOCpOODs+ODieOBleOCjOOBpuOBhOOBn+OCieegtOajhOOBmeOCi+W/heimgeOBjOOBguOCi1xuICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLmdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBudWxsKTtcblxuICAgIC8vIOeVsOaWueaAp+ODleOCo+ODq+OCv+ODquODs+OCsOOCkumBqeeUqOOBmeOCi1xuICAgIGlmICh0aGlzLmdldEFuaXNvdHJvcHkoKSA+IDAuMCAmJiB0aGlzLl9leHRlbnNpb24pIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fdGV4dHVyZXMuZ2V0U2l6ZSgpOyArK2kpIHtcbiAgICAgICAgdGhpcy5nbC5iaW5kVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkVfMkQsIHRoaXMuX3RleHR1cmVzLmdldFZhbHVlKGkpKTtcbiAgICAgICAgdGhpcy5nbC50ZXhQYXJhbWV0ZXJmKFxuICAgICAgICAgIHRoaXMuZ2wuVEVYVFVSRV8yRCxcbiAgICAgICAgICB0aGlzLl9leHRlbnNpb24uVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQsXG4gICAgICAgICAgdGhpcy5nZXRBbmlzb3Ryb3B5KClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44Oe44K544Kv44OG44Kv44K544OB44Oj44Gr5o+P55S744GZ44KL44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OI44KS44K744OD44OI44GZ44KLXG4gICAqL1xuICBwdWJsaWMgc2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzayhjbGlwOiBDdWJpc21DbGlwcGluZ0NvbnRleHQpIHtcbiAgICB0aGlzLl9jbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrID0gY2xpcDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg57jgrnjgq/jg4bjgq/jgrnjg4Hjg6Pjgavmj4/nlLvjgZnjgovjgq/jg6rjg4Pjg5Tjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4jjgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDjg57jgrnjgq/jg4bjgq/jgrnjg4Hjg6Pjgavmj4/nlLvjgZnjgovjgq/jg6rjg4Pjg5Tjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4hcbiAgICovXG4gIHB1YmxpYyBnZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrKCk6IEN1YmlzbUNsaXBwaW5nQ29udGV4dCB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2s7XG4gIH1cblxuICAvKipcbiAgICog55S76Z2i5LiK44Gr5o+P55S744GZ44KL44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OI44KS44K744OD44OI44GZ44KLXG4gICAqL1xuICBwdWJsaWMgc2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdyhjbGlwOiBDdWJpc21DbGlwcGluZ0NvbnRleHQpOiB2b2lkIHtcbiAgICB0aGlzLl9jbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3ID0gY2xpcDtcbiAgfVxuXG4gIC8qKlxuICAgKiDnlLvpnaLkuIrjgavmj4/nlLvjgZnjgovjgq/jg6rjg4Pjg5Tjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4jjgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDnlLvpnaLkuIrjgavmj4/nlLvjgZnjgovjgq/jg6rjg4Pjg5Tjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4hcbiAgICovXG4gIHB1YmxpYyBnZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3KCk6IEN1YmlzbUNsaXBwaW5nQ29udGV4dCB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaXBwaW5nQ29udGV4dEJ1ZmZlckZvckRyYXc7XG4gIH1cblxuICAvKipcbiAgICogZ2zjga7oqK3lrppcbiAgICovXG4gIHB1YmxpYyBzdGFydFVwKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpOiB2b2lkIHtcbiAgICB0aGlzLmdsID0gZ2w7XG4gICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyLnNldEdMKGdsKTtcbiAgICBDdWJpc21TaGFkZXJfV2ViR0wuZ2V0SW5zdGFuY2UoKS5zZXRHbChnbCk7XG5cbiAgICAvLyDnlbDmlrnmgKfjg5XjgqPjg6vjgr/jg6rjg7PjgrDjgYzkvb/nlKjjgafjgY3jgovjgYvjg4Hjgqfjg4Pjgq9cbiAgICB0aGlzLl9leHRlbnNpb24gPVxuICAgICAgdGhpcy5nbC5nZXRFeHRlbnNpb24oJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycpIHx8XG4gICAgICB0aGlzLmdsLmdldEV4dGVuc2lvbignV0VCS0lUX0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycpIHx8XG4gICAgICB0aGlzLmdsLmdldEV4dGVuc2lvbignTU9aX0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycpO1xuICB9XG5cbiAgX3RleHR1cmVzOiBjc21NYXA8bnVtYmVyLCBXZWJHTFRleHR1cmU+OyAvLyDjg6Ljg4fjg6vjgYzlj4LnhafjgZnjgovjg4bjgq/jgrnjg4Hjg6Pjgajjg6zjg7Pjg4Djg6njgafjg5DjgqTjg7Pjg4njgZfjgabjgYTjgovjg4bjgq/jgrnjg4Hjg6Pjgajjga7jg57jg4Pjg5dcbiAgX3NvcnRlZERyYXdhYmxlSW5kZXhMaXN0OiBjc21WZWN0b3I8bnVtYmVyPjsgLy8g5o+P55S744Kq44OW44K444Kn44Kv44OI44Gu44Kk44Oz44OH44OD44Kv44K544KS5o+P55S76aCG44Gr5Lim44G544Gf44Oq44K544OIXG4gIF9jbGlwcGluZ01hbmFnZXI6IEN1YmlzbUNsaXBwaW5nTWFuYWdlcl9XZWJHTDsgLy8g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv566h55CG44Kq44OW44K444Kn44Kv44OIXG4gIF9jbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrOiBDdWJpc21DbGlwcGluZ0NvbnRleHQ7IC8vIOODnuOCueOCr+ODhuOCr+OCueODgeODo+OBq+aPj+eUu+OBmeOCi+OBn+OCgeOBruOCr+ODquODg+ODlOODs+OCsOOCs+ODs+ODhuOCreOCueODiFxuICBfY2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdzogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0OyAvLyDnlLvpnaLkuIrmj4/nlLvjgZnjgovjgZ/jgoHjga7jgq/jg6rjg4Pjg5Tjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4hcbiAgZmlyc3REcmF3OiBib29sZWFuO1xuICBfYnVmZmVyRGF0YToge1xuICAgIHZlcnRleDogV2ViR0xCdWZmZXI7XG4gICAgdXY6IFdlYkdMQnVmZmVyO1xuICAgIGluZGV4OiBXZWJHTEJ1ZmZlcjtcbiAgfTsgLy8g6aCC54K544OQ44OD44OV44Kh44OH44O844K/XG4gIF9leHRlbnNpb246IGFueTsgLy8g5ouh5by15qmf6IO9XG4gIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7IC8vIHdlYmds44Kz44Oz44OG44Kt44K544OIXG59XG5cbi8qKlxuICog44Os44Oz44OA44Op44GM5L+d5oyB44GZ44KL6Z2Z55qE44Gq44Oq44K944O844K544KS6ZaL5pS+44GZ44KLXG4gKi9cbkN1YmlzbVJlbmRlcmVyLnN0YXRpY1JlbGVhc2UgPSAoKTogdm9pZCA9PiB7XG4gIEN1YmlzbVJlbmRlcmVyX1dlYkdMLmRvU3RhdGljUmVsZWFzZSgpO1xufTtcblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtcmVuZGVyZXJfd2ViZ2wnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbUNsaXBwaW5nQ29udGV4dCA9ICQuQ3ViaXNtQ2xpcHBpbmdDb250ZXh0O1xuICBleHBvcnQgdHlwZSBDdWJpc21DbGlwcGluZ0NvbnRleHQgPSAkLkN1YmlzbUNsaXBwaW5nQ29udGV4dDtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbUNsaXBwaW5nTWFuYWdlcl9XZWJHTCA9ICQuQ3ViaXNtQ2xpcHBpbmdNYW5hZ2VyX1dlYkdMO1xuICBleHBvcnQgdHlwZSBDdWJpc21DbGlwcGluZ01hbmFnZXJfV2ViR0wgPSAkLkN1YmlzbUNsaXBwaW5nTWFuYWdlcl9XZWJHTDtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVJlbmRlclRleHR1cmVSZXNvdXJjZSA9ICQuQ3ViaXNtUmVuZGVyVGV4dHVyZVJlc291cmNlO1xuICBleHBvcnQgdHlwZSBDdWJpc21SZW5kZXJUZXh0dXJlUmVzb3VyY2UgPSAkLkN1YmlzbVJlbmRlclRleHR1cmVSZXNvdXJjZTtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVJlbmRlcmVyX1dlYkdMID0gJC5DdWJpc21SZW5kZXJlcl9XZWJHTDtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtUmVuZGVyZXJfV2ViR0wgPSAkLkN1YmlzbVJlbmRlcmVyX1dlYkdMO1xuICBleHBvcnQgY29uc3QgQ3ViaXNtU2hhZGVyU2V0ID0gJC5DdWJpc21TaGFkZXJTZXQ7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbVNoYWRlclNldCA9ICQuQ3ViaXNtU2hhZGVyU2V0O1xuICBleHBvcnQgY29uc3QgQ3ViaXNtU2hhZGVyX1dlYkdMID0gJC5DdWJpc21TaGFkZXJfV2ViR0w7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbVNoYWRlcl9XZWJHTCA9ICQuQ3ViaXNtU2hhZGVyX1dlYkdMO1xuICBleHBvcnQgY29uc3QgU2hhZGVyTmFtZXMgPSAkLlNoYWRlck5hbWVzO1xuICBleHBvcnQgdHlwZSBTaGFkZXJOYW1lcyA9ICQuU2hhZGVyTmFtZXM7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21Mb2dEZWJ1ZyB9IGZyb20gJy4uL3V0aWxzL2N1YmlzbWRlYnVnJztcblxuLyoqXG4gKiBLZXktVmFsdWXjga7jg5rjgqLjgpLlrprnvqnjgZnjgovjgq/jg6njgrlcbiAqIGNzbU1hcOOCr+ODqeOCueOBruWGhemDqOODh+ODvOOCv+OBp+S9v+eUqOOBmeOCi+OAglxuICovXG5leHBvcnQgY2xhc3MgY3NtUGFpcjxfS2V5VCwgX1ZhbFQ+IHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKiBAcGFyYW0ga2V5IEtleeOBqOOBl+OBpuOCu+ODg+ODiOOBmeOCi+WApFxuICAgKiBAcGFyYW0gdmFsdWUgVmFsdWXjgajjgZfjgabjgrvjg4Pjg4jjgZnjgovlgKRcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihrZXk/OiBfS2V5VCwgdmFsdWU/OiBfVmFsVCkge1xuICAgIHRoaXMuZmlyc3QgPSBrZXkgPT0gdW5kZWZpbmVkID8gbnVsbCA6IGtleTtcblxuICAgIHRoaXMuc2Vjb25kID0gdmFsdWUgPT0gdW5kZWZpbmVkID8gbnVsbCA6IHZhbHVlO1xuICB9XG5cbiAgcHVibGljIGZpcnN0OiBfS2V5VDsgLy8ga2V544Go44GX44Gm55So44GE44KL5aSJ5pWwXG4gIHB1YmxpYyBzZWNvbmQ6IF9WYWxUOyAvLyB2YWx1ZeOBqOOBl+OBpueUqOOBhOOCi+WkieaVsFxufVxuXG4vKipcbiAqIOODnuODg+ODl+Wei1xuICovXG5leHBvcnQgY2xhc3MgY3NtTWFwPF9LZXlULCBfVmFsVD4ge1xuICAvKipcbiAgICog5byV5pWw5LuY44GN44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqIEBwYXJhbSBzaXplIOWIneacn+WMluaZgueCueOBp+eiuuS/neOBmeOCi+OCteOCpOOCulxuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHNpemU/OiBudW1iZXIpIHtcbiAgICBpZiAoc2l6ZSAhPSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChzaXplIDwgMSkge1xuICAgICAgICB0aGlzLl9rZXlWYWx1ZXMgPSBbXTtcbiAgICAgICAgdGhpcy5fZHVtbXlWYWx1ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX3NpemUgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fa2V5VmFsdWVzID0gbmV3IEFycmF5KHNpemUpO1xuICAgICAgICB0aGlzLl9zaXplID0gc2l6ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fa2V5VmFsdWVzID0gW107XG4gICAgICB0aGlzLl9kdW1teVZhbHVlID0gbnVsbDtcbiAgICAgIHRoaXMuX3NpemUgPSAwO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCkge1xuICAgIHRoaXMuY2xlYXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgq3jg7zjgpLov73liqDjgZnjgotcbiAgICogQHBhcmFtIGtleSDmlrDjgZ/jgavov73liqDjgZnjgovjgq3jg7xcbiAgICovXG4gIHB1YmxpYyBhcHBlbmRLZXkoa2V5OiBfS2V5VCk6IHZvaWQge1xuICAgIC8vIOaWsOOBl+OBj0tleS9WYWx1ZeOBruODmuOCouOCkuS9nOOCi1xuICAgIHRoaXMucHJlcGFyZUNhcGFjaXR5KHRoaXMuX3NpemUgKyAxLCBmYWxzZSk7IC8vIDHjgaTku6XkuIrlhaXjgovpmpnplpPjgpLkvZzjgotcbiAgICAvLyDmlrDjgZfjgYRrZXkvdmFsdWXjga7jgqTjg7Pjg4fjg4Pjgq/jgrnjga9fc2l6ZVxuXG4gICAgdGhpcy5fa2V5VmFsdWVzW3RoaXMuX3NpemVdID0gbmV3IGNzbVBhaXI8X0tleVQsIF9WYWxUPihrZXkpO1xuICAgIHRoaXMuX3NpemUgKz0gMTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmt7vlrZfmvJTnrpflrZBba2V5XeOBruOCquODvOODkOODvOODreODvOODiShnZXQpXG4gICAqIEBwYXJhbSBrZXkg5re75a2X44GL44KJ54m55a6a44GV44KM44KLVmFsdWXlgKRcbiAgICovXG4gIHB1YmxpYyBnZXRWYWx1ZShrZXk6IF9LZXlUKTogX1ZhbFQge1xuICAgIGxldCBmb3VuZCA9IC0xO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9zaXplOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLl9rZXlWYWx1ZXNbaV0uZmlyc3QgPT0ga2V5KSB7XG4gICAgICAgIGZvdW5kID0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGZvdW5kID49IDApIHtcbiAgICAgIHJldHVybiB0aGlzLl9rZXlWYWx1ZXNbZm91bmRdLnNlY29uZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hcHBlbmRLZXkoa2V5KTsgLy8g5paw6KaP44Kt44O844KS6L+95YqgXG4gICAgICByZXR1cm4gdGhpcy5fa2V5VmFsdWVzW3RoaXMuX3NpemUgLSAxXS5zZWNvbmQ7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOa3u+Wtl+a8lOeul+WtkFtrZXld44Gu44Kq44O844OQ44O844Ot44O844OJKHNldClcbiAgICogQHBhcmFtIGtleSDmt7vlrZfjgYvjgonnibnlrprjgZXjgozjgotWYWx1ZeWApFxuICAgKiBAcGFyYW0gdmFsdWUg5Luj5YWl44GZ44KLVmFsdWXlgKRcbiAgICovXG4gIHB1YmxpYyBzZXRWYWx1ZShrZXk6IF9LZXlULCB2YWx1ZTogX1ZhbFQpOiB2b2lkIHtcbiAgICBsZXQgZm91bmQgPSAtMTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fc2l6ZTsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5fa2V5VmFsdWVzW2ldLmZpcnN0ID09IGtleSkge1xuICAgICAgICBmb3VuZCA9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChmb3VuZCA+PSAwKSB7XG4gICAgICB0aGlzLl9rZXlWYWx1ZXNbZm91bmRdLnNlY29uZCA9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFwcGVuZEtleShrZXkpOyAvLyDmlrDopo/jgq3jg7zjgpLov73liqBcbiAgICAgIHRoaXMuX2tleVZhbHVlc1t0aGlzLl9zaXplIC0gMV0uc2Vjb25kID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOW8leaVsOOBp+a4oeOBl+OBn0tleeOCkuaMgeOBpOimgee0oOOBjOWtmOWcqOOBmeOCi+OBi1xuICAgKiBAcGFyYW0ga2V5IOWtmOWcqOOCkueiuuiqjeOBmeOCi2tleVxuICAgKiBAcmV0dXJuIHRydWUg5byV5pWw44Gn5rih44GX44Gfa2V544KS5oyB44Gk6KaB57Sg44GM5a2Y5Zyo44GZ44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug5byV5pWw44Gn5rih44GX44Gfa2V544KS5oyB44Gk6KaB57Sg44GM5a2Y5Zyo44GX44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNFeGlzdChrZXk6IF9LZXlUKTogYm9vbGVhbiB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9zaXplOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLl9rZXlWYWx1ZXNbaV0uZmlyc3QgPT0ga2V5KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICoga2V5VmFsdWXjga7jg53jgqTjg7Pjgr/jgpLlhajjgabop6PmlL7jgZnjgotcbiAgICovXG4gIHB1YmxpYyBjbGVhcigpOiB2b2lkIHtcbiAgICB0aGlzLl9rZXlWYWx1ZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5fa2V5VmFsdWVzID0gbnVsbDtcbiAgICB0aGlzLl9rZXlWYWx1ZXMgPSBbXTtcblxuICAgIHRoaXMuX3NpemUgPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+ODhuODiuOBruOCteOCpOOCuuOCkuWPluW+l+OBmeOCi1xuICAgKlxuICAgKiBAcmV0dXJuIOOCs+ODs+ODhuODiuOBruOCteOCpOOCulxuICAgKi9cbiAgcHVibGljIGdldFNpemUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fc2l6ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjg4bjg4rjga7jgq3jg6Pjg5Hjgrfjg4bjgqPjgpLnorrkv53jgZnjgotcbiAgICogQHBhcmFtIG5ld1NpemUg5paw44Gf44Gq44Kt44Oj44OR44K344OG44Kj44CC5byV5pWw44Gu5YCk44GM54++5Zyo44Gu44K144Kk44K65pyq5rqA44Gu5aC05ZCI44Gv5L2V44KC44GX44Gq44GE44CCXG4gICAqIEBwYXJhbSBmaXRUb1NpemUgdHJ1ZeOBquOCieaMh+WumuOBl+OBn+OCteOCpOOCuuOBq+WQiOOCj+OBm+OCi+OAgmZhbHNl44Gq44KJ44K144Kk44K644KSMuWAjeeiuuS/neOBl+OBpuOBiuOBj+OAglxuICAgKi9cbiAgcHVibGljIHByZXBhcmVDYXBhY2l0eShuZXdTaXplOiBudW1iZXIsIGZpdFRvU2l6ZTogYm9vbGVhbik6IHZvaWQge1xuICAgIGlmIChuZXdTaXplID4gdGhpcy5fa2V5VmFsdWVzLmxlbmd0aCkge1xuICAgICAgaWYgKHRoaXMuX2tleVZhbHVlcy5sZW5ndGggPT0gMCkge1xuICAgICAgICBpZiAoIWZpdFRvU2l6ZSAmJiBuZXdTaXplIDwgY3NtTWFwLkRlZmF1bHRTaXplKVxuICAgICAgICAgIG5ld1NpemUgPSBjc21NYXAuRGVmYXVsdFNpemU7XG4gICAgICAgIHRoaXMuX2tleVZhbHVlcy5sZW5ndGggPSBuZXdTaXplO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFmaXRUb1NpemUgJiYgbmV3U2l6ZSA8IHRoaXMuX2tleVZhbHVlcy5sZW5ndGggKiAyKVxuICAgICAgICAgIG5ld1NpemUgPSB0aGlzLl9rZXlWYWx1ZXMubGVuZ3RoICogMjtcbiAgICAgICAgdGhpcy5fa2V5VmFsdWVzLmxlbmd0aCA9IG5ld1NpemU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+ODhuODiuOBruWFiOmgreimgee0oOOCkui/lOOBmVxuICAgKi9cbiAgcHVibGljIGJlZ2luKCk6IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4ge1xuICAgIGNvbnN0IGl0ZTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPiA9IG5ldyBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+KHRoaXMsIDApO1xuICAgIHJldHVybiBpdGU7XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44OG44OK44Gu57WC56uv6KaB57Sg44KS6L+U44GZXG4gICAqL1xuICBwdWJsaWMgZW5kKCk6IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4ge1xuICAgIGNvbnN0IGl0ZTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPiA9IG5ldyBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+KFxuICAgICAgdGhpcyxcbiAgICAgIHRoaXMuX3NpemVcbiAgICApOyAvLyDntYLkuoZcbiAgICByZXR1cm4gaXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+ODhuODiuOBi+OCieimgee0oOOCkuWJiumZpOOBmeOCi1xuICAgKlxuICAgKiBAcGFyYW0gaXRlIOWJiumZpOOBmeOCi+imgee0oFxuICAgKi9cbiAgcHVibGljIGVyYXNlKGl0ZTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPik6IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4ge1xuICAgIGNvbnN0IGluZGV4OiBudW1iZXIgPSBpdGUuX2luZGV4O1xuICAgIGlmIChpbmRleCA8IDAgfHwgdGhpcy5fc2l6ZSA8PSBpbmRleCkge1xuICAgICAgcmV0dXJuIGl0ZTsgLy8g5YmK6Zmk56+E5Zuy5aSWXG4gICAgfVxuXG4gICAgLy8g5YmK6ZmkXG4gICAgdGhpcy5fa2V5VmFsdWVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgLS10aGlzLl9zaXplO1xuXG4gICAgY29uc3QgaXRlMjogaXRlcmF0b3I8X0tleVQsIF9WYWxUPiA9IG5ldyBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+KFxuICAgICAgdGhpcyxcbiAgICAgIGluZGV4XG4gICAgKTsgLy8g57WC5LqGXG4gICAgcmV0dXJuIGl0ZTI7XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44OG44OK44Gu5YCk44KSMzLjg5Pjg4Pjg4jnrKblj7fku5jjgY3mlbTmlbDlnovjgafjg4Djg7Pjg5fjgZnjgotcbiAgICovXG4gIHB1YmxpYyBkdW1wQXNJbnQoKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9zaXplOyBpKyspIHtcbiAgICAgIEN1YmlzbUxvZ0RlYnVnKCd7MH0gLCcsIHRoaXMuX2tleVZhbHVlc1tpXSk7XG4gICAgICBDdWJpc21Mb2dEZWJ1ZygnXFxuJyk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBEZWZhdWx0U2l6ZSA9IDEwOyAvLyDjgrPjg7Pjg4bjg4rjga7liJ3mnJ/ljJbjga7jg4fjg5Xjgqnjg6vjg4jjgrXjgqTjgrpcbiAgcHVibGljIF9rZXlWYWx1ZXM6IGNzbVBhaXI8X0tleVQsIF9WYWxUPltdOyAvLyBrZXktdmFsdWXjg5rjgqLjga7phY3liJdcbiAgcHVibGljIF9kdW1teVZhbHVlOiBfVmFsVDsgLy8g56m644Gu5YCk44KS6L+U44GZ54K644Gu44OA44Of44O8XG4gIHB1YmxpYyBfc2l6ZTogbnVtYmVyOyAvLyDjgrPjg7Pjg4bjg4rjga7opoHntKDmlbBcbn1cblxuLyoqXG4gKiBjc21NYXA8VD7jga7jgqTjg4bjg6zjg7zjgr9cbiAqL1xuZXhwb3J0IGNsYXNzIGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4ge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBjb25zdHJ1Y3Rvcih2PzogY3NtTWFwPF9LZXlULCBfVmFsVD4sIGlkeD86IG51bWJlcikge1xuICAgIHRoaXMuX21hcCA9IHYgIT0gdW5kZWZpbmVkID8gdiA6IG5ldyBjc21NYXA8X0tleVQsIF9WYWxUPigpO1xuXG4gICAgdGhpcy5faW5kZXggPSBpZHggIT0gdW5kZWZpbmVkID8gaWR4IDogMDtcbiAgfVxuXG4gIC8qKlxuICAgKiA95ryU566X5a2Q44Gu44Kq44O844OQ44O844Ot44O844OJXG4gICAqL1xuICBwdWJsaWMgc2V0KGl0ZTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPik6IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4ge1xuICAgIHRoaXMuX2luZGV4ID0gaXRlLl9pbmRleDtcbiAgICB0aGlzLl9tYXAgPSBpdGUuX21hcDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDliY3nva7jgY0rK+a8lOeul+WtkOOBruOCquODvOODkOODvOODreODvOODiVxuICAgKi9cbiAgcHVibGljIHByZUluY3JlbWVudCgpOiBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+IHtcbiAgICArK3RoaXMuX2luZGV4O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOWJjee9ruOBjS0t5ryU566X5a2Q44Gu44Kq44O844OQ44O844Ot44O844OJXG4gICAqL1xuICBwdWJsaWMgcHJlRGVjcmVtZW50KCk6IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4ge1xuICAgIC0tdGhpcy5faW5kZXg7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog5b6M572u44GNKyvmvJTnrpflrZDjga7jgqrjg7zjg5Djg7zjg63jg7zjg4lcbiAgICovXG4gIHB1YmxpYyBpbmNyZW1lbnQoKTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPiB7XG4gICAgY29uc3QgaXRlb2xkID0gbmV3IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4odGhpcy5fbWFwLCB0aGlzLl9pbmRleCsrKTsgLy8g5Y+k44GE5YCk44KS5L+d5a2YXG4gICAgcmV0dXJuIGl0ZW9sZDtcbiAgfVxuXG4gIC8qKlxuICAgKiDlvoznva7jgY0tLea8lOeul+WtkOOBruOCquODvOODkOODvOODreODvOODiVxuICAgKi9cbiAgcHVibGljIGRlY3JlbWVudCgpOiBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+IHtcbiAgICBjb25zdCBpdGVvbGQgPSBuZXcgaXRlcmF0b3I8X0tleVQsIF9WYWxUPih0aGlzLl9tYXAsIHRoaXMuX2luZGV4KTsgLy8g5Y+k44GE5YCk44KS5L+d5a2YXG4gICAgdGhpcy5fbWFwID0gaXRlb2xkLl9tYXA7XG4gICAgdGhpcy5faW5kZXggPSBpdGVvbGQuX2luZGV4O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqICrmvJTnrpflrZDjga7jgqrjg7zjg5Djg7zjg63jg7zjg4lcbiAgICovXG4gIHB1YmxpYyBwdHIoKTogY3NtUGFpcjxfS2V5VCwgX1ZhbFQ+IHtcbiAgICByZXR1cm4gdGhpcy5fbWFwLl9rZXlWYWx1ZXNbdGhpcy5faW5kZXhdO1xuICB9XG5cbiAgLyoqXG4gICAqICE95ryU566XXG4gICAqL1xuICBwdWJsaWMgbm90RXF1YWwoaXRlOiBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2luZGV4ICE9IGl0ZS5faW5kZXggfHwgdGhpcy5fbWFwICE9IGl0ZS5fbWFwO1xuICB9XG5cbiAgX2luZGV4OiBudW1iZXI7IC8vIOOCs+ODs+ODhuODiuOBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICBfbWFwOiBjc21NYXA8X0tleVQsIF9WYWxUPjsgLy8g44Kz44Oz44OG44OKXG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2NzbW1hcCc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgY3NtTWFwID0gJC5jc21NYXA7XG4gIGV4cG9ydCB0eXBlIGNzbU1hcDxLLCBWPiA9ICQuY3NtTWFwPEssIFY+O1xuICBleHBvcnQgY29uc3QgY3NtUGFpciA9ICQuY3NtUGFpcjtcbiAgZXhwb3J0IHR5cGUgY3NtUGFpcjxLLCBWPiA9ICQuY3NtUGFpcjxLLCBWPjtcbiAgZXhwb3J0IGNvbnN0IGl0ZXJhdG9yID0gJC5pdGVyYXRvcjtcbiAgZXhwb3J0IHR5cGUgaXRlcmF0b3I8SywgVj4gPSAkLml0ZXJhdG9yPEssIFY+O1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuLyoqXG4gKiDnn6nlvaLlvaLnirbvvIjluqfmqJnjg7vplbfjgZXjga9mbG9hdOWApO+8ieOCkuWumue+qeOBmeOCi+OCr+ODqeOCuVxuICovXG5leHBvcnQgY2xhc3MgY3NtUmVjdCB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICogQHBhcmFtIHgg5bem56uvWOW6p+aomVxuICAgKiBAcGFyYW0geSDkuIrnq69Z5bqn5qiZXG4gICAqIEBwYXJhbSB3IOW5hVxuICAgKiBAcGFyYW0gaCDpq5jjgZVcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcih4PzogbnVtYmVyLCB5PzogbnVtYmVyLCB3PzogbnVtYmVyLCBoPzogbnVtYmVyKSB7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICAgIHRoaXMud2lkdGggPSB3O1xuICAgIHRoaXMuaGVpZ2h0ID0gaDtcbiAgfVxuXG4gIC8qKlxuICAgKiDnn6nlvaLkuK3lpK7jga5Y5bqn5qiZ44KS5Y+W5b6X44GZ44KLXG4gICAqL1xuICBwdWJsaWMgZ2V0Q2VudGVyWCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnggKyAwLjUgKiB0aGlzLndpZHRoO1xuICB9XG5cbiAgLyoqXG4gICAqIOefqeW9ouS4reWkruOBrlnluqfmqJnjgpLlj5blvpfjgZnjgotcbiAgICovXG4gIHB1YmxpYyBnZXRDZW50ZXJZKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMueSArIDAuNSAqIHRoaXMuaGVpZ2h0O1xuICB9XG5cbiAgLyoqXG4gICAqIOWPs+WBtOOBrljluqfmqJnjgpLlj5blvpfjgZnjgotcbiAgICovXG4gIHB1YmxpYyBnZXRSaWdodCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnggKyB0aGlzLndpZHRoO1xuICB9XG5cbiAgLyoqXG4gICAqIOS4i+err+OBrlnluqfmqJnjgpLlj5blvpfjgZnjgotcbiAgICovXG4gIHB1YmxpYyBnZXRCb3R0b20oKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy55ICsgdGhpcy5oZWlnaHQ7XG4gIH1cblxuICAvKipcbiAgICog55+p5b2i44Gr5YCk44KS44K744OD44OI44GZ44KLXG4gICAqIEBwYXJhbSByIOefqeW9ouOBruOCpOODs+OCueOCv+ODs+OCuVxuICAgKi9cbiAgcHVibGljIHNldFJlY3QocjogY3NtUmVjdCk6IHZvaWQge1xuICAgIHRoaXMueCA9IHIueDtcbiAgICB0aGlzLnkgPSByLnk7XG4gICAgdGhpcy53aWR0aCA9IHIud2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSByLmhlaWdodDtcbiAgfVxuXG4gIC8qKlxuICAgKiDnn6nlvaLkuK3lpK7jgpLou7jjgavjgZfjgabnuKbmqKrjgpLmi6HnuK7jgZnjgotcbiAgICogQHBhcmFtIHcg5bmF5pa55ZCR44Gr5ouh57iu44GZ44KL6YePXG4gICAqIEBwYXJhbSBoIOmrmOOBleaWueWQkeOBq+aLoee4ruOBmeOCi+mHj1xuICAgKi9cbiAgcHVibGljIGV4cGFuZCh3OiBudW1iZXIsIGg6IG51bWJlcikge1xuICAgIHRoaXMueCAtPSB3O1xuICAgIHRoaXMueSAtPSBoO1xuICAgIHRoaXMud2lkdGggKz0gdyAqIDIuMDtcbiAgICB0aGlzLmhlaWdodCArPSBoICogMi4wO1xuICB9XG5cbiAgcHVibGljIHg6IG51bWJlcjsgLy8g5bem56uvWOW6p+aomVxuICBwdWJsaWMgeTogbnVtYmVyOyAvLyDkuIrnq69Z5bqn5qiZXG4gIHB1YmxpYyB3aWR0aDogbnVtYmVyOyAvLyDluYVcbiAgcHVibGljIGhlaWdodDogbnVtYmVyOyAvLyDpq5jjgZVcbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3NtcmVjdGYnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IGNzbVJlY3QgPSAkLmNzbVJlY3Q7XG4gIGV4cG9ydCB0eXBlIGNzbVJlY3QgPSAkLmNzbVJlY3Q7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG4vKipcbiAqIOaWh+Wtl+WIl+OCr+ODqeOCueOAglxuICovXG5leHBvcnQgY2xhc3MgY3NtU3RyaW5nIHtcbiAgLyoqXG4gICAqIOaWh+Wtl+WIl+OCkuW+jOaWueOBq+i/veWKoOOBmeOCi1xuICAgKlxuICAgKiBAcGFyYW0gYyDov73liqDjgZnjgovmloflrZfliJdcbiAgICogQHJldHVybiDmm7TmlrDjgZXjgozjgZ/mloflrZfliJdcbiAgICovXG4gIHB1YmxpYyBhcHBlbmQoYzogc3RyaW5nLCBsZW5ndGg/OiBudW1iZXIpOiBjc21TdHJpbmcge1xuICAgIHRoaXMucyArPSBsZW5ndGggIT09IHVuZGVmaW5lZCA/IGMuc3Vic3RyKDAsIGxlbmd0aCkgOiBjO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog5paH5a2X44K144Kk44K644KS5ouh5by144GX44Gm5paH5a2X44KS5Z+L44KB44KLXG4gICAqIEBwYXJhbSBsZW5ndGggICAg5ouh5by144GZ44KL5paH5a2X5pWwXG4gICAqIEBwYXJhbSB2ICAgICAgICAg5Z+L44KB44KL5paH5a2XXG4gICAqIEByZXR1cm4g5pu05paw44GV44KM44Gf5paH5a2X5YiXXG4gICAqL1xuICBwdWJsaWMgZXhwYW5zaW9uKGxlbmd0aDogbnVtYmVyLCB2OiBzdHJpbmcpOiBjc21TdHJpbmcge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuYXBwZW5kKHYpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOaWh+Wtl+WIl+OBrumVt+OBleOCkuODkOOCpOODiOaVsOOBp+WPluW+l+OBmeOCi1xuICAgKi9cbiAgcHVibGljIGdldEJ5dGVzKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLnMpLnJlcGxhY2UoLyUuLi9nLCAneCcpLmxlbmd0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiDmloflrZfliJfjga7plbfjgZXjgpLov5TjgZlcbiAgICovXG4gIHB1YmxpYyBnZXRMZW5ndGgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5zLmxlbmd0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiDmloflrZfliJfmr5TovIMgPFxuICAgKiBAcGFyYW0gcyDmr5TovIPjgZnjgovmloflrZfliJdcbiAgICogQHJldHVybiB0cnVlOiAgICDmr5TovIPjgZnjgovmloflrZfliJfjgojjgorlsI/jgZXjgYRcbiAgICogQHJldHVybiBmYWxzZTogICDmr5TovIPjgZnjgovmloflrZfliJfjgojjgorlpKfjgY3jgYRcbiAgICovXG4gIHB1YmxpYyBpc0xlc3MoczogY3NtU3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMucyA8IHMucztcbiAgfVxuXG4gIC8qKlxuICAgKiDmloflrZfliJfmr5TovIMgPlxuICAgKiBAcGFyYW0gcyDmr5TovIPjgZnjgovmloflrZfliJdcbiAgICogQHJldHVybiB0cnVlOiAgICDmr5TovIPjgZnjgovmloflrZfliJfjgojjgorlpKfjgY3jgYRcbiAgICogQHJldHVybiBmYWxzZTogICDmr5TovIPjgZnjgovmloflrZfliJfjgojjgorlsI/jgZXjgYRcbiAgICovXG4gIHB1YmxpYyBpc0dyZWF0KHM6IGNzbVN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnMgPiBzLnM7XG4gIH1cblxuICAvKipcbiAgICog5paH5a2X5YiX5q+U6LyDID09XG4gICAqIEBwYXJhbSBzIOavlOi8g+OBmeOCi+aWh+Wtl+WIl1xuICAgKiBAcmV0dXJuIHRydWU6ICAgIOavlOi8g+OBmeOCi+aWh+Wtl+WIl+OBqOetieOBl+OBhFxuICAgKiBAcmV0dXJuIGZhbHNlOiAgIOavlOi8g+OBmeOCi+aWh+Wtl+WIl+OBqOeVsOOBquOCi1xuICAgKi9cbiAgcHVibGljIGlzRXF1YWwoczogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMucyA9PSBzO1xuICB9XG5cbiAgLyoqXG4gICAqIOaWh+Wtl+WIl+OBjOepuuOBi+OBqeOBhuOBi1xuICAgKiBAcmV0dXJuIHRydWU6IOepuuOBruaWh+Wtl+WIl1xuICAgKiBAcmV0dXJuIGZhbHNlOiDlgKTjgYzoqK3lrprjgZXjgozjgabjgYTjgotcbiAgICovXG4gIHB1YmxpYyBpc0VtcHR5KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnMubGVuZ3RoID09IDA7XG4gIH1cblxuICAvKipcbiAgICog5byV5pWw5LuY44GN44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3Ioczogc3RyaW5nKSB7XG4gICAgdGhpcy5zID0gcztcbiAgfVxuXG4gIHM6IHN0cmluZztcbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3Ntc3RyaW5nJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBjc21TdHJpbmcgPSAkLmNzbVN0cmluZztcbiAgZXhwb3J0IHR5cGUgY3NtU3RyaW5nID0gJC5jc21TdHJpbmc7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG4vKipcbiAqIOODmeOCr+OCv+ODvOWei++8iOWPr+WkiemFjeWIl+Wei++8iVxuICovXG5leHBvcnQgY2xhc3MgY3NtVmVjdG9yPFQ+IHtcbiAgLyoqXG4gICAqIOW8leaVsOS7mOOBjeOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKiBAcGFyYW0gaW5paXRhbENhcGFjaXR5IOWIneacn+WMluW+jOOBruOCreODo+ODkeOCt+ODhuOCo+OAguODh+ODvOOCv+OCteOCpOOCuuOBr19jYXBhY2l0eSAqIHNpemVvZihUKVxuICAgKiBAcGFyYW0gemVyb0NsZWFyIHRydWXjgarjgonliJ3mnJ/ljJbmmYLjgavnorrkv53jgZfjgZ/poJjln5/jgpIw44Gn5Z+L44KB44KLXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihpbml0aWFsQ2FwYWNpdHkgPSAwKSB7XG4gICAgaWYgKGluaXRpYWxDYXBhY2l0eSA8IDEpIHtcbiAgICAgIHRoaXMuX3B0ciA9IFtdO1xuICAgICAgdGhpcy5fY2FwYWNpdHkgPSAwO1xuICAgICAgdGhpcy5fc2l6ZSA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3B0ciA9IG5ldyBBcnJheShpbml0aWFsQ2FwYWNpdHkpO1xuICAgICAgdGhpcy5fY2FwYWNpdHkgPSBpbml0aWFsQ2FwYWNpdHk7XG4gICAgICB0aGlzLl9zaXplID0gMDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44Kk44Oz44OH44OD44Kv44K544Gn5oyH5a6a44GX44Gf6KaB57Sg44KS6L+U44GZXG4gICAqL1xuICBwdWJsaWMgYXQoaW5kZXg6IG51bWJlcik6IFQge1xuICAgIHJldHVybiB0aGlzLl9wdHJbaW5kZXhdO1xuICB9XG5cbiAgLyoqXG4gICAqIOimgee0oOOCkuOCu+ODg+ODiFxuICAgKiBAcGFyYW0gaW5kZXgg6KaB57Sg44KS44K744OD44OI44GZ44KL44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEBwYXJhbSB2YWx1ZSDjgrvjg4Pjg4jjgZnjgovopoHntKBcbiAgICovXG4gIHB1YmxpYyBzZXQoaW5kZXg6IG51bWJlciwgdmFsdWU6IFQpOiB2b2lkIHtcbiAgICB0aGlzLl9wdHJbaW5kZXhdID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44OG44OK44KS5Y+W5b6X44GZ44KLXG4gICAqL1xuICBwdWJsaWMgZ2V0KG9mZnNldCA9IDApOiBUW10ge1xuICAgIGNvbnN0IHJldDogVFtdID0gbmV3IEFycmF5PFQ+KCk7XG4gICAgZm9yIChsZXQgaSA9IG9mZnNldDsgaSA8IHRoaXMuX3NpemU7IGkrKykge1xuICAgICAgcmV0LnB1c2godGhpcy5fcHRyW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiBwdXNoQmFja+WHpueQhuOAgeOCs+ODs+ODhuODiuOBq+aWsOOBn+OBquimgee0oOOCkui/veWKoOOBmeOCi1xuICAgKiBAcGFyYW0gdmFsdWUgUHVzaEJhY2vlh6bnkIbjgafov73liqDjgZnjgovlgKRcbiAgICovXG4gIHB1YmxpYyBwdXNoQmFjayh2YWx1ZTogVCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9zaXplID49IHRoaXMuX2NhcGFjaXR5KSB7XG4gICAgICB0aGlzLnByZXBhcmVDYXBhY2l0eShcbiAgICAgICAgdGhpcy5fY2FwYWNpdHkgPT0gMCA/IGNzbVZlY3Rvci5zX2RlZmF1bHRTaXplIDogdGhpcy5fY2FwYWNpdHkgKiAyXG4gICAgICApO1xuICAgIH1cblxuICAgIHRoaXMuX3B0clt0aGlzLl9zaXplKytdID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44OG44OK44Gu5YWo6KaB57Sg44KS6Kej5pS+44GZ44KLXG4gICAqL1xuICBwdWJsaWMgY2xlYXIoKTogdm9pZCB7XG4gICAgdGhpcy5fcHRyLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5fc2l6ZSA9IDA7XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44OG44OK44Gu6KaB57Sg5pWw44KS6L+U44GZXG4gICAqIEByZXR1cm4g44Kz44Oz44OG44OK44Gu6KaB57Sg5pWwXG4gICAqL1xuICBwdWJsaWMgZ2V0U2l6ZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9zaXplO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+ODhuODiuOBruWFqOimgee0oOOBq+WvvuOBl+OBpuS7o+WFpeWHpueQhuOCkuihjOOBhlxuICAgKiBAcGFyYW0gbmV3U2l6ZSDku6PlhaXlh6bnkIblvozjga7jgrXjgqTjgrpcbiAgICogQHBhcmFtIHZhbHVlIOimgee0oOOBq+S7o+WFpeOBmeOCi+WApFxuICAgKi9cbiAgcHVibGljIGFzc2lnbihuZXdTaXplOiBudW1iZXIsIHZhbHVlOiBUKTogdm9pZCB7XG4gICAgY29uc3QgY3VyU2l6ZSA9IHRoaXMuX3NpemU7XG5cbiAgICBpZiAoY3VyU2l6ZSA8IG5ld1NpemUpIHtcbiAgICAgIHRoaXMucHJlcGFyZUNhcGFjaXR5KG5ld1NpemUpOyAvLyBjYXBhY2l0eeabtOaWsFxuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmV3U2l6ZTsgaSsrKSB7XG4gICAgICB0aGlzLl9wdHJbaV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICB0aGlzLl9zaXplID0gbmV3U2l6ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrXjgqTjgrrlpInmm7RcbiAgICovXG4gIHB1YmxpYyByZXNpemUobmV3U2l6ZTogbnVtYmVyLCB2YWx1ZTogVCA9IG51bGwpOiB2b2lkIHtcbiAgICB0aGlzLnVwZGF0ZVNpemUobmV3U2l6ZSwgdmFsdWUsIHRydWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCteOCpOOCuuWkieabtFxuICAgKi9cbiAgcHVibGljIHVwZGF0ZVNpemUoXG4gICAgbmV3U2l6ZTogbnVtYmVyLFxuICAgIHZhbHVlOiBhbnkgPSBudWxsLFxuICAgIGNhbGxQbGFjZW1lbnROZXcgPSB0cnVlXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IGN1clNpemU6IG51bWJlciA9IHRoaXMuX3NpemU7XG5cbiAgICBpZiAoY3VyU2l6ZSA8IG5ld1NpemUpIHtcbiAgICAgIHRoaXMucHJlcGFyZUNhcGFjaXR5KG5ld1NpemUpOyAvLyBjYXBhY2l0eeabtOaWsFxuXG4gICAgICBpZiAoY2FsbFBsYWNlbWVudE5ldykge1xuICAgICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSB0aGlzLl9zaXplOyBpIDwgbmV3U2l6ZTsgaSsrKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAvLyBuZXdcbiAgICAgICAgICAgIHRoaXMuX3B0cltpXSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkobmV3IHZhbHVlKCkpKTtcbiAgICAgICAgICB9IC8vIOODl+ODquODn+ODhuOCo+ODluWei+OBquOBruOBp+WApOa4oeOBl1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fcHRyW2ldID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSB0aGlzLl9zaXplOyBpIDwgbmV3U2l6ZTsgaSsrKSB7XG4gICAgICAgICAgdGhpcy5fcHRyW2ldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbmV3U2l6ZSA8PSB0aGlzLl9zaXplXG4gICAgICAvLy0tLVxuICAgICAgY29uc3Qgc3ViID0gdGhpcy5fc2l6ZSAtIG5ld1NpemU7XG4gICAgICB0aGlzLl9wdHIuc3BsaWNlKHRoaXMuX3NpemUgLSBzdWIsIHN1Yik7IC8vIOS4jeimgeOBquOBruOBp+egtOajhOOBmeOCi1xuICAgIH1cbiAgICB0aGlzLl9zaXplID0gbmV3U2l6ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjg4bjg4rjgavjgrPjg7Pjg4bjg4ropoHntKDjgpLmjL/lhaXjgZnjgotcbiAgICogQHBhcmFtIHBvc2l0aW9uIOaMv+WFpeOBmeOCi+S9jee9rlxuICAgKiBAcGFyYW0gYmVnaW4g5oy/5YWl44GZ44KL44Kz44Oz44OG44OK44Gu6ZaL5aeL5L2N572uXG4gICAqIEBwYXJhbSBlbmQg5oy/5YWl44GZ44KL44Kz44Oz44OG44OK44Gu57WC56uv5L2N572uXG4gICAqL1xuICBwdWJsaWMgaW5zZXJ0KFxuICAgIHBvc2l0aW9uOiBpdGVyYXRvcjxUPixcbiAgICBiZWdpbjogaXRlcmF0b3I8VD4sXG4gICAgZW5kOiBpdGVyYXRvcjxUPlxuICApOiB2b2lkIHtcbiAgICBsZXQgZHN0U2k6IG51bWJlciA9IHBvc2l0aW9uLl9pbmRleDtcbiAgICBjb25zdCBzcmNTaTogbnVtYmVyID0gYmVnaW4uX2luZGV4O1xuICAgIGNvbnN0IHNyY0VpOiBudW1iZXIgPSBlbmQuX2luZGV4O1xuXG4gICAgY29uc3QgYWRkQ291bnQ6IG51bWJlciA9IHNyY0VpIC0gc3JjU2k7XG5cbiAgICB0aGlzLnByZXBhcmVDYXBhY2l0eSh0aGlzLl9zaXplICsgYWRkQ291bnQpO1xuXG4gICAgLy8g5oy/5YWl55So44Gu5pei5a2Y44OH44O844K/44KS44K344OV44OI44GX44Gm6ZqZ6ZaT44KS5L2c44KLXG4gICAgY29uc3QgYWRkU2l6ZSA9IHRoaXMuX3NpemUgLSBkc3RTaTtcbiAgICBpZiAoYWRkU2l6ZSA+IDApIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWRkU2l6ZTsgaSsrKSB7XG4gICAgICAgIHRoaXMuX3B0ci5zcGxpY2UoZHN0U2kgKyBpLCAwLCBudWxsKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGxldCBpOiBudW1iZXIgPSBzcmNTaTsgaSA8IHNyY0VpOyBpKyssIGRzdFNpKyspIHtcbiAgICAgIHRoaXMuX3B0cltkc3RTaV0gPSBiZWdpbi5fdmVjdG9yLl9wdHJbaV07XG4gICAgfVxuXG4gICAgdGhpcy5fc2l6ZSA9IHRoaXMuX3NpemUgKyBhZGRDb3VudDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjg4bjg4rjgYvjgonjgqTjg7Pjg4fjg4Pjgq/jgrnjgafmjIflrprjgZfjgZ/opoHntKDjgpLliYrpmaTjgZnjgotcbiAgICogQHBhcmFtIGluZGV4IOOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcmV0dXJuIHRydWUg5YmK6Zmk5a6f6KGMXG4gICAqIEByZXR1cm4gZmFsc2Ug5YmK6Zmk56+E5Zuy5aSWXG4gICAqL1xuICBwdWJsaWMgcmVtb3ZlKGluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICBpZiAoaW5kZXggPCAwIHx8IHRoaXMuX3NpemUgPD0gaW5kZXgpIHtcbiAgICAgIHJldHVybiBmYWxzZTsgLy8g5YmK6Zmk56+E5Zuy5aSWXG4gICAgfVxuXG4gICAgdGhpcy5fcHRyLnNwbGljZShpbmRleCwgMSk7XG4gICAgLS10aGlzLl9zaXplO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44OG44OK44GL44KJ6KaB57Sg44KS5YmK6Zmk44GX44Gm5LuW44Gu6KaB57Sg44KS44K344OV44OI44GZ44KLXG4gICAqIEBwYXJhbSBpdGUg5YmK6Zmk44GZ44KL6KaB57SgXG4gICAqL1xuICBwdWJsaWMgZXJhc2UoaXRlOiBpdGVyYXRvcjxUPik6IGl0ZXJhdG9yPFQ+IHtcbiAgICBjb25zdCBpbmRleDogbnVtYmVyID0gaXRlLl9pbmRleDtcbiAgICBpZiAoaW5kZXggPCAwIHx8IHRoaXMuX3NpemUgPD0gaW5kZXgpIHtcbiAgICAgIHJldHVybiBpdGU7IC8vIOWJiumZpOevhOWbsuWkllxuICAgIH1cblxuICAgIC8vIOWJiumZpFxuICAgIHRoaXMuX3B0ci5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIC0tdGhpcy5fc2l6ZTtcblxuICAgIGNvbnN0IGl0ZTI6IGl0ZXJhdG9yPFQ+ID0gbmV3IGl0ZXJhdG9yPFQ+KHRoaXMsIGluZGV4KTsgLy8g57WC5LqGXG4gICAgcmV0dXJuIGl0ZTI7XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44OG44OK44Gu44Kt44Oj44OR44K344OG44Kj44KS56K65L+d44GZ44KLXG4gICAqIEBwYXJhbSBuZXdTaXplIOaWsOOBn+OBquOCreODo+ODkeOCt+ODhuOCo+OAguW8leaVsOOBruWApOOBjOePvuWcqOOBruOCteOCpOOCuuacqua6gOOBruWgtOWQiOOBr+S9leOCguOBl+OBquOBhC5cbiAgICovXG4gIHB1YmxpYyBwcmVwYXJlQ2FwYWNpdHkobmV3U2l6ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKG5ld1NpemUgPiB0aGlzLl9jYXBhY2l0eSkge1xuICAgICAgaWYgKHRoaXMuX2NhcGFjaXR5ID09IDApIHtcbiAgICAgICAgdGhpcy5fcHRyID0gbmV3IEFycmF5KG5ld1NpemUpO1xuICAgICAgICB0aGlzLl9jYXBhY2l0eSA9IG5ld1NpemU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9wdHIubGVuZ3RoID0gbmV3U2l6ZTtcbiAgICAgICAgdGhpcy5fY2FwYWNpdHkgPSBuZXdTaXplO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjg4bjg4rjga7lhYjpoK3opoHntKDjgpLov5TjgZlcbiAgICovXG4gIHB1YmxpYyBiZWdpbigpOiBpdGVyYXRvcjxUPiB7XG4gICAgY29uc3QgaXRlOiBpdGVyYXRvcjxUPiA9XG4gICAgICB0aGlzLl9zaXplID09IDAgPyB0aGlzLmVuZCgpIDogbmV3IGl0ZXJhdG9yPFQ+KHRoaXMsIDApO1xuICAgIHJldHVybiBpdGU7XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44OG44OK44Gu57WC56uv6KaB57Sg44KS6L+U44GZXG4gICAqL1xuICBwdWJsaWMgZW5kKCk6IGl0ZXJhdG9yPFQ+IHtcbiAgICBjb25zdCBpdGU6IGl0ZXJhdG9yPFQ+ID0gbmV3IGl0ZXJhdG9yPFQ+KHRoaXMsIHRoaXMuX3NpemUpO1xuICAgIHJldHVybiBpdGU7XG4gIH1cblxuICBwdWJsaWMgZ2V0T2Zmc2V0KG9mZnNldDogbnVtYmVyKTogY3NtVmVjdG9yPFQ+IHtcbiAgICBjb25zdCBuZXdWZWN0b3IgPSBuZXcgY3NtVmVjdG9yPFQ+KCk7XG4gICAgbmV3VmVjdG9yLl9wdHIgPSB0aGlzLmdldChvZmZzZXQpO1xuICAgIG5ld1ZlY3Rvci5fc2l6ZSA9IHRoaXMuZ2V0KG9mZnNldCkubGVuZ3RoO1xuICAgIG5ld1ZlY3Rvci5fY2FwYWNpdHkgPSB0aGlzLmdldChvZmZzZXQpLmxlbmd0aDtcblxuICAgIHJldHVybiBuZXdWZWN0b3I7XG4gIH1cblxuICBfcHRyOiBUW107IC8vIOOCs+ODs+ODhuODiuOBruWFiOmgreOCouODieODrOOCuVxuICBfc2l6ZTogbnVtYmVyOyAvLyDjgrPjg7Pjg4bjg4rjga7opoHntKDmlbBcbiAgX2NhcGFjaXR5OiBudW1iZXI7IC8vIOOCs+ODs+ODhuODiuOBruOCreODo+ODkeOCt+ODhuOCo1xuXG4gIHN0YXRpYyByZWFkb25seSBzX2RlZmF1bHRTaXplID0gMTA7IC8vIOOCs+ODs+ODhuODiuWIneacn+WMluOBruODh+ODleOCqeODq+ODiOOCteOCpOOCulxufVxuXG5leHBvcnQgY2xhc3MgaXRlcmF0b3I8VD4ge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3Iodj86IGNzbVZlY3RvcjxUPiwgaW5kZXg/OiBudW1iZXIpIHtcbiAgICB0aGlzLl92ZWN0b3IgPSB2ICE9IHVuZGVmaW5lZCA/IHYgOiBudWxsO1xuICAgIHRoaXMuX2luZGV4ID0gaW5kZXggIT0gdW5kZWZpbmVkID8gaW5kZXggOiAwO1xuICB9XG5cbiAgLyoqXG4gICAqIOS7o+WFpVxuICAgKi9cbiAgcHVibGljIHNldChpdGU6IGl0ZXJhdG9yPFQ+KTogaXRlcmF0b3I8VD4ge1xuICAgIHRoaXMuX2luZGV4ID0gaXRlLl9pbmRleDtcbiAgICB0aGlzLl92ZWN0b3IgPSBpdGUuX3ZlY3RvcjtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDliY3nva7jgY0rK+a8lOeul1xuICAgKi9cbiAgcHVibGljIHByZUluY3JlbWVudCgpOiBpdGVyYXRvcjxUPiB7XG4gICAgKyt0aGlzLl9pbmRleDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDliY3nva7jgY0tLea8lOeul1xuICAgKi9cbiAgcHVibGljIHByZURlY3JlbWVudCgpOiBpdGVyYXRvcjxUPiB7XG4gICAgLS10aGlzLl9pbmRleDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDlvoznva7jgY0rK+a8lOeul+WtkFxuICAgKi9cbiAgcHVibGljIGluY3JlbWVudCgpOiBpdGVyYXRvcjxUPiB7XG4gICAgY29uc3QgaXRlb2xkID0gbmV3IGl0ZXJhdG9yPFQ+KHRoaXMuX3ZlY3RvciwgdGhpcy5faW5kZXgrKyk7IC8vIOWPpOOBhOWApOOCkuS/neWtmFxuICAgIHJldHVybiBpdGVvbGQ7XG4gIH1cblxuICAvKipcbiAgICog5b6M572u44GNLS3mvJTnrpflrZBcbiAgICovXG4gIHB1YmxpYyBkZWNyZW1lbnQoKTogaXRlcmF0b3I8VD4ge1xuICAgIGNvbnN0IGl0ZW9sZCA9IG5ldyBpdGVyYXRvcjxUPih0aGlzLl92ZWN0b3IsIHRoaXMuX2luZGV4LS0pOyAvLyDlj6TjgYTlgKTjgpLkv53lrZhcbiAgICByZXR1cm4gaXRlb2xkO1xuICB9XG5cbiAgLyoqXG4gICAqIHB0clxuICAgKi9cbiAgcHVibGljIHB0cigpOiBUIHtcbiAgICByZXR1cm4gdGhpcy5fdmVjdG9yLl9wdHJbdGhpcy5faW5kZXhdO1xuICB9XG5cbiAgLyoqXG4gICAqID3mvJTnrpflrZDjga7jgqrjg7zjg5Djg7zjg63jg7zjg4lcbiAgICovXG4gIHB1YmxpYyBzdWJzdGl0dXRpb24oaXRlOiBpdGVyYXRvcjxUPik6IGl0ZXJhdG9yPFQ+IHtcbiAgICB0aGlzLl9pbmRleCA9IGl0ZS5faW5kZXg7XG4gICAgdGhpcy5fdmVjdG9yID0gaXRlLl92ZWN0b3I7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogIT3mvJTnrpflrZDjga7jgqrjg7zjg5Djg7zjg63jg7zjg4lcbiAgICovXG4gIHB1YmxpYyBub3RFcXVhbChpdGU6IGl0ZXJhdG9yPFQ+KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2luZGV4ICE9IGl0ZS5faW5kZXggfHwgdGhpcy5fdmVjdG9yICE9IGl0ZS5fdmVjdG9yO1xuICB9XG5cbiAgX2luZGV4OiBudW1iZXI7IC8vIOOCs+ODs+ODhuODiuOBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICBfdmVjdG9yOiBjc21WZWN0b3I8VD47IC8vIOOCs+ODs+ODhuODilxufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jc212ZWN0b3InO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IGNzbVZlY3RvciA9ICQuY3NtVmVjdG9yO1xuICBleHBvcnQgdHlwZSBjc21WZWN0b3I8VD4gPSAkLmNzbVZlY3RvcjxUPjtcbiAgZXhwb3J0IGNvbnN0IGl0ZXJhdG9yID0gJC5pdGVyYXRvcjtcbiAgZXhwb3J0IHR5cGUgaXRlcmF0b3I8VD4gPSAkLml0ZXJhdG9yPFQ+O1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHtcbiAgQ1NNX0xPR19MRVZFTCxcbiAgQ1NNX0xPR19MRVZFTF9ERUJVRyxcbiAgQ1NNX0xPR19MRVZFTF9FUlJPUixcbiAgQ1NNX0xPR19MRVZFTF9JTkZPLFxuICBDU01fTE9HX0xFVkVMX1ZFUkJPU0UsXG4gIENTTV9MT0dfTEVWRUxfV0FSTklORyxcbn0gZnJvbSAnLi4vY3ViaXNtZnJhbWV3b3JrY29uZmlnJztcbmltcG9ydCB7IEN1YmlzbUZyYW1ld29yaywgTG9nTGV2ZWwgfSBmcm9tICcuLi9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xuXG5leHBvcnQgY29uc3QgQ3ViaXNtTG9nUHJpbnQgPSAobGV2ZWw6IExvZ0xldmVsLCBmbXQ6IHN0cmluZywgYXJnczogYW55W10pID0+IHtcbiAgQ3ViaXNtRGVidWcucHJpbnQobGV2ZWwsICdbQ1NNXScgKyBmbXQsIGFyZ3MpO1xufTtcblxuZXhwb3J0IGNvbnN0IEN1YmlzbUxvZ1ByaW50SW4gPSAobGV2ZWw6IExvZ0xldmVsLCBmbXQ6IHN0cmluZywgYXJnczogYW55W10pID0+IHtcbiAgQ3ViaXNtTG9nUHJpbnQobGV2ZWwsIGZtdCArICdcXG4nLCBhcmdzKTtcbn07XG5cbmV4cG9ydCBjb25zdCBDU01fQVNTRVJUID0gKGV4cHI6IGFueSkgPT4ge1xuICBjb25zb2xlLmFzc2VydChleHByKTtcbn07XG5cbmV4cG9ydCBsZXQgQ3ViaXNtTG9nVmVyYm9zZTogKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4gdm9pZDtcbmV4cG9ydCBsZXQgQ3ViaXNtTG9nRGVidWc6IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHZvaWQ7XG5leHBvcnQgbGV0IEN1YmlzbUxvZ0luZm86IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHZvaWQ7XG5leHBvcnQgbGV0IEN1YmlzbUxvZ1dhcm5pbmc6IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHZvaWQ7XG5leHBvcnQgbGV0IEN1YmlzbUxvZ0Vycm9yOiAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkO1xuXG5pZiAoQ1NNX0xPR19MRVZFTCA8PSBDU01fTE9HX0xFVkVMX1ZFUkJPU0UpIHtcbiAgQ3ViaXNtTG9nVmVyYm9zZSA9IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHtcbiAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX1ZlcmJvc2UsICdbVl0nICsgZm10LCBhcmdzKTtcbiAgfTtcblxuICBDdWJpc21Mb2dEZWJ1ZyA9IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHtcbiAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX0RlYnVnLCAnW0RdJyArIGZtdCwgYXJncyk7XG4gIH07XG5cbiAgQ3ViaXNtTG9nSW5mbyA9IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHtcbiAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX0luZm8sICdbSV0nICsgZm10LCBhcmdzKTtcbiAgfTtcblxuICBDdWJpc21Mb2dXYXJuaW5nID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfV2FybmluZywgJ1tXXScgKyBmbXQsIGFyZ3MpO1xuICB9O1xuXG4gIEN1YmlzbUxvZ0Vycm9yID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfRXJyb3IsICdbRV0nICsgZm10LCBhcmdzKTtcbiAgfTtcbn0gZWxzZSBpZiAoQ1NNX0xPR19MRVZFTCA9PSBDU01fTE9HX0xFVkVMX0RFQlVHKSB7XG4gIEN1YmlzbUxvZ0RlYnVnID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfRGVidWcsICdbRF0nICsgZm10LCBhcmdzKTtcbiAgfTtcblxuICBDdWJpc21Mb2dJbmZvID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfSW5mbywgJ1tJXScgKyBmbXQsIGFyZ3MpO1xuICB9O1xuXG4gIEN1YmlzbUxvZ1dhcm5pbmcgPSAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9XYXJuaW5nLCAnW1ddJyArIGZtdCwgYXJncyk7XG4gIH07XG5cbiAgQ3ViaXNtTG9nRXJyb3IgPSAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9FcnJvciwgJ1tFXScgKyBmbXQsIGFyZ3MpO1xuICB9O1xufSBlbHNlIGlmIChDU01fTE9HX0xFVkVMID09IENTTV9MT0dfTEVWRUxfSU5GTykge1xuICBDdWJpc21Mb2dJbmZvID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfSW5mbywgJ1tJXScgKyBmbXQsIGFyZ3MpO1xuICB9O1xuXG4gIEN1YmlzbUxvZ1dhcm5pbmcgPSAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9XYXJuaW5nLCAnW1ddJyArIGZtdCwgYXJncyk7XG4gIH07XG5cbiAgQ3ViaXNtTG9nRXJyb3IgPSAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9FcnJvciwgJ1tFXScgKyBmbXQsIGFyZ3MpO1xuICB9O1xufSBlbHNlIGlmIChDU01fTE9HX0xFVkVMID09IENTTV9MT0dfTEVWRUxfV0FSTklORykge1xuICBDdWJpc21Mb2dXYXJuaW5nID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfV2FybmluZywgJ1tXXScgKyBmbXQsIGFyZ3MpO1xuICB9O1xuXG4gIEN1YmlzbUxvZ0Vycm9yID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfRXJyb3IsICdbRV0nICsgZm10LCBhcmdzKTtcbiAgfTtcbn0gZWxzZSBpZiAoQ1NNX0xPR19MRVZFTCA9PSBDU01fTE9HX0xFVkVMX0VSUk9SKSB7XG4gIEN1YmlzbUxvZ0Vycm9yID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfRXJyb3IsICdbRV0nICsgZm10LCBhcmdzKTtcbiAgfTtcbn1cblxuLyoqXG4gKiDjg4fjg5Djg4PjgrDnlKjjga7jg6bjg7zjg4bjgqPjg6rjg4bjgqPjgq/jg6njgrnjgIJcbiAqIOODreOCsOOBruWHuuWKm+OAgeODkOOCpOODiOOBruODgOODs+ODl+OBquOBqVxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtRGVidWcge1xuICAvKipcbiAgICog44Ot44Kw44KS5Ye65Yqb44GZ44KL44CC56ys5LiA5byV5pWw44Gr44Ot44Kw44Os44OZ44Or44KS6Kit5a6a44GZ44KL44CCXG4gICAqIEN1YmlzbUZyYW1ld29yay5pbml0aWFsaXplKCnmmYLjgavjgqrjg5fjgrfjg6fjg7PjgafoqK3lrprjgZXjgozjgZ/jg63jgrDlh7rlipvjg6zjg5njg6vjgpLkuIvlm57jgovloLTlkIjjga/jg63jgrDjgavlh7rjgZXjgarjgYTjgIJcbiAgICpcbiAgICogQHBhcmFtIGxvZ0xldmVsIOODreOCsOODrOODmeODq+OBruioreWumlxuICAgKiBAcGFyYW0gZm9ybWF0IOabuOW8j+S7mOOBjeaWh+Wtl+WIl1xuICAgKiBAcGFyYW0gYXJncyDlj6/lpInplbflvJXmlbBcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgcHJpbnQobG9nTGV2ZWw6IExvZ0xldmVsLCBmb3JtYXQ6IHN0cmluZywgYXJncz86IGFueVtdKTogdm9pZCB7XG4gICAgLy8g44Kq44OX44K344On44Oz44Gn6Kit5a6a44GV44KM44Gf44Ot44Kw5Ye65Yqb44Os44OZ44Or44KS5LiL5Zue44KL5aC05ZCI44Gv44Ot44Kw44Gr5Ye644GV44Gq44GEXG4gICAgaWYgKGxvZ0xldmVsIDwgQ3ViaXNtRnJhbWV3b3JrLmdldExvZ2dpbmdMZXZlbCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgbG9nUHJpbnQ6IExpdmUyREN1YmlzbUNvcmUuY3NtTG9nRnVuY3Rpb24gPVxuICAgICAgQ3ViaXNtRnJhbWV3b3JrLmNvcmVMb2dGdW5jdGlvbjtcblxuICAgIGlmICghbG9nUHJpbnQpIHJldHVybjtcblxuICAgIGNvbnN0IGJ1ZmZlcjogc3RyaW5nID0gZm9ybWF0LnJlcGxhY2UoL1xceyhcXGQrKVxcfS9nLCAobSwgaykgPT4ge1xuICAgICAgcmV0dXJuIGFyZ3Nba107XG4gICAgfSk7XG4gICAgbG9nUHJpbnQoYnVmZmVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjg7zjgr/jgYvjgonmjIflrprjgZfjgZ/plbfjgZXjgaDjgZHjg4Djg7Pjg5flh7rlipvjgZnjgovjgIJcbiAgICogQ3ViaXNtRnJhbWV3b3JrLmluaXRpYWxpemUoKeaZguOBq+OCquODl+OCt+ODp+ODs+OBp+ioreWumuOBleOCjOOBn+ODreOCsOWHuuWKm+ODrOODmeODq+OCkuS4i+WbnuOCi+WgtOWQiOOBr+ODreOCsOOBq+WHuuOBleOBquOBhOOAglxuICAgKlxuICAgKiBAcGFyYW0gbG9nTGV2ZWwg44Ot44Kw44Os44OZ44Or44Gu6Kit5a6aXG4gICAqIEBwYXJhbSBkYXRhIOODgOODs+ODl+OBmeOCi+ODh+ODvOOCv1xuICAgKiBAcGFyYW0gbGVuZ3RoIOODgOODs+ODl+OBmeOCi+mVt+OBlVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBkdW1wQnl0ZXMoXG4gICAgbG9nTGV2ZWw6IExvZ0xldmVsLFxuICAgIGRhdGE6IFVpbnQ4QXJyYXksXG4gICAgbGVuZ3RoOiBudW1iZXJcbiAgKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGkgJSAxNiA9PSAwICYmIGkgPiAwKSB0aGlzLnByaW50KGxvZ0xldmVsLCAnXFxuJyk7XG4gICAgICBlbHNlIGlmIChpICUgOCA9PSAwICYmIGkgPiAwKSB0aGlzLnByaW50KGxvZ0xldmVsLCAnICAnKTtcbiAgICAgIHRoaXMucHJpbnQobG9nTGV2ZWwsICd7MH0gJywgW2RhdGFbaV0gJiAweGZmXSk7XG4gICAgfVxuXG4gICAgdGhpcy5wcmludChsb2dMZXZlbCwgJ1xcbicpO1xuICB9XG5cbiAgLyoqXG4gICAqIHByaXZhdGUg44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwcml2YXRlIGNvbnN0cnVjdG9yKCkge31cbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtZGVidWcnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbURlYnVnID0gJC5DdWJpc21EZWJ1ZztcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtRGVidWcgPSAkLkN1YmlzbURlYnVnO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgc3RydG9kIH0gZnJvbSAnLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcbmltcG9ydCB7IGNzbU1hcCwgaXRlcmF0b3IgYXMgY3NtTWFwX2l0ZXJhdG9yIH0gZnJvbSAnLi4vdHlwZS9jc21tYXAnO1xuaW1wb3J0IHsgY3NtU3RyaW5nIH0gZnJvbSAnLi4vdHlwZS9jc21zdHJpbmcnO1xuaW1wb3J0IHsgY3NtVmVjdG9yLCBpdGVyYXRvciBhcyBjc21WZWN0b3JfaXRlcmF0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5pbXBvcnQgeyBDdWJpc21Mb2dJbmZvIH0gZnJvbSAnLi9jdWJpc21kZWJ1Zyc7XG5cbi8vIFN0YXRpY0luaXRpYWxpemVOb3RGb3JDbGllbnRDYWxsKCnjgafliJ3mnJ/ljJbjgZnjgotcbmNvbnN0IENTTV9KU09OX0VSUk9SX1RZUEVfTUlTTUFUQ0ggPSAnRXJyb3I6IHR5cGUgbWlzbWF0Y2gnO1xuY29uc3QgQ1NNX0pTT05fRVJST1JfSU5ERVhfT0ZfQk9VTkRTID0gJ0Vycm9yOiBpbmRleCBvdXQgb2YgYm91bmRzJztcblxuLyoqXG4gKiDjg5Hjg7zjgrnjgZfjgZ9KU09O44Ko44Os44Oh44Oz44OI44Gu6KaB57Sg44Gu5Z+65bqV44Kv44Op44K544CCXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBWYWx1ZSB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgLyoqXG4gICAqIOimgee0oOOCkuaWh+Wtl+WIl+Wei+OBp+i/lOOBmShjc21TdHJpbmflnospXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0U3RyaW5nKGRlZmF1bHRWYWx1ZT86IHN0cmluZywgaW5kZW50Pzogc3RyaW5nKTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiDopoHntKDjgpLmloflrZfliJflnovjgafov5TjgZkoc3RyaW5nKVxuICAgKi9cbiAgcHVibGljIGdldFJhd1N0cmluZyhkZWZhdWx0VmFsdWU/OiBzdHJpbmcsIGluZGVudD86IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nKGRlZmF1bHRWYWx1ZSwgaW5kZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDopoHntKDjgpLmlbDlgKTlnovjgafov5TjgZkobnVtYmVyKVxuICAgKi9cbiAgcHVibGljIHRvSW50KGRlZmF1bHRWYWx1ZSA9IDApOiBudW1iZXIge1xuICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gIH1cblxuICAvKipcbiAgICog6KaB57Sg44KS5pWw5YCk5Z6L44Gn6L+U44GZKG51bWJlcilcbiAgICovXG4gIHB1YmxpYyB0b0Zsb2F0KGRlZmF1bHRWYWx1ZSA9IDApOiBudW1iZXIge1xuICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gIH1cblxuICAvKipcbiAgICog6KaB57Sg44KS55yf5YG95YCk44Gn6L+U44GZKGJvb2xlYW4pXG4gICAqL1xuICBwdWJsaWMgdG9Cb29sZWFuKGRlZmF1bHRWYWx1ZSA9IGZhbHNlKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrXjgqTjgrrjgpLov5TjgZlcbiAgICovXG4gIHB1YmxpYyBnZXRTaXplKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICAvKipcbiAgICog6KaB57Sg44KS6YWN5YiX44Gn6L+U44GZKFZhbHVlW10pXG4gICAqL1xuICBwdWJsaWMgZ2V0QXJyYXkoZGVmYXVsdFZhbHVlOiBWYWx1ZVtdID0gbnVsbCk6IFZhbHVlW10ge1xuICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gIH1cblxuICAvKipcbiAgICog6KaB57Sg44KS44Kz44Oz44OG44OK44Gn6L+U44GZKGFycmF5KVxuICAgKi9cbiAgcHVibGljIGdldFZlY3RvcihkZWZhdWx0VmFsdWUgPSBuZXcgY3NtVmVjdG9yPFZhbHVlPigpKTogY3NtVmVjdG9yPFZhbHVlPiB7XG4gICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDopoHntKDjgpLjg57jg4Pjg5fjgafov5TjgZkoY3NtTWFwPGNzbVN0cmluZywgVmFsdWU+KVxuICAgKi9cbiAgcHVibGljIGdldE1hcChkZWZhdWx0VmFsdWU/OiBjc21NYXA8c3RyaW5nLCBWYWx1ZT4pOiBjc21NYXA8c3RyaW5nLCBWYWx1ZT4ge1xuICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gIH1cblxuICAvKipcbiAgICog5re75a2X5ryU566X5a2QW2luZGV4XVxuICAgKi9cbiAgcHVibGljIGdldFZhbHVlQnlJbmRleChpbmRleDogbnVtYmVyKTogVmFsdWUge1xuICAgIHJldHVybiBWYWx1ZS5lcnJvclZhbHVlLnNldEVycm9yTm90Rm9yQ2xpZW50Q2FsbChcbiAgICAgIENTTV9KU09OX0VSUk9SX1RZUEVfTUlTTUFUQ0hcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOa3u+Wtl+a8lOeul+WtkFtzdHJpbmcgfCBjc21TdHJpbmddXG4gICAqL1xuICBwdWJsaWMgZ2V0VmFsdWVCeVN0cmluZyhzOiBzdHJpbmcgfCBjc21TdHJpbmcpOiBWYWx1ZSB7XG4gICAgcmV0dXJuIFZhbHVlLm51bGxWYWx1ZS5zZXRFcnJvck5vdEZvckNsaWVudENhbGwoXG4gICAgICBDU01fSlNPTl9FUlJPUl9UWVBFX01JU01BVENIXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg57jg4Pjg5fjga7jgq3jg7zkuIDopqfjgpLjgrPjg7Pjg4bjg4rjgafov5TjgZlcbiAgICpcbiAgICogQHJldHVybiDjg57jg4Pjg5fjga7jgq3jg7zjga7kuIDopqdcbiAgICovXG4gIHB1YmxpYyBnZXRLZXlzKCk6IGNzbVZlY3RvcjxzdHJpbmc+IHtcbiAgICByZXR1cm4gVmFsdWUuc19kdW1teUtleXM7XG4gIH1cblxuICAvKipcbiAgICogVmFsdWXjga7nqK7poZ7jgYzjgqjjg6njg7zlgKTjgarjgol0cnVlXG4gICAqL1xuICBwdWJsaWMgaXNFcnJvcigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogVmFsdWXjga7nqK7poZ7jgYxudWxs44Gq44KJdHJ1ZVxuICAgKi9cbiAgcHVibGljIGlzTnVsbCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogVmFsdWXjga7nqK7poZ7jgYznnJ/lgb3lgKTjgarjgol0cnVlXG4gICAqL1xuICBwdWJsaWMgaXNCb29sKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWYWx1ZeOBrueorumhnuOBjOaVsOWApOWei+OBquOCiXRydWVcbiAgICovXG4gIHB1YmxpYyBpc0Zsb2F0KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWYWx1ZeOBrueorumhnuOBjOaWh+Wtl+WIl+OBquOCiXRydWVcbiAgICovXG4gIHB1YmxpYyBpc1N0cmluZygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogVmFsdWXjga7nqK7poZ7jgYzphY3liJfjgarjgol0cnVlXG4gICAqL1xuICBwdWJsaWMgaXNBcnJheSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogVmFsdWXjga7nqK7poZ7jgYzjg57jg4Pjg5flnovjgarjgol0cnVlXG4gICAqL1xuICBwdWJsaWMgaXNNYXAoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIOW8leaVsOOBruWApOOBqOetieOBl+OBkeOCjOOBsHRydWVcbiAgICovXG4gIHB1YmxpYyBlcXVhbHModmFsdWU6IGNzbVN0cmluZyk6IGJvb2xlYW47XG4gIHB1YmxpYyBlcXVhbHModmFsdWU6IHN0cmluZyk6IGJvb2xlYW47XG4gIHB1YmxpYyBlcXVhbHModmFsdWU6IG51bWJlcik6IGJvb2xlYW47XG4gIHB1YmxpYyBlcXVhbHModmFsdWU6IGJvb2xlYW4pOiBib29sZWFuO1xuICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogVmFsdWXjga7lgKTjgYzpnZnnmoTjgarjgol0cnVl44CB6Z2Z55qE44Gq44KJ6Kej5pS+44GX44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNTdGF0aWMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbHVl44Gr44Ko44Op44O85YCk44KS44K744OD44OI44GZ44KLXG4gICAqL1xuICBwdWJsaWMgc2V0RXJyb3JOb3RGb3JDbGllbnRDYWxsKGVycm9yU3RyOiBzdHJpbmcpOiBWYWx1ZSB7XG4gICAgcmV0dXJuIEpzb25FcnJvci5lcnJvclZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOWIneacn+WMlueUqOODoeOCveODg+ODiVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBzdGF0aWNJbml0aWFsaXplTm90Rm9yQ2xpZW50Q2FsbCgpOiB2b2lkIHtcbiAgICBKc29uQm9vbGVhbi50cnVlVmFsdWUgPSBuZXcgSnNvbkJvb2xlYW4odHJ1ZSk7XG4gICAgSnNvbkJvb2xlYW4uZmFsc2VWYWx1ZSA9IG5ldyBKc29uQm9vbGVhbihmYWxzZSk7XG4gICAgVmFsdWUuZXJyb3JWYWx1ZSA9IG5ldyBKc29uRXJyb3IoJ0VSUk9SJywgdHJ1ZSk7XG4gICAgVmFsdWUubnVsbFZhbHVlID0gbmV3IEpzb25OdWxsdmFsdWUoKTtcbiAgICBWYWx1ZS5zX2R1bW15S2V5cyA9IG5ldyBjc21WZWN0b3I8c3RyaW5nPigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODquODquODvOOCueeUqOODoeOCveODg+ODiVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBzdGF0aWNSZWxlYXNlTm90Rm9yQ2xpZW50Q2FsbCgpOiB2b2lkIHtcbiAgICBKc29uQm9vbGVhbi50cnVlVmFsdWUgPSBudWxsO1xuICAgIEpzb25Cb29sZWFuLmZhbHNlVmFsdWUgPSBudWxsO1xuICAgIFZhbHVlLmVycm9yVmFsdWUgPSBudWxsO1xuICAgIFZhbHVlLm51bGxWYWx1ZSA9IG51bGw7XG4gICAgVmFsdWUuc19kdW1teUtleXMgPSBudWxsO1xuICB9XG5cbiAgcHJvdGVjdGVkIF9zdHJpbmdCdWZmZXI6IHN0cmluZzsgLy8g5paH5a2X5YiX44OQ44OD44OV44KhXG5cbiAgcHJpdmF0ZSBzdGF0aWMgc19kdW1teUtleXM6IGNzbVZlY3RvcjxzdHJpbmc+OyAvLyDjg4Djg5/jg7zjgq3jg7xcblxuICBwdWJsaWMgc3RhdGljIGVycm9yVmFsdWU6IFZhbHVlOyAvLyDkuIDmmYLnmoTjgarov5TjgorlgKTjgajjgZfjgabov5TjgZnjgqjjg6njg7zjgIIgQ3ViaXNtRnJhbWV3b3JrOjpEaXNwb3Nl44GZ44KL44G+44Gn44GvZGVsZXRl44GX44Gq44GEXG4gIHB1YmxpYyBzdGF0aWMgbnVsbFZhbHVlOiBWYWx1ZTsgLy8g5LiA5pmC55qE44Gq6L+U44KK5YCk44Go44GX44Gm6L+U44GZTlVMTOOAgiAgIEN1YmlzbUZyYW1ld29yazo6RGlzcG9zZeOBmeOCi+OBvuOBp+OBr2RlbGV0ZeOBl+OBquOBhFxufVxuXG4vKipcbiAqIEFzY2lp5paH5a2X44Gu44G/5a++5b+c44GX44Gf5pyA5bCP6ZmQ44Gu6Lu96YePSlNPTuODkeODvOOCteOAglxuICog5LuV5qeY44GvSlNPTuOBruOCteODluOCu+ODg+ODiOOBqOOBquOCi+OAglxuICog6Kit5a6a44OV44Kh44Kk44OrKG1vZGVsMy5qc29uKeOBquOBqeOBruODreODvOODieeUqFxuICpcbiAqIFvmnKrlr77lv5zpoIXnm65dXG4gKiDjg7vml6XmnKzoqp7jgarjganjga7pnZ5BU0NJSeaWh+Wtl1xuICog44O7ZeOBq+OCiOOCi+aMh+aVsOihqOePvlxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtSnNvbiB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihidWZmZXI/OiBBcnJheUJ1ZmZlciwgbGVuZ3RoPzogbnVtYmVyKSB7XG4gICAgdGhpcy5fZXJyb3IgPSBudWxsO1xuICAgIHRoaXMuX2xpbmVDb3VudCA9IDA7XG4gICAgdGhpcy5fcm9vdCA9IG51bGw7XG5cbiAgICBpZiAoYnVmZmVyICE9IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5wYXJzZUJ5dGVzKGJ1ZmZlciwgbGVuZ3RoLCB0aGlzLl9wYXJzZUNhbGxiYWNrKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44OQ44Kk44OI44OH44O844K/44GL44KJ55u05o6l44Ot44O844OJ44GX44Gm44OR44O844K544GZ44KLXG4gICAqXG4gICAqIEBwYXJhbSBidWZmZXIg44OQ44OD44OV44KhXG4gICAqIEBwYXJhbSBzaXplIOODkOODg+ODleOCoeOCteOCpOOCulxuICAgKiBAcmV0dXJuIEN1YmlzbUpzb27jgq/jg6njgrnjga7jgqTjg7Pjgrnjgr/jg7PjgrnjgILlpLHmlZfjgZfjgZ/jgolOVUxMXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGNyZWF0ZShidWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpIHtcbiAgICBjb25zdCBqc29uID0gbmV3IEN1YmlzbUpzb24oKTtcbiAgICBjb25zdCBzdWNjZWVkZWQ6IGJvb2xlYW4gPSBqc29uLnBhcnNlQnl0ZXMoXG4gICAgICBidWZmZXIsXG4gICAgICBzaXplLFxuICAgICAganNvbi5fcGFyc2VDYWxsYmFja1xuICAgICk7XG5cbiAgICBpZiAoIXN1Y2NlZWRlZCkge1xuICAgICAgQ3ViaXNtSnNvbi5kZWxldGUoanNvbik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGpzb247XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOODkeODvOOCueOBl+OBn0pTT07jgqrjg5bjgrjjgqfjgq/jg4jjga7op6PmlL7lh6bnkIZcbiAgICpcbiAgICogQHBhcmFtIGluc3RhbmNlIEN1YmlzbUpzb27jgq/jg6njgrnjga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZGVsZXRlKGluc3RhbmNlOiBDdWJpc21Kc29uKSB7XG4gICAgaW5zdGFuY2UgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIOODkeODvOOCueOBl+OBn0pTT07jga7jg6vjg7zjg4jopoHntKDjgpLov5TjgZlcbiAgICovXG4gIHB1YmxpYyBnZXRSb290KCk6IFZhbHVlIHtcbiAgICByZXR1cm4gdGhpcy5fcm9vdDtcbiAgfVxuXG4gIC8qKlxuICAgKiAgVW5pY29kZeOBruODkOOCpOODiuODquOCklN0cmluZ+OBq+WkieaPm1xuICAgKlxuICAgKiBAcGFyYW0gYnVmZmVyIOWkieaPm+OBmeOCi+ODkOOCpOODiuODquODh+ODvOOCv1xuICAgKiBAcmV0dXJuIOWkieaPm+W+jOOBruaWh+Wtl+WIl1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBhcnJheUJ1ZmZlclRvU3RyaW5nKGJ1ZmZlcjogQXJyYXlCdWZmZXIpOiBzdHJpbmcge1xuICAgIGNvbnN0IHVpbnQ4QXJyYXk6IFVpbnQ4QXJyYXkgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICAgIGxldCBzdHIgPSAnJztcblxuICAgIGZvciAobGV0IGkgPSAwLCBsZW46IG51bWJlciA9IHVpbnQ4QXJyYXkubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIHN0ciArPSAnJScgKyB0aGlzLnBhZCh1aW50OEFycmF5W2ldLnRvU3RyaW5nKDE2KSk7XG4gICAgfVxuXG4gICAgc3RyID0gZGVjb2RlVVJJQ29tcG9uZW50KHN0cik7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqjjg7PjgrPjg7zjg4njgIHjg5Hjg4fjgqPjg7PjgrBcbiAgICovXG4gIHByaXZhdGUgc3RhdGljIHBhZChuOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBuLmxlbmd0aCA8IDIgPyAnMCcgKyBuIDogbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBKU09O44Gu44OR44O844K544KS5a6f6KGM44GZ44KLXG4gICAqIEBwYXJhbSBidWZmZXIgICAg44OR44O844K55a++6LGh44Gu44OH44O844K/44OQ44Kk44OIXG4gICAqIEBwYXJhbSBzaXplICAgICAg44OH44O844K/44OQ44Kk44OI44Gu44K144Kk44K6XG4gICAqIHJldHVybiB0cnVlIDog5oiQ5YqfXG4gICAqIHJldHVybiBmYWxzZTog5aSx5pWXXG4gICAqL1xuICBwdWJsaWMgcGFyc2VCeXRlcyhcbiAgICBidWZmZXI6IEFycmF5QnVmZmVyLFxuICAgIHNpemU6IG51bWJlcixcbiAgICBwYXJzZUNhbGxiYWNrPzogcGFyc2VKc29uT2JqZWN0XG4gICk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGVuZFBvczogbnVtYmVyW10gPSBuZXcgQXJyYXk8bnVtYmVyPigxKTsgLy8g5Y+C54Wn5rih44GX44Gr44GZ44KL44Gf44KB6YWN5YiXXG4gICAgY29uc3QgZGVjb2RlQnVmZmVyOiBzdHJpbmcgPSBDdWJpc21Kc29uLmFycmF5QnVmZmVyVG9TdHJpbmcoYnVmZmVyKTtcblxuICAgIGlmIChwYXJzZUNhbGxiYWNrID09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5fcm9vdCA9IHRoaXMucGFyc2VWYWx1ZShkZWNvZGVCdWZmZXIsIHNpemUsIDAsIGVuZFBvcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFR5cGVTY3JpcHTmqJnmupbjga5KU09O44OR44O844K144KS5L2/44GGXG4gICAgICB0aGlzLl9yb290ID0gcGFyc2VDYWxsYmFjayhKU09OLnBhcnNlKGRlY29kZUJ1ZmZlciksIG5ldyBKc29uTWFwKCkpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9lcnJvcikge1xuICAgICAgbGV0IHN0cmJ1ZiA9ICdcXDAnO1xuICAgICAgc3RyYnVmID0gJ0pzb24gcGFyc2UgZXJyb3IgOiBAbGluZSAnICsgKHRoaXMuX2xpbmVDb3VudCArIDEpICsgJ1xcbic7XG4gICAgICB0aGlzLl9yb290ID0gbmV3IEpzb25TdHJpbmcoc3RyYnVmKTtcblxuICAgICAgQ3ViaXNtTG9nSW5mbygnezB9JywgdGhpcy5fcm9vdC5nZXRSYXdTdHJpbmcoKSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIGlmICh0aGlzLl9yb290ID09IG51bGwpIHtcbiAgICAgIHRoaXMuX3Jvb3QgPSBuZXcgSnNvbkVycm9yKG5ldyBjc21TdHJpbmcodGhpcy5fZXJyb3IpLCBmYWxzZSk7IC8vIHJvb3Tjga/op6PmlL7jgZXjgozjgovjga7jgafjgqjjg6njg7zjgqrjg5bjgrjjgqfjgq/jg4jjgpLliKXpgJTkvZzmiJDjgZnjgotcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICog44OR44O844K55pmC44Gu44Ko44Op44O85YCk44KS6L+U44GZXG4gICAqL1xuICBwdWJsaWMgZ2V0UGFyc2VFcnJvcigpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9lcnJvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6vjg7zjg4jopoHntKDjga7mrKHjga7opoHntKDjgYzjg5XjgqHjgqTjg6vjga7ntYLnq6/jgaDjgaPjgZ/jgol0cnVl44KS6L+U44GZXG4gICAqL1xuICBwdWJsaWMgY2hlY2tFbmRPZkZpbGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3Jvb3QuZ2V0QXJyYXkoKVsxXS5lcXVhbHMoJ0VPRicpO1xuICB9XG5cbiAgLyoqXG4gICAqIEpTT07jgqjjg6zjg6Hjg7Pjg4jjgYvjgolWYWx1ZShmbG9hdCxTdHJpbmcsVmFsdWUqLEFycmF5LG51bGwsdHJ1ZSxmYWxzZSnjgpLjg5Hjg7zjgrnjgZnjgotcbiAgICog44Ko44Os44Oh44Oz44OI44Gu5pu45byP44Gr5b+c44GY44Gm5YaF6YOo44GnUGFyc2VTdHJpbmcoKSwgUGFyc2VPYmplY3QoKSwgUGFyc2VBcnJheSgp44KS5ZG844G2XG4gICAqXG4gICAqIEBwYXJhbSAgIGJ1ZmZlciAgICAgIEpTT07jgqjjg6zjg6Hjg7Pjg4jjga7jg5Djg4Pjg5XjgqFcbiAgICogQHBhcmFtICAgbGVuZ3RoICAgICAg44OR44O844K544GZ44KL6ZW344GVXG4gICAqIEBwYXJhbSAgIGJlZ2luICAgICAgIOODkeODvOOCueOCkumWi+Wni+OBmeOCi+S9jee9rlxuICAgKiBAcGFyYW0gICBvdXRFbmRQb3MgICDjg5Hjg7zjgrnntYLkuobmmYLjga7kvY3nva5cbiAgICogQHJldHVybiAgICAgIOODkeODvOOCueOBi+OCieWPluW+l+OBl+OBn1ZhbHVl44Kq44OW44K444Kn44Kv44OIXG4gICAqL1xuICBwcm90ZWN0ZWQgcGFyc2VWYWx1ZShcbiAgICBidWZmZXI6IHN0cmluZyxcbiAgICBsZW5ndGg6IG51bWJlcixcbiAgICBiZWdpbjogbnVtYmVyLFxuICAgIG91dEVuZFBvczogbnVtYmVyW11cbiAgKSB7XG4gICAgaWYgKHRoaXMuX2Vycm9yKSByZXR1cm4gbnVsbDtcblxuICAgIGxldCBvOiBWYWx1ZSA9IG51bGw7XG4gICAgbGV0IGk6IG51bWJlciA9IGJlZ2luO1xuICAgIGxldCBmOiBudW1iZXI7XG5cbiAgICBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBjOiBzdHJpbmcgPSBidWZmZXJbaV07XG4gICAgICBzd2l0Y2ggKGMpIHtcbiAgICAgICAgY2FzZSAnLSc6XG4gICAgICAgIGNhc2UgJy4nOlxuICAgICAgICBjYXNlICcwJzpcbiAgICAgICAgY2FzZSAnMSc6XG4gICAgICAgIGNhc2UgJzInOlxuICAgICAgICBjYXNlICczJzpcbiAgICAgICAgY2FzZSAnNCc6XG4gICAgICAgIGNhc2UgJzUnOlxuICAgICAgICBjYXNlICc2JzpcbiAgICAgICAgY2FzZSAnNyc6XG4gICAgICAgIGNhc2UgJzgnOlxuICAgICAgICBjYXNlICc5Jzoge1xuICAgICAgICAgIGNvbnN0IGFmdGVyU3RyaW5nOiBzdHJpbmdbXSA9IG5ldyBBcnJheSgxKTsgLy8g5Y+C54Wn5rih44GX44Gr44GZ44KL44Gf44KBXG4gICAgICAgICAgZiA9IHN0cnRvZChidWZmZXIuc2xpY2UoaSksIGFmdGVyU3RyaW5nKTtcbiAgICAgICAgICBvdXRFbmRQb3NbMF0gPSBidWZmZXIuaW5kZXhPZihhZnRlclN0cmluZ1swXSk7XG4gICAgICAgICAgcmV0dXJuIG5ldyBKc29uRmxvYXQoZik7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnXCInOlxuICAgICAgICAgIHJldHVybiBuZXcgSnNvblN0cmluZyhcbiAgICAgICAgICAgIHRoaXMucGFyc2VTdHJpbmcoYnVmZmVyLCBsZW5ndGgsIGkgKyAxLCBvdXRFbmRQb3MpXG4gICAgICAgICAgKTsgLy8gXFxcIuOBruasoeOBruaWh+Wtl+OBi+OCiVxuICAgICAgICBjYXNlICdbJzpcbiAgICAgICAgICBvID0gdGhpcy5wYXJzZUFycmF5KGJ1ZmZlciwgbGVuZ3RoLCBpICsgMSwgb3V0RW5kUG9zKTtcbiAgICAgICAgICByZXR1cm4gbztcbiAgICAgICAgY2FzZSAneyc6XG4gICAgICAgICAgbyA9IHRoaXMucGFyc2VPYmplY3QoYnVmZmVyLCBsZW5ndGgsIGkgKyAxLCBvdXRFbmRQb3MpO1xuICAgICAgICAgIHJldHVybiBvO1xuICAgICAgICBjYXNlICduJzogLy8gbnVsbOS7peWkluOBq+OBquOBhFxuICAgICAgICAgIGlmIChpICsgMyA8IGxlbmd0aCkge1xuICAgICAgICAgICAgbyA9IG5ldyBKc29uTnVsbHZhbHVlKCk7IC8vIOino+aUvuOBp+OBjeOCi+OCiOOBhuOBq+OBmeOCi1xuICAgICAgICAgICAgb3V0RW5kUG9zWzBdID0gaSArIDQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gJ3BhcnNlIG51bGwnO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbztcbiAgICAgICAgY2FzZSAndCc6IC8vIHRydWXku6XlpJbjgavjgarjgYRcbiAgICAgICAgICBpZiAoaSArIDMgPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIG8gPSBKc29uQm9vbGVhbi50cnVlVmFsdWU7XG4gICAgICAgICAgICBvdXRFbmRQb3NbMF0gPSBpICsgNDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZXJyb3IgPSAncGFyc2UgdHJ1ZSc7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBvO1xuICAgICAgICBjYXNlICdmJzogLy8gZmFsc2Xku6XlpJbjgavjgarjgYRcbiAgICAgICAgICBpZiAoaSArIDQgPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIG8gPSBKc29uQm9vbGVhbi5mYWxzZVZhbHVlO1xuICAgICAgICAgICAgb3V0RW5kUG9zWzBdID0gaSArIDU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gXCJpbGxlZ2FsICcsJyBwb3NpdGlvblwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbztcbiAgICAgICAgY2FzZSAnLCc6IC8vIEFycmF5IHNlcGFyYXRvclxuICAgICAgICAgIHRoaXMuX2Vycm9yID0gXCJpbGxlZ2FsICcsJyBwb3NpdGlvblwiO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBjYXNlICddJzogLy8g5LiN5q2j44Gq772d44Gg44GM44K544Kt44OD44OX44GZ44KL44CC6YWN5YiX44Gu5pyA5b6M44Gr5LiN6KaB44GqICwg44GM44GC44KL44Go5oCd44KP44KM44KLXG4gICAgICAgICAgb3V0RW5kUG9zWzBdID0gaTsgLy8g5ZCM44GY5paH5a2X44KS5YaN5Yem55CGXG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGNhc2UgJ1xcbic6XG4gICAgICAgICAgdGhpcy5fbGluZUNvdW50Kys7XG4gICAgICAgIGNhc2UgJyAnOlxuICAgICAgICBjYXNlICdcXHQnOlxuICAgICAgICBjYXNlICdcXHInOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIC8vIOOCueOCreODg+ODl1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2Vycm9yID0gJ2lsbGVnYWwgZW5kIG9mIHZhbHVlJztcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDmrKHjga7jgIxcIuOAjeOBvuOBp+OBruaWh+Wtl+WIl+OCkuODkeODvOOCueOBmeOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gICBzdHJpbmcgIC0+ICDjg5Hjg7zjgrnlr77osaHjga7mloflrZfliJdcbiAgICogQHBhcmFtICAgbGVuZ3RoICAtPiAg44OR44O844K544GZ44KL6ZW344GVXG4gICAqIEBwYXJhbSAgIGJlZ2luICAgLT4gIOODkeODvOOCueOCkumWi+Wni+OBmeOCi+S9jee9rlxuICAgKiBAcGFyYW0gIG91dEVuZFBvcyAgIC0+ICDjg5Hjg7zjgrnntYLkuobmmYLjga7kvY3nva5cbiAgICogQHJldHVybiAgICAgIOODkeODvOOCueOBl+OBn+aWh0blrZfliJfopoHntKBcbiAgICovXG4gIHByb3RlY3RlZCBwYXJzZVN0cmluZyhcbiAgICBzdHJpbmc6IHN0cmluZyxcbiAgICBsZW5ndGg6IG51bWJlcixcbiAgICBiZWdpbjogbnVtYmVyLFxuICAgIG91dEVuZFBvczogbnVtYmVyW11cbiAgKTogc3RyaW5nIHtcbiAgICBpZiAodGhpcy5fZXJyb3IpIHJldHVybiBudWxsO1xuXG4gICAgbGV0IGkgPSBiZWdpbjtcbiAgICBsZXQgYzogc3RyaW5nLCBjMjogc3RyaW5nO1xuICAgIGNvbnN0IHJldDogY3NtU3RyaW5nID0gbmV3IGNzbVN0cmluZygnJyk7XG4gICAgbGV0IGJ1ZlN0YXJ0OiBudW1iZXIgPSBiZWdpbjsgLy8gc2J1ZuOBq+eZu+mMsuOBleOCjOOBpuOBhOOBquOBhOaWh+Wtl+OBrumWi+Wni+S9jee9rlxuXG4gICAgZm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgYyA9IHN0cmluZ1tpXTtcblxuICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgIGNhc2UgJ1wiJzoge1xuICAgICAgICAgIC8vIOe1guerr+OBruKAneOAgeOCqOOCueOCseODvOODl+aWh+Wtl+OBr+WIpeOBq+WHpueQhuOBleOCjOOCi+OBruOBp+OBk+OBk+OBq+adpeOBquOBhFxuICAgICAgICAgIG91dEVuZFBvc1swXSA9IGkgKyAxOyAvLyDigJ3jga7mrKHjga7mloflrZdcbiAgICAgICAgICByZXQuYXBwZW5kKHN0cmluZy5zbGljZShidWZTdGFydCksIGkgLSBidWZTdGFydCk7IC8vIOWJjeOBruaWh+Wtl+OBvuOBp+OCkueZu+mMsuOBmeOCi1xuICAgICAgICAgIHJldHVybiByZXQucztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICcvLyc6IHtcbiAgICAgICAgICAvLyDjgqjjgrnjgrHjg7zjg5fjga7loLTlkIhcbiAgICAgICAgICBpKys7IC8vIO+8kuaWh+Wtl+OCkuOCu+ODg+ODiOOBp+aJseOBhlxuXG4gICAgICAgICAgaWYgKGkgLSAxID4gYnVmU3RhcnQpIHtcbiAgICAgICAgICAgIHJldC5hcHBlbmQoc3RyaW5nLnNsaWNlKGJ1ZlN0YXJ0KSwgaSAtIGJ1ZlN0YXJ0KTsgLy8g5YmN44Gu5paH5a2X44G+44Gn44KS55m76Yyy44GZ44KLXG4gICAgICAgICAgfVxuICAgICAgICAgIGJ1ZlN0YXJ0ID0gaSArIDE7IC8vIOOCqOOCueOCseODvOODl++8iO+8kuaWh+Wtlynjga7mrKHjga7mloflrZfjgYvjgolcblxuICAgICAgICAgIGlmIChpIDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBjMiA9IHN0cmluZ1tpXTtcblxuICAgICAgICAgICAgc3dpdGNoIChjMikge1xuICAgICAgICAgICAgICBjYXNlICdcXFxcJzpcbiAgICAgICAgICAgICAgICByZXQuZXhwYW5zaW9uKDEsICdcXFxcJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJ1wiJzpcbiAgICAgICAgICAgICAgICByZXQuZXhwYW5zaW9uKDEsICdcIicpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICcvJzpcbiAgICAgICAgICAgICAgICByZXQuZXhwYW5zaW9uKDEsICcvJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJ2InOlxuICAgICAgICAgICAgICAgIHJldC5leHBhbnNpb24oMSwgJ1xcYicpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICdmJzpcbiAgICAgICAgICAgICAgICByZXQuZXhwYW5zaW9uKDEsICdcXGYnKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnbic6XG4gICAgICAgICAgICAgICAgcmV0LmV4cGFuc2lvbigxLCAnXFxuJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJ3InOlxuICAgICAgICAgICAgICAgIHJldC5leHBhbnNpb24oMSwgJ1xccicpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICd0JzpcbiAgICAgICAgICAgICAgICByZXQuZXhwYW5zaW9uKDEsICdcXHQnKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAndSc6XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyb3IgPSAncGFyc2Ugc3RyaW5nL3VuaWNvcmQgZXNjYXBlIG5vdCBzdXBwb3J0ZWQnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9lcnJvciA9ICdwYXJzZSBzdHJpbmcvZXNjYXBlIGVycm9yJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fZXJyb3IgPSAncGFyc2Ugc3RyaW5nL2lsbGVnYWwgZW5kJztcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBKU09O44Gu44Kq44OW44K444Kn44Kv44OI44Ko44Os44Oh44Oz44OI44KS44OR44O844K544GX44GmVmFsdWXjgqrjg5bjgrjjgqfjgq/jg4jjgpLov5TjgZlcbiAgICpcbiAgICogQHBhcmFtIGJ1ZmZlciAgICBKU09O44Ko44Os44Oh44Oz44OI44Gu44OQ44OD44OV44KhXG4gICAqIEBwYXJhbSBsZW5ndGggICAg44OR44O844K544GZ44KL6ZW344GVXG4gICAqIEBwYXJhbSBiZWdpbiAgICAg44OR44O844K544KS6ZaL5aeL44GZ44KL5L2N572uXG4gICAqIEBwYXJhbSBvdXRFbmRQb3Mg44OR44O844K557WC5LqG5pmC44Gu5L2N572uXG4gICAqIEByZXR1cm4g44OR44O844K544GL44KJ5Y+W5b6X44GX44GfVmFsdWXjgqrjg5bjgrjjgqfjgq/jg4hcbiAgICovXG4gIHByb3RlY3RlZCBwYXJzZU9iamVjdChcbiAgICBidWZmZXI6IHN0cmluZyxcbiAgICBsZW5ndGg6IG51bWJlcixcbiAgICBiZWdpbjogbnVtYmVyLFxuICAgIG91dEVuZFBvczogbnVtYmVyW11cbiAgKTogVmFsdWUge1xuICAgIGlmICh0aGlzLl9lcnJvcikgcmV0dXJuIG51bGw7XG4gICAgY29uc3QgcmV0OiBKc29uTWFwID0gbmV3IEpzb25NYXAoKTtcblxuICAgIC8vIEtleTogVmFsdWVcbiAgICBsZXQga2V5ID0gJyc7XG4gICAgbGV0IGk6IG51bWJlciA9IGJlZ2luO1xuICAgIGxldCBjID0gJyc7XG4gICAgY29uc3QgbG9jYWxSZXRFbmRQb3MyOiBudW1iZXJbXSA9IEFycmF5KDEpO1xuICAgIGxldCBvayA9IGZhbHNlO1xuXG4gICAgLy8gLCDjgYzntprjgY/pmZDjgorjg6vjg7zjg5dcbiAgICBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBGT1JfTE9PUDogZm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBjID0gYnVmZmVyW2ldO1xuXG4gICAgICAgIHN3aXRjaCAoYykge1xuICAgICAgICAgIGNhc2UgJ1wiJzpcbiAgICAgICAgICAgIGtleSA9IHRoaXMucGFyc2VTdHJpbmcoYnVmZmVyLCBsZW5ndGgsIGkgKyAxLCBsb2NhbFJldEVuZFBvczIpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Vycm9yKSB7XG4gICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpID0gbG9jYWxSZXRFbmRQb3MyWzBdO1xuICAgICAgICAgICAgb2sgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWsgRk9SX0xPT1A7IC8vLS0gbG9vcOOBi+OCieWHuuOCi1xuICAgICAgICAgIGNhc2UgJ30nOiAvLyDplonjgZjjgqvjg4PjgrNcbiAgICAgICAgICAgIG91dEVuZFBvc1swXSA9IGkgKyAxO1xuICAgICAgICAgICAgcmV0dXJuIHJldDsgLy8g56m6XG4gICAgICAgICAgY2FzZSAnOic6XG4gICAgICAgICAgICB0aGlzLl9lcnJvciA9IFwiaWxsZWdhbCAnOicgcG9zaXRpb25cIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ1xcbic6XG4gICAgICAgICAgICB0aGlzLl9saW5lQ291bnQrKztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgYnJlYWs7IC8vIOOCueOCreODg+ODl+OBmeOCi+aWh+Wtl1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIW9rKSB7XG4gICAgICAgIHRoaXMuX2Vycm9yID0gJ2tleSBub3QgZm91bmQnO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgb2sgPSBmYWxzZTtcblxuICAgICAgLy8gOiDjgpLjg4Hjgqfjg4Pjgq9cbiAgICAgIEZPUl9MT09QMjogZm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBjID0gYnVmZmVyW2ldO1xuXG4gICAgICAgIHN3aXRjaCAoYykge1xuICAgICAgICAgIGNhc2UgJzonOlxuICAgICAgICAgICAgb2sgPSB0cnVlO1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgYnJlYWsgRk9SX0xPT1AyO1xuICAgICAgICAgIGNhc2UgJ30nOlxuICAgICAgICAgICAgdGhpcy5fZXJyb3IgPSBcImlsbGVnYWwgJ30nIHBvc2l0aW9uXCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdcXG4nOlxuICAgICAgICAgICAgdGhpcy5fbGluZUNvdW50Kys7XG4gICAgICAgICAgLy8gY2FzZSAnICc6IGNhc2UgJ1xcdCcgOiBjYXNlICdcXHInOlxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBicmVhazsgLy8g44K544Kt44OD44OX44GZ44KL5paH5a2XXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFvaykge1xuICAgICAgICB0aGlzLl9lcnJvciA9IFwiJzonIG5vdCBmb3VuZFwiO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgLy8g5YCk44KS44OB44Kn44OD44KvXG4gICAgICBjb25zdCB2YWx1ZTogVmFsdWUgPSB0aGlzLnBhcnNlVmFsdWUoYnVmZmVyLCBsZW5ndGgsIGksIGxvY2FsUmV0RW5kUG9zMik7XG4gICAgICBpZiAodGhpcy5fZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGkgPSBsb2NhbFJldEVuZFBvczJbMF07XG5cbiAgICAgIC8vIHJldC5wdXQoa2V5LCB2YWx1ZSk7XG4gICAgICByZXQucHV0KGtleSwgdmFsdWUpO1xuXG4gICAgICBGT1JfTE9PUDM6IGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYyA9IGJ1ZmZlcltpXTtcblxuICAgICAgICBzd2l0Y2ggKGMpIHtcbiAgICAgICAgICBjYXNlICcsJzpcbiAgICAgICAgICAgIGJyZWFrIEZPUl9MT09QMztcbiAgICAgICAgICBjYXNlICd9JzpcbiAgICAgICAgICAgIG91dEVuZFBvc1swXSA9IGkgKyAxO1xuICAgICAgICAgICAgcmV0dXJuIHJldDsgLy8g5q2j5bi457WC5LqGXG4gICAgICAgICAgY2FzZSAnXFxuJzpcbiAgICAgICAgICAgIHRoaXMuX2xpbmVDb3VudCsrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBicmVhazsgLy8g44K544Kt44OD44OXXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9lcnJvciA9ICdpbGxlZ2FsIGVuZCBvZiBwZXJzZU9iamVjdCc7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICog5qyh44Gu44CMXCLjgI3jgb7jgafjga7mloflrZfliJfjgpLjg5Hjg7zjgrnjgZnjgovjgIJcbiAgICogQHBhcmFtIGJ1ZmZlciAgICBKU09O44Ko44Os44Oh44Oz44OI44Gu44OQ44OD44OV44KhXG4gICAqIEBwYXJhbSBsZW5ndGggICAg44OR44O844K544GZ44KL6ZW344GVXG4gICAqIEBwYXJhbSBiZWdpbiAgICAg44OR44O844K544KS6ZaL5aeL44GZ44KL5L2N572uXG4gICAqIEBwYXJhbSBvdXRFbmRQb3Mg44OR44O844K557WC5LqG5pmC44Gu5L2N572uXG4gICAqIEByZXR1cm4g44OR44O844K544GL44KJ5Y+W5b6X44GX44GfVmFsdWXjgqrjg5bjgrjjgqfjgq/jg4hcbiAgICovXG4gIHByb3RlY3RlZCBwYXJzZUFycmF5KFxuICAgIGJ1ZmZlcjogc3RyaW5nLFxuICAgIGxlbmd0aDogbnVtYmVyLFxuICAgIGJlZ2luOiBudW1iZXIsXG4gICAgb3V0RW5kUG9zOiBudW1iZXJbXVxuICApOiBWYWx1ZSB7XG4gICAgaWYgKHRoaXMuX2Vycm9yKSByZXR1cm4gbnVsbDtcbiAgICBsZXQgcmV0OiBKc29uQXJyYXkgPSBuZXcgSnNvbkFycmF5KCk7XG5cbiAgICAvLyBrZXkgOiB2YWx1ZVxuICAgIGxldCBpOiBudW1iZXIgPSBiZWdpbjtcbiAgICBsZXQgYzogc3RyaW5nO1xuICAgIGNvbnN0IGxvY2FsUmV0RW5kcG9zMjogbnVtYmVyW10gPSBuZXcgQXJyYXkoMSk7XG5cbiAgICAvLyAsIOOBjOe2muOBj+mZkOOCiuODq+ODvOODl1xuICAgIGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vIDog44KS44OB44Kn44OD44KvXG4gICAgICBjb25zdCB2YWx1ZTogVmFsdWUgPSB0aGlzLnBhcnNlVmFsdWUoYnVmZmVyLCBsZW5ndGgsIGksIGxvY2FsUmV0RW5kcG9zMik7XG5cbiAgICAgIGlmICh0aGlzLl9lcnJvcikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIGkgPSBsb2NhbFJldEVuZHBvczJbMF07XG5cbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICByZXQuYWRkKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgLy8gRk9SX0xPT1AzOlxuICAgICAgLy8gYm9vbGVhbiBicmVha2ZsYWcgPSBmYWxzZTtcbiAgICAgIEZPUl9MT09QOiBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGMgPSBidWZmZXJbaV07XG5cbiAgICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgICAgY2FzZSAnLCc6XG4gICAgICAgICAgICAvLyBicmVha2ZsYWcgPSB0cnVlO1xuICAgICAgICAgICAgLy8gYnJlYWs7IC8vIOasoeOBrktFWSwgVkFsVUXjgbhcbiAgICAgICAgICAgIGJyZWFrIEZPUl9MT09QO1xuICAgICAgICAgIGNhc2UgJ10nOlxuICAgICAgICAgICAgb3V0RW5kUG9zWzBdID0gaSArIDE7XG4gICAgICAgICAgICByZXR1cm4gcmV0OyAvLyDntYLkuoZcbiAgICAgICAgICBjYXNlICdcXG4nOlxuICAgICAgICAgICAgKyt0aGlzLl9saW5lQ291bnQ7XG4gICAgICAgICAgLy9jYXNlICcgJzogY2FzZSAnXFx0JzogY2FzZSAnXFxyJzpcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgYnJlYWs7IC8vIOOCueOCreODg+ODl1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0ID0gdm9pZCAwO1xuICAgIHRoaXMuX2Vycm9yID0gJ2lsbGVnYWwgZW5kIG9mIHBhcnNlT2JqZWN0JztcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIF9wYXJzZUNhbGxiYWNrOiBwYXJzZUpzb25PYmplY3QgPSBDdWJpc21Kc29uRXh0ZW5zaW9uLnBhcnNlSnNvbk9iamVjdDsgLy8g44OR44O844K55pmC44Gr5L2/44GG5Yem55CG44Gu44Kz44O844Or44OQ44OD44Kv6Zai5pWwXG5cbiAgX2Vycm9yOiBzdHJpbmc7IC8vIOODkeODvOOCueaZguOBruOCqOODqeODvFxuICBfbGluZUNvdW50OiBudW1iZXI7IC8vIOOCqOODqeODvOWgseWRiuOBq+eUqOOBhOOCi+ihjOaVsOOCq+OCpuODs+ODiFxuICBfcm9vdDogVmFsdWU7IC8vIOODkeODvOOCueOBleOCjOOBn+ODq+ODvOODiOimgee0oFxufVxuXG5pbnRlcmZhY2UgcGFyc2VKc29uT2JqZWN0IHtcbiAgKG9iajogVmFsdWUsIG1hcDogSnNvbk1hcCk6IEpzb25NYXA7XG59XG5cbi8qKlxuICog44OR44O844K544GX44GfSlNPTuOBruimgee0oOOCkmZsb2F05YCk44Go44GX44Gm5omx44GGXG4gKi9cbmV4cG9ydCBjbGFzcyBKc29uRmxvYXQgZXh0ZW5kcyBWYWx1ZSB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIGNvbnN0cnVjdG9yKHY6IG51bWJlcikge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLl92YWx1ZSA9IHY7XG4gIH1cblxuICAvKipcbiAgICogVmFsdWXjga7nqK7poZ7jgYzmlbDlgKTlnovjgarjgol0cnVlXG4gICAqL1xuICBwdWJsaWMgaXNGbG9hdCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDopoHntKDjgpLmloflrZfliJfjgafov5TjgZkoY3NtU3RyaW5n5Z6LKVxuICAgKi9cbiAgcHVibGljIGdldFN0cmluZyhkZWZhdWx0VmFsdWU6IHN0cmluZywgaW5kZW50OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IHN0cmJ1ZiA9ICdcXDAnO1xuICAgIHRoaXMuX3ZhbHVlID0gcGFyc2VGbG9hdChzdHJidWYpO1xuICAgIHRoaXMuX3N0cmluZ0J1ZmZlciA9IHN0cmJ1ZjtcblxuICAgIHJldHVybiB0aGlzLl9zdHJpbmdCdWZmZXI7XG4gIH1cblxuICAvKipcbiAgICog6KaB57Sg44KS5pWw5YCk5Z6L44Gn6L+U44GZKG51bWJlcilcbiAgICovXG4gIHB1YmxpYyB0b0ludChkZWZhdWx0VmFsdWUgPSAwKTogbnVtYmVyIHtcbiAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5fdmFsdWUudG9TdHJpbmcoKSk7XG4gIH1cblxuICAvKipcbiAgICog6KaB57Sg44KS5pWw5YCk5Z6L44Gn6L+U44GZKG51bWJlcilcbiAgICovXG4gIHB1YmxpYyB0b0Zsb2F0KGRlZmF1bHRWYWx1ZSA9IDAuMCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOW8leaVsOOBruWApOOBqOetieOBl+OBkeOCjOOBsHRydWVcbiAgICovXG4gIHB1YmxpYyBlcXVhbHModmFsdWU6IGNzbVN0cmluZyk6IGJvb2xlYW47XG4gIHB1YmxpYyBlcXVhbHModmFsdWU6IHN0cmluZyk6IGJvb2xlYW47XG4gIHB1YmxpYyBlcXVhbHModmFsdWU6IG51bWJlcik6IGJvb2xlYW47XG4gIHB1YmxpYyBlcXVhbHModmFsdWU6IGJvb2xlYW4pOiBib29sZWFuO1xuICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcbiAgICBpZiAoJ251bWJlcicgPT09IHR5cGVvZiB2YWx1ZSkge1xuICAgICAgLy8gaW50XG4gICAgICBpZiAoTWF0aC5yb3VuZCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gZmxvYXRcbiAgICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT0gdGhpcy5fdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHByaXZhdGUgX3ZhbHVlOiBudW1iZXI7IC8vIEpTT07opoHntKDjga7lgKRcbn1cblxuLyoqXG4gKiDjg5Hjg7zjgrnjgZfjgZ9KU09O44Gu6KaB57Sg44KS55yf5YG95YCk44Go44GX44Gm5omx44GGXG4gKi9cbmV4cG9ydCBjbGFzcyBKc29uQm9vbGVhbiBleHRlbmRzIFZhbHVlIHtcbiAgLyoqXG4gICAqIFZhbHVl44Gu56iu6aGe44GM55yf5YG95YCk44Gq44KJdHJ1ZVxuICAgKi9cbiAgcHVibGljIGlzQm9vbCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDopoHntKDjgpLnnJ/lgb3lgKTjgafov5TjgZkoYm9vbGVhbilcbiAgICovXG4gIHB1YmxpYyB0b0Jvb2xlYW4oZGVmYXVsdFZhbHVlID0gZmFsc2UpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fYm9vbFZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOimgee0oOOCkuaWh+Wtl+WIl+OBp+i/lOOBmShjc21TdHJpbmflnospXG4gICAqL1xuICBwdWJsaWMgZ2V0U3RyaW5nKGRlZmF1bHRWYWx1ZTogc3RyaW5nLCBpbmRlbnQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgdGhpcy5fc3RyaW5nQnVmZmVyID0gdGhpcy5fYm9vbFZhbHVlID8gJ3RydWUnIDogJ2ZhbHNlJztcblxuICAgIHJldHVybiB0aGlzLl9zdHJpbmdCdWZmZXI7XG4gIH1cblxuICAvKipcbiAgICog5byV5pWw44Gu5YCk44Go562J44GX44GR44KM44GwdHJ1ZVxuICAgKi9cbiAgcHVibGljIGVxdWFscyh2YWx1ZTogY3NtU3RyaW5nKTogYm9vbGVhbjtcbiAgcHVibGljIGVxdWFscyh2YWx1ZTogc3RyaW5nKTogYm9vbGVhbjtcbiAgcHVibGljIGVxdWFscyh2YWx1ZTogbnVtYmVyKTogYm9vbGVhbjtcbiAgcHVibGljIGVxdWFscyh2YWx1ZTogYm9vbGVhbik6IGJvb2xlYW47XG4gIHB1YmxpYyBlcXVhbHModmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICAgIGlmICgnYm9vbGVhbicgPT09IHR5cGVvZiB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09IHRoaXMuX2Jvb2xWYWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbHVl44Gu5YCk44GM6Z2Z55qE44Gq44KJdHJ1ZSwg6Z2Z55qE44Gq44KJ6Kej5pS+44GX44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNTdGF0aWMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICog5byV5pWw5LuY44GN44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IodjogYm9vbGVhbikge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLl9ib29sVmFsdWUgPSB2O1xuICB9XG5cbiAgc3RhdGljIHRydWVWYWx1ZTogSnNvbkJvb2xlYW47IC8vIHRydWVcbiAgc3RhdGljIGZhbHNlVmFsdWU6IEpzb25Cb29sZWFuOyAvLyBmYWxzZVxuXG4gIHByaXZhdGUgX2Jvb2xWYWx1ZTogYm9vbGVhbjsgLy8gSlNPTuimgee0oOOBruWApFxufVxuXG4vKipcbiAqIOODkeODvOOCueOBl+OBn0pTT07jga7opoHntKDjgpLmloflrZfliJfjgajjgZfjgabmibHjgYZcbiAqL1xuZXhwb3J0IGNsYXNzIEpzb25TdHJpbmcgZXh0ZW5kcyBWYWx1ZSB7XG4gIC8qKlxuICAgKiDlvJXmlbDku5jjgY3jgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihzOiBzdHJpbmcpO1xuICBwdWJsaWMgY29uc3RydWN0b3IoczogY3NtU3RyaW5nKTtcbiAgcHVibGljIGNvbnN0cnVjdG9yKHM6IGFueSkge1xuICAgIHN1cGVyKCk7XG5cbiAgICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBzKSB7XG4gICAgICB0aGlzLl9zdHJpbmdCdWZmZXIgPSBzO1xuICAgIH1cblxuICAgIGlmIChzIGluc3RhbmNlb2YgY3NtU3RyaW5nKSB7XG4gICAgICB0aGlzLl9zdHJpbmdCdWZmZXIgPSBzLnM7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFZhbHVl44Gu56iu6aGe44GM5paH5a2X5YiX44Gq44KJdHJ1ZVxuICAgKi9cbiAgcHVibGljIGlzU3RyaW5nKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOimgee0oOOCkuaWh+Wtl+WIl+OBp+i/lOOBmShjc21TdHJpbmflnospXG4gICAqL1xuICBwdWJsaWMgZ2V0U3RyaW5nKGRlZmF1bHRWYWx1ZTogc3RyaW5nLCBpbmRlbnQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3N0cmluZ0J1ZmZlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiDlvJXmlbDjga7lgKTjgajnrYnjgZfjgZHjgozjgbB0cnVlXG4gICAqL1xuICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBjc21TdHJpbmcpOiBib29sZWFuO1xuICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBzdHJpbmcpOiBib29sZWFuO1xuICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBudW1iZXIpOiBib29sZWFuO1xuICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBib29sZWFuKTogYm9vbGVhbjtcbiAgcHVibGljIGVxdWFscyh2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gICAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgdmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zdHJpbmdCdWZmZXIgPT0gdmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgY3NtU3RyaW5nKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc3RyaW5nQnVmZmVyID09IHZhbHVlLnM7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogSlNPTuODkeODvOOCueaZguOBruOCqOODqeODvOe1kOaenOOAguaWh+Wtl+WIl+Wei+OBruOCiOOBhuOBq+OBteOCi+OBvuOBhlxuICovXG5leHBvcnQgY2xhc3MgSnNvbkVycm9yIGV4dGVuZHMgSnNvblN0cmluZyB7XG4gIC8qKlxuICAgKiBWYWx1ZeOBruWApOOBjOmdmeeahOOBquOCiXRydWXjgIHpnZnnmoTjgarjgonop6PmlL7jgZfjgarjgYRcbiAgICovXG4gIHB1YmxpYyBpc1N0YXRpYygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5faXNTdGF0aWM7XG4gIH1cblxuICAvKipcbiAgICog44Ko44Op44O85oOF5aCx44KS44K744OD44OI44GZ44KLXG4gICAqL1xuICBwdWJsaWMgc2V0RXJyb3JOb3RGb3JDbGllbnRDYWxsKHM6IHN0cmluZyk6IFZhbHVlIHtcbiAgICB0aGlzLl9zdHJpbmdCdWZmZXIgPSBzO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOW8leaVsOS7mOOBjeOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHM6IGNzbVN0cmluZyB8IHN0cmluZywgaXNTdGF0aWM6IGJvb2xlYW4pIHtcbiAgICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBzKSB7XG4gICAgICBzdXBlcihzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3VwZXIocyk7XG4gICAgfVxuICAgIHRoaXMuX2lzU3RhdGljID0gaXNTdGF0aWM7XG4gIH1cblxuICAvKipcbiAgICogVmFsdWXjga7nqK7poZ7jgYzjgqjjg6njg7zlgKTjgarjgol0cnVlXG4gICAqL1xuICBwdWJsaWMgaXNFcnJvcigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHByb3RlY3RlZCBfaXNTdGF0aWM6IGJvb2xlYW47IC8vIOmdmeeahOOBqlZhbHVl44GL44Gp44GG44GLXG59XG5cbi8qKlxuICog44OR44O844K544GX44GfSlNPTuOBruimgee0oOOCkk5VTEzlgKTjgajjgZfjgabmjIHjgaRcbiAqL1xuZXhwb3J0IGNsYXNzIEpzb25OdWxsdmFsdWUgZXh0ZW5kcyBWYWx1ZSB7XG4gIC8qKlxuICAgKiBWYWx1ZeOBrueorumhnuOBjE5VTEzlgKTjgarjgol0cnVlXG4gICAqL1xuICBwdWJsaWMgaXNOdWxsKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOimgee0oOOCkuaWh+Wtl+WIl+OBp+i/lOOBmShjc21TdHJpbmflnospXG4gICAqL1xuICBwdWJsaWMgZ2V0U3RyaW5nKGRlZmF1bHRWYWx1ZTogc3RyaW5nLCBpbmRlbnQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3N0cmluZ0J1ZmZlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBWYWx1ZeOBruWApOOBjOmdmeeahOOBquOCiXRydWUsIOmdmeeahOOBquOCieino+aUvuOBl+OBquOBhFxuICAgKi9cbiAgcHVibGljIGlzU3RhdGljKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbHVl44Gr44Ko44Op44O85YCk44KS44K744OD44OI44GZ44KLXG4gICAqL1xuICBwdWJsaWMgc2V0RXJyb3JOb3RGb3JDbGllbnRDYWxsKHM6IHN0cmluZyk6IFZhbHVlIHtcbiAgICB0aGlzLl9zdHJpbmdCdWZmZXIgPSBzO1xuICAgIHJldHVybiBKc29uRXJyb3IubnVsbFZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLl9zdHJpbmdCdWZmZXIgPSAnTnVsbFZhbHVlJztcbiAgfVxufVxuXG4vKipcbiAqIOODkeODvOOCueOBl+OBn0pTT07jga7opoHntKDjgpLphY3liJfjgajjgZfjgabmjIHjgaRcbiAqL1xuZXhwb3J0IGNsYXNzIEpzb25BcnJheSBleHRlbmRzIFZhbHVlIHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fYXJyYXkgPSBuZXcgY3NtVmVjdG9yPFZhbHVlPigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgZm9yIChcbiAgICAgIGxldCBpdGU6IGNzbVZlY3Rvcl9pdGVyYXRvcjxWYWx1ZT4gPSB0aGlzLl9hcnJheS5iZWdpbigpO1xuICAgICAgaXRlLm5vdEVxdWFsKHRoaXMuX2FycmF5LmVuZCgpKTtcbiAgICAgIGl0ZS5wcmVJbmNyZW1lbnQoKVxuICAgICkge1xuICAgICAgbGV0IHY6IFZhbHVlID0gaXRlLnB0cigpO1xuXG4gICAgICBpZiAodiAmJiAhdi5pc1N0YXRpYygpKSB7XG4gICAgICAgIHYgPSB2b2lkIDA7XG4gICAgICAgIHYgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBWYWx1ZeOBrueorumhnuOBjOmFjeWIl+OBquOCiXRydWVcbiAgICovXG4gIHB1YmxpYyBpc0FycmF5KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOa3u+Wtl+a8lOeul+WtkFtpbmRleF1cbiAgICovXG4gIHB1YmxpYyBnZXRWYWx1ZUJ5SW5kZXgoaW5kZXg6IG51bWJlcik6IFZhbHVlIHtcbiAgICBpZiAoaW5kZXggPCAwIHx8IHRoaXMuX2FycmF5LmdldFNpemUoKSA8PSBpbmRleCkge1xuICAgICAgcmV0dXJuIFZhbHVlLmVycm9yVmFsdWUuc2V0RXJyb3JOb3RGb3JDbGllbnRDYWxsKFxuICAgICAgICBDU01fSlNPTl9FUlJPUl9JTkRFWF9PRl9CT1VORFNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgdjogVmFsdWUgPSB0aGlzLl9hcnJheS5hdChpbmRleCk7XG5cbiAgICBpZiAodiA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gVmFsdWUubnVsbFZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiB2O1xuICB9XG5cbiAgLyoqXG4gICAqIOa3u+Wtl+a8lOeul+WtkFtzdHJpbmcgfCBjc21TdHJpbmddXG4gICAqL1xuICBwdWJsaWMgZ2V0VmFsdWVCeVN0cmluZyhzOiBzdHJpbmcgfCBjc21TdHJpbmcpOiBWYWx1ZSB7XG4gICAgcmV0dXJuIFZhbHVlLmVycm9yVmFsdWUuc2V0RXJyb3JOb3RGb3JDbGllbnRDYWxsKFxuICAgICAgQ1NNX0pTT05fRVJST1JfVFlQRV9NSVNNQVRDSFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog6KaB57Sg44KS5paH5a2X5YiX44Gn6L+U44GZKGNzbVN0cmluZ+WeiylcbiAgICovXG4gIHB1YmxpYyBnZXRTdHJpbmcoZGVmYXVsdFZhbHVlOiBzdHJpbmcsIGluZGVudDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBzdHJpbmdCdWZmZXI6IHN0cmluZyA9IGluZGVudCArICdbXFxuJztcblxuICAgIGZvciAoXG4gICAgICBsZXQgaXRlOiBjc21WZWN0b3JfaXRlcmF0b3I8VmFsdWU+ID0gdGhpcy5fYXJyYXkuYmVnaW4oKTtcbiAgICAgIGl0ZS5ub3RFcXVhbCh0aGlzLl9hcnJheS5lbmQoKSk7XG4gICAgICBpdGUuaW5jcmVtZW50KClcbiAgICApIHtcbiAgICAgIGNvbnN0IHY6IFZhbHVlID0gaXRlLnB0cigpO1xuICAgICAgdGhpcy5fc3RyaW5nQnVmZmVyICs9IGluZGVudCArICcnICsgdi5nZXRTdHJpbmcoaW5kZW50ICsgJyAnKSArICdcXG4nO1xuICAgIH1cblxuICAgIHRoaXMuX3N0cmluZ0J1ZmZlciA9IHN0cmluZ0J1ZmZlciArIGluZGVudCArICddXFxuJztcblxuICAgIHJldHVybiB0aGlzLl9zdHJpbmdCdWZmZXI7XG4gIH1cblxuICAvKipcbiAgICog6YWN5YiX6KaB57Sg44KS6L+95Yqg44GZ44KLXG4gICAqIEBwYXJhbSB2IOi/veWKoOOBmeOCi+imgee0oFxuICAgKi9cbiAgcHVibGljIGFkZCh2OiBWYWx1ZSk6IHZvaWQge1xuICAgIHRoaXMuX2FycmF5LnB1c2hCYWNrKHYpO1xuICB9XG5cbiAgLyoqXG4gICAqIOimgee0oOOCkuOCs+ODs+ODhuODiuOBp+i/lOOBmShjc21WZWN0b3I8VmFsdWU+KVxuICAgKi9cbiAgcHVibGljIGdldFZlY3RvcihkZWZhdWx0VmFsdWU6IGNzbVZlY3RvcjxWYWx1ZT4gPSBudWxsKTogY3NtVmVjdG9yPFZhbHVlPiB7XG4gICAgcmV0dXJuIHRoaXMuX2FycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIOimgee0oOOBruaVsOOCkui/lOOBmVxuICAgKi9cbiAgcHVibGljIGdldFNpemUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fYXJyYXkuZ2V0U2l6ZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBfYXJyYXk6IGNzbVZlY3RvcjxWYWx1ZT47IC8vIEpTT07opoHntKDjga7lgKRcbn1cblxuLyoqXG4gKiDjg5Hjg7zjgrnjgZfjgZ9KU09O44Gu6KaB57Sg44KS44Oe44OD44OX44Go44GX44Gm5oyB44GkXG4gKi9cbmV4cG9ydCBjbGFzcyBKc29uTWFwIGV4dGVuZHMgVmFsdWUge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9tYXAgPSBuZXcgY3NtTWFwPHN0cmluZywgVmFsdWU+KCk7XG4gIH1cblxuICAvKipcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICBjb25zdCBpdGU6IGNzbU1hcF9pdGVyYXRvcjxzdHJpbmcsIFZhbHVlPiA9IHRoaXMuX21hcC5iZWdpbigpO1xuXG4gICAgd2hpbGUgKGl0ZS5ub3RFcXVhbCh0aGlzLl9tYXAuZW5kKCkpKSB7XG4gICAgICBsZXQgdjogVmFsdWUgPSBpdGUucHRyKCkuc2Vjb25kO1xuXG4gICAgICBpZiAodiAmJiAhdi5pc1N0YXRpYygpKSB7XG4gICAgICAgIHYgPSB2b2lkIDA7XG4gICAgICAgIHYgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBpdGUucHJlSW5jcmVtZW50KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFZhbHVl44Gu5YCk44GMTWFw5Z6L44Gq44KJdHJ1ZVxuICAgKi9cbiAgcHVibGljIGlzTWFwKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOa3u+Wtl+a8lOeul+WtkFtzdHJpbmcgfCBjc21TdHJpbmddXG4gICAqL1xuICBwdWJsaWMgZ2V0VmFsdWVCeVN0cmluZyhzOiBzdHJpbmcgfCBjc21TdHJpbmcpOiBWYWx1ZSB7XG4gICAgaWYgKHMgaW5zdGFuY2VvZiBjc21TdHJpbmcpIHtcbiAgICAgIGNvbnN0IHJldDogVmFsdWUgPSB0aGlzLl9tYXAuZ2V0VmFsdWUocy5zKTtcbiAgICAgIGlmIChyZXQgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gVmFsdWUubnVsbFZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICBmb3IgKFxuICAgICAgbGV0IGl0ZXI6IGNzbU1hcF9pdGVyYXRvcjxzdHJpbmcsIFZhbHVlPiA9IHRoaXMuX21hcC5iZWdpbigpO1xuICAgICAgaXRlci5ub3RFcXVhbCh0aGlzLl9tYXAuZW5kKCkpO1xuICAgICAgaXRlci5wcmVJbmNyZW1lbnQoKVxuICAgICkge1xuICAgICAgaWYgKGl0ZXIucHRyKCkuZmlyc3QgPT0gcykge1xuICAgICAgICBpZiAoaXRlci5wdHIoKS5zZWNvbmQgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBWYWx1ZS5udWxsVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZXIucHRyKCkuc2Vjb25kO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBWYWx1ZS5udWxsVmFsdWU7XG4gIH1cblxuICAvKipcbiAgICog5re75a2X5ryU566X5a2QW2luZGV4XVxuICAgKi9cbiAgcHVibGljIGdldFZhbHVlQnlJbmRleChpbmRleDogbnVtYmVyKTogVmFsdWUge1xuICAgIHJldHVybiBWYWx1ZS5lcnJvclZhbHVlLnNldEVycm9yTm90Rm9yQ2xpZW50Q2FsbChcbiAgICAgIENTTV9KU09OX0VSUk9SX1RZUEVfTUlTTUFUQ0hcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOimgee0oOOCkuaWh+Wtl+WIl+OBp+i/lOOBmShjc21TdHJpbmflnospXG4gICAqL1xuICBwdWJsaWMgZ2V0U3RyaW5nKGRlZmF1bHRWYWx1ZTogc3RyaW5nLCBpbmRlbnQ6IHN0cmluZykge1xuICAgIHRoaXMuX3N0cmluZ0J1ZmZlciA9IGluZGVudCArICd7XFxuJztcblxuICAgIGNvbnN0IGl0ZTogY3NtTWFwX2l0ZXJhdG9yPHN0cmluZywgVmFsdWU+ID0gdGhpcy5fbWFwLmJlZ2luKCk7XG4gICAgd2hpbGUgKGl0ZS5ub3RFcXVhbCh0aGlzLl9tYXAuZW5kKCkpKSB7XG4gICAgICBjb25zdCBrZXkgPSBpdGUucHRyKCkuZmlyc3Q7XG4gICAgICBjb25zdCB2OiBWYWx1ZSA9IGl0ZS5wdHIoKS5zZWNvbmQ7XG5cbiAgICAgIHRoaXMuX3N0cmluZ0J1ZmZlciArPVxuICAgICAgICBpbmRlbnQgKyAnICcgKyBrZXkgKyAnIDogJyArIHYuZ2V0U3RyaW5nKGluZGVudCArICcgICAnKSArICcgXFxuJztcbiAgICAgIGl0ZS5wcmVJbmNyZW1lbnQoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9zdHJpbmdCdWZmZXIgKz0gaW5kZW50ICsgJ31cXG4nO1xuXG4gICAgcmV0dXJuIHRoaXMuX3N0cmluZ0J1ZmZlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiDopoHntKDjgpJNYXDlnovjgafov5TjgZlcbiAgICovXG4gIHB1YmxpYyBnZXRNYXAoZGVmYXVsdFZhbHVlPzogY3NtTWFwPHN0cmluZywgVmFsdWU+KTogY3NtTWFwPHN0cmluZywgVmFsdWU+IHtcbiAgICByZXR1cm4gdGhpcy5fbWFwO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hcOOBq+imgee0oOOCkui/veWKoOOBmeOCi1xuICAgKi9cbiAgcHVibGljIHB1dChrZXk6IHN0cmluZywgdjogVmFsdWUpOiB2b2lkIHtcbiAgICB0aGlzLl9tYXAuc2V0VmFsdWUoa2V5LCB2KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYXDjgYvjgonjgq3jg7zjga7jg6rjgrnjg4jjgpLlj5blvpfjgZnjgotcbiAgICovXG4gIHB1YmxpYyBnZXRLZXlzKCk6IGNzbVZlY3RvcjxzdHJpbmc+IHtcbiAgICBpZiAoIXRoaXMuX2tleXMpIHtcbiAgICAgIHRoaXMuX2tleXMgPSBuZXcgY3NtVmVjdG9yPHN0cmluZz4oKTtcblxuICAgICAgY29uc3QgaXRlOiBjc21NYXBfaXRlcmF0b3I8c3RyaW5nLCBWYWx1ZT4gPSB0aGlzLl9tYXAuYmVnaW4oKTtcblxuICAgICAgd2hpbGUgKGl0ZS5ub3RFcXVhbCh0aGlzLl9tYXAuZW5kKCkpKSB7XG4gICAgICAgIGNvbnN0IGtleTogc3RyaW5nID0gaXRlLnB0cigpLmZpcnN0O1xuICAgICAgICB0aGlzLl9rZXlzLnB1c2hCYWNrKGtleSk7XG4gICAgICAgIGl0ZS5wcmVJbmNyZW1lbnQoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2tleXM7XG4gIH1cblxuICAvKipcbiAgICogTWFw44Gu6KaB57Sg5pWw44KS5Y+W5b6X44GZ44KLXG4gICAqL1xuICBwdWJsaWMgZ2V0U2l6ZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9rZXlzLmdldFNpemUoKTtcbiAgfVxuXG4gIHByaXZhdGUgX21hcDogY3NtTWFwPHN0cmluZywgVmFsdWU+OyAvLyBKU09O6KaB57Sg44Gu5YCkXG4gIHByaXZhdGUgX2tleXM6IGNzbVZlY3RvcjxzdHJpbmc+OyAvLyBKU09O6KaB57Sg44Gu5YCkXG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbWpzb24nO1xuaW1wb3J0IHsgQ3ViaXNtSnNvbkV4dGVuc2lvbiB9IGZyb20gJy4vY3ViaXNtanNvbmV4dGVuc2lvbic7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtSnNvbiA9ICQuQ3ViaXNtSnNvbjtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtSnNvbiA9ICQuQ3ViaXNtSnNvbjtcbiAgZXhwb3J0IGNvbnN0IEpzb25BcnJheSA9ICQuSnNvbkFycmF5O1xuICBleHBvcnQgdHlwZSBKc29uQXJyYXkgPSAkLkpzb25BcnJheTtcbiAgZXhwb3J0IGNvbnN0IEpzb25Cb29sZWFuID0gJC5Kc29uQm9vbGVhbjtcbiAgZXhwb3J0IHR5cGUgSnNvbkJvb2xlYW4gPSAkLkpzb25Cb29sZWFuO1xuICBleHBvcnQgY29uc3QgSnNvbkVycm9yID0gJC5Kc29uRXJyb3I7XG4gIGV4cG9ydCB0eXBlIEpzb25FcnJvciA9ICQuSnNvbkVycm9yO1xuICBleHBvcnQgY29uc3QgSnNvbkZsb2F0ID0gJC5Kc29uRmxvYXQ7XG4gIGV4cG9ydCB0eXBlIEpzb25GbG9hdCA9ICQuSnNvbkZsb2F0O1xuICBleHBvcnQgY29uc3QgSnNvbk1hcCA9ICQuSnNvbk1hcDtcbiAgZXhwb3J0IHR5cGUgSnNvbk1hcCA9ICQuSnNvbk1hcDtcbiAgZXhwb3J0IGNvbnN0IEpzb25OdWxsdmFsdWUgPSAkLkpzb25OdWxsdmFsdWU7XG4gIGV4cG9ydCB0eXBlIEpzb25OdWxsdmFsdWUgPSAkLkpzb25OdWxsdmFsdWU7XG4gIGV4cG9ydCBjb25zdCBKc29uU3RyaW5nID0gJC5Kc29uU3RyaW5nO1xuICBleHBvcnQgdHlwZSBKc29uU3RyaW5nID0gJC5Kc29uU3RyaW5nO1xuICBleHBvcnQgY29uc3QgVmFsdWUgPSAkLlZhbHVlO1xuICBleHBvcnQgdHlwZSBWYWx1ZSA9ICQuVmFsdWU7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQge1xuICBKc29uQXJyYXksXG4gIEpzb25Cb29sZWFuLFxuICBKc29uRmxvYXQsXG4gIEpzb25NYXAsXG4gIEpzb25OdWxsdmFsdWUsXG4gIEpzb25TdHJpbmcsXG4gIFZhbHVlLFxufSBmcm9tICcuL2N1YmlzbWpzb24nO1xuXG4vKipcbiAqIEN1YmlzbUpzb27jgaflrp/oo4XjgZXjgozjgabjgYTjgotKc29u44OR44O844K144KS5L2/55So44Gb44Ga44CBXG4gKiBUeXBlU2NyaXB05qiZ5rqW44GuSnNvbuODkeODvOOCteOBquOBqeOCkuS9v+eUqOOBl+WHuuWKm+OBleOCjOOBn+e1kOaenOOCklxuICogQ3ViaXNtIFNES+OBp+Wumue+qeOBleOCjOOBpuOBhOOCi0pTT07jgqjjg6zjg6Hjg7Pjg4jjga7opoHntKDjgatcbiAqIOe9ruOBjeaPm+OBiOOCi+WHpueQhuOCkuOBmeOCi+OCr+ODqeOCueOAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtSnNvbkV4dGVuc2lvbiB7XG4gIHN0YXRpYyBwYXJzZUpzb25PYmplY3Qob2JqOiBWYWx1ZSwgbWFwOiBKc29uTWFwKSB7XG4gICAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqW2tleV0gPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIG1hcC5wdXQoa2V5LCBuZXcgSnNvbkJvb2xlYW4ob2JqW2tleV0pKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9ialtrZXldID09ICdzdHJpbmcnKSB7XG4gICAgICAgIG1hcC5wdXQoa2V5LCBuZXcgSnNvblN0cmluZyhvYmpba2V5XSkpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqW2tleV0gPT0gJ251bWJlcicpIHtcbiAgICAgICAgbWFwLnB1dChrZXksIG5ldyBKc29uRmxvYXQob2JqW2tleV0pKTtcbiAgICAgIH0gZWxzZSBpZiAob2JqW2tleV0gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICBtYXAucHV0KGtleSwgQ3ViaXNtSnNvbkV4dGVuc2lvbi5wYXJzZUpzb25BcnJheShvYmpba2V5XSkpO1xuICAgICAgfSBlbHNlIGlmIChvYmpba2V5XSBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICBtYXAucHV0KFxuICAgICAgICAgIGtleSxcbiAgICAgICAgICBDdWJpc21Kc29uRXh0ZW5zaW9uLnBhcnNlSnNvbk9iamVjdChvYmpba2V5XSwgbmV3IEpzb25NYXAoKSlcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAob2JqW2tleV0gPT0gbnVsbCkge1xuICAgICAgICBtYXAucHV0KGtleSwgbmV3IEpzb25OdWxsdmFsdWUoKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyDjganjgozjgavjgoLlvZPjgabjga/jgb7jgonjgarjgYTloLTlkIjjgafjgoLlh6bnkIbjgZnjgotcbiAgICAgICAgbWFwLnB1dChrZXksIG9ialtrZXldKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbWFwO1xuICB9XG5cbiAgcHJvdGVjdGVkIHN0YXRpYyBwYXJzZUpzb25BcnJheShvYmo6IFZhbHVlKSB7XG4gICAgY29uc3QgYXJyID0gbmV3IEpzb25BcnJheSgpO1xuICAgIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBjb25zdCBjb252S2V5ID0gTnVtYmVyKGtleSk7XG4gICAgICBpZiAodHlwZW9mIGNvbnZLZXkgPT0gJ251bWJlcicpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvYmpbY29udktleV0gPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgYXJyLmFkZChuZXcgSnNvbkJvb2xlYW4ob2JqW2NvbnZLZXldKSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9ialtjb252S2V5XSA9PSAnc3RyaW5nJykge1xuICAgICAgICAgIGFyci5hZGQobmV3IEpzb25TdHJpbmcob2JqW2NvbnZLZXldKSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9ialtjb252S2V5XSA9PSAnbnVtYmVyJykge1xuICAgICAgICAgIGFyci5hZGQobmV3IEpzb25GbG9hdChvYmpbY29udktleV0pKTtcbiAgICAgICAgfSBlbHNlIGlmIChvYmpba2V5XSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgYXJyLmFkZCh0aGlzLnBhcnNlSnNvbkFycmF5KG9ialtrZXldKSk7XG4gICAgICAgIH0gZWxzZSBpZiAob2JqW2tleV0gaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgICBhcnIuYWRkKHRoaXMucGFyc2VKc29uT2JqZWN0KG9ialtrZXldLCBuZXcgSnNvbk1hcCgpKSk7XG4gICAgICAgIH0gZWxzZSBpZiAob2JqW2tleV0gPT0gbnVsbCkge1xuICAgICAgICAgIGFyci5hZGQobmV3IEpzb25OdWxsdmFsdWUoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8g44Gp44KM44Gr44KC5b2T44Gm44Gv44G+44KJ44Gq44GE5aC05ZCI44Gn44KC5Yem55CG44GZ44KLXG4gICAgICAgICAgYXJyLmFkZChvYmpba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAob2JqW2tleV0gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICBhcnIuYWRkKHRoaXMucGFyc2VKc29uQXJyYXkob2JqW2tleV0pKTtcbiAgICAgIH0gZWxzZSBpZiAob2JqW2tleV0gaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgYXJyLmFkZCh0aGlzLnBhcnNlSnNvbk9iamVjdChvYmpba2V5XSwgbmV3IEpzb25NYXAoKSkpO1xuICAgICAgfSBlbHNlIGlmIChvYmpba2V5XSA9PSBudWxsKSB7XG4gICAgICAgIGFyci5hZGQobmV3IEpzb25OdWxsdmFsdWUoKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyDphY3liJfjgajjgoJPYmplY3TjgajjgoLliKTlrprjgafjgY3jgarjgYvjgaPjgZ/loLTlkIjjgafjgoLlh6bnkIbjgZnjgotcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvYmpba2V5XS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGFyci5hZGQob2JqW2tleV1baV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGFycjtcbiAgfVxufVxuIiwidmFyIGdsb2JhbCA9XG4gICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiBzZWxmKSB8fFxuICAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsKVxuXG52YXIgc3VwcG9ydCA9IHtcbiAgc2VhcmNoUGFyYW1zOiAnVVJMU2VhcmNoUGFyYW1zJyBpbiBnbG9iYWwsXG4gIGl0ZXJhYmxlOiAnU3ltYm9sJyBpbiBnbG9iYWwgJiYgJ2l0ZXJhdG9yJyBpbiBTeW1ib2wsXG4gIGJsb2I6XG4gICAgJ0ZpbGVSZWFkZXInIGluIGdsb2JhbCAmJlxuICAgICdCbG9iJyBpbiBnbG9iYWwgJiZcbiAgICAoZnVuY3Rpb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICBuZXcgQmxvYigpXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH0pKCksXG4gIGZvcm1EYXRhOiAnRm9ybURhdGEnIGluIGdsb2JhbCxcbiAgYXJyYXlCdWZmZXI6ICdBcnJheUJ1ZmZlcicgaW4gZ2xvYmFsXG59XG5cbmZ1bmN0aW9uIGlzRGF0YVZpZXcob2JqKSB7XG4gIHJldHVybiBvYmogJiYgRGF0YVZpZXcucHJvdG90eXBlLmlzUHJvdG90eXBlT2Yob2JqKVxufVxuXG5pZiAoc3VwcG9ydC5hcnJheUJ1ZmZlcikge1xuICB2YXIgdmlld0NsYXNzZXMgPSBbXG4gICAgJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgICdbb2JqZWN0IFVpbnQzMkFycmF5XScsXG4gICAgJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgJ1tvYmplY3QgRmxvYXQ2NEFycmF5XSdcbiAgXVxuXG4gIHZhciBpc0FycmF5QnVmZmVyVmlldyA9XG4gICAgQXJyYXlCdWZmZXIuaXNWaWV3IHx8XG4gICAgZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHZpZXdDbGFzc2VzLmluZGV4T2YoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikpID4gLTFcbiAgICB9XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZU5hbWUobmFtZSkge1xuICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgbmFtZSA9IFN0cmluZyhuYW1lKVxuICB9XG4gIGlmICgvW15hLXowLTlcXC0jJCUmJyorLl5fYHx+IV0vaS50ZXN0KG5hbWUpIHx8IG5hbWUgPT09ICcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBjaGFyYWN0ZXIgaW4gaGVhZGVyIGZpZWxkIG5hbWU6IFwiJyArIG5hbWUgKyAnXCInKVxuICB9XG4gIHJldHVybiBuYW1lLnRvTG93ZXJDYXNlKClcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICB2YWx1ZSA9IFN0cmluZyh2YWx1ZSlcbiAgfVxuICByZXR1cm4gdmFsdWVcbn1cblxuLy8gQnVpbGQgYSBkZXN0cnVjdGl2ZSBpdGVyYXRvciBmb3IgdGhlIHZhbHVlIGxpc3RcbmZ1bmN0aW9uIGl0ZXJhdG9yRm9yKGl0ZW1zKSB7XG4gIHZhciBpdGVyYXRvciA9IHtcbiAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGl0ZW1zLnNoaWZ0KClcbiAgICAgIHJldHVybiB7ZG9uZTogdmFsdWUgPT09IHVuZGVmaW5lZCwgdmFsdWU6IHZhbHVlfVxuICAgIH1cbiAgfVxuXG4gIGlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gICAgaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGl0ZXJhdG9yXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdGhpcy5tYXAgPSB7fVxuXG4gIGlmIChoZWFkZXJzIGluc3RhbmNlb2YgSGVhZGVycykge1xuICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgdGhpcy5hcHBlbmQobmFtZSwgdmFsdWUpXG4gICAgfSwgdGhpcylcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGhlYWRlcnMpKSB7XG4gICAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKGhlYWRlcikge1xuICAgICAgdGhpcy5hcHBlbmQoaGVhZGVyWzBdLCBoZWFkZXJbMV0pXG4gICAgfSwgdGhpcylcbiAgfSBlbHNlIGlmIChoZWFkZXJzKSB7XG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgICB0aGlzLmFwcGVuZChuYW1lLCBoZWFkZXJzW25hbWVdKVxuICAgIH0sIHRoaXMpXG4gIH1cbn1cblxuSGVhZGVycy5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgbmFtZSA9IG5vcm1hbGl6ZU5hbWUobmFtZSlcbiAgdmFsdWUgPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSlcbiAgdmFyIG9sZFZhbHVlID0gdGhpcy5tYXBbbmFtZV1cbiAgdGhpcy5tYXBbbmFtZV0gPSBvbGRWYWx1ZSA/IG9sZFZhbHVlICsgJywgJyArIHZhbHVlIDogdmFsdWVcbn1cblxuSGVhZGVycy5wcm90b3R5cGVbJ2RlbGV0ZSddID0gZnVuY3Rpb24obmFtZSkge1xuICBkZWxldGUgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV1cbn1cblxuSGVhZGVycy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24obmFtZSkge1xuICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKVxuICByZXR1cm4gdGhpcy5oYXMobmFtZSkgPyB0aGlzLm1hcFtuYW1lXSA6IG51bGxcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24obmFtZSkge1xuICByZXR1cm4gdGhpcy5tYXAuaGFzT3duUHJvcGVydHkobm9ybWFsaXplTmFtZShuYW1lKSlcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSlcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uKGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gIGZvciAodmFyIG5hbWUgaW4gdGhpcy5tYXApIHtcbiAgICBpZiAodGhpcy5tYXAuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIGNhbGxiYWNrLmNhbGwodGhpc0FyZywgdGhpcy5tYXBbbmFtZV0sIG5hbWUsIHRoaXMpXG4gICAgfVxuICB9XG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGl0ZW1zID0gW11cbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgaXRlbXMucHVzaChuYW1lKVxuICB9KVxuICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLnZhbHVlcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXRlbXMgPSBbXVxuICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpdGVtcy5wdXNoKHZhbHVlKVxuICB9KVxuICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmVudHJpZXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGl0ZW1zID0gW11cbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgaXRlbXMucHVzaChbbmFtZSwgdmFsdWVdKVxuICB9KVxuICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG59XG5cbmlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gIEhlYWRlcnMucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPSBIZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzXG59XG5cbmZ1bmN0aW9uIGNvbnN1bWVkKGJvZHkpIHtcbiAgaWYgKGJvZHkuYm9keVVzZWQpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IFR5cGVFcnJvcignQWxyZWFkeSByZWFkJykpXG4gIH1cbiAgYm9keS5ib2R5VXNlZCA9IHRydWVcbn1cblxuZnVuY3Rpb24gZmlsZVJlYWRlclJlYWR5KHJlYWRlcikge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVzb2x2ZShyZWFkZXIucmVzdWx0KVxuICAgIH1cbiAgICByZWFkZXIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVqZWN0KHJlYWRlci5lcnJvcilcbiAgICB9XG4gIH0pXG59XG5cbmZ1bmN0aW9uIHJlYWRCbG9iQXNBcnJheUJ1ZmZlcihibG9iKSB7XG4gIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gIHZhciBwcm9taXNlID0gZmlsZVJlYWRlclJlYWR5KHJlYWRlcilcbiAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGJsb2IpXG4gIHJldHVybiBwcm9taXNlXG59XG5cbmZ1bmN0aW9uIHJlYWRCbG9iQXNUZXh0KGJsb2IpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgdmFyIHByb21pc2UgPSBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICByZWFkZXIucmVhZEFzVGV4dChibG9iKVxuICByZXR1cm4gcHJvbWlzZVxufVxuXG5mdW5jdGlvbiByZWFkQXJyYXlCdWZmZXJBc1RleHQoYnVmKSB7XG4gIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmKVxuICB2YXIgY2hhcnMgPSBuZXcgQXJyYXkodmlldy5sZW5ndGgpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2aWV3Lmxlbmd0aDsgaSsrKSB7XG4gICAgY2hhcnNbaV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHZpZXdbaV0pXG4gIH1cbiAgcmV0dXJuIGNoYXJzLmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGJ1ZmZlckNsb25lKGJ1Zikge1xuICBpZiAoYnVmLnNsaWNlKSB7XG4gICAgcmV0dXJuIGJ1Zi5zbGljZSgwKVxuICB9IGVsc2Uge1xuICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmLmJ5dGVMZW5ndGgpXG4gICAgdmlldy5zZXQobmV3IFVpbnQ4QXJyYXkoYnVmKSlcbiAgICByZXR1cm4gdmlldy5idWZmZXJcbiAgfVxufVxuXG5mdW5jdGlvbiBCb2R5KCkge1xuICB0aGlzLmJvZHlVc2VkID0gZmFsc2VcblxuICB0aGlzLl9pbml0Qm9keSA9IGZ1bmN0aW9uKGJvZHkpIHtcbiAgICAvKlxuICAgICAgZmV0Y2gtbW9jayB3cmFwcyB0aGUgUmVzcG9uc2Ugb2JqZWN0IGluIGFuIEVTNiBQcm94eSB0b1xuICAgICAgcHJvdmlkZSB1c2VmdWwgdGVzdCBoYXJuZXNzIGZlYXR1cmVzIHN1Y2ggYXMgZmx1c2guIEhvd2V2ZXIsIG9uXG4gICAgICBFUzUgYnJvd3NlcnMgd2l0aG91dCBmZXRjaCBvciBQcm94eSBzdXBwb3J0IHBvbGx5ZmlsbHMgbXVzdCBiZSB1c2VkO1xuICAgICAgdGhlIHByb3h5LXBvbGx5ZmlsbCBpcyB1bmFibGUgdG8gcHJveHkgYW4gYXR0cmlidXRlIHVubGVzcyBpdCBleGlzdHNcbiAgICAgIG9uIHRoZSBvYmplY3QgYmVmb3JlIHRoZSBQcm94eSBpcyBjcmVhdGVkLiBUaGlzIGNoYW5nZSBlbnN1cmVzXG4gICAgICBSZXNwb25zZS5ib2R5VXNlZCBleGlzdHMgb24gdGhlIGluc3RhbmNlLCB3aGlsZSBtYWludGFpbmluZyB0aGVcbiAgICAgIHNlbWFudGljIG9mIHNldHRpbmcgUmVxdWVzdC5ib2R5VXNlZCBpbiB0aGUgY29uc3RydWN0b3IgYmVmb3JlXG4gICAgICBfaW5pdEJvZHkgaXMgY2FsbGVkLlxuICAgICovXG4gICAgdGhpcy5ib2R5VXNlZCA9IHRoaXMuYm9keVVzZWRcbiAgICB0aGlzLl9ib2R5SW5pdCA9IGJvZHlcbiAgICBpZiAoIWJvZHkpIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gJydcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5XG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmJsb2IgJiYgQmxvYi5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgdGhpcy5fYm9keUJsb2IgPSBib2R5XG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmZvcm1EYXRhICYmIEZvcm1EYXRhLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5Rm9ybURhdGEgPSBib2R5XG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keS50b1N0cmluZygpXG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIHN1cHBvcnQuYmxvYiAmJiBpc0RhdGFWaWV3KGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPSBidWZmZXJDbG9uZShib2R5LmJ1ZmZlcilcbiAgICAgIC8vIElFIDEwLTExIGNhbid0IGhhbmRsZSBhIERhdGFWaWV3IGJvZHkuXG4gICAgICB0aGlzLl9ib2R5SW5pdCA9IG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlciAmJiAoQXJyYXlCdWZmZXIucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkgfHwgaXNBcnJheUJ1ZmZlclZpZXcoYm9keSkpKSB7XG4gICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPSBidWZmZXJDbG9uZShib2R5KVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHkgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYm9keSlcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpKSB7XG4gICAgICBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICd0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTgnKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QmxvYiAmJiB0aGlzLl9ib2R5QmxvYi50eXBlKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsIHRoaXMuX2JvZHlCbG9iLnR5cGUpXG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuc2VhcmNoUGFyYW1zICYmIFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9VVRGLTgnKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChzdXBwb3J0LmJsb2IpIHtcbiAgICB0aGlzLmJsb2IgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlCbG9iKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keUFycmF5QnVmZmVyXSkpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlGb3JtRGF0YSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgYmxvYicpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5VGV4dF0pKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuYXJyYXlCdWZmZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgdmFyIGlzQ29uc3VtZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgICAgICBpZiAoaXNDb25zdW1lZCkge1xuICAgICAgICAgIHJldHVybiBpc0NvbnN1bWVkXG4gICAgICAgIH1cbiAgICAgICAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShcbiAgICAgICAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlci5idWZmZXIuc2xpY2UoXG4gICAgICAgICAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlci5ieXRlT2Zmc2V0LFxuICAgICAgICAgICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIuYnl0ZU9mZnNldCArIHRoaXMuX2JvZHlBcnJheUJ1ZmZlci5ieXRlTGVuZ3RoXG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUFycmF5QnVmZmVyKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5ibG9iKCkudGhlbihyZWFkQmxvYkFzQXJyYXlCdWZmZXIpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdGhpcy50ZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiByZWplY3RlZFxuICAgIH1cblxuICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgcmV0dXJuIHJlYWRCbG9iQXNUZXh0KHRoaXMuX2JvZHlCbG9iKVxuICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlYWRBcnJheUJ1ZmZlckFzVGV4dCh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpKVxuICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgdGV4dCcpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keVRleHQpXG4gICAgfVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuZm9ybURhdGEpIHtcbiAgICB0aGlzLmZvcm1EYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihkZWNvZGUpXG4gICAgfVxuICB9XG5cbiAgdGhpcy5qc29uID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oSlNPTi5wYXJzZSlcbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhUVFAgbWV0aG9kcyB3aG9zZSBjYXBpdGFsaXphdGlvbiBzaG91bGQgYmUgbm9ybWFsaXplZFxudmFyIG1ldGhvZHMgPSBbJ0RFTEVURScsICdHRVQnLCAnSEVBRCcsICdPUFRJT05TJywgJ1BPU1QnLCAnUFVUJ11cblxuZnVuY3Rpb24gbm9ybWFsaXplTWV0aG9kKG1ldGhvZCkge1xuICB2YXIgdXBjYXNlZCA9IG1ldGhvZC50b1VwcGVyQ2FzZSgpXG4gIHJldHVybiBtZXRob2RzLmluZGV4T2YodXBjYXNlZCkgPiAtMSA/IHVwY2FzZWQgOiBtZXRob2Rcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJlcXVlc3QoaW5wdXQsIG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlcXVlc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUGxlYXNlIHVzZSB0aGUgXCJuZXdcIiBvcGVyYXRvciwgdGhpcyBET00gb2JqZWN0IGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi4nKVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cbiAgdmFyIGJvZHkgPSBvcHRpb25zLmJvZHlcblxuICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBSZXF1ZXN0KSB7XG4gICAgaWYgKGlucHV0LmJvZHlVc2VkKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKVxuICAgIH1cbiAgICB0aGlzLnVybCA9IGlucHV0LnVybFxuICAgIHRoaXMuY3JlZGVudGlhbHMgPSBpbnB1dC5jcmVkZW50aWFsc1xuICAgIGlmICghb3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhpbnB1dC5oZWFkZXJzKVxuICAgIH1cbiAgICB0aGlzLm1ldGhvZCA9IGlucHV0Lm1ldGhvZFxuICAgIHRoaXMubW9kZSA9IGlucHV0Lm1vZGVcbiAgICB0aGlzLnNpZ25hbCA9IGlucHV0LnNpZ25hbFxuICAgIGlmICghYm9keSAmJiBpbnB1dC5fYm9keUluaXQgIT0gbnVsbCkge1xuICAgICAgYm9keSA9IGlucHV0Ll9ib2R5SW5pdFxuICAgICAgaW5wdXQuYm9keVVzZWQgPSB0cnVlXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRoaXMudXJsID0gU3RyaW5nKGlucHV0KVxuICB9XG5cbiAgdGhpcy5jcmVkZW50aWFscyA9IG9wdGlvbnMuY3JlZGVudGlhbHMgfHwgdGhpcy5jcmVkZW50aWFscyB8fCAnc2FtZS1vcmlnaW4nXG4gIGlmIChvcHRpb25zLmhlYWRlcnMgfHwgIXRoaXMuaGVhZGVycykge1xuICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycylcbiAgfVxuICB0aGlzLm1ldGhvZCA9IG5vcm1hbGl6ZU1ldGhvZChvcHRpb25zLm1ldGhvZCB8fCB0aGlzLm1ldGhvZCB8fCAnR0VUJylcbiAgdGhpcy5tb2RlID0gb3B0aW9ucy5tb2RlIHx8IHRoaXMubW9kZSB8fCBudWxsXG4gIHRoaXMuc2lnbmFsID0gb3B0aW9ucy5zaWduYWwgfHwgdGhpcy5zaWduYWxcbiAgdGhpcy5yZWZlcnJlciA9IG51bGxcblxuICBpZiAoKHRoaXMubWV0aG9kID09PSAnR0VUJyB8fCB0aGlzLm1ldGhvZCA9PT0gJ0hFQUQnKSAmJiBib2R5KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQm9keSBub3QgYWxsb3dlZCBmb3IgR0VUIG9yIEhFQUQgcmVxdWVzdHMnKVxuICB9XG4gIHRoaXMuX2luaXRCb2R5KGJvZHkpXG5cbiAgaWYgKHRoaXMubWV0aG9kID09PSAnR0VUJyB8fCB0aGlzLm1ldGhvZCA9PT0gJ0hFQUQnKSB7XG4gICAgaWYgKG9wdGlvbnMuY2FjaGUgPT09ICduby1zdG9yZScgfHwgb3B0aW9ucy5jYWNoZSA9PT0gJ25vLWNhY2hlJykge1xuICAgICAgLy8gU2VhcmNoIGZvciBhICdfJyBwYXJhbWV0ZXIgaW4gdGhlIHF1ZXJ5IHN0cmluZ1xuICAgICAgdmFyIHJlUGFyYW1TZWFyY2ggPSAvKFs/Jl0pXz1bXiZdKi9cbiAgICAgIGlmIChyZVBhcmFtU2VhcmNoLnRlc3QodGhpcy51cmwpKSB7XG4gICAgICAgIC8vIElmIGl0IGFscmVhZHkgZXhpc3RzIHRoZW4gc2V0IHRoZSB2YWx1ZSB3aXRoIHRoZSBjdXJyZW50IHRpbWVcbiAgICAgICAgdGhpcy51cmwgPSB0aGlzLnVybC5yZXBsYWNlKHJlUGFyYW1TZWFyY2gsICckMV89JyArIG5ldyBEYXRlKCkuZ2V0VGltZSgpKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBhIG5ldyAnXycgcGFyYW1ldGVyIHRvIHRoZSBlbmQgd2l0aCB0aGUgY3VycmVudCB0aW1lXG4gICAgICAgIHZhciByZVF1ZXJ5U3RyaW5nID0gL1xcPy9cbiAgICAgICAgdGhpcy51cmwgKz0gKHJlUXVlcnlTdHJpbmcudGVzdCh0aGlzLnVybCkgPyAnJicgOiAnPycpICsgJ189JyArIG5ldyBEYXRlKCkuZ2V0VGltZSgpXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cblJlcXVlc3QucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgUmVxdWVzdCh0aGlzLCB7Ym9keTogdGhpcy5fYm9keUluaXR9KVxufVxuXG5mdW5jdGlvbiBkZWNvZGUoYm9keSkge1xuICB2YXIgZm9ybSA9IG5ldyBGb3JtRGF0YSgpXG4gIGJvZHlcbiAgICAudHJpbSgpXG4gICAgLnNwbGl0KCcmJylcbiAgICAuZm9yRWFjaChmdW5jdGlvbihieXRlcykge1xuICAgICAgaWYgKGJ5dGVzKSB7XG4gICAgICAgIHZhciBzcGxpdCA9IGJ5dGVzLnNwbGl0KCc9JylcbiAgICAgICAgdmFyIG5hbWUgPSBzcGxpdC5zaGlmdCgpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG4gICAgICAgIHZhciB2YWx1ZSA9IHNwbGl0LmpvaW4oJz0nKS5yZXBsYWNlKC9cXCsvZywgJyAnKVxuICAgICAgICBmb3JtLmFwcGVuZChkZWNvZGVVUklDb21wb25lbnQobmFtZSksIGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpXG4gICAgICB9XG4gICAgfSlcbiAgcmV0dXJuIGZvcm1cbn1cblxuZnVuY3Rpb24gcGFyc2VIZWFkZXJzKHJhd0hlYWRlcnMpIHtcbiAgdmFyIGhlYWRlcnMgPSBuZXcgSGVhZGVycygpXG4gIC8vIFJlcGxhY2UgaW5zdGFuY2VzIG9mIFxcclxcbiBhbmQgXFxuIGZvbGxvd2VkIGJ5IGF0IGxlYXN0IG9uZSBzcGFjZSBvciBob3Jpem9udGFsIHRhYiB3aXRoIGEgc3BhY2VcbiAgLy8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzcyMzAjc2VjdGlvbi0zLjJcbiAgdmFyIHByZVByb2Nlc3NlZEhlYWRlcnMgPSByYXdIZWFkZXJzLnJlcGxhY2UoL1xccj9cXG5bXFx0IF0rL2csICcgJylcbiAgLy8gQXZvaWRpbmcgc3BsaXQgdmlhIHJlZ2V4IHRvIHdvcmsgYXJvdW5kIGEgY29tbW9uIElFMTEgYnVnIHdpdGggdGhlIGNvcmUtanMgMy42LjAgcmVnZXggcG9seWZpbGxcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dpdGh1Yi9mZXRjaC9pc3N1ZXMvNzQ4XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy83NTFcbiAgcHJlUHJvY2Vzc2VkSGVhZGVyc1xuICAgIC5zcGxpdCgnXFxyJylcbiAgICAubWFwKGZ1bmN0aW9uKGhlYWRlcikge1xuICAgICAgcmV0dXJuIGhlYWRlci5pbmRleE9mKCdcXG4nKSA9PT0gMCA/IGhlYWRlci5zdWJzdHIoMSwgaGVhZGVyLmxlbmd0aCkgOiBoZWFkZXJcbiAgICB9KVxuICAgIC5mb3JFYWNoKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgIHZhciBwYXJ0cyA9IGxpbmUuc3BsaXQoJzonKVxuICAgICAgdmFyIGtleSA9IHBhcnRzLnNoaWZ0KCkudHJpbSgpXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHBhcnRzLmpvaW4oJzonKS50cmltKClcbiAgICAgICAgaGVhZGVycy5hcHBlbmQoa2V5LCB2YWx1ZSlcbiAgICAgIH1cbiAgICB9KVxuICByZXR1cm4gaGVhZGVyc1xufVxuXG5Cb2R5LmNhbGwoUmVxdWVzdC5wcm90b3R5cGUpXG5cbmV4cG9ydCBmdW5jdGlvbiBSZXNwb25zZShib2R5SW5pdCwgb3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVzcG9uc2UpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUGxlYXNlIHVzZSB0aGUgXCJuZXdcIiBvcGVyYXRvciwgdGhpcyBET00gb2JqZWN0IGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi4nKVxuICB9XG4gIGlmICghb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB7fVxuICB9XG5cbiAgdGhpcy50eXBlID0gJ2RlZmF1bHQnXG4gIHRoaXMuc3RhdHVzID0gb3B0aW9ucy5zdGF0dXMgPT09IHVuZGVmaW5lZCA/IDIwMCA6IG9wdGlvbnMuc3RhdHVzXG4gIHRoaXMub2sgPSB0aGlzLnN0YXR1cyA+PSAyMDAgJiYgdGhpcy5zdGF0dXMgPCAzMDBcbiAgdGhpcy5zdGF0dXNUZXh0ID0gb3B0aW9ucy5zdGF0dXNUZXh0ID09PSB1bmRlZmluZWQgPyAnJyA6ICcnICsgb3B0aW9ucy5zdGF0dXNUZXh0XG4gIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycylcbiAgdGhpcy51cmwgPSBvcHRpb25zLnVybCB8fCAnJ1xuICB0aGlzLl9pbml0Qm9keShib2R5SW5pdClcbn1cblxuQm9keS5jYWxsKFJlc3BvbnNlLnByb3RvdHlwZSlcblxuUmVzcG9uc2UucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgUmVzcG9uc2UodGhpcy5fYm9keUluaXQsIHtcbiAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxuICAgIHN0YXR1c1RleHQ6IHRoaXMuc3RhdHVzVGV4dCxcbiAgICBoZWFkZXJzOiBuZXcgSGVhZGVycyh0aGlzLmhlYWRlcnMpLFxuICAgIHVybDogdGhpcy51cmxcbiAgfSlcbn1cblxuUmVzcG9uc2UuZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IDAsIHN0YXR1c1RleHQ6ICcnfSlcbiAgcmVzcG9uc2UudHlwZSA9ICdlcnJvcidcbiAgcmV0dXJuIHJlc3BvbnNlXG59XG5cbnZhciByZWRpcmVjdFN0YXR1c2VzID0gWzMwMSwgMzAyLCAzMDMsIDMwNywgMzA4XVxuXG5SZXNwb25zZS5yZWRpcmVjdCA9IGZ1bmN0aW9uKHVybCwgc3RhdHVzKSB7XG4gIGlmIChyZWRpcmVjdFN0YXR1c2VzLmluZGV4T2Yoc3RhdHVzKSA9PT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCBzdGF0dXMgY29kZScpXG4gIH1cblxuICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IHN0YXR1cywgaGVhZGVyczoge2xvY2F0aW9uOiB1cmx9fSlcbn1cblxuZXhwb3J0IHZhciBET01FeGNlcHRpb24gPSBnbG9iYWwuRE9NRXhjZXB0aW9uXG50cnkge1xuICBuZXcgRE9NRXhjZXB0aW9uKClcbn0gY2F0Y2ggKGVycikge1xuICBET01FeGNlcHRpb24gPSBmdW5jdGlvbihtZXNzYWdlLCBuYW1lKSB7XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZVxuICAgIHRoaXMubmFtZSA9IG5hbWVcbiAgICB2YXIgZXJyb3IgPSBFcnJvcihtZXNzYWdlKVxuICAgIHRoaXMuc3RhY2sgPSBlcnJvci5zdGFja1xuICB9XG4gIERPTUV4Y2VwdGlvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSlcbiAgRE9NRXhjZXB0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IERPTUV4Y2VwdGlvblxufVxuXG5leHBvcnQgZnVuY3Rpb24gZmV0Y2goaW5wdXQsIGluaXQpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0ID0gbmV3IFJlcXVlc3QoaW5wdXQsIGluaXQpXG5cbiAgICBpZiAocmVxdWVzdC5zaWduYWwgJiYgcmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgcmV0dXJuIHJlamVjdChuZXcgRE9NRXhjZXB0aW9uKCdBYm9ydGVkJywgJ0Fib3J0RXJyb3InKSlcbiAgICB9XG5cbiAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KClcblxuICAgIGZ1bmN0aW9uIGFib3J0WGhyKCkge1xuICAgICAgeGhyLmFib3J0KClcbiAgICB9XG5cbiAgICB4aHIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgc3RhdHVzOiB4aHIuc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiB4aHIuc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcGFyc2VIZWFkZXJzKHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSB8fCAnJylcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMudXJsID0gJ3Jlc3BvbnNlVVJMJyBpbiB4aHIgPyB4aHIucmVzcG9uc2VVUkwgOiBvcHRpb25zLmhlYWRlcnMuZ2V0KCdYLVJlcXVlc3QtVVJMJylcbiAgICAgIHZhciBib2R5ID0gJ3Jlc3BvbnNlJyBpbiB4aHIgPyB4aHIucmVzcG9uc2UgOiB4aHIucmVzcG9uc2VUZXh0XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICByZXNvbHZlKG5ldyBSZXNwb25zZShib2R5LCBvcHRpb25zKSlcbiAgICAgIH0sIDApXG4gICAgfVxuXG4gICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpXG4gICAgICB9LCAwKVxuICAgIH1cblxuICAgIHhoci5vbnRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpXG4gICAgICB9LCAwKVxuICAgIH1cblxuICAgIHhoci5vbmFib3J0ID0gZnVuY3Rpb24oKSB7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QobmV3IERPTUV4Y2VwdGlvbignQWJvcnRlZCcsICdBYm9ydEVycm9yJykpXG4gICAgICB9LCAwKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZpeFVybCh1cmwpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiB1cmwgPT09ICcnICYmIGdsb2JhbC5sb2NhdGlvbi5ocmVmID8gZ2xvYmFsLmxvY2F0aW9uLmhyZWYgOiB1cmxcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHVybFxuICAgICAgfVxuICAgIH1cblxuICAgIHhoci5vcGVuKHJlcXVlc3QubWV0aG9kLCBmaXhVcmwocmVxdWVzdC51cmwpLCB0cnVlKVxuXG4gICAgaWYgKHJlcXVlc3QuY3JlZGVudGlhbHMgPT09ICdpbmNsdWRlJykge1xuICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWVcbiAgICB9IGVsc2UgaWYgKHJlcXVlc3QuY3JlZGVudGlhbHMgPT09ICdvbWl0Jykge1xuICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IGZhbHNlXG4gICAgfVxuXG4gICAgaWYgKCdyZXNwb25zZVR5cGUnIGluIHhocikge1xuICAgICAgaWYgKHN1cHBvcnQuYmxvYikge1xuICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2Jsb2InXG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBzdXBwb3J0LmFycmF5QnVmZmVyICYmXG4gICAgICAgIHJlcXVlc3QuaGVhZGVycy5nZXQoJ0NvbnRlbnQtVHlwZScpICYmXG4gICAgICAgIHJlcXVlc3QuaGVhZGVycy5nZXQoJ0NvbnRlbnQtVHlwZScpLmluZGV4T2YoJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScpICE9PSAtMVxuICAgICAgKSB7XG4gICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYXJyYXlidWZmZXInXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGluaXQgJiYgdHlwZW9mIGluaXQuaGVhZGVycyA9PT0gJ29iamVjdCcgJiYgIShpbml0LmhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzKSkge1xuICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaW5pdC5oZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIobmFtZSwgbm9ybWFsaXplVmFsdWUoaW5pdC5oZWFkZXJzW25hbWVdKSlcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcXVlc3QuaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIHZhbHVlKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBpZiAocmVxdWVzdC5zaWduYWwpIHtcbiAgICAgIHJlcXVlc3Quc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgYWJvcnRYaHIpXG5cbiAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gRE9ORSAoc3VjY2VzcyBvciBmYWlsdXJlKVxuICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICByZXF1ZXN0LnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIGFib3J0WGhyKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgeGhyLnNlbmQodHlwZW9mIHJlcXVlc3QuX2JvZHlJbml0ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiByZXF1ZXN0Ll9ib2R5SW5pdClcbiAgfSlcbn1cblxuZmV0Y2gucG9seWZpbGwgPSB0cnVlXG5cbmlmICghZ2xvYmFsLmZldGNoKSB7XG4gIGdsb2JhbC5mZXRjaCA9IGZldGNoXG4gIGdsb2JhbC5IZWFkZXJzID0gSGVhZGVyc1xuICBnbG9iYWwuUmVxdWVzdCA9IFJlcXVlc3RcbiAgZ2xvYmFsLlJlc3BvbnNlID0gUmVzcG9uc2Vcbn1cbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBkZWZpbml0aW9uKSB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iaiwgcHJvcCkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7IH0iLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIiIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBtb2R1bGVzIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vc3JjL21haW4udHNcIik7XG4iLCIiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=